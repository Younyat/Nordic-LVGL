
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20007e80 	.word	0x20007e80
}
   4:	00013bb1 	.word	0x00013bb1
   8:	0001a5e9 	.word	0x0001a5e9
   c:	00013b85 	.word	0x00013b85
  10:	00013b85 	.word	0x00013b85
  14:	00013b85 	.word	0x00013b85
  18:	00013b85 	.word	0x00013b85
  1c:	00013b85 	.word	0x00013b85
	...
  2c:	00013581 	.word	0x00013581
  30:	00013b85 	.word	0x00013b85
  34:	00000000 	.word	0x00000000
  38:	00013529 	.word	0x00013529
  3c:	00014959 	.word	0x00014959

00000040 <_irq_vector_table>:
  40:	00013601 00013601 00013601 00013601     .6...6...6...6..
  50:	00013601 00013601 00013601 00013601     .6...6...6...6..
  60:	00013601 00013601 00013601 00013601     .6...6...6...6..
  70:	00013601 00013601 00013601 00013601     .6...6...6...6..
  80:	00013601 00013601 00013601 00013601     .6...6...6...6..
  90:	00013601 00013601 00013601 00013601     .6...6...6...6..
  a0:	00013601 00013601 00013601 00013601     .6...6...6...6..
  b0:	00013601 00013601 00013601 00013601     .6...6...6...6..
  c0:	00013601 00013601 00013601 00013601     .6...6...6...6..
  d0:	00013601 00013601 00013601 00013601     .6...6...6...6..
  e0:	00013601 00013601 00013601 00013601     .6...6...6...6..
  f0:	00013601 00013601 00013601 00013601     .6...6...6...6..
 100:	00013601 00013601 00013601 00013601     .6...6...6...6..
 110:	00013601 00013601 00013601 00013601     .6...6...6...6..
 120:	00013601 00013601 00013601 00013601     .6...6...6...6..
 130:	00013601 00013601 00013601 00013601     .6...6...6...6..
 140:	00013601 00013601 00013601 00013601     .6...6...6...6..
 150:	00013601                                .6..

00000154 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00003502 0000003c     ...(L....5..<...
 210:	0001ffe0 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00000240 <__aeabi_uldivmod>:
     240:	b953      	cbnz	r3, 258 <__aeabi_uldivmod+0x18>
     242:	b94a      	cbnz	r2, 258 <__aeabi_uldivmod+0x18>
     244:	2900      	cmp	r1, #0
     246:	bf08      	it	eq
     248:	2800      	cmpeq	r0, #0
     24a:	bf1c      	itt	ne
     24c:	f04f 31ff 	movne.w	r1, #4294967295
     250:	f04f 30ff 	movne.w	r0, #4294967295
     254:	f000 b970 	b.w	538 <__aeabi_idiv0>
     258:	f1ad 0c08 	sub.w	ip, sp, #8
     25c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     260:	f000 f806 	bl	270 <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4770      	bx	lr

00000270 <__udivmoddi4>:
     270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     274:	9e08      	ldr	r6, [sp, #32]
     276:	460d      	mov	r5, r1
     278:	4604      	mov	r4, r0
     27a:	468a      	mov	sl, r1
     27c:	2b00      	cmp	r3, #0
     27e:	d17f      	bne.n	380 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x100>
     280:	428a      	cmp	r2, r1
     282:	4617      	mov	r7, r2
     284:	d941      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     286:	fab2 f282 	clz	r2, r2
     28a:	b14a      	cbz	r2, 2a0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x20>
     28c:	f1c2 0120 	rsb	r1, r2, #32
     290:	fa05 f302 	lsl.w	r3, r5, r2
     294:	4097      	lsls	r7, r2
     296:	4094      	lsls	r4, r2
     298:	fa20 f101 	lsr.w	r1, r0, r1
     29c:	ea41 0a03 	orr.w	sl, r1, r3
     2a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a8:	fa1f f987 	uxth.w	r9, r7
     2ac:	fbba fef8 	udiv	lr, sl, r8
     2b0:	fb08 a31e 	mls	r3, r8, lr, sl
     2b4:	fb0e f109 	mul.w	r1, lr, r9
     2b8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2bc:	4299      	cmp	r1, r3
     2be:	d906      	bls.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c0:	18fb      	adds	r3, r7, r3
     2c2:	d202      	bcs.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2c4:	4299      	cmp	r1, r3
     2c6:	f200 8124 	bhi.w	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     2ca:	f10e 3eff 	add.w	lr, lr, #4294967295
     2ce:	1a59      	subs	r1, r3, r1
     2d0:	b2a3      	uxth	r3, r4
     2d2:	fbb1 f0f8 	udiv	r0, r1, r8
     2d6:	fb08 1110 	mls	r1, r8, r0, r1
     2da:	fb00 f909 	mul.w	r9, r0, r9
     2de:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2e2:	45a1      	cmp	r9, r4
     2e4:	d905      	bls.n	2f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x72>
     2e6:	193c      	adds	r4, r7, r4
     2e8:	d202      	bcs.n	2f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x70>
     2ea:	45a1      	cmp	r9, r4
     2ec:	f200 810e 	bhi.w	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     2f0:	3801      	subs	r0, #1
     2f2:	eba4 0409 	sub.w	r4, r4, r9
     2f6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2fa:	2100      	movs	r1, #0
     2fc:	b11e      	cbz	r6, 306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     2fe:	40d4      	lsrs	r4, r2
     300:	2300      	movs	r3, #0
     302:	e9c6 4300 	strd	r4, r3, [r6]
     306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     30a:	b902      	cbnz	r2, 30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     30c:	deff      	udf	#255	; 0xff
     30e:	fab2 f282 	clz	r2, r2
     312:	2a00      	cmp	r2, #0
     314:	d14f      	bne.n	3b6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x136>
     316:	1bcb      	subs	r3, r1, r7
     318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     31c:	fa1f f887 	uxth.w	r8, r7
     320:	2101      	movs	r1, #1
     322:	0c25      	lsrs	r5, r4, #16
     324:	fbb3 fcfe 	udiv	ip, r3, lr
     328:	fb0e 301c 	mls	r0, lr, ip, r3
     32c:	462b      	mov	r3, r5
     32e:	fb08 f90c 	mul.w	r9, r8, ip
     332:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     336:	45a9      	cmp	r9, r5
     338:	d90a      	bls.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     33a:	197d      	adds	r5, r7, r5
     33c:	bf2c      	ite	cs
     33e:	2301      	movcs	r3, #1
     340:	2300      	movcc	r3, #0
     342:	45a9      	cmp	r9, r5
     344:	d902      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     346:	2b00      	cmp	r3, #0
     348:	f000 80d9 	beq.w	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     34c:	f10c 3cff 	add.w	ip, ip, #4294967295
     350:	eba5 0509 	sub.w	r5, r5, r9
     354:	b2a3      	uxth	r3, r4
     356:	fbb5 f0fe 	udiv	r0, r5, lr
     35a:	fb0e 5510 	mls	r5, lr, r0, r5
     35e:	fb08 f800 	mul.w	r8, r8, r0
     362:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     366:	45a0      	cmp	r8, r4
     368:	d905      	bls.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     36a:	193c      	adds	r4, r7, r4
     36c:	d202      	bcs.n	374 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf4>
     36e:	45a0      	cmp	r8, r4
     370:	f200 80c9 	bhi.w	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
     374:	3801      	subs	r0, #1
     376:	eba4 0408 	sub.w	r4, r4, r8
     37a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37e:	e7bd      	b.n	2fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7c>
     380:	428b      	cmp	r3, r1
     382:	d908      	bls.n	396 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x116>
     384:	2e00      	cmp	r6, #0
     386:	f000 80b1 	beq.w	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     38a:	2100      	movs	r1, #0
     38c:	e9c6 0500 	strd	r0, r5, [r6]
     390:	4608      	mov	r0, r1
     392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     396:	fab3 f183 	clz	r1, r3
     39a:	2900      	cmp	r1, #0
     39c:	d146      	bne.n	42c <CONFIG_FLASH_SIZE+0x2c>
     39e:	42ab      	cmp	r3, r5
     3a0:	f0c0 80a7 	bcc.w	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
     3a4:	4282      	cmp	r2, r0
     3a6:	f240 80a4 	bls.w	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
     3aa:	4608      	mov	r0, r1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0aa      	beq.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     3b0:	e9c6 4a00 	strd	r4, sl, [r6]
     3b4:	e7a7      	b.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     3b6:	f1c2 0020 	rsb	r0, r2, #32
     3ba:	4097      	lsls	r7, r2
     3bc:	fa01 f302 	lsl.w	r3, r1, r2
     3c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c4:	40c1      	lsrs	r1, r0
     3c6:	fa24 f500 	lsr.w	r5, r4, r0
     3ca:	fa1f f887 	uxth.w	r8, r7
     3ce:	4094      	lsls	r4, r2
     3d0:	431d      	orrs	r5, r3
     3d2:	fbb1 f0fe 	udiv	r0, r1, lr
     3d6:	0c2b      	lsrs	r3, r5, #16
     3d8:	fb0e 1110 	mls	r1, lr, r0, r1
     3dc:	fb00 fc08 	mul.w	ip, r0, r8
     3e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e4:	459c      	cmp	ip, r3
     3e6:	d909      	bls.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	bf2c      	ite	cs
     3ec:	2101      	movcs	r1, #1
     3ee:	2100      	movcc	r1, #0
     3f0:	459c      	cmp	ip, r3
     3f2:	d902      	bls.n	3fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17a>
     3f4:	2900      	cmp	r1, #0
     3f6:	f000 8095 	beq.w	524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
     3fa:	3801      	subs	r0, #1
     3fc:	eba3 030c 	sub.w	r3, r3, ip
     400:	b2ad      	uxth	r5, r5
     402:	fbb3 f1fe 	udiv	r1, r3, lr
     406:	fb0e 3311 	mls	r3, lr, r1, r3
     40a:	fb01 fc08 	mul.w	ip, r1, r8
     40e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     412:	45ac      	cmp	ip, r5
     414:	d905      	bls.n	422 <CONFIG_FLASH_SIZE+0x22>
     416:	197d      	adds	r5, r7, r5
     418:	d202      	bcs.n	420 <CONFIG_FLASH_SIZE+0x20>
     41a:	45ac      	cmp	ip, r5
     41c:	f200 8089 	bhi.w	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     420:	3901      	subs	r1, #1
     422:	eba5 030c 	sub.w	r3, r5, ip
     426:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     42a:	e77a      	b.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     42c:	f1c1 0420 	rsb	r4, r1, #32
     430:	408b      	lsls	r3, r1
     432:	fa02 f701 	lsl.w	r7, r2, r1
     436:	fa05 fc01 	lsl.w	ip, r5, r1
     43a:	40e2      	lsrs	r2, r4
     43c:	fa20 f804 	lsr.w	r8, r0, r4
     440:	40e5      	lsrs	r5, r4
     442:	fa00 fe01 	lsl.w	lr, r0, r1
     446:	4313      	orrs	r3, r2
     448:	ea48 020c 	orr.w	r2, r8, ip
     44c:	ea4f 4813 	mov.w	r8, r3, lsr #16
     450:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     454:	fa1f f983 	uxth.w	r9, r3
     458:	fbb5 faf8 	udiv	sl, r5, r8
     45c:	fb08 551a 	mls	r5, r8, sl, r5
     460:	fb0a f009 	mul.w	r0, sl, r9
     464:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     468:	4560      	cmp	r0, ip
     46a:	d90a      	bls.n	482 <CONFIG_FLASH_SIZE+0x82>
     46c:	eb13 0c0c 	adds.w	ip, r3, ip
     470:	bf2c      	ite	cs
     472:	2501      	movcs	r5, #1
     474:	2500      	movcc	r5, #0
     476:	4560      	cmp	r0, ip
     478:	d901      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     47a:	2d00      	cmp	r5, #0
     47c:	d055      	beq.n	52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
     47e:	f10a 3aff 	add.w	sl, sl, #4294967295
     482:	ebac 0c00 	sub.w	ip, ip, r0
     486:	b292      	uxth	r2, r2
     488:	fbbc f0f8 	udiv	r0, ip, r8
     48c:	fb08 cc10 	mls	ip, r8, r0, ip
     490:	fb00 f909 	mul.w	r9, r0, r9
     494:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     498:	45e1      	cmp	r9, ip
     49a:	d905      	bls.n	4a8 <CONFIG_FLASH_SIZE+0xa8>
     49c:	eb13 0c0c 	adds.w	ip, r3, ip
     4a0:	d201      	bcs.n	4a6 <CONFIG_FLASH_SIZE+0xa6>
     4a2:	45e1      	cmp	r9, ip
     4a4:	d83b      	bhi.n	51e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x36>
     4a6:	3801      	subs	r0, #1
     4a8:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4ac:	ebac 0c09 	sub.w	ip, ip, r9
     4b0:	fba0 8907 	umull	r8, r9, r0, r7
     4b4:	45cc      	cmp	ip, r9
     4b6:	4645      	mov	r5, r8
     4b8:	464a      	mov	r2, r9
     4ba:	d302      	bcc.n	4c2 <CONFIG_FLASH_SIZE+0xc2>
     4bc:	d106      	bne.n	4cc <CONFIG_FLASH_SIZE+0xcc>
     4be:	45c6      	cmp	lr, r8
     4c0:	d204      	bcs.n	4cc <CONFIG_FLASH_SIZE+0xcc>
     4c2:	3801      	subs	r0, #1
     4c4:	ebb8 0507 	subs.w	r5, r8, r7
     4c8:	eb69 0203 	sbc.w	r2, r9, r3
     4cc:	b32e      	cbz	r6, 51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4ce:	ebbe 0305 	subs.w	r3, lr, r5
     4d2:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d6:	fa23 f201 	lsr.w	r2, r3, r1
     4da:	fa0c f404 	lsl.w	r4, ip, r4
     4de:	fa2c f301 	lsr.w	r3, ip, r1
     4e2:	2100      	movs	r1, #0
     4e4:	4314      	orrs	r4, r2
     4e6:	e9c6 4300 	strd	r4, r3, [r6]
     4ea:	e70c      	b.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     4ec:	4631      	mov	r1, r6
     4ee:	4630      	mov	r0, r6
     4f0:	e709      	b.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     4f2:	1a84      	subs	r4, r0, r2
     4f4:	eb65 0303 	sbc.w	r3, r5, r3
     4f8:	2001      	movs	r0, #1
     4fa:	469a      	mov	sl, r3
     4fc:	e756      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     4fe:	f1ac 0c02 	sub.w	ip, ip, #2
     502:	443d      	add	r5, r7
     504:	e724      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     506:	3802      	subs	r0, #2
     508:	443c      	add	r4, r7
     50a:	e734      	b.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     50c:	3802      	subs	r0, #2
     50e:	443c      	add	r4, r7
     510:	e6ef      	b.n	2f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x72>
     512:	f1ae 0e02 	sub.w	lr, lr, #2
     516:	443b      	add	r3, r7
     518:	e6d9      	b.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     51a:	4631      	mov	r1, r6
     51c:	e6f3      	b.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     51e:	3802      	subs	r0, #2
     520:	449c      	add	ip, r3
     522:	e7c1      	b.n	4a8 <CONFIG_FLASH_SIZE+0xa8>
     524:	3802      	subs	r0, #2
     526:	443b      	add	r3, r7
     528:	e768      	b.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     52a:	f1aa 0a02 	sub.w	sl, sl, #2
     52e:	449c      	add	ip, r3
     530:	e7a7      	b.n	482 <CONFIG_FLASH_SIZE+0x82>
     532:	3902      	subs	r1, #2
     534:	443d      	add	r5, r7
     536:	e774      	b.n	422 <CONFIG_FLASH_SIZE+0x22>

00000538 <__aeabi_idiv0>:
     538:	4770      	bx	lr
     53a:	bf00      	nop

0000053c <nibble_from_hex>:
     53c:	f1c0 0360 	rsb	r3, r0, #96	; 0x60
     540:	f1a0 0267 	sub.w	r2, r0, #103	; 0x67
     544:	4013      	ands	r3, r2
     546:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
     54a:	ea02 73e3 	and.w	r3, r2, r3, asr #31
     54e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
     552:	f1a0 0147 	sub.w	r1, r0, #71	; 0x47
     556:	4011      	ands	r1, r2
     558:	f1a0 0237 	sub.w	r2, r0, #55	; 0x37
     55c:	ea02 72e1 	and.w	r2, r2, r1, asr #31
     560:	431a      	orrs	r2, r3
     562:	f1c0 032f 	rsb	r3, r0, #47	; 0x2f
     566:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
     56a:	4019      	ands	r1, r3
     56c:	3830      	subs	r0, #48	; 0x30
     56e:	ea00 70e1 	and.w	r0, r0, r1, asr #31
     572:	4310      	orrs	r0, r2
     574:	1e43      	subs	r3, r0, #1
     576:	ea23 73e1 	bic.w	r3, r3, r1, asr #31
     57a:	17db      	asrs	r3, r3, #31
     57c:	f003 0310 	and.w	r3, r3, #16
     580:	4318      	orrs	r0, r3
     582:	b2c0      	uxtb	r0, r0
     584:	4770      	bx	lr

00000586 <limbs_from_hexascii>:
     586:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     58a:	4607      	mov	r7, r0
     58c:	4689      	mov	r9, r1
     58e:	4616      	mov	r6, r2
     590:	7813      	ldrb	r3, [r2, #0]
     592:	2b30      	cmp	r3, #48	; 0x30
     594:	d00e      	beq.n	5b4 <limbs_from_hexascii+0x2e>
     596:	ea5f 0849 	movs.w	r8, r9, lsl #1
     59a:	d013      	beq.n	5c4 <limbs_from_hexascii+0x3e>
     59c:	1e75      	subs	r5, r6, #1
     59e:	2400      	movs	r4, #0
     5a0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
     5a4:	f7ff ffca 	bl	53c <nibble_from_hex>
     5a8:	280f      	cmp	r0, #15
     5aa:	d80a      	bhi.n	5c2 <limbs_from_hexascii+0x3c>
     5ac:	3401      	adds	r4, #1
     5ae:	4544      	cmp	r4, r8
     5b0:	d1f6      	bne.n	5a0 <limbs_from_hexascii+0x1a>
     5b2:	e007      	b.n	5c4 <limbs_from_hexascii+0x3e>
     5b4:	7853      	ldrb	r3, [r2, #1]
     5b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     5ba:	2b58      	cmp	r3, #88	; 0x58
     5bc:	bf08      	it	eq
     5be:	3602      	addeq	r6, #2
     5c0:	e7e9      	b.n	596 <limbs_from_hexascii+0x10>
     5c2:	46a0      	mov	r8, r4
     5c4:	ea4f 0099 	mov.w	r0, r9, lsr #2
     5c8:	f1b9 0f03 	cmp.w	r9, #3
     5cc:	d907      	bls.n	5de <limbs_from_hexascii+0x58>
     5ce:	463a      	mov	r2, r7
     5d0:	2300      	movs	r3, #0
     5d2:	4619      	mov	r1, r3
     5d4:	f842 1b04 	str.w	r1, [r2], #4
     5d8:	3301      	adds	r3, #1
     5da:	4298      	cmp	r0, r3
     5dc:	d8fa      	bhi.n	5d4 <limbs_from_hexascii+0x4e>
     5de:	f108 34ff 	add.w	r4, r8, #4294967295
     5e2:	f1b8 0f00 	cmp.w	r8, #0
     5e6:	d010      	beq.n	60a <limbs_from_hexascii+0x84>
     5e8:	2500      	movs	r5, #0
     5ea:	012d      	lsls	r5, r5, #4
     5ec:	f816 0b01 	ldrb.w	r0, [r6], #1
     5f0:	f7ff ffa4 	bl	53c <nibble_from_hex>
     5f4:	4305      	orrs	r5, r0
     5f6:	f014 0f07 	tst.w	r4, #7
     5fa:	bf04      	itt	eq
     5fc:	08e3      	lsreq	r3, r4, #3
     5fe:	f847 5023 	streq.w	r5, [r7, r3, lsl #2]
     602:	3c01      	subs	r4, #1
     604:	f1b4 3fff 	cmp.w	r4, #4294967295
     608:	d1ef      	bne.n	5ea <limbs_from_hexascii+0x64>
     60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000060e <sha256_init_h>:
     60e:	4b0b      	ldr	r3, [pc, #44]	; (63c <sha256_init_h+0x2e>)
     610:	6003      	str	r3, [r0, #0]
     612:	4b0b      	ldr	r3, [pc, #44]	; (640 <sha256_init_h+0x32>)
     614:	6043      	str	r3, [r0, #4]
     616:	4b0b      	ldr	r3, [pc, #44]	; (644 <sha256_init_h+0x36>)
     618:	6083      	str	r3, [r0, #8]
     61a:	4b0b      	ldr	r3, [pc, #44]	; (648 <sha256_init_h+0x3a>)
     61c:	60c3      	str	r3, [r0, #12]
     61e:	4b0b      	ldr	r3, [pc, #44]	; (64c <sha256_init_h+0x3e>)
     620:	6103      	str	r3, [r0, #16]
     622:	4b0b      	ldr	r3, [pc, #44]	; (650 <sha256_init_h+0x42>)
     624:	6143      	str	r3, [r0, #20]
     626:	4b0b      	ldr	r3, [pc, #44]	; (654 <sha256_init_h+0x46>)
     628:	6183      	str	r3, [r0, #24]
     62a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
     62e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
     632:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
     636:	61c3      	str	r3, [r0, #28]
     638:	4770      	bx	lr
     63a:	bf00      	nop
     63c:	6a09e667 	.word	0x6a09e667
     640:	bb67ae85 	.word	0xbb67ae85
     644:	3c6ef372 	.word	0x3c6ef372
     648:	a54ff53a 	.word	0xa54ff53a
     64c:	510e527f 	.word	0x510e527f
     650:	9b05688c 	.word	0x9b05688c
     654:	1f83d9ab 	.word	0x1f83d9ab

00000658 <sha256_init>:
     658:	b510      	push	{r4, lr}
     65a:	4604      	mov	r4, r0
     65c:	f7ff ffd7 	bl	60e <sha256_init_h>
     660:	2200      	movs	r2, #0
     662:	2300      	movs	r3, #0
     664:	e9c4 2308 	strd	r2, r3, [r4, #32]
     668:	f104 0028 	add.w	r0, r4, #40	; 0x28
     66c:	4603      	mov	r3, r0
     66e:	f104 0168 	add.w	r1, r4, #104	; 0x68
     672:	f843 2b04 	str.w	r2, [r3], #4
     676:	428b      	cmp	r3, r1
     678:	d1fb      	bne.n	672 <sha256_init+0x1a>
     67a:	2300      	movs	r3, #0
     67c:	66a3      	str	r3, [r4, #104]	; 0x68
     67e:	bd10      	pop	{r4, pc}

00000680 <get_wval>:
     680:	3a01      	subs	r2, #1
     682:	440a      	add	r2, r1
     684:	08d2      	lsrs	r2, r2, #3
     686:	5c83      	ldrb	r3, [r0, r2]
     688:	08ca      	lsrs	r2, r1, #3
     68a:	5c80      	ldrb	r0, [r0, r2]
     68c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
     690:	f001 0107 	and.w	r1, r1, #7
     694:	40c8      	lsrs	r0, r1
     696:	4770      	bx	lr

00000698 <get_wval_limb>:
     698:	b470      	push	{r4, r5, r6}
     69a:	eb00 05d1 	add.w	r5, r0, r1, lsr #3
     69e:	1e53      	subs	r3, r2, #1
     6a0:	440b      	add	r3, r1
     6a2:	08db      	lsrs	r3, r3, #3
     6a4:	ebc3 03d1 	rsb	r3, r3, r1, lsr #3
     6a8:	2400      	movs	r4, #0
     6aa:	f04f 30ff 	mov.w	r0, #4294967295
     6ae:	4626      	mov	r6, r4
     6b0:	782a      	ldrb	r2, [r5, #0]
     6b2:	4002      	ands	r2, r0
     6b4:	40a2      	lsls	r2, r4
     6b6:	4316      	orrs	r6, r2
     6b8:	17d8      	asrs	r0, r3, #31
     6ba:	eb05 75d3 	add.w	r5, r5, r3, lsr #31
     6be:	3408      	adds	r4, #8
     6c0:	3301      	adds	r3, #1
     6c2:	2c20      	cmp	r4, #32
     6c4:	d1f4      	bne.n	6b0 <get_wval_limb+0x18>
     6c6:	f001 0107 	and.w	r1, r1, #7
     6ca:	fa26 f001 	lsr.w	r0, r6, r1
     6ce:	bc70      	pop	{r4, r5, r6}
     6d0:	4770      	bx	lr

000006d2 <booth_encode>:
     6d2:	fa20 f101 	lsr.w	r1, r0, r1
     6d6:	3001      	adds	r0, #1
     6d8:	0843      	lsrs	r3, r0, #1
     6da:	1e4a      	subs	r2, r1, #1
     6dc:	ea02 0050 	and.w	r0, r2, r0, lsr #1
     6e0:	425b      	negs	r3, r3
     6e2:	4249      	negs	r1, r1
     6e4:	4019      	ands	r1, r3
     6e6:	4308      	orrs	r0, r1
     6e8:	4770      	bx	lr

000006ea <pippenger_window_size>:
     6ea:	0840      	lsrs	r0, r0, #1
     6ec:	d011      	beq.n	712 <pippenger_window_size+0x28>
     6ee:	2300      	movs	r3, #0
     6f0:	461a      	mov	r2, r3
     6f2:	3301      	adds	r3, #1
     6f4:	0840      	lsrs	r0, r0, #1
     6f6:	d1fb      	bne.n	6f0 <pippenger_window_size+0x6>
     6f8:	2b0c      	cmp	r3, #12
     6fa:	d901      	bls.n	700 <pippenger_window_size+0x16>
     6fc:	1e90      	subs	r0, r2, #2
     6fe:	4770      	bx	lr
     700:	2b04      	cmp	r3, #4
     702:	d901      	bls.n	708 <pippenger_window_size+0x1e>
     704:	1e50      	subs	r0, r2, #1
     706:	4770      	bx	lr
     708:	2b00      	cmp	r3, #0
     70a:	bf14      	ite	ne
     70c:	2002      	movne	r0, #2
     70e:	2001      	moveq	r0, #1
     710:	4770      	bx	lr
     712:	2001      	movs	r0, #1
     714:	4770      	bx	lr

00000716 <sub_mod_n>:
     716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     71a:	469e      	mov	lr, r3
     71c:	9b06      	ldr	r3, [sp, #24]
     71e:	b373      	cbz	r3, 77e <sub_mod_n+0x68>
     720:	3904      	subs	r1, #4
     722:	1f16      	subs	r6, r2, #4
     724:	1f04      	subs	r4, r0, #4
     726:	ea4f 0c83 	mov.w	ip, r3, lsl #2
     72a:	eb01 0883 	add.w	r8, r1, r3, lsl #2
     72e:	4627      	mov	r7, r4
     730:	2200      	movs	r2, #0
     732:	f851 3f04 	ldr.w	r3, [r1, #4]!
     736:	1a9a      	subs	r2, r3, r2
     738:	eb63 0303 	sbc.w	r3, r3, r3
     73c:	f856 5f04 	ldr.w	r5, [r6, #4]!
     740:	1b52      	subs	r2, r2, r5
     742:	f163 0300 	sbc.w	r3, r3, #0
     746:	f847 2f04 	str.w	r2, [r7, #4]!
     74a:	f003 0201 	and.w	r2, r3, #1
     74e:	4541      	cmp	r1, r8
     750:	d1ef      	bne.n	732 <sub_mod_n+0x1c>
     752:	4251      	negs	r1, r2
     754:	f1ae 0504 	sub.w	r5, lr, #4
     758:	3804      	subs	r0, #4
     75a:	4484      	add	ip, r0
     75c:	2200      	movs	r2, #0
     75e:	f855 0f04 	ldr.w	r0, [r5, #4]!
     762:	4008      	ands	r0, r1
     764:	f854 6f04 	ldr.w	r6, [r4, #4]!
     768:	2300      	movs	r3, #0
     76a:	1992      	adds	r2, r2, r6
     76c:	f143 0300 	adc.w	r3, r3, #0
     770:	1812      	adds	r2, r2, r0
     772:	f143 0300 	adc.w	r3, r3, #0
     776:	6022      	str	r2, [r4, #0]
     778:	461a      	mov	r2, r3
     77a:	4564      	cmp	r4, ip
     77c:	d1ef      	bne.n	75e <sub_mod_n+0x48>
     77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000782 <check_mod_n>:
     782:	b4f0      	push	{r4, r5, r6, r7}
     784:	4615      	mov	r5, r2
     786:	b1fa      	cbz	r2, 7c8 <check_mod_n+0x46>
     788:	1f0e      	subs	r6, r1, #4
     78a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
     78e:	2500      	movs	r5, #0
     790:	462f      	mov	r7, r5
     792:	e00e      	b.n	7b2 <check_mod_n+0x30>
     794:	3004      	adds	r0, #4
     796:	430f      	orrs	r7, r1
     798:	f856 4f04 	ldr.w	r4, [r6, #4]!
     79c:	2300      	movs	r3, #0
     79e:	192a      	adds	r2, r5, r4
     7a0:	f143 0300 	adc.w	r3, r3, #0
     7a4:	1a89      	subs	r1, r1, r2
     7a6:	eb63 0543 	sbc.w	r5, r3, r3, lsl #1
     7aa:	f005 0501 	and.w	r5, r5, #1
     7ae:	4566      	cmp	r6, ip
     7b0:	d00b      	beq.n	7ca <check_mod_n+0x48>
     7b2:	4604      	mov	r4, r0
     7b4:	2300      	movs	r3, #0
     7b6:	4619      	mov	r1, r3
     7b8:	f814 2b01 	ldrb.w	r2, [r4], #1
     7bc:	409a      	lsls	r2, r3
     7be:	4311      	orrs	r1, r2
     7c0:	3308      	adds	r3, #8
     7c2:	2b20      	cmp	r3, #32
     7c4:	d1f8      	bne.n	7b8 <check_mod_n+0x36>
     7c6:	e7e5      	b.n	794 <check_mod_n+0x12>
     7c8:	4617      	mov	r7, r2
     7ca:	1e78      	subs	r0, r7, #1
     7cc:	ea20 0007 	bic.w	r0, r0, r7
     7d0:	2800      	cmp	r0, #0
     7d2:	bfb4      	ite	lt
     7d4:	2000      	movlt	r0, #0
     7d6:	f005 0001 	andge.w	r0, r5, #1
     7da:	bcf0      	pop	{r4, r5, r6, r7}
     7dc:	4770      	bx	lr

000007de <rshift_mod_n>:
     7de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7e2:	b083      	sub	sp, #12
     7e4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
     7e8:	2a00      	cmp	r2, #0
     7ea:	d051      	beq.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
     7ec:	469b      	mov	fp, r3
     7ee:	f102 3eff 	add.w	lr, r2, #4294967295
     7f2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
     7f6:	f8cd 8004 	str.w	r8, [sp, #4]
     7fa:	f1aa 0a04 	sub.w	sl, sl, #4
     7fe:	9000      	str	r0, [sp, #0]
     800:	e01c      	b.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     802:	6802      	ldr	r2, [r0, #0]
     804:	9c01      	ldr	r4, [sp, #4]
     806:	f04f 36ff 	mov.w	r6, #4294967295
     80a:	4605      	mov	r5, r0
     80c:	2100      	movs	r1, #0
     80e:	0853      	lsrs	r3, r2, #1
     810:	3101      	adds	r1, #1
     812:	686a      	ldr	r2, [r5, #4]
     814:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
     818:	f845 3b04 	str.w	r3, [r5], #4
     81c:	42b1      	cmp	r1, r6
     81e:	d3f6      	bcc.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
     820:	2e00      	cmp	r6, #0
     822:	bf08      	it	eq
     824:	2601      	moveq	r6, #1
     826:	07e4      	lsls	r4, r4, #31
     828:	ea44 0252 	orr.w	r2, r4, r2, lsr #1
     82c:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
     830:	f10e 3eff 	add.w	lr, lr, #4294967295
     834:	f1be 3fff 	cmp.w	lr, #4294967295
     838:	d02a      	beq.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
     83a:	9900      	ldr	r1, [sp, #0]
     83c:	680b      	ldr	r3, [r1, #0]
     83e:	f343 0c00 	sbfx	ip, r3, #0, #1
     842:	f1b8 0f00 	cmp.w	r8, #0
     846:	d0dc      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     848:	1f0a      	subs	r2, r1, #4
     84a:	f1ab 0704 	sub.w	r7, fp, #4
     84e:	1f06      	subs	r6, r0, #4
     850:	4451      	add	r1, sl
     852:	2400      	movs	r4, #0
     854:	46f1      	mov	r9, lr
     856:	460d      	mov	r5, r1
     858:	4686      	mov	lr, r0
     85a:	4620      	mov	r0, r4
     85c:	f857 3f04 	ldr.w	r3, [r7, #4]!
     860:	ea0c 0303 	and.w	r3, ip, r3
     864:	f852 4f04 	ldr.w	r4, [r2, #4]!
     868:	2100      	movs	r1, #0
     86a:	1900      	adds	r0, r0, r4
     86c:	f141 0100 	adc.w	r1, r1, #0
     870:	18c0      	adds	r0, r0, r3
     872:	f141 0100 	adc.w	r1, r1, #0
     876:	f846 0f04 	str.w	r0, [r6, #4]!
     87a:	4608      	mov	r0, r1
     87c:	42aa      	cmp	r2, r5
     87e:	d1ed      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     880:	460c      	mov	r4, r1
     882:	4670      	mov	r0, lr
     884:	46ce      	mov	lr, r9
     886:	6802      	ldr	r2, [r0, #0]
     888:	f1b8 0601 	subs.w	r6, r8, #1
     88c:	d1bd      	bne.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     88e:	e7ca      	b.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
     890:	b003      	add	sp, #12
     892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000896 <inner_loop_n>:
     896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     89a:	b087      	sub	sp, #28
     89c:	9005      	str	r0, [sp, #20]
     89e:	6808      	ldr	r0, [r1, #0]
     8a0:	684c      	ldr	r4, [r1, #4]
     8a2:	f8d2 8000 	ldr.w	r8, [r2]
     8a6:	f8d2 e004 	ldr.w	lr, [r2, #4]
     8aa:	2b00      	cmp	r3, #0
     8ac:	d062      	beq.n	974 <inner_loop_n+0xde>
     8ae:	f103 3bff 	add.w	fp, r3, #4294967295
     8b2:	f04f 0a01 	mov.w	sl, #1
     8b6:	2100      	movs	r1, #0
     8b8:	4689      	mov	r9, r1
     8ba:	46d4      	mov	ip, sl
     8bc:	f340 0500 	sbfx	r5, r0, #0, #1
     8c0:	ea05 0208 	and.w	r2, r5, r8
     8c4:	1a86      	subs	r6, r0, r2
     8c6:	1a82      	subs	r2, r0, r2
     8c8:	eb60 0300 	sbc.w	r3, r0, r0
     8cc:	f003 0701 	and.w	r7, r3, #1
     8d0:	ea05 020e 	and.w	r2, r5, lr
     8d4:	1aa2      	subs	r2, r4, r2
     8d6:	eb64 0304 	sbc.w	r3, r4, r4
     8da:	1bd2      	subs	r2, r2, r7
     8dc:	f163 0300 	sbc.w	r3, r3, #0
     8e0:	e9cd 2300 	strd	r2, r3, [sp]
     8e4:	4613      	mov	r3, r2
     8e6:	9a01      	ldr	r2, [sp, #4]
     8e8:	405a      	eors	r2, r3
     8ea:	9b01      	ldr	r3, [sp, #4]
     8ec:	4073      	eors	r3, r6
     8ee:	9e01      	ldr	r6, [sp, #4]
     8f0:	f006 0601 	and.w	r6, r6, #1
     8f4:	9602      	str	r6, [sp, #8]
     8f6:	2600      	movs	r6, #0
     8f8:	9603      	str	r6, [sp, #12]
     8fa:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     8fe:	18f6      	adds	r6, r6, r3
     900:	f147 0700 	adc.w	r7, r7, #0
     904:	443a      	add	r2, r7
     906:	ea80 0008 	eor.w	r0, r0, r8
     90a:	9b01      	ldr	r3, [sp, #4]
     90c:	4018      	ands	r0, r3
     90e:	ea88 0800 	eor.w	r8, r8, r0
     912:	ea84 040e 	eor.w	r4, r4, lr
     916:	401c      	ands	r4, r3
     918:	ea8e 0e04 	eor.w	lr, lr, r4
     91c:	ea8c 0001 	eor.w	r0, ip, r1
     920:	4018      	ands	r0, r3
     922:	ea80 0c0c 	eor.w	ip, r0, ip
     926:	4041      	eors	r1, r0
     928:	ea89 000a 	eor.w	r0, r9, sl
     92c:	4003      	ands	r3, r0
     92e:	ea83 0909 	eor.w	r9, r3, r9
     932:	ea83 0a0a 	eor.w	sl, r3, sl
     936:	ea05 0301 	and.w	r3, r5, r1
     93a:	ebac 0c03 	sub.w	ip, ip, r3
     93e:	ea05 050a 	and.w	r5, r5, sl
     942:	eba9 0905 	sub.w	r9, r9, r5
     946:	0049      	lsls	r1, r1, #1
     948:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
     94c:	07d0      	lsls	r0, r2, #31
     94e:	ea40 0056 	orr.w	r0, r0, r6, lsr #1
     952:	0854      	lsrs	r4, r2, #1
     954:	f10b 3bff 	add.w	fp, fp, #4294967295
     958:	f1bb 3fff 	cmp.w	fp, #4294967295
     95c:	d1ae      	bne.n	8bc <inner_loop_n+0x26>
     95e:	9b05      	ldr	r3, [sp, #20]
     960:	f8c3 c000 	str.w	ip, [r3]
     964:	f8c3 9004 	str.w	r9, [r3, #4]
     968:	6099      	str	r1, [r3, #8]
     96a:	f8c3 a00c 	str.w	sl, [r3, #12]
     96e:	b007      	add	sp, #28
     970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     974:	4699      	mov	r9, r3
     976:	4619      	mov	r1, r3
     978:	f04f 0a01 	mov.w	sl, #1
     97c:	46d4      	mov	ip, sl
     97e:	e7ee      	b.n	95e <inner_loop_n+0xc8>

00000980 <cneg_n>:
     980:	b1b3      	cbz	r3, 9b0 <cneg_n+0x30>
     982:	b4f0      	push	{r4, r5, r6, r7}
     984:	f002 0501 	and.w	r5, r2, #1
     988:	1f0c      	subs	r4, r1, #4
     98a:	1f06      	subs	r6, r0, #4
     98c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
     990:	f854 3f04 	ldr.w	r3, [r4, #4]!
     994:	4053      	eors	r3, r2
     996:	2100      	movs	r1, #0
     998:	18e8      	adds	r0, r5, r3
     99a:	f141 0100 	adc.w	r1, r1, #0
     99e:	442b      	add	r3, r5
     9a0:	f846 3f04 	str.w	r3, [r6, #4]!
     9a4:	460d      	mov	r5, r1
     9a6:	42bc      	cmp	r4, r7
     9a8:	d1f2      	bne.n	990 <cneg_n+0x10>
     9aa:	17c0      	asrs	r0, r0, #31
     9ac:	bcf0      	pop	{r4, r5, r6, r7}
     9ae:	4770      	bx	lr
     9b0:	2000      	movs	r0, #0
     9b2:	17c0      	asrs	r0, r0, #31
     9b4:	4770      	bx	lr

000009b6 <add_n>:
     9b6:	b4f0      	push	{r4, r5, r6, r7}
     9b8:	b1bb      	cbz	r3, 9ea <add_n+0x34>
     9ba:	3904      	subs	r1, #4
     9bc:	1f15      	subs	r5, r2, #4
     9be:	1f04      	subs	r4, r0, #4
     9c0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
     9c4:	2000      	movs	r0, #0
     9c6:	f851 7f04 	ldr.w	r7, [r1, #4]!
     9ca:	f855 2f04 	ldr.w	r2, [r5, #4]!
     9ce:	2300      	movs	r3, #0
     9d0:	19d2      	adds	r2, r2, r7
     9d2:	f143 0300 	adc.w	r3, r3, #0
     9d6:	1812      	adds	r2, r2, r0
     9d8:	f143 0300 	adc.w	r3, r3, #0
     9dc:	f844 2f04 	str.w	r2, [r4, #4]!
     9e0:	4618      	mov	r0, r3
     9e2:	42b1      	cmp	r1, r6
     9e4:	d1ef      	bne.n	9c6 <add_n+0x10>
     9e6:	bcf0      	pop	{r4, r5, r6, r7}
     9e8:	4770      	bx	lr
     9ea:	4618      	mov	r0, r3
     9ec:	e7fb      	b.n	9e6 <add_n+0x30>

000009ee <umul_n>:
     9ee:	b470      	push	{r4, r5, r6}
     9f0:	4604      	mov	r4, r0
     9f2:	4618      	mov	r0, r3
     9f4:	b173      	cbz	r3, a14 <umul_n+0x26>
     9f6:	1f0b      	subs	r3, r1, #4
     9f8:	3c04      	subs	r4, #4
     9fa:	eb03 0680 	add.w	r6, r3, r0, lsl #2
     9fe:	2000      	movs	r0, #0
     a00:	f853 5f04 	ldr.w	r5, [r3, #4]!
     a04:	2100      	movs	r1, #0
     a06:	fbe2 0105 	umlal	r0, r1, r2, r5
     a0a:	f844 0f04 	str.w	r0, [r4, #4]!
     a0e:	4608      	mov	r0, r1
     a10:	42b3      	cmp	r3, r6
     a12:	d1f5      	bne.n	a00 <umul_n+0x12>
     a14:	bc70      	pop	{r4, r5, r6}
     a16:	4770      	bx	lr

00000a18 <legendre_loop_n>:
     a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a1c:	b08b      	sub	sp, #44	; 0x2c
     a1e:	9005      	str	r0, [sp, #20]
     a20:	9109      	str	r1, [sp, #36]	; 0x24
     a22:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
     a26:	6811      	ldr	r1, [r2, #0]
     a28:	6854      	ldr	r4, [r2, #4]
     a2a:	f8d3 c000 	ldr.w	ip, [r3]
     a2e:	f8d3 b004 	ldr.w	fp, [r3, #4]
     a32:	f1b9 0f00 	cmp.w	r9, #0
     a36:	d073      	beq.n	b20 <legendre_loop_n+0x108>
     a38:	f109 33ff 	add.w	r3, r9, #4294967295
     a3c:	f04f 0801 	mov.w	r8, #1
     a40:	2000      	movs	r0, #0
     a42:	4681      	mov	r9, r0
     a44:	46c6      	mov	lr, r8
     a46:	469a      	mov	sl, r3
     a48:	f341 0500 	sbfx	r5, r1, #0, #1
     a4c:	ea05 020c 	and.w	r2, r5, ip
     a50:	1a8e      	subs	r6, r1, r2
     a52:	1a8a      	subs	r2, r1, r2
     a54:	eb61 0301 	sbc.w	r3, r1, r1
     a58:	f003 0701 	and.w	r7, r3, #1
     a5c:	ea05 020b 	and.w	r2, r5, fp
     a60:	1aa2      	subs	r2, r4, r2
     a62:	eb64 0304 	sbc.w	r3, r4, r4
     a66:	1bd2      	subs	r2, r2, r7
     a68:	f163 0300 	sbc.w	r3, r3, #0
     a6c:	ea01 070c 	and.w	r7, r1, ip
     a70:	e9cd 2300 	strd	r2, r3, [sp]
     a74:	ea03 0757 	and.w	r7, r3, r7, lsr #1
     a78:	9b00      	ldr	r3, [sp, #0]
     a7a:	9a01      	ldr	r2, [sp, #4]
     a7c:	405a      	eors	r2, r3
     a7e:	9208      	str	r2, [sp, #32]
     a80:	9b01      	ldr	r3, [sp, #4]
     a82:	405e      	eors	r6, r3
     a84:	f003 0301 	and.w	r3, r3, #1
     a88:	9302      	str	r3, [sp, #8]
     a8a:	2300      	movs	r3, #0
     a8c:	9303      	str	r3, [sp, #12]
     a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a92:	1992      	adds	r2, r2, r6
     a94:	f143 0300 	adc.w	r3, r3, #0
     a98:	e9cd 2306 	strd	r2, r3, [sp, #24]
     a9c:	9a08      	ldr	r2, [sp, #32]
     a9e:	441a      	add	r2, r3
     aa0:	ea81 010c 	eor.w	r1, r1, ip
     aa4:	9b01      	ldr	r3, [sp, #4]
     aa6:	4019      	ands	r1, r3
     aa8:	ea8c 0c01 	eor.w	ip, ip, r1
     aac:	ea84 040b 	eor.w	r4, r4, fp
     ab0:	401c      	ands	r4, r3
     ab2:	ea8b 0b04 	eor.w	fp, fp, r4
     ab6:	ea8e 0100 	eor.w	r1, lr, r0
     aba:	4019      	ands	r1, r3
     abc:	ea81 0e0e 	eor.w	lr, r1, lr
     ac0:	4048      	eors	r0, r1
     ac2:	ea89 0108 	eor.w	r1, r9, r8
     ac6:	400b      	ands	r3, r1
     ac8:	ea83 0909 	eor.w	r9, r3, r9
     acc:	ea83 0808 	eor.w	r8, r3, r8
     ad0:	ea05 0300 	and.w	r3, r5, r0
     ad4:	ebae 0e03 	sub.w	lr, lr, r3
     ad8:	ea05 0508 	and.w	r5, r5, r8
     adc:	eba9 0905 	sub.w	r9, r9, r5
     ae0:	0040      	lsls	r0, r0, #1
     ae2:	ea4f 0848 	mov.w	r8, r8, lsl #1
     ae6:	07d1      	lsls	r1, r2, #31
     ae8:	9b06      	ldr	r3, [sp, #24]
     aea:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
     aee:	0854      	lsrs	r4, r2, #1
     af0:	f10c 0302 	add.w	r3, ip, #2
     af4:	eb07 0793 	add.w	r7, r7, r3, lsr #2
     af8:	9b05      	ldr	r3, [sp, #20]
     afa:	443b      	add	r3, r7
     afc:	9305      	str	r3, [sp, #20]
     afe:	f10a 3aff 	add.w	sl, sl, #4294967295
     b02:	f1ba 3fff 	cmp.w	sl, #4294967295
     b06:	d19f      	bne.n	a48 <legendre_loop_n+0x30>
     b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b0a:	f8c3 e000 	str.w	lr, [r3]
     b0e:	f8c3 9004 	str.w	r9, [r3, #4]
     b12:	6098      	str	r0, [r3, #8]
     b14:	f8c3 800c 	str.w	r8, [r3, #12]
     b18:	9805      	ldr	r0, [sp, #20]
     b1a:	b00b      	add	sp, #44	; 0x2c
     b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b20:	4648      	mov	r0, r9
     b22:	f04f 0801 	mov.w	r8, #1
     b26:	46c6      	mov	lr, r8
     b28:	e7ee      	b.n	b08 <legendre_loop_n+0xf0>

00000b2a <mul_mont_n>:
     b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b2e:	b08b      	sub	sp, #44	; 0x2c
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
     b34:	6179      	str	r1, [r7, #20]
     b36:	4614      	mov	r4, r2
     b38:	60bb      	str	r3, [r7, #8]
     b3a:	f8d7 a054 	ldr.w	sl, [r7, #84]	; 0x54
     b3e:	f10a 0301 	add.w	r3, sl, #1
     b42:	0098      	lsls	r0, r3, #2
     b44:	60f8      	str	r0, [r7, #12]
     b46:	1dc3      	adds	r3, r0, #7
     b48:	f023 0307 	bic.w	r3, r3, #7
     b4c:	ebad 0d03 	sub.w	sp, sp, r3
     b50:	46ee      	mov	lr, sp
     b52:	6816      	ldr	r6, [r2, #0]
     b54:	f1ba 0f00 	cmp.w	sl, #0
     b58:	d02f      	beq.n	bba <mul_mont_n+0x90>
     b5a:	1f0b      	subs	r3, r1, #4
     b5c:	f1ae 0204 	sub.w	r2, lr, #4
     b60:	1f05      	subs	r5, r0, #4
     b62:	441d      	add	r5, r3
     b64:	2000      	movs	r0, #0
     b66:	46ac      	mov	ip, r5
     b68:	f853 5f04 	ldr.w	r5, [r3, #4]!
     b6c:	2100      	movs	r1, #0
     b6e:	fbe6 0105 	umlal	r0, r1, r6, r5
     b72:	f842 0f04 	str.w	r0, [r2, #4]!
     b76:	4608      	mov	r0, r1
     b78:	4563      	cmp	r3, ip
     b7a:	d1f5      	bne.n	b68 <mul_mont_n+0x3e>
     b7c:	4653      	mov	r3, sl
     b7e:	f8de 2000 	ldr.w	r2, [lr]
     b82:	6d39      	ldr	r1, [r7, #80]	; 0x50
     b84:	fb02 f201 	mul.w	r2, r2, r1
     b88:	f84e 0023 	str.w	r0, [lr, r3, lsl #2]
     b8c:	68b9      	ldr	r1, [r7, #8]
     b8e:	680b      	ldr	r3, [r1, #0]
     b90:	61bb      	str	r3, [r7, #24]
     b92:	46a0      	mov	r8, r4
     b94:	68fb      	ldr	r3, [r7, #12]
     b96:	f1a3 0c04 	sub.w	ip, r3, #4
     b9a:	3c04      	subs	r4, #4
     b9c:	4663      	mov	r3, ip
     b9e:	eb04 0b0c 	add.w	fp, r4, ip
     ba2:	6139      	str	r1, [r7, #16]
     ba4:	1f0e      	subs	r6, r1, #4
     ba6:	4466      	add	r6, ip
     ba8:	6979      	ldr	r1, [r7, #20]
     baa:	f1a1 0c04 	sub.w	ip, r1, #4
     bae:	449c      	add	ip, r3
     bb0:	f04f 0900 	mov.w	r9, #0
     bb4:	f8c7 a01c 	str.w	sl, [r7, #28]
     bb8:	e058      	b.n	c6c <mul_mont_n+0x142>
     bba:	4653      	mov	r3, sl
     bbc:	4650      	mov	r0, sl
     bbe:	e7de      	b.n	b7e <mul_mont_n+0x54>
     bc0:	2301      	movs	r3, #1
     bc2:	e073      	b.n	cac <mul_mont_n+0x182>
     bc4:	f1ba 0f00 	cmp.w	sl, #0
     bc8:	d02e      	beq.n	c28 <mul_mont_n+0xfe>
     bca:	f1ae 0504 	sub.w	r5, lr, #4
     bce:	68bb      	ldr	r3, [r7, #8]
     bd0:	1f1e      	subs	r6, r3, #4
     bd2:	687b      	ldr	r3, [r7, #4]
     bd4:	3b04      	subs	r3, #4
     bd6:	68fa      	ldr	r2, [r7, #12]
     bd8:	3a08      	subs	r2, #8
     bda:	4496      	add	lr, r2
     bdc:	461c      	mov	r4, r3
     bde:	462a      	mov	r2, r5
     be0:	2100      	movs	r1, #0
     be2:	469c      	mov	ip, r3
     be4:	f852 0f04 	ldr.w	r0, [r2, #4]!
     be8:	1a40      	subs	r0, r0, r1
     bea:	eb60 0100 	sbc.w	r1, r0, r0
     bee:	f856 3f04 	ldr.w	r3, [r6, #4]!
     bf2:	1ac0      	subs	r0, r0, r3
     bf4:	f161 0100 	sbc.w	r1, r1, #0
     bf8:	f844 0f04 	str.w	r0, [r4, #4]!
     bfc:	f001 0101 	and.w	r1, r1, #1
     c00:	4572      	cmp	r2, lr
     c02:	d1ef      	bne.n	be4 <mul_mont_n+0xba>
     c04:	4663      	mov	r3, ip
     c06:	6a3a      	ldr	r2, [r7, #32]
     c08:	1a54      	subs	r4, r2, r1
     c0a:	687a      	ldr	r2, [r7, #4]
     c0c:	68f9      	ldr	r1, [r7, #12]
     c0e:	440a      	add	r2, r1
     c10:	f1a2 0008 	sub.w	r0, r2, #8
     c14:	f853 1f04 	ldr.w	r1, [r3, #4]!
     c18:	f855 2f04 	ldr.w	r2, [r5, #4]!
     c1c:	404a      	eors	r2, r1
     c1e:	4022      	ands	r2, r4
     c20:	404a      	eors	r2, r1
     c22:	601a      	str	r2, [r3, #0]
     c24:	4283      	cmp	r3, r0
     c26:	d1f5      	bne.n	c14 <mul_mont_n+0xea>
     c28:	372c      	adds	r7, #44	; 0x2c
     c2a:	46bd      	mov	sp, r7
     c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c30:	f852 5f04 	ldr.w	r5, [r2, #4]!
     c34:	f853 6f04 	ldr.w	r6, [r3, #4]!
     c38:	2100      	movs	r1, #0
     c3a:	1980      	adds	r0, r0, r6
     c3c:	f141 0100 	adc.w	r1, r1, #0
     c40:	fbe4 0105 	umlal	r0, r1, r4, r5
     c44:	6018      	str	r0, [r3, #0]
     c46:	4608      	mov	r0, r1
     c48:	4562      	cmp	r2, ip
     c4a:	d1f1      	bne.n	c30 <mul_mont_n+0x106>
     c4c:	4676      	mov	r6, lr
     c4e:	46ce      	mov	lr, r9
     c50:	69fb      	ldr	r3, [r7, #28]
     c52:	f8de 2000 	ldr.w	r2, [lr]
     c56:	6d39      	ldr	r1, [r7, #80]	; 0x50
     c58:	fb02 f201 	mul.w	r2, r2, r1
     c5c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
     c60:	1824      	adds	r4, r4, r0
     c62:	f145 0500 	adc.w	r5, r5, #0
     c66:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]
     c6a:	46a9      	mov	r9, r5
     c6c:	4615      	mov	r5, r2
     c6e:	69bb      	ldr	r3, [r7, #24]
     c70:	fba2 2303 	umull	r2, r3, r2, r3
     c74:	f8de 1000 	ldr.w	r1, [lr]
     c78:	1852      	adds	r2, r2, r1
     c7a:	f143 0300 	adc.w	r3, r3, #0
     c7e:	461c      	mov	r4, r3
     c80:	f1ba 0f01 	cmp.w	sl, #1
     c84:	d99c      	bls.n	bc0 <mul_mont_n+0x96>
     c86:	4670      	mov	r0, lr
     c88:	6939      	ldr	r1, [r7, #16]
     c8a:	f851 2f04 	ldr.w	r2, [r1, #4]!
     c8e:	fba2 2305 	umull	r2, r3, r2, r5
     c92:	1912      	adds	r2, r2, r4
     c94:	f143 0300 	adc.w	r3, r3, #0
     c98:	6844      	ldr	r4, [r0, #4]
     c9a:	1912      	adds	r2, r2, r4
     c9c:	f143 0300 	adc.w	r3, r3, #0
     ca0:	f840 2b04 	str.w	r2, [r0], #4
     ca4:	461c      	mov	r4, r3
     ca6:	42b1      	cmp	r1, r6
     ca8:	d1ef      	bne.n	c8a <mul_mont_n+0x160>
     caa:	69fb      	ldr	r3, [r7, #28]
     cac:	eb0e 0183 	add.w	r1, lr, r3, lsl #2
     cb0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
     cb4:	2300      	movs	r3, #0
     cb6:	eb19 0204 	adds.w	r2, r9, r4
     cba:	f143 0300 	adc.w	r3, r3, #0
     cbe:	1812      	adds	r2, r2, r0
     cc0:	f143 0300 	adc.w	r3, r3, #0
     cc4:	f841 2c04 	str.w	r2, [r1, #-4]
     cc8:	623b      	str	r3, [r7, #32]
     cca:	2300      	movs	r3, #0
     ccc:	627b      	str	r3, [r7, #36]	; 0x24
     cce:	45d8      	cmp	r8, fp
     cd0:	f43f af78 	beq.w	bc4 <mul_mont_n+0x9a>
     cd4:	f858 4f04 	ldr.w	r4, [r8, #4]!
     cd8:	f1ba 0f00 	cmp.w	sl, #0
     cdc:	d007      	beq.n	cee <mul_mont_n+0x1c4>
     cde:	697b      	ldr	r3, [r7, #20]
     ce0:	1f1a      	subs	r2, r3, #4
     ce2:	f1ae 0304 	sub.w	r3, lr, #4
     ce6:	2000      	movs	r0, #0
     ce8:	46f1      	mov	r9, lr
     cea:	46b6      	mov	lr, r6
     cec:	e7a0      	b.n	c30 <mul_mont_n+0x106>
     cee:	69f8      	ldr	r0, [r7, #28]
     cf0:	4603      	mov	r3, r0
     cf2:	e7ae      	b.n	c52 <mul_mont_n+0x128>

00000cf4 <map_fp_times_Zz>:
     cf4:	b303      	cbz	r3, d38 <map_fp_times_Zz+0x44>
     cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     cfa:	b083      	sub	sp, #12
     cfc:	4606      	mov	r6, r0
     cfe:	460f      	mov	r7, r1
     d00:	eb03 0443 	add.w	r4, r3, r3, lsl #1
     d04:	0124      	lsls	r4, r4, #4
     d06:	f8df 9034 	ldr.w	r9, [pc, #52]	; d3c <map_fp_times_Zz+0x48>
     d0a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
     d0e:	f8df 8030 	ldr.w	r8, [pc, #48]	; d40 <map_fp_times_Zz+0x4c>
     d12:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
     d16:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
     d1a:	230c      	movs	r3, #12
     d1c:	9301      	str	r3, [sp, #4]
     d1e:	f8cd 8000 	str.w	r8, [sp]
     d22:	464b      	mov	r3, r9
     d24:	192a      	adds	r2, r5, r4
     d26:	4421      	add	r1, r4
     d28:	4420      	add	r0, r4
     d2a:	f7ff fefe 	bl	b2a <mul_mont_n>
     d2e:	3c30      	subs	r4, #48	; 0x30
     d30:	d1ef      	bne.n	d12 <map_fp_times_Zz+0x1e>
     d32:	b003      	add	sp, #12
     d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d38:	4770      	bx	lr
     d3a:	bf00      	nop
     d3c:	0001ade8 	.word	0x0001ade8
     d40:	fffcfffd 	.word	0xfffcfffd

00000d44 <sigma>:
     d44:	b530      	push	{r4, r5, lr}
     d46:	b083      	sub	sp, #12
     d48:	1f0b      	subs	r3, r1, #4
     d4a:	1f02      	subs	r2, r0, #4
     d4c:	f101 055c 	add.w	r5, r1, #92	; 0x5c
     d50:	f853 4f04 	ldr.w	r4, [r3, #4]!
     d54:	f842 4f04 	str.w	r4, [r2, #4]!
     d58:	42ab      	cmp	r3, r5
     d5a:	d1f9      	bne.n	d50 <sigma+0xc>
     d5c:	4b06      	ldr	r3, [pc, #24]	; (d78 <sigma+0x34>)
     d5e:	220c      	movs	r2, #12
     d60:	9201      	str	r2, [sp, #4]
     d62:	4a06      	ldr	r2, [pc, #24]	; (d7c <sigma+0x38>)
     d64:	9200      	str	r2, [sp, #0]
     d66:	f103 0230 	add.w	r2, r3, #48	; 0x30
     d6a:	3160      	adds	r1, #96	; 0x60
     d6c:	3060      	adds	r0, #96	; 0x60
     d6e:	f7ff fedc 	bl	b2a <mul_mont_n>
     d72:	b003      	add	sp, #12
     d74:	bd30      	pop	{r4, r5, pc}
     d76:	bf00      	nop
     d78:	0001ade8 	.word	0x0001ade8
     d7c:	fffcfffd 	.word	0xfffcfffd

00000d80 <line_by_Px2>:
     d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d84:	b082      	sub	sp, #8
     d86:	4604      	mov	r4, r0
     d88:	460d      	mov	r5, r1
     d8a:	3060      	adds	r0, #96	; 0x60
     d8c:	4e16      	ldr	r6, [pc, #88]	; (de8 <line_by_Px2+0x68>)
     d8e:	f04f 080c 	mov.w	r8, #12
     d92:	f8cd 8004 	str.w	r8, [sp, #4]
     d96:	4f15      	ldr	r7, [pc, #84]	; (dec <line_by_Px2+0x6c>)
     d98:	9700      	str	r7, [sp, #0]
     d9a:	4633      	mov	r3, r6
     d9c:	460a      	mov	r2, r1
     d9e:	4601      	mov	r1, r0
     da0:	f7ff fec3 	bl	b2a <mul_mont_n>
     da4:	f104 0090 	add.w	r0, r4, #144	; 0x90
     da8:	f8cd 8004 	str.w	r8, [sp, #4]
     dac:	9700      	str	r7, [sp, #0]
     dae:	4633      	mov	r3, r6
     db0:	462a      	mov	r2, r5
     db2:	4601      	mov	r1, r0
     db4:	f7ff feb9 	bl	b2a <mul_mont_n>
     db8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
     dbc:	3530      	adds	r5, #48	; 0x30
     dbe:	f8cd 8004 	str.w	r8, [sp, #4]
     dc2:	9700      	str	r7, [sp, #0]
     dc4:	4633      	mov	r3, r6
     dc6:	462a      	mov	r2, r5
     dc8:	4601      	mov	r1, r0
     dca:	f7ff feae 	bl	b2a <mul_mont_n>
     dce:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
     dd2:	f8cd 8004 	str.w	r8, [sp, #4]
     dd6:	9700      	str	r7, [sp, #0]
     dd8:	4633      	mov	r3, r6
     dda:	462a      	mov	r2, r5
     ddc:	4601      	mov	r1, r0
     dde:	f7ff fea4 	bl	b2a <mul_mont_n>
     de2:	b002      	add	sp, #8
     de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     de8:	0001ade8 	.word	0x0001ade8
     dec:	fffcfffd 	.word	0xfffcfffd

00000df0 <post_line_by_Px2>:
     df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     df4:	b083      	sub	sp, #12
     df6:	4681      	mov	r9, r0
     df8:	460f      	mov	r7, r1
     dfa:	4690      	mov	r8, r2
     dfc:	1f0b      	subs	r3, r1, #4
     dfe:	1f04      	subs	r4, r0, #4
     e00:	f101 065c 	add.w	r6, r1, #92	; 0x5c
     e04:	f853 5f04 	ldr.w	r5, [r3, #4]!
     e08:	f844 5f04 	str.w	r5, [r4, #4]!
     e0c:	42b3      	cmp	r3, r6
     e0e:	d1f9      	bne.n	e04 <post_line_by_Px2+0x14>
     e10:	4c17      	ldr	r4, [pc, #92]	; (e70 <post_line_by_Px2+0x80>)
     e12:	260c      	movs	r6, #12
     e14:	9601      	str	r6, [sp, #4]
     e16:	4d17      	ldr	r5, [pc, #92]	; (e74 <post_line_by_Px2+0x84>)
     e18:	9500      	str	r5, [sp, #0]
     e1a:	4623      	mov	r3, r4
     e1c:	4642      	mov	r2, r8
     e1e:	f107 0160 	add.w	r1, r7, #96	; 0x60
     e22:	f109 0060 	add.w	r0, r9, #96	; 0x60
     e26:	f7ff fe80 	bl	b2a <mul_mont_n>
     e2a:	9601      	str	r6, [sp, #4]
     e2c:	9500      	str	r5, [sp, #0]
     e2e:	4623      	mov	r3, r4
     e30:	4642      	mov	r2, r8
     e32:	f107 0190 	add.w	r1, r7, #144	; 0x90
     e36:	f109 0090 	add.w	r0, r9, #144	; 0x90
     e3a:	f7ff fe76 	bl	b2a <mul_mont_n>
     e3e:	f108 0830 	add.w	r8, r8, #48	; 0x30
     e42:	9601      	str	r6, [sp, #4]
     e44:	9500      	str	r5, [sp, #0]
     e46:	4623      	mov	r3, r4
     e48:	4642      	mov	r2, r8
     e4a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
     e4e:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
     e52:	f7ff fe6a 	bl	b2a <mul_mont_n>
     e56:	9601      	str	r6, [sp, #4]
     e58:	9500      	str	r5, [sp, #0]
     e5a:	4623      	mov	r3, r4
     e5c:	4642      	mov	r2, r8
     e5e:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
     e62:	f109 00f0 	add.w	r0, r9, #240	; 0xf0
     e66:	f7ff fe60 	bl	b2a <mul_mont_n>
     e6a:	b003      	add	sp, #12
     e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e70:	0001ade8 	.word	0x0001ade8
     e74:	fffcfffd 	.word	0xfffcfffd

00000e78 <POINTonE1_is_equal>:
     e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e7c:	b0cd      	sub	sp, #308	; 0x134
     e7e:	4681      	mov	r9, r0
     e80:	4688      	mov	r8, r1
     e82:	f100 0a60 	add.w	sl, r0, #96	; 0x60
     e86:	f100 035c 	add.w	r3, r0, #92	; 0x5c
     e8a:	308c      	adds	r0, #140	; 0x8c
     e8c:	2200      	movs	r2, #0
     e8e:	f853 1f04 	ldr.w	r1, [r3, #4]!
     e92:	430a      	orrs	r2, r1
     e94:	4283      	cmp	r3, r0
     e96:	d1fa      	bne.n	e8e <POINTonE1_is_equal+0x16>
     e98:	1e54      	subs	r4, r2, #1
     e9a:	ea24 0202 	bic.w	r2, r4, r2
     e9e:	0fd3      	lsrs	r3, r2, #31
     ea0:	9303      	str	r3, [sp, #12]
     ea2:	f108 0b60 	add.w	fp, r8, #96	; 0x60
     ea6:	f108 035c 	add.w	r3, r8, #92	; 0x5c
     eaa:	f108 008c 	add.w	r0, r8, #140	; 0x8c
     eae:	2200      	movs	r2, #0
     eb0:	f853 1f04 	ldr.w	r1, [r3, #4]!
     eb4:	430a      	orrs	r2, r1
     eb6:	4283      	cmp	r3, r0
     eb8:	d1fa      	bne.n	eb0 <POINTonE1_is_equal+0x38>
     eba:	1e54      	subs	r4, r2, #1
     ebc:	ea24 0402 	bic.w	r4, r4, r2
     ec0:	0fe4      	lsrs	r4, r4, #31
     ec2:	4d2f      	ldr	r5, [pc, #188]	; (f80 <POINTonE1_is_equal+0x108>)
     ec4:	270c      	movs	r7, #12
     ec6:	9701      	str	r7, [sp, #4]
     ec8:	4e2e      	ldr	r6, [pc, #184]	; (f84 <POINTonE1_is_equal+0x10c>)
     eca:	9600      	str	r6, [sp, #0]
     ecc:	462b      	mov	r3, r5
     ece:	4652      	mov	r2, sl
     ed0:	4651      	mov	r1, sl
     ed2:	a840      	add	r0, sp, #256	; 0x100
     ed4:	f7ff fe29 	bl	b2a <mul_mont_n>
     ed8:	9701      	str	r7, [sp, #4]
     eda:	9600      	str	r6, [sp, #0]
     edc:	462b      	mov	r3, r5
     ede:	465a      	mov	r2, fp
     ee0:	4659      	mov	r1, fp
     ee2:	a834      	add	r0, sp, #208	; 0xd0
     ee4:	f7ff fe21 	bl	b2a <mul_mont_n>
     ee8:	9701      	str	r7, [sp, #4]
     eea:	9600      	str	r6, [sp, #0]
     eec:	462b      	mov	r3, r5
     eee:	aa34      	add	r2, sp, #208	; 0xd0
     ef0:	4649      	mov	r1, r9
     ef2:	a81c      	add	r0, sp, #112	; 0x70
     ef4:	f7ff fe19 	bl	b2a <mul_mont_n>
     ef8:	9701      	str	r7, [sp, #4]
     efa:	9600      	str	r6, [sp, #0]
     efc:	462b      	mov	r3, r5
     efe:	aa40      	add	r2, sp, #256	; 0x100
     f00:	4641      	mov	r1, r8
     f02:	a804      	add	r0, sp, #16
     f04:	f7ff fe11 	bl	b2a <mul_mont_n>
     f08:	9701      	str	r7, [sp, #4]
     f0a:	9600      	str	r6, [sp, #0]
     f0c:	462b      	mov	r3, r5
     f0e:	465a      	mov	r2, fp
     f10:	f109 0130 	add.w	r1, r9, #48	; 0x30
     f14:	a828      	add	r0, sp, #160	; 0xa0
     f16:	f7ff fe08 	bl	b2a <mul_mont_n>
     f1a:	9701      	str	r7, [sp, #4]
     f1c:	9600      	str	r6, [sp, #0]
     f1e:	462b      	mov	r3, r5
     f20:	4652      	mov	r2, sl
     f22:	f108 0130 	add.w	r1, r8, #48	; 0x30
     f26:	a810      	add	r0, sp, #64	; 0x40
     f28:	f7ff fdff 	bl	b2a <mul_mont_n>
     f2c:	9701      	str	r7, [sp, #4]
     f2e:	9600      	str	r6, [sp, #0]
     f30:	462b      	mov	r3, r5
     f32:	aa34      	add	r2, sp, #208	; 0xd0
     f34:	a928      	add	r1, sp, #160	; 0xa0
     f36:	4608      	mov	r0, r1
     f38:	f7ff fdf7 	bl	b2a <mul_mont_n>
     f3c:	9701      	str	r7, [sp, #4]
     f3e:	9600      	str	r6, [sp, #0]
     f40:	462b      	mov	r3, r5
     f42:	aa40      	add	r2, sp, #256	; 0x100
     f44:	a910      	add	r1, sp, #64	; 0x40
     f46:	4608      	mov	r0, r1
     f48:	f7ff fdef 	bl	b2a <mul_mont_n>
     f4c:	aa1b      	add	r2, sp, #108	; 0x6c
     f4e:	eb0d 0107 	add.w	r1, sp, r7
     f52:	ae33      	add	r6, sp, #204	; 0xcc
     f54:	2000      	movs	r0, #0
     f56:	f852 3f04 	ldr.w	r3, [r2, #4]!
     f5a:	f851 5f04 	ldr.w	r5, [r1, #4]!
     f5e:	406b      	eors	r3, r5
     f60:	4318      	orrs	r0, r3
     f62:	42b2      	cmp	r2, r6
     f64:	d1f7      	bne.n	f56 <POINTonE1_is_equal+0xde>
     f66:	1e43      	subs	r3, r0, #1
     f68:	ea23 0000 	bic.w	r0, r3, r0
     f6c:	9b03      	ldr	r3, [sp, #12]
     f6e:	405c      	eors	r4, r3
     f70:	f084 0401 	eor.w	r4, r4, #1
     f74:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
     f78:	b04d      	add	sp, #308	; 0x134
     f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f7e:	bf00      	nop
     f80:	0001ade8 	.word	0x0001ade8
     f84:	fffcfffd 	.word	0xfffcfffd

00000f88 <POINTonE1_tail>:
     f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f8c:	b091      	sub	sp, #68	; 0x44
     f8e:	9003      	str	r0, [sp, #12]
     f90:	460d      	mov	r5, r1
     f92:	4690      	mov	r8, r2
     f94:	f101 04ec 	add.w	r4, r1, #236	; 0xec
     f98:	f501 778e 	add.w	r7, r1, #284	; 0x11c
     f9c:	4623      	mov	r3, r4
     f9e:	2600      	movs	r6, #0
     fa0:	f853 2f04 	ldr.w	r2, [r3, #4]!
     fa4:	4316      	orrs	r6, r2
     fa6:	42bb      	cmp	r3, r7
     fa8:	d1fa      	bne.n	fa0 <POINTonE1_tail+0x18>
     faa:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1078 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x78>
     fae:	f105 0b90 	add.w	fp, r5, #144	; 0x90
     fb2:	f04f 0a0c 	mov.w	sl, #12
     fb6:	f8cd a004 	str.w	sl, [sp, #4]
     fba:	4b2d      	ldr	r3, [pc, #180]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
     fbc:	9300      	str	r3, [sp, #0]
     fbe:	464b      	mov	r3, r9
     fc0:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
     fc4:	4641      	mov	r1, r8
     fc6:	4640      	mov	r0, r8
     fc8:	f7ff fdaf 	bl	b2a <mul_mont_n>
     fcc:	f8cd a004 	str.w	sl, [sp, #4]
     fd0:	4b27      	ldr	r3, [pc, #156]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
     fd2:	9300      	str	r3, [sp, #0]
     fd4:	464b      	mov	r3, r9
     fd6:	4642      	mov	r2, r8
     fd8:	4641      	mov	r1, r8
     fda:	a804      	add	r0, sp, #16
     fdc:	f7ff fda5 	bl	b2a <mul_mont_n>
     fe0:	f8cd a000 	str.w	sl, [sp]
     fe4:	464b      	mov	r3, r9
     fe6:	465a      	mov	r2, fp
     fe8:	a904      	add	r1, sp, #16
     fea:	f8dd b00c 	ldr.w	fp, [sp, #12]
     fee:	4658      	mov	r0, fp
     ff0:	f7ff fb91 	bl	716 <sub_mod_n>
     ff4:	465a      	mov	r2, fp
     ff6:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
     ffa:	f8cd a000 	str.w	sl, [sp]
     ffe:	464b      	mov	r3, r9
    1000:	9203      	str	r2, [sp, #12]
    1002:	4629      	mov	r1, r5
    1004:	4658      	mov	r0, fp
    1006:	f7ff fb86 	bl	716 <sub_mod_n>
    100a:	f8cd a004 	str.w	sl, [sp, #4]
    100e:	4b18      	ldr	r3, [pc, #96]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
    1010:	9300      	str	r3, [sp, #0]
    1012:	464b      	mov	r3, r9
    1014:	4642      	mov	r2, r8
    1016:	4659      	mov	r1, fp
    1018:	4658      	mov	r0, fp
    101a:	f7ff fd86 	bl	b2a <mul_mont_n>
    101e:	f8cd a000 	str.w	sl, [sp]
    1022:	464b      	mov	r3, r9
    1024:	f105 0230 	add.w	r2, r5, #48	; 0x30
    1028:	4659      	mov	r1, fp
    102a:	4658      	mov	r0, fp
    102c:	f7ff fb73 	bl	716 <sub_mod_n>
    1030:	1e73      	subs	r3, r6, #1
    1032:	ea23 0606 	bic.w	r6, r3, r6
    1036:	17f6      	asrs	r6, r6, #31
    1038:	1f2a      	subs	r2, r5, #4
    103a:	9b03      	ldr	r3, [sp, #12]
    103c:	1f18      	subs	r0, r3, #4
    103e:	355c      	adds	r5, #92	; 0x5c
    1040:	f850 1f04 	ldr.w	r1, [r0, #4]!
    1044:	f852 3f04 	ldr.w	r3, [r2, #4]!
    1048:	2e00      	cmp	r6, #0
    104a:	bf08      	it	eq
    104c:	460b      	moveq	r3, r1
    104e:	6003      	str	r3, [r0, #0]
    1050:	42aa      	cmp	r2, r5
    1052:	d1f5      	bne.n	1040 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x40>
    1054:	4a07      	ldr	r2, [pc, #28]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
    1056:	f852 3b04 	ldr.w	r3, [r2], #4
    105a:	f854 1f04 	ldr.w	r1, [r4, #4]!
    105e:	2e00      	cmp	r6, #0
    1060:	bf08      	it	eq
    1062:	460b      	moveq	r3, r1
    1064:	6023      	str	r3, [r4, #0]
    1066:	42bc      	cmp	r4, r7
    1068:	d1f5      	bne.n	1056 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x56>
    106a:	b011      	add	sp, #68	; 0x44
    106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1070:	fffcfffd 	.word	0xfffcfffd
    1074:	0001ae48 	.word	0x0001ae48
    1078:	0001ade8 	.word	0x0001ade8

0000107c <add_mod_n>:
    107c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1080:	af00      	add	r7, sp, #0
    1082:	4682      	mov	sl, r0
    1084:	469b      	mov	fp, r3
    1086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1088:	ea4f 0e80 	mov.w	lr, r0, lsl #2
    108c:	f10e 0307 	add.w	r3, lr, #7
    1090:	f023 0307 	bic.w	r3, r3, #7
    1094:	ebad 0d03 	sub.w	sp, sp, r3
    1098:	2800      	cmp	r0, #0
    109a:	d042      	beq.n	1122 <add_mod_n+0xa6>
    109c:	46e8      	mov	r8, sp
    109e:	3904      	subs	r1, #4
    10a0:	3a04      	subs	r2, #4
    10a2:	f1a8 0004 	sub.w	r0, r8, #4
    10a6:	eb01 0c0e 	add.w	ip, r1, lr
    10aa:	4606      	mov	r6, r0
    10ac:	2300      	movs	r3, #0
    10ae:	f851 9f04 	ldr.w	r9, [r1, #4]!
    10b2:	f852 4f04 	ldr.w	r4, [r2, #4]!
    10b6:	2500      	movs	r5, #0
    10b8:	eb14 0409 	adds.w	r4, r4, r9
    10bc:	f145 0500 	adc.w	r5, r5, #0
    10c0:	18e4      	adds	r4, r4, r3
    10c2:	f145 0500 	adc.w	r5, r5, #0
    10c6:	f846 4f04 	str.w	r4, [r6, #4]!
    10ca:	462b      	mov	r3, r5
    10cc:	4561      	cmp	r1, ip
    10ce:	d1ee      	bne.n	10ae <add_mod_n+0x32>
    10d0:	f1ab 0c04 	sub.w	ip, fp, #4
    10d4:	f1aa 0204 	sub.w	r2, sl, #4
    10d8:	f1ae 0104 	sub.w	r1, lr, #4
    10dc:	4488      	add	r8, r1
    10de:	4616      	mov	r6, r2
    10e0:	4601      	mov	r1, r0
    10e2:	2400      	movs	r4, #0
    10e4:	f851 5f04 	ldr.w	r5, [r1, #4]!
    10e8:	1b2c      	subs	r4, r5, r4
    10ea:	eb65 0505 	sbc.w	r5, r5, r5
    10ee:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    10f2:	ebb4 0409 	subs.w	r4, r4, r9
    10f6:	f165 0500 	sbc.w	r5, r5, #0
    10fa:	f846 4f04 	str.w	r4, [r6, #4]!
    10fe:	f005 0401 	and.w	r4, r5, #1
    1102:	4541      	cmp	r1, r8
    1104:	d1ee      	bne.n	10e4 <add_mod_n+0x68>
    1106:	1b1c      	subs	r4, r3, r4
    1108:	f1aa 0a04 	sub.w	sl, sl, #4
    110c:	44d6      	add	lr, sl
    110e:	f852 3f04 	ldr.w	r3, [r2, #4]!
    1112:	f850 1f04 	ldr.w	r1, [r0, #4]!
    1116:	4059      	eors	r1, r3
    1118:	4021      	ands	r1, r4
    111a:	4059      	eors	r1, r3
    111c:	6011      	str	r1, [r2, #0]
    111e:	4572      	cmp	r2, lr
    1120:	d1f5      	bne.n	110e <add_mod_n+0x92>
    1122:	46bd      	mov	sp, r7
    1124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001128 <POINTonE1_affine_on_curve>:
    1128:	b5f0      	push	{r4, r5, r6, r7, lr}
    112a:	b09b      	sub	sp, #108	; 0x6c
    112c:	4604      	mov	r4, r0
    112e:	4d1b      	ldr	r5, [pc, #108]	; (119c <POINTonE1_affine_on_curve+0x74>)
    1130:	260c      	movs	r6, #12
    1132:	9601      	str	r6, [sp, #4]
    1134:	4f1a      	ldr	r7, [pc, #104]	; (11a0 <POINTonE1_affine_on_curve+0x78>)
    1136:	9700      	str	r7, [sp, #0]
    1138:	462b      	mov	r3, r5
    113a:	4602      	mov	r2, r0
    113c:	4601      	mov	r1, r0
    113e:	a80e      	add	r0, sp, #56	; 0x38
    1140:	f7ff fcf3 	bl	b2a <mul_mont_n>
    1144:	9601      	str	r6, [sp, #4]
    1146:	9700      	str	r7, [sp, #0]
    1148:	462b      	mov	r3, r5
    114a:	4622      	mov	r2, r4
    114c:	a90e      	add	r1, sp, #56	; 0x38
    114e:	4608      	mov	r0, r1
    1150:	f7ff fceb 	bl	b2a <mul_mont_n>
    1154:	9600      	str	r6, [sp, #0]
    1156:	462b      	mov	r3, r5
    1158:	f505 7228 	add.w	r2, r5, #672	; 0x2a0
    115c:	a90e      	add	r1, sp, #56	; 0x38
    115e:	4608      	mov	r0, r1
    1160:	f7ff ff8c 	bl	107c <add_mod_n>
    1164:	f104 0130 	add.w	r1, r4, #48	; 0x30
    1168:	9601      	str	r6, [sp, #4]
    116a:	9700      	str	r7, [sp, #0]
    116c:	462b      	mov	r3, r5
    116e:	460a      	mov	r2, r1
    1170:	a802      	add	r0, sp, #8
    1172:	f7ff fcda 	bl	b2a <mul_mont_n>
    1176:	aa0e      	add	r2, sp, #56	; 0x38
    1178:	a902      	add	r1, sp, #8
    117a:	ad1a      	add	r5, sp, #104	; 0x68
    117c:	2000      	movs	r0, #0
    117e:	f852 3b04 	ldr.w	r3, [r2], #4
    1182:	f851 4b04 	ldr.w	r4, [r1], #4
    1186:	4063      	eors	r3, r4
    1188:	4318      	orrs	r0, r3
    118a:	42aa      	cmp	r2, r5
    118c:	d1f7      	bne.n	117e <POINTonE1_affine_on_curve+0x56>
    118e:	1e43      	subs	r3, r0, #1
    1190:	ea23 0000 	bic.w	r0, r3, r0
    1194:	0fc0      	lsrs	r0, r0, #31
    1196:	b01b      	add	sp, #108	; 0x6c
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119a:	bf00      	nop
    119c:	0001ade8 	.word	0x0001ade8
    11a0:	fffcfffd 	.word	0xfffcfffd

000011a4 <map_fp>:
    11a4:	b32b      	cbz	r3, 11f2 <map_fp+0x4e>
    11a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11aa:	b082      	sub	sp, #8
    11ac:	4605      	mov	r5, r0
    11ae:	4689      	mov	r9, r1
    11b0:	4690      	mov	r8, r2
    11b2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    11b6:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    11ba:	3c30      	subs	r4, #48	; 0x30
    11bc:	4f0d      	ldr	r7, [pc, #52]	; (11f4 <map_fp+0x50>)
    11be:	260c      	movs	r6, #12
    11c0:	f8df a034 	ldr.w	sl, [pc, #52]	; 11f8 <map_fp+0x54>
    11c4:	9601      	str	r6, [sp, #4]
    11c6:	f8cd a000 	str.w	sl, [sp]
    11ca:	463b      	mov	r3, r7
    11cc:	464a      	mov	r2, r9
    11ce:	4629      	mov	r1, r5
    11d0:	4628      	mov	r0, r5
    11d2:	f7ff fcaa 	bl	b2a <mul_mont_n>
    11d6:	9600      	str	r6, [sp, #0]
    11d8:	463b      	mov	r3, r7
    11da:	4622      	mov	r2, r4
    11dc:	4629      	mov	r1, r5
    11de:	4628      	mov	r0, r5
    11e0:	f7ff ff4c 	bl	107c <add_mod_n>
    11e4:	4544      	cmp	r4, r8
    11e6:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
    11ea:	d1eb      	bne.n	11c4 <map_fp+0x20>
    11ec:	b002      	add	sp, #8
    11ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11f2:	4770      	bx	lr
    11f4:	0001ade8 	.word	0x0001ade8
    11f8:	fffcfffd 	.word	0xfffcfffd

000011fc <isogeny_map_to_E1>:
    11fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1200:	f2ad 6d6c 	subw	sp, sp, #1644	; 0x66c
    1204:	4607      	mov	r7, r0
    1206:	4688      	mov	r8, r1
    1208:	f101 0960 	add.w	r9, r1, #96	; 0x60
    120c:	4cad      	ldr	r4, [pc, #692]	; (14c4 <isogeny_map_to_E1+0x2c8>)
    120e:	250c      	movs	r5, #12
    1210:	9501      	str	r5, [sp, #4]
    1212:	4ead      	ldr	r6, [pc, #692]	; (14c8 <isogeny_map_to_E1+0x2cc>)
    1214:	9600      	str	r6, [sp, #0]
    1216:	4623      	mov	r3, r4
    1218:	464a      	mov	r2, r9
    121a:	4649      	mov	r1, r9
    121c:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    1220:	f7ff fc83 	bl	b2a <mul_mont_n>
    1224:	9501      	str	r5, [sp, #4]
    1226:	9600      	str	r6, [sp, #0]
    1228:	4623      	mov	r3, r4
    122a:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    122e:	4611      	mov	r1, r2
    1230:	f50d 60c1 	add.w	r0, sp, #1544	; 0x608
    1234:	f7ff fc79 	bl	b2a <mul_mont_n>
    1238:	9501      	str	r5, [sp, #4]
    123a:	9600      	str	r6, [sp, #0]
    123c:	4623      	mov	r3, r4
    123e:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
    1242:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    1246:	f50d 60bb 	add.w	r0, sp, #1496	; 0x5d8
    124a:	f7ff fc6e 	bl	b2a <mul_mont_n>
    124e:	9501      	str	r5, [sp, #4]
    1250:	9600      	str	r6, [sp, #0]
    1252:	4623      	mov	r3, r4
    1254:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
    1258:	4611      	mov	r1, r2
    125a:	f50d 60b5 	add.w	r0, sp, #1448	; 0x5a8
    125e:	f7ff fc64 	bl	b2a <mul_mont_n>
    1262:	9501      	str	r5, [sp, #4]
    1264:	9600      	str	r6, [sp, #0]
    1266:	4623      	mov	r3, r4
    1268:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
    126c:	f50d 61c1 	add.w	r1, sp, #1544	; 0x608
    1270:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
    1274:	f7ff fc59 	bl	b2a <mul_mont_n>
    1278:	9501      	str	r5, [sp, #4]
    127a:	9600      	str	r6, [sp, #0]
    127c:	4623      	mov	r3, r4
    127e:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
    1282:	4611      	mov	r1, r2
    1284:	f50d 60a9 	add.w	r0, sp, #1352	; 0x548
    1288:	f7ff fc4f 	bl	b2a <mul_mont_n>
    128c:	9501      	str	r5, [sp, #4]
    128e:	9600      	str	r6, [sp, #0]
    1290:	4623      	mov	r3, r4
    1292:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
    1296:	f50d 61bb 	add.w	r1, sp, #1496	; 0x5d8
    129a:	f50d 60a3 	add.w	r0, sp, #1304	; 0x518
    129e:	f7ff fc44 	bl	b2a <mul_mont_n>
    12a2:	9501      	str	r5, [sp, #4]
    12a4:	9600      	str	r6, [sp, #0]
    12a6:	4623      	mov	r3, r4
    12a8:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
    12ac:	4611      	mov	r1, r2
    12ae:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
    12b2:	f7ff fc3a 	bl	b2a <mul_mont_n>
    12b6:	9501      	str	r5, [sp, #4]
    12b8:	9600      	str	r6, [sp, #0]
    12ba:	4623      	mov	r3, r4
    12bc:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    12c0:	f50d 61b5 	add.w	r1, sp, #1448	; 0x5a8
    12c4:	f50d 6097 	add.w	r0, sp, #1208	; 0x4b8
    12c8:	f7ff fc2f 	bl	b2a <mul_mont_n>
    12cc:	9501      	str	r5, [sp, #4]
    12ce:	9600      	str	r6, [sp, #0]
    12d0:	4623      	mov	r3, r4
    12d2:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    12d6:	4611      	mov	r1, r2
    12d8:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
    12dc:	f7ff fc25 	bl	b2a <mul_mont_n>
    12e0:	9501      	str	r5, [sp, #4]
    12e2:	9600      	str	r6, [sp, #0]
    12e4:	4623      	mov	r3, r4
    12e6:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
    12ea:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
    12ee:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
    12f2:	f7ff fc1a 	bl	b2a <mul_mont_n>
    12f6:	9501      	str	r5, [sp, #4]
    12f8:	9600      	str	r6, [sp, #0]
    12fa:	4623      	mov	r3, r4
    12fc:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
    1300:	4611      	mov	r1, r2
    1302:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
    1306:	f7ff fc10 	bl	b2a <mul_mont_n>
    130a:	9501      	str	r5, [sp, #4]
    130c:	9600      	str	r6, [sp, #0]
    130e:	4623      	mov	r3, r4
    1310:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
    1314:	f50d 61a9 	add.w	r1, sp, #1352	; 0x548
    1318:	a8fe      	add	r0, sp, #1016	; 0x3f8
    131a:	f7ff fc06 	bl	b2a <mul_mont_n>
    131e:	9501      	str	r5, [sp, #4]
    1320:	9600      	str	r6, [sp, #0]
    1322:	4623      	mov	r3, r4
    1324:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
    1328:	4611      	mov	r1, r2
    132a:	a8f2      	add	r0, sp, #968	; 0x3c8
    132c:	f7ff fbfd 	bl	b2a <mul_mont_n>
    1330:	9501      	str	r5, [sp, #4]
    1332:	9600      	str	r6, [sp, #0]
    1334:	4623      	mov	r3, r4
    1336:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
    133a:	f50d 61a3 	add.w	r1, sp, #1304	; 0x518
    133e:	a8e6      	add	r0, sp, #920	; 0x398
    1340:	f7ff fbf3 	bl	b2a <mul_mont_n>
    1344:	230b      	movs	r3, #11
    1346:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
    134a:	f504 7134 	add.w	r1, r4, #720	; 0x2d0
    134e:	a832      	add	r0, sp, #200	; 0xc8
    1350:	f7ff fcd0 	bl	cf4 <map_fp_times_Zz>
    1354:	9501      	str	r5, [sp, #4]
    1356:	9600      	str	r6, [sp, #0]
    1358:	4623      	mov	r3, r4
    135a:	f504 629c 	add.w	r2, r4, #1248	; 0x4e0
    135e:	4641      	mov	r1, r8
    1360:	a826      	add	r0, sp, #152	; 0x98
    1362:	f7ff fbe2 	bl	b2a <mul_mont_n>
    1366:	9500      	str	r5, [sp, #0]
    1368:	4623      	mov	r3, r4
    136a:	aaaa      	add	r2, sp, #680	; 0x2a8
    136c:	a926      	add	r1, sp, #152	; 0x98
    136e:	4608      	mov	r0, r1
    1370:	f7ff fe84 	bl	107c <add_mod_n>
    1374:	230a      	movs	r3, #10
    1376:	aa32      	add	r2, sp, #200	; 0xc8
    1378:	4641      	mov	r1, r8
    137a:	a826      	add	r0, sp, #152	; 0x98
    137c:	f7ff ff12 	bl	11a4 <map_fp>
    1380:	230a      	movs	r3, #10
    1382:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
    1386:	f504 61a2 	add.w	r1, r4, #1296	; 0x510
    138a:	a832      	add	r0, sp, #200	; 0xc8
    138c:	f7ff fcb2 	bl	cf4 <map_fp_times_Zz>
    1390:	9500      	str	r5, [sp, #0]
    1392:	4623      	mov	r3, r4
    1394:	aa9e      	add	r2, sp, #632	; 0x278
    1396:	4641      	mov	r1, r8
    1398:	a81a      	add	r0, sp, #104	; 0x68
    139a:	f7ff fe6f 	bl	107c <add_mod_n>
    139e:	2309      	movs	r3, #9
    13a0:	aa32      	add	r2, sp, #200	; 0xc8
    13a2:	4641      	mov	r1, r8
    13a4:	a81a      	add	r0, sp, #104	; 0x68
    13a6:	f7ff fefd 	bl	11a4 <map_fp>
    13aa:	9501      	str	r5, [sp, #4]
    13ac:	9600      	str	r6, [sp, #0]
    13ae:	4623      	mov	r3, r4
    13b0:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    13b4:	a91a      	add	r1, sp, #104	; 0x68
    13b6:	4608      	mov	r0, r1
    13b8:	f7ff fbb7 	bl	b2a <mul_mont_n>
    13bc:	230f      	movs	r3, #15
    13be:	aae6      	add	r2, sp, #920	; 0x398
    13c0:	f504 61de 	add.w	r1, r4, #1776	; 0x6f0
    13c4:	a832      	add	r0, sp, #200	; 0xc8
    13c6:	f7ff fc95 	bl	cf4 <map_fp_times_Zz>
    13ca:	9501      	str	r5, [sp, #4]
    13cc:	9600      	str	r6, [sp, #0]
    13ce:	4623      	mov	r3, r4
    13d0:	f504 621c 	add.w	r2, r4, #2496	; 0x9c0
    13d4:	4641      	mov	r1, r8
    13d6:	a80e      	add	r0, sp, #56	; 0x38
    13d8:	f7ff fba7 	bl	b2a <mul_mont_n>
    13dc:	9500      	str	r5, [sp, #0]
    13de:	4623      	mov	r3, r4
    13e0:	aada      	add	r2, sp, #872	; 0x368
    13e2:	a90e      	add	r1, sp, #56	; 0x38
    13e4:	4608      	mov	r0, r1
    13e6:	f7ff fe49 	bl	107c <add_mod_n>
    13ea:	230e      	movs	r3, #14
    13ec:	aa32      	add	r2, sp, #200	; 0xc8
    13ee:	4641      	mov	r1, r8
    13f0:	a80e      	add	r0, sp, #56	; 0x38
    13f2:	f7ff fed7 	bl	11a4 <map_fp>
    13f6:	9501      	str	r5, [sp, #4]
    13f8:	9600      	str	r6, [sp, #0]
    13fa:	4623      	mov	r3, r4
    13fc:	f108 0230 	add.w	r2, r8, #48	; 0x30
    1400:	a90e      	add	r1, sp, #56	; 0x38
    1402:	4608      	mov	r0, r1
    1404:	f7ff fb91 	bl	b2a <mul_mont_n>
    1408:	230f      	movs	r3, #15
    140a:	aae6      	add	r2, sp, #920	; 0x398
    140c:	f504 611f 	add.w	r1, r4, #2544	; 0x9f0
    1410:	a832      	add	r0, sp, #200	; 0xc8
    1412:	f7ff fc6f 	bl	cf4 <map_fp_times_Zz>
    1416:	9500      	str	r5, [sp, #0]
    1418:	4623      	mov	r3, r4
    141a:	aada      	add	r2, sp, #872	; 0x368
    141c:	4641      	mov	r1, r8
    141e:	a802      	add	r0, sp, #8
    1420:	f7ff fe2c 	bl	107c <add_mod_n>
    1424:	230e      	movs	r3, #14
    1426:	aa32      	add	r2, sp, #200	; 0xc8
    1428:	4641      	mov	r1, r8
    142a:	a802      	add	r0, sp, #8
    142c:	f7ff feba 	bl	11a4 <map_fp>
    1430:	9501      	str	r5, [sp, #4]
    1432:	9600      	str	r6, [sp, #0]
    1434:	4623      	mov	r3, r4
    1436:	464a      	mov	r2, r9
    1438:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    143c:	4608      	mov	r0, r1
    143e:	f7ff fb74 	bl	b2a <mul_mont_n>
    1442:	9501      	str	r5, [sp, #4]
    1444:	9600      	str	r6, [sp, #0]
    1446:	4623      	mov	r3, r4
    1448:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    144c:	a902      	add	r1, sp, #8
    144e:	4608      	mov	r0, r1
    1450:	f7ff fb6b 	bl	b2a <mul_mont_n>
    1454:	f107 0860 	add.w	r8, r7, #96	; 0x60
    1458:	9501      	str	r5, [sp, #4]
    145a:	9600      	str	r6, [sp, #0]
    145c:	4623      	mov	r3, r4
    145e:	aa02      	add	r2, sp, #8
    1460:	a91a      	add	r1, sp, #104	; 0x68
    1462:	4640      	mov	r0, r8
    1464:	f7ff fb61 	bl	b2a <mul_mont_n>
    1468:	9501      	str	r5, [sp, #4]
    146a:	9600      	str	r6, [sp, #0]
    146c:	4623      	mov	r3, r4
    146e:	aa02      	add	r2, sp, #8
    1470:	a926      	add	r1, sp, #152	; 0x98
    1472:	4638      	mov	r0, r7
    1474:	f7ff fb59 	bl	b2a <mul_mont_n>
    1478:	9501      	str	r5, [sp, #4]
    147a:	9600      	str	r6, [sp, #0]
    147c:	4623      	mov	r3, r4
    147e:	4642      	mov	r2, r8
    1480:	4639      	mov	r1, r7
    1482:	4638      	mov	r0, r7
    1484:	f7ff fb51 	bl	b2a <mul_mont_n>
    1488:	3730      	adds	r7, #48	; 0x30
    148a:	9501      	str	r5, [sp, #4]
    148c:	9600      	str	r6, [sp, #0]
    148e:	4623      	mov	r3, r4
    1490:	4642      	mov	r2, r8
    1492:	4641      	mov	r1, r8
    1494:	4638      	mov	r0, r7
    1496:	f7ff fb48 	bl	b2a <mul_mont_n>
    149a:	9501      	str	r5, [sp, #4]
    149c:	9600      	str	r6, [sp, #0]
    149e:	4623      	mov	r3, r4
    14a0:	aa1a      	add	r2, sp, #104	; 0x68
    14a2:	4639      	mov	r1, r7
    14a4:	4638      	mov	r0, r7
    14a6:	f7ff fb40 	bl	b2a <mul_mont_n>
    14aa:	9501      	str	r5, [sp, #4]
    14ac:	9600      	str	r6, [sp, #0]
    14ae:	4623      	mov	r3, r4
    14b0:	aa0e      	add	r2, sp, #56	; 0x38
    14b2:	4639      	mov	r1, r7
    14b4:	4638      	mov	r0, r7
    14b6:	f7ff fb38 	bl	b2a <mul_mont_n>
    14ba:	f20d 6d6c 	addw	sp, sp, #1644	; 0x66c
    14be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    14c2:	bf00      	nop
    14c4:	0001ade8 	.word	0x0001ade8
    14c8:	fffcfffd 	.word	0xfffcfffd

000014cc <POINTonE1_add>:
    14cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14d0:	b0fd      	sub	sp, #500	; 0x1f4
    14d2:	9003      	str	r0, [sp, #12]
    14d4:	460f      	mov	r7, r1
    14d6:	4616      	mov	r6, r2
    14d8:	f101 0a60 	add.w	sl, r1, #96	; 0x60
    14dc:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    14e0:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    14e4:	2200      	movs	r2, #0
    14e6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    14ea:	430a      	orrs	r2, r1
    14ec:	4283      	cmp	r3, r0
    14ee:	d1fa      	bne.n	14e6 <POINTonE1_add+0x1a>
    14f0:	1e53      	subs	r3, r2, #1
    14f2:	ea23 0202 	bic.w	r2, r3, r2
    14f6:	0fd3      	lsrs	r3, r2, #31
    14f8:	9302      	str	r3, [sp, #8]
    14fa:	4c95      	ldr	r4, [pc, #596]	; (1750 <POINTonE1_add+0x284>)
    14fc:	f04f 080c 	mov.w	r8, #12
    1500:	f8cd 8004 	str.w	r8, [sp, #4]
    1504:	4d93      	ldr	r5, [pc, #588]	; (1754 <POINTonE1_add+0x288>)
    1506:	9500      	str	r5, [sp, #0]
    1508:	4623      	mov	r3, r4
    150a:	4652      	mov	r2, sl
    150c:	4651      	mov	r1, sl
    150e:	a84c      	add	r0, sp, #304	; 0x130
    1510:	f7ff fb0b 	bl	b2a <mul_mont_n>
    1514:	f8cd 8004 	str.w	r8, [sp, #4]
    1518:	9500      	str	r5, [sp, #0]
    151a:	4623      	mov	r3, r4
    151c:	4652      	mov	r2, sl
    151e:	a94c      	add	r1, sp, #304	; 0x130
    1520:	a870      	add	r0, sp, #448	; 0x1c0
    1522:	f7ff fb02 	bl	b2a <mul_mont_n>
    1526:	f8cd 8004 	str.w	r8, [sp, #4]
    152a:	9500      	str	r5, [sp, #0]
    152c:	4623      	mov	r3, r4
    152e:	f106 0230 	add.w	r2, r6, #48	; 0x30
    1532:	a970      	add	r1, sp, #448	; 0x1c0
    1534:	4608      	mov	r0, r1
    1536:	f7ff faf8 	bl	b2a <mul_mont_n>
    153a:	f106 0b60 	add.w	fp, r6, #96	; 0x60
    153e:	f106 035c 	add.w	r3, r6, #92	; 0x5c
    1542:	f106 018c 	add.w	r1, r6, #140	; 0x8c
    1546:	f04f 0800 	mov.w	r8, #0
    154a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    154e:	ea48 0802 	orr.w	r8, r8, r2
    1552:	428b      	cmp	r3, r1
    1554:	d1f9      	bne.n	154a <POINTonE1_add+0x7e>
    1556:	4c7e      	ldr	r4, [pc, #504]	; (1750 <POINTonE1_add+0x284>)
    1558:	250c      	movs	r5, #12
    155a:	9501      	str	r5, [sp, #4]
    155c:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 1754 <POINTonE1_add+0x288>
    1560:	f8cd 9000 	str.w	r9, [sp]
    1564:	4623      	mov	r3, r4
    1566:	465a      	mov	r2, fp
    1568:	4659      	mov	r1, fp
    156a:	a840      	add	r0, sp, #256	; 0x100
    156c:	f7ff fadd 	bl	b2a <mul_mont_n>
    1570:	9501      	str	r5, [sp, #4]
    1572:	f8cd 9000 	str.w	r9, [sp]
    1576:	4623      	mov	r3, r4
    1578:	465a      	mov	r2, fp
    157a:	a940      	add	r1, sp, #256	; 0x100
    157c:	a828      	add	r0, sp, #160	; 0xa0
    157e:	f7ff fad4 	bl	b2a <mul_mont_n>
    1582:	9501      	str	r5, [sp, #4]
    1584:	f8cd 9000 	str.w	r9, [sp]
    1588:	4623      	mov	r3, r4
    158a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    158e:	a928      	add	r1, sp, #160	; 0xa0
    1590:	4608      	mov	r0, r1
    1592:	f7ff faca 	bl	b2a <mul_mont_n>
    1596:	9500      	str	r5, [sp, #0]
    1598:	4623      	mov	r3, r4
    159a:	aa28      	add	r2, sp, #160	; 0xa0
    159c:	a970      	add	r1, sp, #448	; 0x1c0
    159e:	4608      	mov	r0, r1
    15a0:	f7ff f8b9 	bl	716 <sub_mod_n>
    15a4:	9500      	str	r5, [sp, #0]
    15a6:	4623      	mov	r3, r4
    15a8:	aa70      	add	r2, sp, #448	; 0x1c0
    15aa:	4611      	mov	r1, r2
    15ac:	4610      	mov	r0, r2
    15ae:	f7ff fd65 	bl	107c <add_mod_n>
    15b2:	9501      	str	r5, [sp, #4]
    15b4:	f8cd 9000 	str.w	r9, [sp]
    15b8:	4623      	mov	r3, r4
    15ba:	aa40      	add	r2, sp, #256	; 0x100
    15bc:	4639      	mov	r1, r7
    15be:	a834      	add	r0, sp, #208	; 0xd0
    15c0:	f7ff fab3 	bl	b2a <mul_mont_n>
    15c4:	9501      	str	r5, [sp, #4]
    15c6:	f8cd 9000 	str.w	r9, [sp]
    15ca:	4623      	mov	r3, r4
    15cc:	aa4c      	add	r2, sp, #304	; 0x130
    15ce:	4631      	mov	r1, r6
    15d0:	a81c      	add	r0, sp, #112	; 0x70
    15d2:	f7ff faaa 	bl	b2a <mul_mont_n>
    15d6:	9500      	str	r5, [sp, #0]
    15d8:	4623      	mov	r3, r4
    15da:	aa34      	add	r2, sp, #208	; 0xd0
    15dc:	a91c      	add	r1, sp, #112	; 0x70
    15de:	4608      	mov	r0, r1
    15e0:	f7ff f899 	bl	716 <sub_mod_n>
    15e4:	9500      	str	r5, [sp, #0]
    15e6:	4623      	mov	r3, r4
    15e8:	aa1c      	add	r2, sp, #112	; 0x70
    15ea:	4611      	mov	r1, r2
    15ec:	a810      	add	r0, sp, #64	; 0x40
    15ee:	f7ff fd45 	bl	107c <add_mod_n>
    15f2:	9501      	str	r5, [sp, #4]
    15f4:	f8cd 9000 	str.w	r9, [sp]
    15f8:	4623      	mov	r3, r4
    15fa:	aa10      	add	r2, sp, #64	; 0x40
    15fc:	4611      	mov	r1, r2
    15fe:	4610      	mov	r0, r2
    1600:	f7ff fa93 	bl	b2a <mul_mont_n>
    1604:	9501      	str	r5, [sp, #4]
    1606:	f8cd 9000 	str.w	r9, [sp]
    160a:	4623      	mov	r3, r4
    160c:	aa10      	add	r2, sp, #64	; 0x40
    160e:	a91c      	add	r1, sp, #112	; 0x70
    1610:	a804      	add	r0, sp, #16
    1612:	f7ff fa8a 	bl	b2a <mul_mont_n>
    1616:	9501      	str	r5, [sp, #4]
    1618:	f8cd 9000 	str.w	r9, [sp]
    161c:	4623      	mov	r3, r4
    161e:	aa04      	add	r2, sp, #16
    1620:	a928      	add	r1, sp, #160	; 0xa0
    1622:	4608      	mov	r0, r1
    1624:	f7ff fa81 	bl	b2a <mul_mont_n>
    1628:	9501      	str	r5, [sp, #4]
    162a:	f8cd 9000 	str.w	r9, [sp]
    162e:	4623      	mov	r3, r4
    1630:	aa10      	add	r2, sp, #64	; 0x40
    1632:	a934      	add	r1, sp, #208	; 0xd0
    1634:	a864      	add	r0, sp, #400	; 0x190
    1636:	f7ff fa78 	bl	b2a <mul_mont_n>
    163a:	9501      	str	r5, [sp, #4]
    163c:	f8cd 9000 	str.w	r9, [sp]
    1640:	4623      	mov	r3, r4
    1642:	aa70      	add	r2, sp, #448	; 0x1c0
    1644:	4611      	mov	r1, r2
    1646:	a858      	add	r0, sp, #352	; 0x160
    1648:	f7ff fa6f 	bl	b2a <mul_mont_n>
    164c:	9500      	str	r5, [sp, #0]
    164e:	4623      	mov	r3, r4
    1650:	aa04      	add	r2, sp, #16
    1652:	a958      	add	r1, sp, #352	; 0x160
    1654:	4608      	mov	r0, r1
    1656:	f7ff f85e 	bl	716 <sub_mod_n>
    165a:	9500      	str	r5, [sp, #0]
    165c:	4623      	mov	r3, r4
    165e:	aa64      	add	r2, sp, #400	; 0x190
    1660:	a958      	add	r1, sp, #352	; 0x160
    1662:	4608      	mov	r0, r1
    1664:	f7ff f857 	bl	716 <sub_mod_n>
    1668:	9500      	str	r5, [sp, #0]
    166a:	4623      	mov	r3, r4
    166c:	aa64      	add	r2, sp, #400	; 0x190
    166e:	a958      	add	r1, sp, #352	; 0x160
    1670:	4608      	mov	r0, r1
    1672:	f7ff f850 	bl	716 <sub_mod_n>
    1676:	9500      	str	r5, [sp, #0]
    1678:	4623      	mov	r3, r4
    167a:	aa58      	add	r2, sp, #352	; 0x160
    167c:	a964      	add	r1, sp, #400	; 0x190
    167e:	4608      	mov	r0, r1
    1680:	f7ff f849 	bl	716 <sub_mod_n>
    1684:	9501      	str	r5, [sp, #4]
    1686:	f8cd 9000 	str.w	r9, [sp]
    168a:	4623      	mov	r3, r4
    168c:	aa70      	add	r2, sp, #448	; 0x1c0
    168e:	a964      	add	r1, sp, #400	; 0x190
    1690:	4608      	mov	r0, r1
    1692:	f7ff fa4a 	bl	b2a <mul_mont_n>
    1696:	9500      	str	r5, [sp, #0]
    1698:	4623      	mov	r3, r4
    169a:	aa28      	add	r2, sp, #160	; 0xa0
    169c:	a964      	add	r1, sp, #400	; 0x190
    169e:	4608      	mov	r0, r1
    16a0:	f7ff f839 	bl	716 <sub_mod_n>
    16a4:	9500      	str	r5, [sp, #0]
    16a6:	4623      	mov	r3, r4
    16a8:	aa28      	add	r2, sp, #160	; 0xa0
    16aa:	a964      	add	r1, sp, #400	; 0x190
    16ac:	4608      	mov	r0, r1
    16ae:	f7ff f832 	bl	716 <sub_mod_n>
    16b2:	9500      	str	r5, [sp, #0]
    16b4:	4623      	mov	r3, r4
    16b6:	465a      	mov	r2, fp
    16b8:	4651      	mov	r1, sl
    16ba:	a870      	add	r0, sp, #448	; 0x1c0
    16bc:	f7ff fcde 	bl	107c <add_mod_n>
    16c0:	9501      	str	r5, [sp, #4]
    16c2:	f8cd 9000 	str.w	r9, [sp]
    16c6:	4623      	mov	r3, r4
    16c8:	aa70      	add	r2, sp, #448	; 0x1c0
    16ca:	4611      	mov	r1, r2
    16cc:	4610      	mov	r0, r2
    16ce:	f7ff fa2c 	bl	b2a <mul_mont_n>
    16d2:	9500      	str	r5, [sp, #0]
    16d4:	4623      	mov	r3, r4
    16d6:	aa4c      	add	r2, sp, #304	; 0x130
    16d8:	a970      	add	r1, sp, #448	; 0x1c0
    16da:	4608      	mov	r0, r1
    16dc:	f7ff f81b 	bl	716 <sub_mod_n>
    16e0:	9500      	str	r5, [sp, #0]
    16e2:	4623      	mov	r3, r4
    16e4:	aa40      	add	r2, sp, #256	; 0x100
    16e6:	a970      	add	r1, sp, #448	; 0x1c0
    16e8:	4608      	mov	r0, r1
    16ea:	f7ff f814 	bl	716 <sub_mod_n>
    16ee:	9501      	str	r5, [sp, #4]
    16f0:	f8cd 9000 	str.w	r9, [sp]
    16f4:	4623      	mov	r3, r4
    16f6:	aa1c      	add	r2, sp, #112	; 0x70
    16f8:	a970      	add	r1, sp, #448	; 0x1c0
    16fa:	4608      	mov	r0, r1
    16fc:	f7ff fa15 	bl	b2a <mul_mont_n>
    1700:	f108 33ff 	add.w	r3, r8, #4294967295
    1704:	ea23 0808 	bic.w	r8, r3, r8
    1708:	ea4f 78e8 	mov.w	r8, r8, asr #31
    170c:	3f04      	subs	r7, #4
    170e:	ac58      	add	r4, sp, #352	; 0x160
    1710:	ad7c      	add	r5, sp, #496	; 0x1f0
    1712:	4623      	mov	r3, r4
    1714:	6819      	ldr	r1, [r3, #0]
    1716:	f857 2f04 	ldr.w	r2, [r7, #4]!
    171a:	f1b8 0f00 	cmp.w	r8, #0
    171e:	bf08      	it	eq
    1720:	460a      	moveq	r2, r1
    1722:	f843 2b04 	str.w	r2, [r3], #4
    1726:	42ab      	cmp	r3, r5
    1728:	d1f4      	bne.n	1714 <POINTonE1_add+0x248>
    172a:	9b02      	ldr	r3, [sp, #8]
    172c:	4259      	negs	r1, r3
    172e:	3e04      	subs	r6, #4
    1730:	9b03      	ldr	r3, [sp, #12]
    1732:	1f18      	subs	r0, r3, #4
    1734:	f854 2b04 	ldr.w	r2, [r4], #4
    1738:	f856 3f04 	ldr.w	r3, [r6, #4]!
    173c:	2900      	cmp	r1, #0
    173e:	bf08      	it	eq
    1740:	4613      	moveq	r3, r2
    1742:	f840 3f04 	str.w	r3, [r0, #4]!
    1746:	42ac      	cmp	r4, r5
    1748:	d1f4      	bne.n	1734 <POINTonE1_add+0x268>
    174a:	b07d      	add	sp, #500	; 0x1f4
    174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1750:	0001ade8 	.word	0x0001ade8
    1754:	fffcfffd 	.word	0xfffcfffd

00001758 <POINTonE1_add_affine>:
    1758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    175c:	b0e5      	sub	sp, #404	; 0x194
    175e:	9003      	str	r0, [sp, #12]
    1760:	460d      	mov	r5, r1
    1762:	4692      	mov	sl, r2
    1764:	f101 0b60 	add.w	fp, r1, #96	; 0x60
    1768:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    176c:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    1770:	2200      	movs	r2, #0
    1772:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1776:	430a      	orrs	r2, r1
    1778:	4283      	cmp	r3, r0
    177a:	d1fa      	bne.n	1772 <POINTonE1_add_affine+0x1a>
    177c:	1e56      	subs	r6, r2, #1
    177e:	ea26 0602 	bic.w	r6, r6, r2
    1782:	0ff6      	lsrs	r6, r6, #31
    1784:	4c88      	ldr	r4, [pc, #544]	; (19a8 <POINTonE1_add_affine+0x250>)
    1786:	f04f 080c 	mov.w	r8, #12
    178a:	f8cd 8004 	str.w	r8, [sp, #4]
    178e:	4f87      	ldr	r7, [pc, #540]	; (19ac <POINTonE1_add_affine+0x254>)
    1790:	9700      	str	r7, [sp, #0]
    1792:	4623      	mov	r3, r4
    1794:	465a      	mov	r2, fp
    1796:	4659      	mov	r1, fp
    1798:	a834      	add	r0, sp, #208	; 0xd0
    179a:	f7ff f9c6 	bl	b2a <mul_mont_n>
    179e:	f8cd 8004 	str.w	r8, [sp, #4]
    17a2:	9700      	str	r7, [sp, #0]
    17a4:	4623      	mov	r3, r4
    17a6:	465a      	mov	r2, fp
    17a8:	a934      	add	r1, sp, #208	; 0xd0
    17aa:	a858      	add	r0, sp, #352	; 0x160
    17ac:	f7ff f9bd 	bl	b2a <mul_mont_n>
    17b0:	f8cd 8004 	str.w	r8, [sp, #4]
    17b4:	9700      	str	r7, [sp, #0]
    17b6:	4623      	mov	r3, r4
    17b8:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    17bc:	a958      	add	r1, sp, #352	; 0x160
    17be:	4608      	mov	r0, r1
    17c0:	f7ff f9b3 	bl	b2a <mul_mont_n>
    17c4:	f1aa 0804 	sub.w	r8, sl, #4
    17c8:	f10a 005c 	add.w	r0, sl, #92	; 0x5c
    17cc:	4643      	mov	r3, r8
    17ce:	2200      	movs	r2, #0
    17d0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    17d4:	430a      	orrs	r2, r1
    17d6:	4283      	cmp	r3, r0
    17d8:	d1fa      	bne.n	17d0 <POINTonE1_add_affine+0x78>
    17da:	1e53      	subs	r3, r2, #1
    17dc:	ea23 0202 	bic.w	r2, r3, r2
    17e0:	0fd3      	lsrs	r3, r2, #31
    17e2:	9302      	str	r3, [sp, #8]
    17e4:	4c70      	ldr	r4, [pc, #448]	; (19a8 <POINTonE1_add_affine+0x250>)
    17e6:	270c      	movs	r7, #12
    17e8:	9701      	str	r7, [sp, #4]
    17ea:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 19ac <POINTonE1_add_affine+0x254>
    17ee:	f8cd 9000 	str.w	r9, [sp]
    17f2:	4623      	mov	r3, r4
    17f4:	aa34      	add	r2, sp, #208	; 0xd0
    17f6:	4651      	mov	r1, sl
    17f8:	a828      	add	r0, sp, #160	; 0xa0
    17fa:	f7ff f996 	bl	b2a <mul_mont_n>
    17fe:	9700      	str	r7, [sp, #0]
    1800:	4623      	mov	r3, r4
    1802:	462a      	mov	r2, r5
    1804:	a928      	add	r1, sp, #160	; 0xa0
    1806:	4608      	mov	r0, r1
    1808:	f7fe ff85 	bl	716 <sub_mod_n>
    180c:	9701      	str	r7, [sp, #4]
    180e:	f8cd 9000 	str.w	r9, [sp]
    1812:	4623      	mov	r3, r4
    1814:	aa28      	add	r2, sp, #160	; 0xa0
    1816:	4611      	mov	r1, r2
    1818:	a81c      	add	r0, sp, #112	; 0x70
    181a:	f7ff f986 	bl	b2a <mul_mont_n>
    181e:	9700      	str	r7, [sp, #0]
    1820:	4623      	mov	r3, r4
    1822:	aa1c      	add	r2, sp, #112	; 0x70
    1824:	4611      	mov	r1, r2
    1826:	a810      	add	r0, sp, #64	; 0x40
    1828:	f7ff fc28 	bl	107c <add_mod_n>
    182c:	9700      	str	r7, [sp, #0]
    182e:	4623      	mov	r3, r4
    1830:	aa10      	add	r2, sp, #64	; 0x40
    1832:	4611      	mov	r1, r2
    1834:	4610      	mov	r0, r2
    1836:	f7ff fc21 	bl	107c <add_mod_n>
    183a:	9701      	str	r7, [sp, #4]
    183c:	f8cd 9000 	str.w	r9, [sp]
    1840:	4623      	mov	r3, r4
    1842:	aa10      	add	r2, sp, #64	; 0x40
    1844:	4629      	mov	r1, r5
    1846:	a84c      	add	r0, sp, #304	; 0x130
    1848:	f7ff f96f 	bl	b2a <mul_mont_n>
    184c:	9701      	str	r7, [sp, #4]
    184e:	f8cd 9000 	str.w	r9, [sp]
    1852:	4623      	mov	r3, r4
    1854:	aa10      	add	r2, sp, #64	; 0x40
    1856:	a928      	add	r1, sp, #160	; 0xa0
    1858:	a804      	add	r0, sp, #16
    185a:	f7ff f966 	bl	b2a <mul_mont_n>
    185e:	f105 0a30 	add.w	sl, r5, #48	; 0x30
    1862:	9701      	str	r7, [sp, #4]
    1864:	f8cd 9000 	str.w	r9, [sp]
    1868:	4623      	mov	r3, r4
    186a:	4652      	mov	r2, sl
    186c:	a904      	add	r1, sp, #16
    186e:	a810      	add	r0, sp, #64	; 0x40
    1870:	f7ff f95b 	bl	b2a <mul_mont_n>
    1874:	9700      	str	r7, [sp, #0]
    1876:	4623      	mov	r3, r4
    1878:	4652      	mov	r2, sl
    187a:	a958      	add	r1, sp, #352	; 0x160
    187c:	4608      	mov	r0, r1
    187e:	f7fe ff4a 	bl	716 <sub_mod_n>
    1882:	9700      	str	r7, [sp, #0]
    1884:	4623      	mov	r3, r4
    1886:	aa58      	add	r2, sp, #352	; 0x160
    1888:	4611      	mov	r1, r2
    188a:	4610      	mov	r0, r2
    188c:	f7ff fbf6 	bl	107c <add_mod_n>
    1890:	9701      	str	r7, [sp, #4]
    1892:	f8cd 9000 	str.w	r9, [sp]
    1896:	4623      	mov	r3, r4
    1898:	aa58      	add	r2, sp, #352	; 0x160
    189a:	4611      	mov	r1, r2
    189c:	a840      	add	r0, sp, #256	; 0x100
    189e:	f7ff f944 	bl	b2a <mul_mont_n>
    18a2:	9700      	str	r7, [sp, #0]
    18a4:	4623      	mov	r3, r4
    18a6:	aa04      	add	r2, sp, #16
    18a8:	a940      	add	r1, sp, #256	; 0x100
    18aa:	4608      	mov	r0, r1
    18ac:	f7fe ff33 	bl	716 <sub_mod_n>
    18b0:	9700      	str	r7, [sp, #0]
    18b2:	4623      	mov	r3, r4
    18b4:	aa4c      	add	r2, sp, #304	; 0x130
    18b6:	a940      	add	r1, sp, #256	; 0x100
    18b8:	4608      	mov	r0, r1
    18ba:	f7fe ff2c 	bl	716 <sub_mod_n>
    18be:	9700      	str	r7, [sp, #0]
    18c0:	4623      	mov	r3, r4
    18c2:	aa4c      	add	r2, sp, #304	; 0x130
    18c4:	a940      	add	r1, sp, #256	; 0x100
    18c6:	4608      	mov	r0, r1
    18c8:	f7fe ff25 	bl	716 <sub_mod_n>
    18cc:	9700      	str	r7, [sp, #0]
    18ce:	4623      	mov	r3, r4
    18d0:	aa40      	add	r2, sp, #256	; 0x100
    18d2:	a94c      	add	r1, sp, #304	; 0x130
    18d4:	4608      	mov	r0, r1
    18d6:	f7fe ff1e 	bl	716 <sub_mod_n>
    18da:	9701      	str	r7, [sp, #4]
    18dc:	f8cd 9000 	str.w	r9, [sp]
    18e0:	4623      	mov	r3, r4
    18e2:	aa58      	add	r2, sp, #352	; 0x160
    18e4:	a94c      	add	r1, sp, #304	; 0x130
    18e6:	4608      	mov	r0, r1
    18e8:	f7ff f91f 	bl	b2a <mul_mont_n>
    18ec:	9700      	str	r7, [sp, #0]
    18ee:	4623      	mov	r3, r4
    18f0:	aa10      	add	r2, sp, #64	; 0x40
    18f2:	a94c      	add	r1, sp, #304	; 0x130
    18f4:	4608      	mov	r0, r1
    18f6:	f7fe ff0e 	bl	716 <sub_mod_n>
    18fa:	9700      	str	r7, [sp, #0]
    18fc:	4623      	mov	r3, r4
    18fe:	aa10      	add	r2, sp, #64	; 0x40
    1900:	a94c      	add	r1, sp, #304	; 0x130
    1902:	4608      	mov	r0, r1
    1904:	f7fe ff07 	bl	716 <sub_mod_n>
    1908:	9700      	str	r7, [sp, #0]
    190a:	4623      	mov	r3, r4
    190c:	aa28      	add	r2, sp, #160	; 0xa0
    190e:	4659      	mov	r1, fp
    1910:	a858      	add	r0, sp, #352	; 0x160
    1912:	f7ff fbb3 	bl	107c <add_mod_n>
    1916:	9701      	str	r7, [sp, #4]
    1918:	f8cd 9000 	str.w	r9, [sp]
    191c:	4623      	mov	r3, r4
    191e:	aa58      	add	r2, sp, #352	; 0x160
    1920:	4611      	mov	r1, r2
    1922:	4610      	mov	r0, r2
    1924:	f7ff f901 	bl	b2a <mul_mont_n>
    1928:	9700      	str	r7, [sp, #0]
    192a:	4623      	mov	r3, r4
    192c:	aa34      	add	r2, sp, #208	; 0xd0
    192e:	a958      	add	r1, sp, #352	; 0x160
    1930:	4608      	mov	r0, r1
    1932:	f7fe fef0 	bl	716 <sub_mod_n>
    1936:	9700      	str	r7, [sp, #0]
    1938:	4623      	mov	r3, r4
    193a:	aa1c      	add	r2, sp, #112	; 0x70
    193c:	a958      	add	r1, sp, #352	; 0x160
    193e:	4608      	mov	r0, r1
    1940:	f7fe fee9 	bl	716 <sub_mod_n>
    1944:	4276      	negs	r6, r6
    1946:	f104 0160 	add.w	r1, r4, #96	; 0x60
    194a:	aa57      	add	r2, sp, #348	; 0x15c
    194c:	3490      	adds	r4, #144	; 0x90
    194e:	f851 3b04 	ldr.w	r3, [r1], #4
    1952:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1956:	2e00      	cmp	r6, #0
    1958:	bf08      	it	eq
    195a:	4603      	moveq	r3, r0
    195c:	6013      	str	r3, [r2, #0]
    195e:	42a1      	cmp	r1, r4
    1960:	d1f5      	bne.n	194e <POINTonE1_add_affine+0x1f6>
    1962:	ac40      	add	r4, sp, #256	; 0x100
    1964:	a858      	add	r0, sp, #352	; 0x160
    1966:	4623      	mov	r3, r4
    1968:	6819      	ldr	r1, [r3, #0]
    196a:	f858 2f04 	ldr.w	r2, [r8, #4]!
    196e:	2e00      	cmp	r6, #0
    1970:	bf08      	it	eq
    1972:	460a      	moveq	r2, r1
    1974:	f843 2b04 	str.w	r2, [r3], #4
    1978:	4283      	cmp	r3, r0
    197a:	d1f5      	bne.n	1968 <POINTonE1_add_affine+0x210>
    197c:	9b02      	ldr	r3, [sp, #8]
    197e:	4259      	negs	r1, r3
    1980:	3d04      	subs	r5, #4
    1982:	9b03      	ldr	r3, [sp, #12]
    1984:	1f18      	subs	r0, r3, #4
    1986:	f104 0690 	add.w	r6, r4, #144	; 0x90
    198a:	f854 2b04 	ldr.w	r2, [r4], #4
    198e:	f855 3f04 	ldr.w	r3, [r5, #4]!
    1992:	2900      	cmp	r1, #0
    1994:	bf08      	it	eq
    1996:	4613      	moveq	r3, r2
    1998:	f840 3f04 	str.w	r3, [r0, #4]!
    199c:	42b4      	cmp	r4, r6
    199e:	d1f4      	bne.n	198a <POINTonE1_add_affine+0x232>
    19a0:	b065      	add	sp, #404	; 0x194
    19a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19a6:	bf00      	nop
    19a8:	0001ade8 	.word	0x0001ade8
    19ac:	fffcfffd 	.word	0xfffcfffd

000019b0 <mul_by_3_mod_n>:
    19b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19b4:	b085      	sub	sp, #20
    19b6:	af00      	add	r7, sp, #0
    19b8:	6078      	str	r0, [r7, #4]
    19ba:	469b      	mov	fp, r3
    19bc:	0098      	lsls	r0, r3, #2
    19be:	60f8      	str	r0, [r7, #12]
    19c0:	1dc3      	adds	r3, r0, #7
    19c2:	f023 0307 	bic.w	r3, r3, #7
    19c6:	ebad 0d03 	sub.w	sp, sp, r3
    19ca:	466c      	mov	r4, sp
    19cc:	60bc      	str	r4, [r7, #8]
    19ce:	ebad 0d03 	sub.w	sp, sp, r3
    19d2:	f1bb 0f00 	cmp.w	fp, #0
    19d6:	f000 8082 	beq.w	1ade <mul_by_3_mod_n+0x12e>
    19da:	46ec      	mov	ip, sp
    19dc:	3904      	subs	r1, #4
    19de:	1f26      	subs	r6, r4, #4
    19e0:	6039      	str	r1, [r7, #0]
    19e2:	1808      	adds	r0, r1, r0
    19e4:	46b6      	mov	lr, r6
    19e6:	460c      	mov	r4, r1
    19e8:	2300      	movs	r3, #0
    19ea:	f854 5f04 	ldr.w	r5, [r4, #4]!
    19ee:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    19f2:	f84e 3f04 	str.w	r3, [lr, #4]!
    19f6:	0feb      	lsrs	r3, r5, #31
    19f8:	4284      	cmp	r4, r0
    19fa:	d1f6      	bne.n	19ea <mul_by_3_mod_n+0x3a>
    19fc:	1f10      	subs	r0, r2, #4
    19fe:	f1ac 0c04 	sub.w	ip, ip, #4
    1a02:	68fa      	ldr	r2, [r7, #12]
    1a04:	f1a2 0a04 	sub.w	sl, r2, #4
    1a08:	68ba      	ldr	r2, [r7, #8]
    1a0a:	4492      	add	sl, r2
    1a0c:	46e0      	mov	r8, ip
    1a0e:	4686      	mov	lr, r0
    1a10:	4632      	mov	r2, r6
    1a12:	2400      	movs	r4, #0
    1a14:	46b1      	mov	r9, r6
    1a16:	f852 5f04 	ldr.w	r5, [r2, #4]!
    1a1a:	1b2c      	subs	r4, r5, r4
    1a1c:	eb65 0505 	sbc.w	r5, r5, r5
    1a20:	f85e 6f04 	ldr.w	r6, [lr, #4]!
    1a24:	1ba4      	subs	r4, r4, r6
    1a26:	f165 0500 	sbc.w	r5, r5, #0
    1a2a:	f848 4f04 	str.w	r4, [r8, #4]!
    1a2e:	f005 0401 	and.w	r4, r5, #1
    1a32:	4552      	cmp	r2, sl
    1a34:	d1ef      	bne.n	1a16 <mul_by_3_mod_n+0x66>
    1a36:	464e      	mov	r6, r9
    1a38:	1b1c      	subs	r4, r3, r4
    1a3a:	46c8      	mov	r8, r9
    1a3c:	46e6      	mov	lr, ip
    1a3e:	2500      	movs	r5, #0
    1a40:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    1a44:	f858 3f04 	ldr.w	r3, [r8, #4]!
    1a48:	4053      	eors	r3, r2
    1a4a:	4023      	ands	r3, r4
    1a4c:	4053      	eors	r3, r2
    1a4e:	f8ce 3000 	str.w	r3, [lr]
    1a52:	3501      	adds	r5, #1
    1a54:	45ab      	cmp	fp, r5
    1a56:	d1f3      	bne.n	1a40 <mul_by_3_mod_n+0x90>
    1a58:	683b      	ldr	r3, [r7, #0]
    1a5a:	68fa      	ldr	r2, [r7, #12]
    1a5c:	4413      	add	r3, r2
    1a5e:	469e      	mov	lr, r3
    1a60:	4632      	mov	r2, r6
    1a62:	2300      	movs	r3, #0
    1a64:	f851 8f04 	ldr.w	r8, [r1, #4]!
    1a68:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    1a6c:	2500      	movs	r5, #0
    1a6e:	eb14 0408 	adds.w	r4, r4, r8
    1a72:	f145 0500 	adc.w	r5, r5, #0
    1a76:	18e4      	adds	r4, r4, r3
    1a78:	f145 0500 	adc.w	r5, r5, #0
    1a7c:	f842 4f04 	str.w	r4, [r2, #4]!
    1a80:	462b      	mov	r3, r5
    1a82:	4571      	cmp	r1, lr
    1a84:	d1ee      	bne.n	1a64 <mul_by_3_mod_n+0xb4>
    1a86:	687a      	ldr	r2, [r7, #4]
    1a88:	3a04      	subs	r2, #4
    1a8a:	68f9      	ldr	r1, [r7, #12]
    1a8c:	f1a1 0804 	sub.w	r8, r1, #4
    1a90:	68b9      	ldr	r1, [r7, #8]
    1a92:	4441      	add	r1, r8
    1a94:	4688      	mov	r8, r1
    1a96:	4694      	mov	ip, r2
    1a98:	4631      	mov	r1, r6
    1a9a:	2400      	movs	r4, #0
    1a9c:	46ae      	mov	lr, r5
    1a9e:	f851 3f04 	ldr.w	r3, [r1, #4]!
    1aa2:	1b1c      	subs	r4, r3, r4
    1aa4:	eb63 0503 	sbc.w	r5, r3, r3
    1aa8:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1aac:	1ae4      	subs	r4, r4, r3
    1aae:	f165 0500 	sbc.w	r5, r5, #0
    1ab2:	f84c 4f04 	str.w	r4, [ip, #4]!
    1ab6:	f005 0401 	and.w	r4, r5, #1
    1aba:	4541      	cmp	r1, r8
    1abc:	d1ef      	bne.n	1a9e <mul_by_3_mod_n+0xee>
    1abe:	4673      	mov	r3, lr
    1ac0:	1b1c      	subs	r4, r3, r4
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	1f18      	subs	r0, r3, #4
    1ac6:	68fb      	ldr	r3, [r7, #12]
    1ac8:	4418      	add	r0, r3
    1aca:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1ace:	f856 3f04 	ldr.w	r3, [r6, #4]!
    1ad2:	404b      	eors	r3, r1
    1ad4:	4023      	ands	r3, r4
    1ad6:	404b      	eors	r3, r1
    1ad8:	6013      	str	r3, [r2, #0]
    1ada:	4282      	cmp	r2, r0
    1adc:	d1f5      	bne.n	1aca <mul_by_3_mod_n+0x11a>
    1ade:	3714      	adds	r7, #20
    1ae0:	46bd      	mov	sp, r7
    1ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001ae6 <POINTonE1_dadd>:
    1ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1aea:	b0f3      	sub	sp, #460	; 0x1cc
    1aec:	9005      	str	r0, [sp, #20]
    1aee:	460c      	mov	r4, r1
    1af0:	4615      	mov	r5, r2
    1af2:	9302      	str	r3, [sp, #8]
    1af4:	4ec9      	ldr	r6, [pc, #804]	; (1e1c <POINTonE1_dadd+0x336>)
    1af6:	270c      	movs	r7, #12
    1af8:	9700      	str	r7, [sp, #0]
    1afa:	4633      	mov	r3, r6
    1afc:	460a      	mov	r2, r1
    1afe:	a81e      	add	r0, sp, #120	; 0x78
    1b00:	f7ff fabc 	bl	107c <add_mod_n>
    1b04:	9701      	str	r7, [sp, #4]
    1b06:	4bc6      	ldr	r3, [pc, #792]	; (1e20 <POINTonE1_dadd+0x33a>)
    1b08:	9300      	str	r3, [sp, #0]
    1b0a:	4633      	mov	r3, r6
    1b0c:	4622      	mov	r2, r4
    1b0e:	4621      	mov	r1, r4
    1b10:	a812      	add	r0, sp, #72	; 0x48
    1b12:	f7ff f80a 	bl	b2a <mul_mont_n>
    1b16:	463b      	mov	r3, r7
    1b18:	4632      	mov	r2, r6
    1b1a:	a912      	add	r1, sp, #72	; 0x48
    1b1c:	4608      	mov	r0, r1
    1b1e:	f7ff ff47 	bl	19b0 <mul_by_3_mod_n>
    1b22:	f104 0830 	add.w	r8, r4, #48	; 0x30
    1b26:	9700      	str	r7, [sp, #0]
    1b28:	4633      	mov	r3, r6
    1b2a:	4642      	mov	r2, r8
    1b2c:	4641      	mov	r1, r8
    1b2e:	a806      	add	r0, sp, #24
    1b30:	f7ff faa4 	bl	107c <add_mod_n>
    1b34:	f105 0760 	add.w	r7, r5, #96	; 0x60
    1b38:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    1b3c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    1b40:	2200      	movs	r2, #0
    1b42:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1b46:	430a      	orrs	r2, r1
    1b48:	4283      	cmp	r3, r0
    1b4a:	d1fa      	bne.n	1b42 <POINTonE1_dadd+0x5c>
    1b4c:	1e53      	subs	r3, r2, #1
    1b4e:	ea23 0202 	bic.w	r2, r3, r2
    1b52:	0fd3      	lsrs	r3, r2, #31
    1b54:	9304      	str	r3, [sp, #16]
    1b56:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 1e1c <POINTonE1_dadd+0x336>
    1b5a:	f04f 0b0c 	mov.w	fp, #12
    1b5e:	f8cd b004 	str.w	fp, [sp, #4]
    1b62:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 1e20 <POINTonE1_dadd+0x33a>
    1b66:	f8cd a000 	str.w	sl, [sp]
    1b6a:	464b      	mov	r3, r9
    1b6c:	463a      	mov	r2, r7
    1b6e:	4639      	mov	r1, r7
    1b70:	a84e      	add	r0, sp, #312	; 0x138
    1b72:	f7fe ffda 	bl	b2a <mul_mont_n>
    1b76:	f104 0660 	add.w	r6, r4, #96	; 0x60
    1b7a:	f8cd b004 	str.w	fp, [sp, #4]
    1b7e:	f8cd a000 	str.w	sl, [sp]
    1b82:	464b      	mov	r3, r9
    1b84:	463a      	mov	r2, r7
    1b86:	4631      	mov	r1, r6
    1b88:	a866      	add	r0, sp, #408	; 0x198
    1b8a:	f7fe ffce 	bl	b2a <mul_mont_n>
    1b8e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    1b92:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    1b96:	2200      	movs	r2, #0
    1b98:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1b9c:	430a      	orrs	r2, r1
    1b9e:	4283      	cmp	r3, r0
    1ba0:	d1fa      	bne.n	1b98 <POINTonE1_dadd+0xb2>
    1ba2:	1e53      	subs	r3, r2, #1
    1ba4:	ea23 0202 	bic.w	r2, r3, r2
    1ba8:	0fd3      	lsrs	r3, r2, #31
    1baa:	9303      	str	r3, [sp, #12]
    1bac:	230c      	movs	r3, #12
    1bae:	9301      	str	r3, [sp, #4]
    1bb0:	4b9b      	ldr	r3, [pc, #620]	; (1e20 <POINTonE1_dadd+0x33a>)
    1bb2:	9300      	str	r3, [sp, #0]
    1bb4:	4b99      	ldr	r3, [pc, #612]	; (1e1c <POINTonE1_dadd+0x336>)
    1bb6:	4632      	mov	r2, r6
    1bb8:	4631      	mov	r1, r6
    1bba:	a82a      	add	r0, sp, #168	; 0xa8
    1bbc:	f7fe ffb5 	bl	b2a <mul_mont_n>
    1bc0:	9b02      	ldr	r3, [sp, #8]
    1bc2:	b30b      	cbz	r3, 1c08 <POINTonE1_dadd+0x122>
    1bc4:	f8df 9254 	ldr.w	r9, [pc, #596]	; 1e1c <POINTonE1_dadd+0x336>
    1bc8:	f04f 0a0c 	mov.w	sl, #12
    1bcc:	f8cd a004 	str.w	sl, [sp, #4]
    1bd0:	f8df b24c 	ldr.w	fp, [pc, #588]	; 1e20 <POINTonE1_dadd+0x33a>
    1bd4:	f8cd b000 	str.w	fp, [sp]
    1bd8:	464b      	mov	r3, r9
    1bda:	aa2a      	add	r2, sp, #168	; 0xa8
    1bdc:	4611      	mov	r1, r2
    1bde:	a85a      	add	r0, sp, #360	; 0x168
    1be0:	f7fe ffa3 	bl	b2a <mul_mont_n>
    1be4:	f8cd a004 	str.w	sl, [sp, #4]
    1be8:	f8cd b000 	str.w	fp, [sp]
    1bec:	464b      	mov	r3, r9
    1bee:	9a02      	ldr	r2, [sp, #8]
    1bf0:	a95a      	add	r1, sp, #360	; 0x168
    1bf2:	4608      	mov	r0, r1
    1bf4:	f7fe ff99 	bl	b2a <mul_mont_n>
    1bf8:	f8cd a000 	str.w	sl, [sp]
    1bfc:	464b      	mov	r3, r9
    1bfe:	aa5a      	add	r2, sp, #360	; 0x168
    1c00:	a912      	add	r1, sp, #72	; 0x48
    1c02:	4608      	mov	r0, r1
    1c04:	f7ff fa3a 	bl	107c <add_mod_n>
    1c08:	f8df 9210 	ldr.w	r9, [pc, #528]	; 1e1c <POINTonE1_dadd+0x336>
    1c0c:	f04f 0a0c 	mov.w	sl, #12
    1c10:	f8cd a004 	str.w	sl, [sp, #4]
    1c14:	f8df b208 	ldr.w	fp, [pc, #520]	; 1e20 <POINTonE1_dadd+0x33a>
    1c18:	f8cd b000 	str.w	fp, [sp]
    1c1c:	464b      	mov	r3, r9
    1c1e:	463a      	mov	r2, r7
    1c20:	4641      	mov	r1, r8
    1c22:	a85a      	add	r0, sp, #360	; 0x168
    1c24:	f7fe ff81 	bl	b2a <mul_mont_n>
    1c28:	f8cd a004 	str.w	sl, [sp, #4]
    1c2c:	f8cd b000 	str.w	fp, [sp]
    1c30:	464b      	mov	r3, r9
    1c32:	aa4e      	add	r2, sp, #312	; 0x138
    1c34:	a95a      	add	r1, sp, #360	; 0x168
    1c36:	4608      	mov	r0, r1
    1c38:	f7fe ff77 	bl	b2a <mul_mont_n>
    1c3c:	f8cd a004 	str.w	sl, [sp, #4]
    1c40:	f8cd b000 	str.w	fp, [sp]
    1c44:	464b      	mov	r3, r9
    1c46:	4632      	mov	r2, r6
    1c48:	f105 0130 	add.w	r1, r5, #48	; 0x30
    1c4c:	a836      	add	r0, sp, #216	; 0xd8
    1c4e:	f7fe ff6c 	bl	b2a <mul_mont_n>
    1c52:	f8cd a004 	str.w	sl, [sp, #4]
    1c56:	f8cd b000 	str.w	fp, [sp]
    1c5a:	464b      	mov	r3, r9
    1c5c:	aa2a      	add	r2, sp, #168	; 0xa8
    1c5e:	a936      	add	r1, sp, #216	; 0xd8
    1c60:	4608      	mov	r0, r1
    1c62:	f7fe ff62 	bl	b2a <mul_mont_n>
    1c66:	f8cd a000 	str.w	sl, [sp]
    1c6a:	464b      	mov	r3, r9
    1c6c:	aa5a      	add	r2, sp, #360	; 0x168
    1c6e:	a936      	add	r1, sp, #216	; 0xd8
    1c70:	4608      	mov	r0, r1
    1c72:	f7fe fd50 	bl	716 <sub_mod_n>
    1c76:	f8cd a004 	str.w	sl, [sp, #4]
    1c7a:	f8cd b000 	str.w	fp, [sp]
    1c7e:	464b      	mov	r3, r9
    1c80:	4622      	mov	r2, r4
    1c82:	a94e      	add	r1, sp, #312	; 0x138
    1c84:	4608      	mov	r0, r1
    1c86:	f7fe ff50 	bl	b2a <mul_mont_n>
    1c8a:	f8cd a004 	str.w	sl, [sp, #4]
    1c8e:	f8cd b000 	str.w	fp, [sp]
    1c92:	464b      	mov	r3, r9
    1c94:	462a      	mov	r2, r5
    1c96:	a92a      	add	r1, sp, #168	; 0xa8
    1c98:	4608      	mov	r0, r1
    1c9a:	f7fe ff46 	bl	b2a <mul_mont_n>
    1c9e:	f8cd a000 	str.w	sl, [sp]
    1ca2:	464b      	mov	r3, r9
    1ca4:	aa4e      	add	r2, sp, #312	; 0x138
    1ca6:	a92a      	add	r1, sp, #168	; 0xa8
    1ca8:	a842      	add	r0, sp, #264	; 0x108
    1caa:	f7ff f9e7 	bl	107c <add_mod_n>
    1cae:	f8cd a000 	str.w	sl, [sp]
    1cb2:	464b      	mov	r3, r9
    1cb4:	aa4e      	add	r2, sp, #312	; 0x138
    1cb6:	a92a      	add	r1, sp, #168	; 0xa8
    1cb8:	4608      	mov	r0, r1
    1cba:	f7fe fd2c 	bl	716 <sub_mod_n>
    1cbe:	a929      	add	r1, sp, #164	; 0xa4
    1cc0:	ae41      	add	r6, sp, #260	; 0x104
    1cc2:	460b      	mov	r3, r1
    1cc4:	2200      	movs	r2, #0
    1cc6:	f853 0f04 	ldr.w	r0, [r3, #4]!
    1cca:	4302      	orrs	r2, r0
    1ccc:	42b3      	cmp	r3, r6
    1cce:	d1fa      	bne.n	1cc6 <POINTonE1_dadd+0x1e0>
    1cd0:	1e50      	subs	r0, r2, #1
    1cd2:	ea20 0002 	bic.w	r0, r0, r2
    1cd6:	17c0      	asrs	r0, r0, #31
    1cd8:	3c04      	subs	r4, #4
    1cda:	ae4e      	add	r6, sp, #312	; 0x138
    1cdc:	af72      	add	r7, sp, #456	; 0x1c8
    1cde:	4633      	mov	r3, r6
    1ce0:	46a6      	mov	lr, r4
    1ce2:	468c      	mov	ip, r1
    1ce4:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    1ce8:	6819      	ldr	r1, [r3, #0]
    1cea:	2800      	cmp	r0, #0
    1cec:	bf08      	it	eq
    1cee:	460a      	moveq	r2, r1
    1cf0:	f843 2b04 	str.w	r2, [r3], #4
    1cf4:	42bb      	cmp	r3, r7
    1cf6:	d1f5      	bne.n	1ce4 <POINTonE1_dadd+0x1fe>
    1cf8:	4661      	mov	r1, ip
    1cfa:	aa05      	add	r2, sp, #20
    1cfc:	f10d 0ea4 	add.w	lr, sp, #164	; 0xa4
    1d00:	4684      	mov	ip, r0
    1d02:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1d06:	f852 3f04 	ldr.w	r3, [r2, #4]!
    1d0a:	f1bc 0f00 	cmp.w	ip, #0
    1d0e:	bf08      	it	eq
    1d10:	4603      	moveq	r3, r0
    1d12:	600b      	str	r3, [r1, #0]
    1d14:	4572      	cmp	r2, lr
    1d16:	d1f4      	bne.n	1d02 <POINTonE1_dadd+0x21c>
    1d18:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1e1c <POINTonE1_dadd+0x336>
    1d1c:	f04f 090c 	mov.w	r9, #12
    1d20:	f8cd 9004 	str.w	r9, [sp, #4]
    1d24:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 1e20 <POINTonE1_dadd+0x33a>
    1d28:	f8cd a000 	str.w	sl, [sp]
    1d2c:	4643      	mov	r3, r8
    1d2e:	aa2a      	add	r2, sp, #168	; 0xa8
    1d30:	a966      	add	r1, sp, #408	; 0x198
    1d32:	4608      	mov	r0, r1
    1d34:	f7fe fef9 	bl	b2a <mul_mont_n>
    1d38:	f8cd 9004 	str.w	r9, [sp, #4]
    1d3c:	f8cd a000 	str.w	sl, [sp]
    1d40:	4643      	mov	r3, r8
    1d42:	aa2a      	add	r2, sp, #168	; 0xa8
    1d44:	4611      	mov	r1, r2
    1d46:	a806      	add	r0, sp, #24
    1d48:	f7fe feef 	bl	b2a <mul_mont_n>
    1d4c:	f8cd 9004 	str.w	r9, [sp, #4]
    1d50:	f8cd a000 	str.w	sl, [sp]
    1d54:	4643      	mov	r3, r8
    1d56:	aa2a      	add	r2, sp, #168	; 0xa8
    1d58:	a906      	add	r1, sp, #24
    1d5a:	a812      	add	r0, sp, #72	; 0x48
    1d5c:	f7fe fee5 	bl	b2a <mul_mont_n>
    1d60:	f8cd 9004 	str.w	r9, [sp, #4]
    1d64:	f8cd a000 	str.w	sl, [sp]
    1d68:	4643      	mov	r3, r8
    1d6a:	aa5a      	add	r2, sp, #360	; 0x168
    1d6c:	a912      	add	r1, sp, #72	; 0x48
    1d6e:	4608      	mov	r0, r1
    1d70:	f7fe fedb 	bl	b2a <mul_mont_n>
    1d74:	f8cd 9004 	str.w	r9, [sp, #4]
    1d78:	f8cd a000 	str.w	sl, [sp]
    1d7c:	4643      	mov	r3, r8
    1d7e:	aa4e      	add	r2, sp, #312	; 0x138
    1d80:	a906      	add	r1, sp, #24
    1d82:	a85a      	add	r0, sp, #360	; 0x168
    1d84:	f7fe fed1 	bl	b2a <mul_mont_n>
    1d88:	f8cd 9004 	str.w	r9, [sp, #4]
    1d8c:	f8cd a000 	str.w	sl, [sp]
    1d90:	4643      	mov	r3, r8
    1d92:	aa42      	add	r2, sp, #264	; 0x108
    1d94:	a906      	add	r1, sp, #24
    1d96:	4608      	mov	r0, r1
    1d98:	f7fe fec7 	bl	b2a <mul_mont_n>
    1d9c:	f8cd 9004 	str.w	r9, [sp, #4]
    1da0:	f8cd a000 	str.w	sl, [sp]
    1da4:	4643      	mov	r3, r8
    1da6:	aa36      	add	r2, sp, #216	; 0xd8
    1da8:	4611      	mov	r1, r2
    1daa:	a84e      	add	r0, sp, #312	; 0x138
    1dac:	f7fe febd 	bl	b2a <mul_mont_n>
    1db0:	f8cd 9000 	str.w	r9, [sp]
    1db4:	4643      	mov	r3, r8
    1db6:	aa06      	add	r2, sp, #24
    1db8:	a94e      	add	r1, sp, #312	; 0x138
    1dba:	4608      	mov	r0, r1
    1dbc:	f7fe fcab 	bl	716 <sub_mod_n>
    1dc0:	f8cd 9000 	str.w	r9, [sp]
    1dc4:	4643      	mov	r3, r8
    1dc6:	aa4e      	add	r2, sp, #312	; 0x138
    1dc8:	a95a      	add	r1, sp, #360	; 0x168
    1dca:	4608      	mov	r0, r1
    1dcc:	f7fe fca3 	bl	716 <sub_mod_n>
    1dd0:	f8cd 9004 	str.w	r9, [sp, #4]
    1dd4:	f8cd a000 	str.w	sl, [sp]
    1dd8:	4643      	mov	r3, r8
    1dda:	aa36      	add	r2, sp, #216	; 0xd8
    1ddc:	a95a      	add	r1, sp, #360	; 0x168
    1dde:	4608      	mov	r0, r1
    1de0:	f7fe fea3 	bl	b2a <mul_mont_n>
    1de4:	f8cd 9000 	str.w	r9, [sp]
    1de8:	4643      	mov	r3, r8
    1dea:	aa12      	add	r2, sp, #72	; 0x48
    1dec:	a95a      	add	r1, sp, #360	; 0x168
    1dee:	4608      	mov	r0, r1
    1df0:	f7fe fc91 	bl	716 <sub_mod_n>
    1df4:	9b04      	ldr	r3, [sp, #16]
    1df6:	4258      	negs	r0, r3
    1df8:	4633      	mov	r3, r6
    1dfa:	6819      	ldr	r1, [r3, #0]
    1dfc:	f854 2f04 	ldr.w	r2, [r4, #4]!
    1e00:	2800      	cmp	r0, #0
    1e02:	bf08      	it	eq
    1e04:	460a      	moveq	r2, r1
    1e06:	f843 2b04 	str.w	r2, [r3], #4
    1e0a:	42bb      	cmp	r3, r7
    1e0c:	d1f5      	bne.n	1dfa <POINTonE1_dadd+0x314>
    1e0e:	9b03      	ldr	r3, [sp, #12]
    1e10:	4259      	negs	r1, r3
    1e12:	3d04      	subs	r5, #4
    1e14:	9b05      	ldr	r3, [sp, #20]
    1e16:	1f18      	subs	r0, r3, #4
    1e18:	e004      	b.n	1e24 <POINTonE1_dadd+0x33e>
    1e1a:	bf00      	nop
    1e1c:	0001ade8 	.word	0x0001ade8
    1e20:	fffcfffd 	.word	0xfffcfffd
    1e24:	f856 2b04 	ldr.w	r2, [r6], #4
    1e28:	f855 3f04 	ldr.w	r3, [r5, #4]!
    1e2c:	2900      	cmp	r1, #0
    1e2e:	bf08      	it	eq
    1e30:	4613      	moveq	r3, r2
    1e32:	f840 3f04 	str.w	r3, [r0, #4]!
    1e36:	42be      	cmp	r6, r7
    1e38:	d1f4      	bne.n	1e24 <POINTonE1_dadd+0x33e>
    1e3a:	b073      	add	sp, #460	; 0x1cc
    1e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001e40 <POINTonE1_dadd_affine>:
    1e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e44:	b0f3      	sub	sp, #460	; 0x1cc
    1e46:	9005      	str	r0, [sp, #20]
    1e48:	460d      	mov	r5, r1
    1e4a:	4614      	mov	r4, r2
    1e4c:	1f17      	subs	r7, r2, #4
    1e4e:	f102 005c 	add.w	r0, r2, #92	; 0x5c
    1e52:	463b      	mov	r3, r7
    1e54:	2200      	movs	r2, #0
    1e56:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1e5a:	430a      	orrs	r2, r1
    1e5c:	4283      	cmp	r3, r0
    1e5e:	d1fa      	bne.n	1e56 <POINTonE1_dadd_affine+0x16>
    1e60:	1e53      	subs	r3, r2, #1
    1e62:	ea23 0202 	bic.w	r2, r3, r2
    1e66:	0fd3      	lsrs	r3, r2, #31
    1e68:	9304      	str	r3, [sp, #16]
    1e6a:	4eac      	ldr	r6, [pc, #688]	; (211c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11c>)
    1e6c:	f04f 080c 	mov.w	r8, #12
    1e70:	f8cd 8000 	str.w	r8, [sp]
    1e74:	4633      	mov	r3, r6
    1e76:	4622      	mov	r2, r4
    1e78:	4621      	mov	r1, r4
    1e7a:	a81e      	add	r0, sp, #120	; 0x78
    1e7c:	f7ff f8fe 	bl	107c <add_mod_n>
    1e80:	f8cd 8004 	str.w	r8, [sp, #4]
    1e84:	4ba6      	ldr	r3, [pc, #664]	; (2120 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x120>)
    1e86:	9300      	str	r3, [sp, #0]
    1e88:	4633      	mov	r3, r6
    1e8a:	4622      	mov	r2, r4
    1e8c:	4621      	mov	r1, r4
    1e8e:	a812      	add	r0, sp, #72	; 0x48
    1e90:	f7fe fe4b 	bl	b2a <mul_mont_n>
    1e94:	4643      	mov	r3, r8
    1e96:	4632      	mov	r2, r6
    1e98:	a912      	add	r1, sp, #72	; 0x48
    1e9a:	4608      	mov	r0, r1
    1e9c:	f7ff fd88 	bl	19b0 <mul_by_3_mod_n>
    1ea0:	f104 0b30 	add.w	fp, r4, #48	; 0x30
    1ea4:	f8cd 8000 	str.w	r8, [sp]
    1ea8:	4633      	mov	r3, r6
    1eaa:	465a      	mov	r2, fp
    1eac:	4659      	mov	r1, fp
    1eae:	a806      	add	r0, sp, #24
    1eb0:	f7ff f8e4 	bl	107c <add_mod_n>
    1eb4:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    1eb8:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    1ebc:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    1ec0:	2200      	movs	r2, #0
    1ec2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1ec6:	430a      	orrs	r2, r1
    1ec8:	4283      	cmp	r3, r0
    1eca:	d1fa      	bne.n	1ec2 <POINTonE1_dadd_affine+0x82>
    1ecc:	1e53      	subs	r3, r2, #1
    1ece:	ea23 0202 	bic.w	r2, r3, r2
    1ed2:	0fd3      	lsrs	r3, r2, #31
    1ed4:	9303      	str	r3, [sp, #12]
    1ed6:	4e91      	ldr	r6, [pc, #580]	; (211c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11c>)
    1ed8:	f04f 080c 	mov.w	r8, #12
    1edc:	f8cd 8004 	str.w	r8, [sp, #4]
    1ee0:	f8df 923c 	ldr.w	r9, [pc, #572]	; 2120 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x120>
    1ee4:	f8cd 9000 	str.w	r9, [sp]
    1ee8:	4633      	mov	r3, r6
    1eea:	4652      	mov	r2, sl
    1eec:	4651      	mov	r1, sl
    1eee:	a82a      	add	r0, sp, #168	; 0xa8
    1ef0:	f7fe fe1b 	bl	b2a <mul_mont_n>
    1ef4:	f8cd 8004 	str.w	r8, [sp, #4]
    1ef8:	f8cd 9000 	str.w	r9, [sp]
    1efc:	4633      	mov	r3, r6
    1efe:	4652      	mov	r2, sl
    1f00:	a92a      	add	r1, sp, #168	; 0xa8
    1f02:	a836      	add	r0, sp, #216	; 0xd8
    1f04:	f7fe fe11 	bl	b2a <mul_mont_n>
    1f08:	f8cd 8004 	str.w	r8, [sp, #4]
    1f0c:	f8cd 9000 	str.w	r9, [sp]
    1f10:	4633      	mov	r3, r6
    1f12:	465a      	mov	r2, fp
    1f14:	a936      	add	r1, sp, #216	; 0xd8
    1f16:	4608      	mov	r0, r1
    1f18:	f7fe fe07 	bl	b2a <mul_mont_n>
    1f1c:	f8cd 8000 	str.w	r8, [sp]
    1f20:	4633      	mov	r3, r6
    1f22:	f105 0230 	add.w	r2, r5, #48	; 0x30
    1f26:	a936      	add	r1, sp, #216	; 0xd8
    1f28:	4608      	mov	r0, r1
    1f2a:	f7fe fbf4 	bl	716 <sub_mod_n>
    1f2e:	f8cd 8004 	str.w	r8, [sp, #4]
    1f32:	f8cd 9000 	str.w	r9, [sp]
    1f36:	4633      	mov	r3, r6
    1f38:	4622      	mov	r2, r4
    1f3a:	a92a      	add	r1, sp, #168	; 0xa8
    1f3c:	4608      	mov	r0, r1
    1f3e:	f7fe fdf4 	bl	b2a <mul_mont_n>
    1f42:	f8cd 8000 	str.w	r8, [sp]
    1f46:	4633      	mov	r3, r6
    1f48:	462a      	mov	r2, r5
    1f4a:	a92a      	add	r1, sp, #168	; 0xa8
    1f4c:	a842      	add	r0, sp, #264	; 0x108
    1f4e:	f7ff f895 	bl	107c <add_mod_n>
    1f52:	f8cd 8000 	str.w	r8, [sp]
    1f56:	4633      	mov	r3, r6
    1f58:	462a      	mov	r2, r5
    1f5a:	a92a      	add	r1, sp, #168	; 0xa8
    1f5c:	4608      	mov	r0, r1
    1f5e:	f7fe fbda 	bl	716 <sub_mod_n>
    1f62:	f8cd 8004 	str.w	r8, [sp, #4]
    1f66:	f8cd 9000 	str.w	r9, [sp]
    1f6a:	4633      	mov	r3, r6
    1f6c:	4652      	mov	r2, sl
    1f6e:	a92a      	add	r1, sp, #168	; 0xa8
    1f70:	a866      	add	r0, sp, #408	; 0x198
    1f72:	f7fe fdda 	bl	b2a <mul_mont_n>
    1f76:	a929      	add	r1, sp, #164	; 0xa4
    1f78:	ac41      	add	r4, sp, #260	; 0x104
    1f7a:	460b      	mov	r3, r1
    1f7c:	2200      	movs	r2, #0
    1f7e:	f853 0f04 	ldr.w	r0, [r3, #4]!
    1f82:	4302      	orrs	r2, r0
    1f84:	42a3      	cmp	r3, r4
    1f86:	d1fa      	bne.n	1f7e <POINTonE1_dadd_affine+0x13e>
    1f88:	1e53      	subs	r3, r2, #1
    1f8a:	ea23 0202 	bic.w	r2, r3, r2
    1f8e:	17d2      	asrs	r2, r2, #31
    1f90:	3d04      	subs	r5, #4
    1f92:	ac4e      	add	r4, sp, #312	; 0x138
    1f94:	f50d 78cc 	add.w	r8, sp, #408	; 0x198
    1f98:	4620      	mov	r0, r4
    1f9a:	46ac      	mov	ip, r5
    1f9c:	463e      	mov	r6, r7
    1f9e:	4696      	mov	lr, r2
    1fa0:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    1fa4:	f856 3f04 	ldr.w	r3, [r6, #4]!
    1fa8:	f1be 0f00 	cmp.w	lr, #0
    1fac:	bf08      	it	eq
    1fae:	4613      	moveq	r3, r2
    1fb0:	f840 3b04 	str.w	r3, [r0], #4
    1fb4:	4540      	cmp	r0, r8
    1fb6:	d1f3      	bne.n	1fa0 <POINTonE1_dadd_affine+0x160>
    1fb8:	ae65      	add	r6, sp, #404	; 0x194
    1fba:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    1fbe:	46b4      	mov	ip, r6
    1fc0:	a806      	add	r0, sp, #24
    1fc2:	f850 3b04 	ldr.w	r3, [r0], #4
    1fc6:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    1fca:	f1be 0f00 	cmp.w	lr, #0
    1fce:	bf08      	it	eq
    1fd0:	4613      	moveq	r3, r2
    1fd2:	f8cc 3000 	str.w	r3, [ip]
    1fd6:	4548      	cmp	r0, r9
    1fd8:	d1f3      	bne.n	1fc2 <POINTonE1_dadd_affine+0x182>
    1fda:	a805      	add	r0, sp, #20
    1fdc:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
    1fe0:	f851 2f04 	ldr.w	r2, [r1, #4]!
    1fe4:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1fe8:	f1be 0f00 	cmp.w	lr, #0
    1fec:	bf08      	it	eq
    1fee:	4613      	moveq	r3, r2
    1ff0:	600b      	str	r3, [r1, #0]
    1ff2:	4560      	cmp	r0, ip
    1ff4:	d1f4      	bne.n	1fe0 <POINTonE1_dadd_affine+0x1a0>
    1ff6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 211c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11c>
    1ffa:	f04f 0a0c 	mov.w	sl, #12
    1ffe:	f8cd a004 	str.w	sl, [sp, #4]
    2002:	f8df b11c 	ldr.w	fp, [pc, #284]	; 2120 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x120>
    2006:	f8cd b000 	str.w	fp, [sp]
    200a:	464b      	mov	r3, r9
    200c:	aa2a      	add	r2, sp, #168	; 0xa8
    200e:	4611      	mov	r1, r2
    2010:	a806      	add	r0, sp, #24
    2012:	f7fe fd8a 	bl	b2a <mul_mont_n>
    2016:	f8cd a004 	str.w	sl, [sp, #4]
    201a:	f8cd b000 	str.w	fp, [sp]
    201e:	464b      	mov	r3, r9
    2020:	aa2a      	add	r2, sp, #168	; 0xa8
    2022:	a906      	add	r1, sp, #24
    2024:	a812      	add	r0, sp, #72	; 0x48
    2026:	f7fe fd80 	bl	b2a <mul_mont_n>
    202a:	f8cd a004 	str.w	sl, [sp, #4]
    202e:	f8cd b000 	str.w	fp, [sp]
    2032:	464b      	mov	r3, r9
    2034:	aa5a      	add	r2, sp, #360	; 0x168
    2036:	a912      	add	r1, sp, #72	; 0x48
    2038:	4608      	mov	r0, r1
    203a:	f7fe fd76 	bl	b2a <mul_mont_n>
    203e:	f8cd a004 	str.w	sl, [sp, #4]
    2042:	f8cd b000 	str.w	fp, [sp]
    2046:	464b      	mov	r3, r9
    2048:	aa4e      	add	r2, sp, #312	; 0x138
    204a:	a906      	add	r1, sp, #24
    204c:	a85a      	add	r0, sp, #360	; 0x168
    204e:	f7fe fd6c 	bl	b2a <mul_mont_n>
    2052:	f8cd a004 	str.w	sl, [sp, #4]
    2056:	f8cd b000 	str.w	fp, [sp]
    205a:	464b      	mov	r3, r9
    205c:	aa42      	add	r2, sp, #264	; 0x108
    205e:	a906      	add	r1, sp, #24
    2060:	4608      	mov	r0, r1
    2062:	f7fe fd62 	bl	b2a <mul_mont_n>
    2066:	f8cd a004 	str.w	sl, [sp, #4]
    206a:	f8cd b000 	str.w	fp, [sp]
    206e:	464b      	mov	r3, r9
    2070:	aa36      	add	r2, sp, #216	; 0xd8
    2072:	4611      	mov	r1, r2
    2074:	a84e      	add	r0, sp, #312	; 0x138
    2076:	f7fe fd58 	bl	b2a <mul_mont_n>
    207a:	f8cd a000 	str.w	sl, [sp]
    207e:	464b      	mov	r3, r9
    2080:	aa06      	add	r2, sp, #24
    2082:	a94e      	add	r1, sp, #312	; 0x138
    2084:	4608      	mov	r0, r1
    2086:	f7fe fb46 	bl	716 <sub_mod_n>
    208a:	f8cd a000 	str.w	sl, [sp]
    208e:	464b      	mov	r3, r9
    2090:	aa4e      	add	r2, sp, #312	; 0x138
    2092:	a95a      	add	r1, sp, #360	; 0x168
    2094:	4608      	mov	r0, r1
    2096:	f7fe fb3e 	bl	716 <sub_mod_n>
    209a:	f8cd a004 	str.w	sl, [sp, #4]
    209e:	f8cd b000 	str.w	fp, [sp]
    20a2:	464b      	mov	r3, r9
    20a4:	aa36      	add	r2, sp, #216	; 0xd8
    20a6:	a95a      	add	r1, sp, #360	; 0x168
    20a8:	4608      	mov	r0, r1
    20aa:	f7fe fd3e 	bl	b2a <mul_mont_n>
    20ae:	f8cd a000 	str.w	sl, [sp]
    20b2:	464b      	mov	r3, r9
    20b4:	aa12      	add	r2, sp, #72	; 0x48
    20b6:	a95a      	add	r1, sp, #360	; 0x168
    20b8:	4608      	mov	r0, r1
    20ba:	f7fe fb2c 	bl	716 <sub_mod_n>
    20be:	9b03      	ldr	r3, [sp, #12]
    20c0:	4259      	negs	r1, r3
    20c2:	4623      	mov	r3, r4
    20c4:	6818      	ldr	r0, [r3, #0]
    20c6:	f857 2f04 	ldr.w	r2, [r7, #4]!
    20ca:	2900      	cmp	r1, #0
    20cc:	bf08      	it	eq
    20ce:	4602      	moveq	r2, r0
    20d0:	f843 2b04 	str.w	r2, [r3], #4
    20d4:	4543      	cmp	r3, r8
    20d6:	d1f5      	bne.n	20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>
    20d8:	4f10      	ldr	r7, [pc, #64]	; (211c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11c>)
    20da:	f107 0260 	add.w	r2, r7, #96	; 0x60
    20de:	3790      	adds	r7, #144	; 0x90
    20e0:	f852 3b04 	ldr.w	r3, [r2], #4
    20e4:	f856 0f04 	ldr.w	r0, [r6, #4]!
    20e8:	2900      	cmp	r1, #0
    20ea:	bf08      	it	eq
    20ec:	4603      	moveq	r3, r0
    20ee:	6033      	str	r3, [r6, #0]
    20f0:	42ba      	cmp	r2, r7
    20f2:	d1f5      	bne.n	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    20f4:	9b04      	ldr	r3, [sp, #16]
    20f6:	4259      	negs	r1, r3
    20f8:	9b05      	ldr	r3, [sp, #20]
    20fa:	1f18      	subs	r0, r3, #4
    20fc:	f104 0690 	add.w	r6, r4, #144	; 0x90
    2100:	f854 2b04 	ldr.w	r2, [r4], #4
    2104:	f855 3f04 	ldr.w	r3, [r5, #4]!
    2108:	2900      	cmp	r1, #0
    210a:	bf08      	it	eq
    210c:	4613      	moveq	r3, r2
    210e:	f840 3f04 	str.w	r3, [r0, #4]!
    2112:	42b4      	cmp	r4, r6
    2114:	d1f4      	bne.n	2100 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x100>
    2116:	b073      	add	sp, #460	; 0x1cc
    2118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    211c:	0001ade8 	.word	0x0001ade8
    2120:	fffcfffd 	.word	0xfffcfffd

00002124 <POINTonE1xyzz_dadd>:
    2124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2128:	b0db      	sub	sp, #364	; 0x16c
    212a:	4604      	mov	r4, r0
    212c:	460e      	mov	r6, r1
    212e:	4615      	mov	r5, r2
    2130:	f102 0b60 	add.w	fp, r2, #96	; 0x60
    2134:	f102 035c 	add.w	r3, r2, #92	; 0x5c
    2138:	f102 0cbc 	add.w	ip, r2, #188	; 0xbc
    213c:	2200      	movs	r2, #0
    213e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    2142:	430a      	orrs	r2, r1
    2144:	4563      	cmp	r3, ip
    2146:	d1fa      	bne.n	213e <POINTonE1xyzz_dadd+0x1a>
    2148:	1e57      	subs	r7, r2, #1
    214a:	ea27 0202 	bic.w	r2, r7, r2
    214e:	0fd2      	lsrs	r2, r2, #31
    2150:	d119      	bne.n	2186 <POINTonE1xyzz_dadd+0x62>
    2152:	f106 0360 	add.w	r3, r6, #96	; 0x60
    2156:	9302      	str	r3, [sp, #8]
    2158:	f106 035c 	add.w	r3, r6, #92	; 0x5c
    215c:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    2160:	f853 1f04 	ldr.w	r1, [r3, #4]!
    2164:	430a      	orrs	r2, r1
    2166:	4283      	cmp	r3, r0
    2168:	d1fa      	bne.n	2160 <POINTonE1xyzz_dadd+0x3c>
    216a:	1e57      	subs	r7, r2, #1
    216c:	ea27 0202 	bic.w	r2, r7, r2
    2170:	0fd7      	lsrs	r7, r2, #31
    2172:	d014      	beq.n	219e <POINTonE1xyzz_dadd+0x7a>
    2174:	3d04      	subs	r5, #4
    2176:	3c04      	subs	r4, #4
    2178:	f855 3f04 	ldr.w	r3, [r5, #4]!
    217c:	f844 3f04 	str.w	r3, [r4, #4]!
    2180:	4565      	cmp	r5, ip
    2182:	d1f9      	bne.n	2178 <POINTonE1xyzz_dadd+0x54>
    2184:	e008      	b.n	2198 <POINTonE1xyzz_dadd+0x74>
    2186:	1f33      	subs	r3, r6, #4
    2188:	3c04      	subs	r4, #4
    218a:	36bc      	adds	r6, #188	; 0xbc
    218c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    2190:	f844 2f04 	str.w	r2, [r4, #4]!
    2194:	42b3      	cmp	r3, r6
    2196:	d1f9      	bne.n	218c <POINTonE1xyzz_dadd+0x68>
    2198:	b05b      	add	sp, #364	; 0x16c
    219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    219e:	f105 0390 	add.w	r3, r5, #144	; 0x90
    21a2:	461a      	mov	r2, r3
    21a4:	9304      	str	r3, [sp, #16]
    21a6:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2470 <POINTonE1xyzz_dadd+0x34c>
    21aa:	f04f 090c 	mov.w	r9, #12
    21ae:	f8cd 9004 	str.w	r9, [sp, #4]
    21b2:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 2474 <POINTonE1xyzz_dadd+0x350>
    21b6:	f8cd a000 	str.w	sl, [sp]
    21ba:	4643      	mov	r3, r8
    21bc:	4631      	mov	r1, r6
    21be:	a84e      	add	r0, sp, #312	; 0x138
    21c0:	f7fe fcb3 	bl	b2a <mul_mont_n>
    21c4:	f106 0330 	add.w	r3, r6, #48	; 0x30
    21c8:	4619      	mov	r1, r3
    21ca:	9305      	str	r3, [sp, #20]
    21cc:	f8cd 9004 	str.w	r9, [sp, #4]
    21d0:	f8cd a000 	str.w	sl, [sp]
    21d4:	4643      	mov	r3, r8
    21d6:	465a      	mov	r2, fp
    21d8:	a842      	add	r0, sp, #264	; 0x108
    21da:	f7fe fca6 	bl	b2a <mul_mont_n>
    21de:	f106 0390 	add.w	r3, r6, #144	; 0x90
    21e2:	461a      	mov	r2, r3
    21e4:	9303      	str	r3, [sp, #12]
    21e6:	f8cd 9004 	str.w	r9, [sp, #4]
    21ea:	f8cd a000 	str.w	sl, [sp]
    21ee:	4643      	mov	r3, r8
    21f0:	4629      	mov	r1, r5
    21f2:	a836      	add	r0, sp, #216	; 0xd8
    21f4:	f7fe fc99 	bl	b2a <mul_mont_n>
    21f8:	f8cd 9004 	str.w	r9, [sp, #4]
    21fc:	f8cd a000 	str.w	sl, [sp]
    2200:	4643      	mov	r3, r8
    2202:	9a02      	ldr	r2, [sp, #8]
    2204:	f105 0130 	add.w	r1, r5, #48	; 0x30
    2208:	a82a      	add	r0, sp, #168	; 0xa8
    220a:	f7fe fc8e 	bl	b2a <mul_mont_n>
    220e:	f8cd 9000 	str.w	r9, [sp]
    2212:	4643      	mov	r3, r8
    2214:	aa4e      	add	r2, sp, #312	; 0x138
    2216:	a936      	add	r1, sp, #216	; 0xd8
    2218:	4608      	mov	r0, r1
    221a:	f7fe fa7c 	bl	716 <sub_mod_n>
    221e:	f8cd 9000 	str.w	r9, [sp]
    2222:	4643      	mov	r3, r8
    2224:	aa42      	add	r2, sp, #264	; 0x108
    2226:	a92a      	add	r1, sp, #168	; 0xa8
    2228:	4608      	mov	r0, r1
    222a:	f7fe fa74 	bl	716 <sub_mod_n>
    222e:	ab36      	add	r3, sp, #216	; 0xd8
    2230:	a842      	add	r0, sp, #264	; 0x108
    2232:	463a      	mov	r2, r7
    2234:	f853 1b04 	ldr.w	r1, [r3], #4
    2238:	430a      	orrs	r2, r1
    223a:	4283      	cmp	r3, r0
    223c:	d1fa      	bne.n	2234 <POINTonE1xyzz_dadd+0x110>
    223e:	1e53      	subs	r3, r2, #1
    2240:	4393      	bics	r3, r2
    2242:	d514      	bpl.n	226e <POINTonE1xyzz_dadd+0x14a>
    2244:	ab2a      	add	r3, sp, #168	; 0xa8
    2246:	a936      	add	r1, sp, #216	; 0xd8
    2248:	f853 2b04 	ldr.w	r2, [r3], #4
    224c:	4317      	orrs	r7, r2
    224e:	428b      	cmp	r3, r1
    2250:	d1fa      	bne.n	2248 <POINTonE1xyzz_dadd+0x124>
    2252:	1e7b      	subs	r3, r7, #1
    2254:	43bb      	bics	r3, r7
    2256:	f100 8086 	bmi.w	2366 <POINTonE1xyzz_dadd+0x242>
    225a:	f104 0160 	add.w	r1, r4, #96	; 0x60
    225e:	460b      	mov	r3, r1
    2260:	34c0      	adds	r4, #192	; 0xc0
    2262:	2200      	movs	r2, #0
    2264:	f843 2b04 	str.w	r2, [r3], #4
    2268:	42a3      	cmp	r3, r4
    226a:	d1fb      	bne.n	2264 <POINTonE1xyzz_dadd+0x140>
    226c:	e794      	b.n	2198 <POINTonE1xyzz_dadd+0x74>
    226e:	4d80      	ldr	r5, [pc, #512]	; (2470 <POINTonE1xyzz_dadd+0x34c>)
    2270:	260c      	movs	r6, #12
    2272:	9601      	str	r6, [sp, #4]
    2274:	4f7f      	ldr	r7, [pc, #508]	; (2474 <POINTonE1xyzz_dadd+0x350>)
    2276:	9700      	str	r7, [sp, #0]
    2278:	462b      	mov	r3, r5
    227a:	aa36      	add	r2, sp, #216	; 0xd8
    227c:	4611      	mov	r1, r2
    227e:	a806      	add	r0, sp, #24
    2280:	f7fe fc53 	bl	b2a <mul_mont_n>
    2284:	9601      	str	r6, [sp, #4]
    2286:	9700      	str	r7, [sp, #0]
    2288:	462b      	mov	r3, r5
    228a:	aa36      	add	r2, sp, #216	; 0xd8
    228c:	a906      	add	r1, sp, #24
    228e:	a812      	add	r0, sp, #72	; 0x48
    2290:	f7fe fc4b 	bl	b2a <mul_mont_n>
    2294:	9601      	str	r6, [sp, #4]
    2296:	9700      	str	r7, [sp, #0]
    2298:	462b      	mov	r3, r5
    229a:	aa06      	add	r2, sp, #24
    229c:	a94e      	add	r1, sp, #312	; 0x138
    229e:	a81e      	add	r0, sp, #120	; 0x78
    22a0:	f7fe fc43 	bl	b2a <mul_mont_n>
    22a4:	9601      	str	r6, [sp, #4]
    22a6:	9700      	str	r7, [sp, #0]
    22a8:	462b      	mov	r3, r5
    22aa:	aa2a      	add	r2, sp, #168	; 0xa8
    22ac:	4611      	mov	r1, r2
    22ae:	4620      	mov	r0, r4
    22b0:	f7fe fc3b 	bl	b2a <mul_mont_n>
    22b4:	9600      	str	r6, [sp, #0]
    22b6:	462b      	mov	r3, r5
    22b8:	aa1e      	add	r2, sp, #120	; 0x78
    22ba:	4611      	mov	r1, r2
    22bc:	a836      	add	r0, sp, #216	; 0xd8
    22be:	f7fe fedd 	bl	107c <add_mod_n>
    22c2:	9600      	str	r6, [sp, #0]
    22c4:	462b      	mov	r3, r5
    22c6:	aa12      	add	r2, sp, #72	; 0x48
    22c8:	4621      	mov	r1, r4
    22ca:	4620      	mov	r0, r4
    22cc:	f7fe fa23 	bl	716 <sub_mod_n>
    22d0:	9600      	str	r6, [sp, #0]
    22d2:	462b      	mov	r3, r5
    22d4:	aa36      	add	r2, sp, #216	; 0xd8
    22d6:	4621      	mov	r1, r4
    22d8:	4620      	mov	r0, r4
    22da:	f7fe fa1c 	bl	716 <sub_mod_n>
    22de:	9600      	str	r6, [sp, #0]
    22e0:	462b      	mov	r3, r5
    22e2:	4622      	mov	r2, r4
    22e4:	a91e      	add	r1, sp, #120	; 0x78
    22e6:	4608      	mov	r0, r1
    22e8:	f7fe fa15 	bl	716 <sub_mod_n>
    22ec:	9601      	str	r6, [sp, #4]
    22ee:	9700      	str	r7, [sp, #0]
    22f0:	462b      	mov	r3, r5
    22f2:	aa2a      	add	r2, sp, #168	; 0xa8
    22f4:	a91e      	add	r1, sp, #120	; 0x78
    22f6:	4608      	mov	r0, r1
    22f8:	f7fe fc17 	bl	b2a <mul_mont_n>
    22fc:	f104 0830 	add.w	r8, r4, #48	; 0x30
    2300:	9601      	str	r6, [sp, #4]
    2302:	9700      	str	r7, [sp, #0]
    2304:	462b      	mov	r3, r5
    2306:	aa12      	add	r2, sp, #72	; 0x48
    2308:	a942      	add	r1, sp, #264	; 0x108
    230a:	4640      	mov	r0, r8
    230c:	f7fe fc0d 	bl	b2a <mul_mont_n>
    2310:	9600      	str	r6, [sp, #0]
    2312:	462b      	mov	r3, r5
    2314:	4642      	mov	r2, r8
    2316:	a91e      	add	r1, sp, #120	; 0x78
    2318:	4640      	mov	r0, r8
    231a:	f7fe f9fc 	bl	716 <sub_mod_n>
    231e:	f104 0890 	add.w	r8, r4, #144	; 0x90
    2322:	9601      	str	r6, [sp, #4]
    2324:	9700      	str	r7, [sp, #0]
    2326:	462b      	mov	r3, r5
    2328:	9a04      	ldr	r2, [sp, #16]
    232a:	9903      	ldr	r1, [sp, #12]
    232c:	4640      	mov	r0, r8
    232e:	f7fe fbfc 	bl	b2a <mul_mont_n>
    2332:	3460      	adds	r4, #96	; 0x60
    2334:	9601      	str	r6, [sp, #4]
    2336:	9700      	str	r7, [sp, #0]
    2338:	462b      	mov	r3, r5
    233a:	465a      	mov	r2, fp
    233c:	9902      	ldr	r1, [sp, #8]
    233e:	4620      	mov	r0, r4
    2340:	f7fe fbf3 	bl	b2a <mul_mont_n>
    2344:	9601      	str	r6, [sp, #4]
    2346:	9700      	str	r7, [sp, #0]
    2348:	462b      	mov	r3, r5
    234a:	aa06      	add	r2, sp, #24
    234c:	4641      	mov	r1, r8
    234e:	4640      	mov	r0, r8
    2350:	f7fe fbeb 	bl	b2a <mul_mont_n>
    2354:	9601      	str	r6, [sp, #4]
    2356:	9700      	str	r7, [sp, #0]
    2358:	462b      	mov	r3, r5
    235a:	aa12      	add	r2, sp, #72	; 0x48
    235c:	4621      	mov	r1, r4
    235e:	4620      	mov	r0, r4
    2360:	f7fe fbe3 	bl	b2a <mul_mont_n>
    2364:	e718      	b.n	2198 <POINTonE1xyzz_dadd+0x74>
    2366:	4d42      	ldr	r5, [pc, #264]	; (2470 <POINTonE1xyzz_dadd+0x34c>)
    2368:	270c      	movs	r7, #12
    236a:	9700      	str	r7, [sp, #0]
    236c:	462b      	mov	r3, r5
    236e:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2372:	464a      	mov	r2, r9
    2374:	4649      	mov	r1, r9
    2376:	a84e      	add	r0, sp, #312	; 0x138
    2378:	f7fe fe80 	bl	107c <add_mod_n>
    237c:	9701      	str	r7, [sp, #4]
    237e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2474 <POINTonE1xyzz_dadd+0x350>
    2382:	f8cd 8000 	str.w	r8, [sp]
    2386:	462b      	mov	r3, r5
    2388:	aa4e      	add	r2, sp, #312	; 0x138
    238a:	4611      	mov	r1, r2
    238c:	a806      	add	r0, sp, #24
    238e:	f7fe fbcc 	bl	b2a <mul_mont_n>
    2392:	9701      	str	r7, [sp, #4]
    2394:	f8cd 8000 	str.w	r8, [sp]
    2398:	462b      	mov	r3, r5
    239a:	aa4e      	add	r2, sp, #312	; 0x138
    239c:	a906      	add	r1, sp, #24
    239e:	a812      	add	r0, sp, #72	; 0x48
    23a0:	f7fe fbc3 	bl	b2a <mul_mont_n>
    23a4:	9701      	str	r7, [sp, #4]
    23a6:	f8cd 8000 	str.w	r8, [sp]
    23aa:	462b      	mov	r3, r5
    23ac:	aa06      	add	r2, sp, #24
    23ae:	4631      	mov	r1, r6
    23b0:	a842      	add	r0, sp, #264	; 0x108
    23b2:	f7fe fbba 	bl	b2a <mul_mont_n>
    23b6:	9701      	str	r7, [sp, #4]
    23b8:	f8cd 8000 	str.w	r8, [sp]
    23bc:	462b      	mov	r3, r5
    23be:	4632      	mov	r2, r6
    23c0:	4631      	mov	r1, r6
    23c2:	a81e      	add	r0, sp, #120	; 0x78
    23c4:	f7fe fbb1 	bl	b2a <mul_mont_n>
    23c8:	463b      	mov	r3, r7
    23ca:	462a      	mov	r2, r5
    23cc:	a91e      	add	r1, sp, #120	; 0x78
    23ce:	4608      	mov	r0, r1
    23d0:	f7ff faee 	bl	19b0 <mul_by_3_mod_n>
    23d4:	9701      	str	r7, [sp, #4]
    23d6:	f8cd 8000 	str.w	r8, [sp]
    23da:	462b      	mov	r3, r5
    23dc:	aa1e      	add	r2, sp, #120	; 0x78
    23de:	4611      	mov	r1, r2
    23e0:	4620      	mov	r0, r4
    23e2:	f7fe fba2 	bl	b2a <mul_mont_n>
    23e6:	9700      	str	r7, [sp, #0]
    23e8:	462b      	mov	r3, r5
    23ea:	aa42      	add	r2, sp, #264	; 0x108
    23ec:	4611      	mov	r1, r2
    23ee:	a84e      	add	r0, sp, #312	; 0x138
    23f0:	f7fe fe44 	bl	107c <add_mod_n>
    23f4:	9700      	str	r7, [sp, #0]
    23f6:	462b      	mov	r3, r5
    23f8:	aa4e      	add	r2, sp, #312	; 0x138
    23fa:	4621      	mov	r1, r4
    23fc:	4620      	mov	r0, r4
    23fe:	f7fe f98a 	bl	716 <sub_mod_n>
    2402:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2406:	9701      	str	r7, [sp, #4]
    2408:	f8cd 8000 	str.w	r8, [sp]
    240c:	462b      	mov	r3, r5
    240e:	464a      	mov	r2, r9
    2410:	a912      	add	r1, sp, #72	; 0x48
    2412:	4630      	mov	r0, r6
    2414:	f7fe fb89 	bl	b2a <mul_mont_n>
    2418:	9700      	str	r7, [sp, #0]
    241a:	462b      	mov	r3, r5
    241c:	4622      	mov	r2, r4
    241e:	a942      	add	r1, sp, #264	; 0x108
    2420:	4608      	mov	r0, r1
    2422:	f7fe f978 	bl	716 <sub_mod_n>
    2426:	9701      	str	r7, [sp, #4]
    2428:	f8cd 8000 	str.w	r8, [sp]
    242c:	462b      	mov	r3, r5
    242e:	aa1e      	add	r2, sp, #120	; 0x78
    2430:	a942      	add	r1, sp, #264	; 0x108
    2432:	4608      	mov	r0, r1
    2434:	f7fe fb79 	bl	b2a <mul_mont_n>
    2438:	9700      	str	r7, [sp, #0]
    243a:	462b      	mov	r3, r5
    243c:	4632      	mov	r2, r6
    243e:	a942      	add	r1, sp, #264	; 0x108
    2440:	4630      	mov	r0, r6
    2442:	f7fe f968 	bl	716 <sub_mod_n>
    2446:	9701      	str	r7, [sp, #4]
    2448:	f8cd 8000 	str.w	r8, [sp]
    244c:	462b      	mov	r3, r5
    244e:	aa06      	add	r2, sp, #24
    2450:	9903      	ldr	r1, [sp, #12]
    2452:	f104 0090 	add.w	r0, r4, #144	; 0x90
    2456:	f7fe fb68 	bl	b2a <mul_mont_n>
    245a:	9701      	str	r7, [sp, #4]
    245c:	f8cd 8000 	str.w	r8, [sp]
    2460:	462b      	mov	r3, r5
    2462:	aa12      	add	r2, sp, #72	; 0x48
    2464:	9902      	ldr	r1, [sp, #8]
    2466:	f104 0060 	add.w	r0, r4, #96	; 0x60
    246a:	f7fe fb5e 	bl	b2a <mul_mont_n>
    246e:	e693      	b.n	2198 <POINTonE1xyzz_dadd+0x74>
    2470:	0001ade8 	.word	0x0001ade8
    2474:	fffcfffd 	.word	0xfffcfffd

00002478 <POINTonE1_integrate_buckets>:
    2478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    247c:	b0e3      	sub	sp, #396	; 0x18c
    247e:	4607      	mov	r7, r0
    2480:	2501      	movs	r5, #1
    2482:	4095      	lsls	r5, r2
    2484:	3d01      	subs	r5, #1
    2486:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    248a:	eb01 1c83 	add.w	ip, r1, r3, lsl #6
    248e:	f1ac 0004 	sub.w	r0, ip, #4
    2492:	ab02      	add	r3, sp, #8
    2494:	f10d 0ec8 	add.w	lr, sp, #200	; 0xc8
    2498:	4604      	mov	r4, r0
    249a:	f854 6f04 	ldr.w	r6, [r4, #4]!
    249e:	f843 6b04 	str.w	r6, [r3], #4
    24a2:	4573      	cmp	r3, lr
    24a4:	d1f9      	bne.n	249a <POINTonE1_integrate_buckets+0x22>
    24a6:	ab32      	add	r3, sp, #200	; 0xc8
    24a8:	ae62      	add	r6, sp, #392	; 0x188
    24aa:	f850 4f04 	ldr.w	r4, [r0, #4]!
    24ae:	f843 4b04 	str.w	r4, [r3], #4
    24b2:	42b3      	cmp	r3, r6
    24b4:	d1f9      	bne.n	24aa <POINTonE1_integrate_buckets+0x32>
    24b6:	4663      	mov	r3, ip
    24b8:	f10c 04c0 	add.w	r4, ip, #192	; 0xc0
    24bc:	2000      	movs	r0, #0
    24be:	f843 0b04 	str.w	r0, [r3], #4
    24c2:	42a3      	cmp	r3, r4
    24c4:	d1fb      	bne.n	24be <POINTonE1_integrate_buckets+0x46>
    24c6:	b1dd      	cbz	r5, 2500 <POINTonE1_integrate_buckets+0x88>
    24c8:	25c0      	movs	r5, #192	; 0xc0
    24ca:	4095      	lsls	r5, r2
    24cc:	440d      	add	r5, r1
    24ce:	3dc0      	subs	r5, #192	; 0xc0
    24d0:	4689      	mov	r9, r1
    24d2:	2600      	movs	r6, #0
    24d4:	e002      	b.n	24dc <POINTonE1_integrate_buckets+0x64>
    24d6:	3dc0      	subs	r5, #192	; 0xc0
    24d8:	454d      	cmp	r5, r9
    24da:	d011      	beq.n	2500 <POINTonE1_integrate_buckets+0x88>
    24dc:	f1a5 04c0 	sub.w	r4, r5, #192	; 0xc0
    24e0:	46a0      	mov	r8, r4
    24e2:	4622      	mov	r2, r4
    24e4:	a902      	add	r1, sp, #8
    24e6:	4608      	mov	r0, r1
    24e8:	f7ff fe1c 	bl	2124 <POINTonE1xyzz_dadd>
    24ec:	aa02      	add	r2, sp, #8
    24ee:	a932      	add	r1, sp, #200	; 0xc8
    24f0:	4608      	mov	r0, r1
    24f2:	f7ff fe17 	bl	2124 <POINTonE1xyzz_dadd>
    24f6:	f844 6b04 	str.w	r6, [r4], #4
    24fa:	42a5      	cmp	r5, r4
    24fc:	d1fb      	bne.n	24f6 <POINTonE1_integrate_buckets+0x7e>
    24fe:	e7ea      	b.n	24d6 <POINTonE1_integrate_buckets+0x5e>
    2500:	4c10      	ldr	r4, [pc, #64]	; (2544 <POINTonE1_integrate_buckets+0xcc>)
    2502:	260c      	movs	r6, #12
    2504:	9601      	str	r6, [sp, #4]
    2506:	4d10      	ldr	r5, [pc, #64]	; (2548 <POINTonE1_integrate_buckets+0xd0>)
    2508:	9500      	str	r5, [sp, #0]
    250a:	4623      	mov	r3, r4
    250c:	aa56      	add	r2, sp, #344	; 0x158
    250e:	a932      	add	r1, sp, #200	; 0xc8
    2510:	4638      	mov	r0, r7
    2512:	f7fe fb0a 	bl	b2a <mul_mont_n>
    2516:	9601      	str	r6, [sp, #4]
    2518:	9500      	str	r5, [sp, #0]
    251a:	4623      	mov	r3, r4
    251c:	aa4a      	add	r2, sp, #296	; 0x128
    251e:	a93e      	add	r1, sp, #248	; 0xf8
    2520:	f107 0030 	add.w	r0, r7, #48	; 0x30
    2524:	f7fe fb01 	bl	b2a <mul_mont_n>
    2528:	aa55      	add	r2, sp, #340	; 0x154
    252a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    252e:	378c      	adds	r7, #140	; 0x8c
    2530:	f852 1f04 	ldr.w	r1, [r2, #4]!
    2534:	f843 1f04 	str.w	r1, [r3, #4]!
    2538:	429f      	cmp	r7, r3
    253a:	d1f9      	bne.n	2530 <POINTonE1_integrate_buckets+0xb8>
    253c:	b063      	add	sp, #396	; 0x18c
    253e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2542:	bf00      	nop
    2544:	0001ade8 	.word	0x0001ade8
    2548:	fffcfffd 	.word	0xfffcfffd

0000254c <lshift_mod_n>:
    254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2550:	b085      	sub	sp, #20
    2552:	af00      	add	r7, sp, #0
    2554:	60b8      	str	r0, [r7, #8]
    2556:	460d      	mov	r5, r1
    2558:	607b      	str	r3, [r7, #4]
    255a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    255c:	0089      	lsls	r1, r1, #2
    255e:	1dcb      	adds	r3, r1, #7
    2560:	f023 0307 	bic.w	r3, r3, #7
    2564:	ebad 0d03 	sub.w	sp, sp, r3
    2568:	466c      	mov	r4, sp
    256a:	60fc      	str	r4, [r7, #12]
    256c:	2a00      	cmp	r2, #0
    256e:	d048      	beq.n	2602 <lshift_mod_n+0xb6>
    2570:	f102 3aff 	add.w	sl, r2, #4294967295
    2574:	f1a1 0b04 	sub.w	fp, r1, #4
    2578:	eb04 090b 	add.w	r9, r4, fp
    257c:	f1a0 0804 	sub.w	r8, r0, #4
    2580:	4488      	add	r8, r1
    2582:	6038      	str	r0, [r7, #0]
    2584:	e039      	b.n	25fa <lshift_mod_n+0xae>
    2586:	1f2a      	subs	r2, r5, #4
    2588:	68fb      	ldr	r3, [r7, #12]
    258a:	1f18      	subs	r0, r3, #4
    258c:	445d      	add	r5, fp
    258e:	4604      	mov	r4, r0
    2590:	2300      	movs	r3, #0
    2592:	f852 1f04 	ldr.w	r1, [r2, #4]!
    2596:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    259a:	f844 3f04 	str.w	r3, [r4, #4]!
    259e:	0fcb      	lsrs	r3, r1, #31
    25a0:	42aa      	cmp	r2, r5
    25a2:	d1f6      	bne.n	2592 <lshift_mod_n+0x46>
    25a4:	687a      	ldr	r2, [r7, #4]
    25a6:	f1a2 0c04 	sub.w	ip, r2, #4
    25aa:	68ba      	ldr	r2, [r7, #8]
    25ac:	3a04      	subs	r2, #4
    25ae:	4616      	mov	r6, r2
    25b0:	4601      	mov	r1, r0
    25b2:	2400      	movs	r4, #0
    25b4:	4686      	mov	lr, r0
    25b6:	f851 0f04 	ldr.w	r0, [r1, #4]!
    25ba:	1b04      	subs	r4, r0, r4
    25bc:	eb60 0500 	sbc.w	r5, r0, r0
    25c0:	f85c 0f04 	ldr.w	r0, [ip, #4]!
    25c4:	1a24      	subs	r4, r4, r0
    25c6:	f165 0500 	sbc.w	r5, r5, #0
    25ca:	f846 4f04 	str.w	r4, [r6, #4]!
    25ce:	f005 0401 	and.w	r4, r5, #1
    25d2:	4549      	cmp	r1, r9
    25d4:	d1ef      	bne.n	25b6 <lshift_mod_n+0x6a>
    25d6:	4670      	mov	r0, lr
    25d8:	1b1c      	subs	r4, r3, r4
    25da:	f852 1f04 	ldr.w	r1, [r2, #4]!
    25de:	f850 3f04 	ldr.w	r3, [r0, #4]!
    25e2:	404b      	eors	r3, r1
    25e4:	4023      	ands	r3, r4
    25e6:	404b      	eors	r3, r1
    25e8:	6013      	str	r3, [r2, #0]
    25ea:	4542      	cmp	r2, r8
    25ec:	d1f5      	bne.n	25da <lshift_mod_n+0x8e>
    25ee:	f10a 3aff 	add.w	sl, sl, #4294967295
    25f2:	f1ba 3fff 	cmp.w	sl, #4294967295
    25f6:	d004      	beq.n	2602 <lshift_mod_n+0xb6>
    25f8:	683d      	ldr	r5, [r7, #0]
    25fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    25fc:	2b00      	cmp	r3, #0
    25fe:	d1c2      	bne.n	2586 <lshift_mod_n+0x3a>
    2600:	e7f5      	b.n	25ee <lshift_mod_n+0xa2>
    2602:	3714      	adds	r7, #20
    2604:	46bd      	mov	sp, r7
    2606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000260a <POINTonE1_double>:
    260a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    260e:	b0a6      	sub	sp, #152	; 0x98
    2610:	4606      	mov	r6, r0
    2612:	460f      	mov	r7, r1
    2614:	4c4b      	ldr	r4, [pc, #300]	; (2744 <POINTonE1_double+0x13a>)
    2616:	250c      	movs	r5, #12
    2618:	9501      	str	r5, [sp, #4]
    261a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 2748 <POINTonE1_double+0x13e>
    261e:	f8cd 8000 	str.w	r8, [sp]
    2622:	4623      	mov	r3, r4
    2624:	460a      	mov	r2, r1
    2626:	a81a      	add	r0, sp, #104	; 0x68
    2628:	f7fe fa7f 	bl	b2a <mul_mont_n>
    262c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
    2630:	9501      	str	r5, [sp, #4]
    2632:	f8cd 8000 	str.w	r8, [sp]
    2636:	4623      	mov	r3, r4
    2638:	4652      	mov	r2, sl
    263a:	4651      	mov	r1, sl
    263c:	a80e      	add	r0, sp, #56	; 0x38
    263e:	f7fe fa74 	bl	b2a <mul_mont_n>
    2642:	9501      	str	r5, [sp, #4]
    2644:	f8cd 8000 	str.w	r8, [sp]
    2648:	4623      	mov	r3, r4
    264a:	aa0e      	add	r2, sp, #56	; 0x38
    264c:	4611      	mov	r1, r2
    264e:	a802      	add	r0, sp, #8
    2650:	f7fe fa6b 	bl	b2a <mul_mont_n>
    2654:	9500      	str	r5, [sp, #0]
    2656:	4623      	mov	r3, r4
    2658:	463a      	mov	r2, r7
    265a:	a90e      	add	r1, sp, #56	; 0x38
    265c:	4608      	mov	r0, r1
    265e:	f7fe fd0d 	bl	107c <add_mod_n>
    2662:	9501      	str	r5, [sp, #4]
    2664:	f8cd 8000 	str.w	r8, [sp]
    2668:	4623      	mov	r3, r4
    266a:	aa0e      	add	r2, sp, #56	; 0x38
    266c:	4611      	mov	r1, r2
    266e:	4610      	mov	r0, r2
    2670:	f7fe fa5b 	bl	b2a <mul_mont_n>
    2674:	9500      	str	r5, [sp, #0]
    2676:	4623      	mov	r3, r4
    2678:	aa1a      	add	r2, sp, #104	; 0x68
    267a:	a90e      	add	r1, sp, #56	; 0x38
    267c:	4608      	mov	r0, r1
    267e:	f7fe f84a 	bl	716 <sub_mod_n>
    2682:	9500      	str	r5, [sp, #0]
    2684:	4623      	mov	r3, r4
    2686:	aa02      	add	r2, sp, #8
    2688:	a90e      	add	r1, sp, #56	; 0x38
    268a:	4608      	mov	r0, r1
    268c:	f7fe f843 	bl	716 <sub_mod_n>
    2690:	9500      	str	r5, [sp, #0]
    2692:	4623      	mov	r3, r4
    2694:	aa0e      	add	r2, sp, #56	; 0x38
    2696:	4611      	mov	r1, r2
    2698:	4610      	mov	r0, r2
    269a:	f7fe fcef 	bl	107c <add_mod_n>
    269e:	462b      	mov	r3, r5
    26a0:	4622      	mov	r2, r4
    26a2:	a91a      	add	r1, sp, #104	; 0x68
    26a4:	4608      	mov	r0, r1
    26a6:	f7ff f983 	bl	19b0 <mul_by_3_mod_n>
    26aa:	9501      	str	r5, [sp, #4]
    26ac:	f8cd 8000 	str.w	r8, [sp]
    26b0:	4623      	mov	r3, r4
    26b2:	aa1a      	add	r2, sp, #104	; 0x68
    26b4:	4611      	mov	r1, r2
    26b6:	4630      	mov	r0, r6
    26b8:	f7fe fa37 	bl	b2a <mul_mont_n>
    26bc:	9500      	str	r5, [sp, #0]
    26be:	4623      	mov	r3, r4
    26c0:	aa0e      	add	r2, sp, #56	; 0x38
    26c2:	4631      	mov	r1, r6
    26c4:	4630      	mov	r0, r6
    26c6:	f7fe f826 	bl	716 <sub_mod_n>
    26ca:	9500      	str	r5, [sp, #0]
    26cc:	4623      	mov	r3, r4
    26ce:	aa0e      	add	r2, sp, #56	; 0x38
    26d0:	4631      	mov	r1, r6
    26d2:	4630      	mov	r0, r6
    26d4:	f7fe f81f 	bl	716 <sub_mod_n>
    26d8:	f106 0960 	add.w	r9, r6, #96	; 0x60
    26dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
    26e0:	9500      	str	r5, [sp, #0]
    26e2:	4623      	mov	r3, r4
    26e4:	460a      	mov	r2, r1
    26e6:	4648      	mov	r0, r9
    26e8:	f7fe fcc8 	bl	107c <add_mod_n>
    26ec:	9501      	str	r5, [sp, #4]
    26ee:	f8cd 8000 	str.w	r8, [sp]
    26f2:	4623      	mov	r3, r4
    26f4:	4652      	mov	r2, sl
    26f6:	4649      	mov	r1, r9
    26f8:	4648      	mov	r0, r9
    26fa:	f7fe fa16 	bl	b2a <mul_mont_n>
    26fe:	9500      	str	r5, [sp, #0]
    2700:	4623      	mov	r3, r4
    2702:	2203      	movs	r2, #3
    2704:	a902      	add	r1, sp, #8
    2706:	4608      	mov	r0, r1
    2708:	f7ff ff20 	bl	254c <lshift_mod_n>
    270c:	f106 0730 	add.w	r7, r6, #48	; 0x30
    2710:	9500      	str	r5, [sp, #0]
    2712:	4623      	mov	r3, r4
    2714:	4632      	mov	r2, r6
    2716:	a90e      	add	r1, sp, #56	; 0x38
    2718:	4638      	mov	r0, r7
    271a:	f7fd fffc 	bl	716 <sub_mod_n>
    271e:	9501      	str	r5, [sp, #4]
    2720:	f8cd 8000 	str.w	r8, [sp]
    2724:	4623      	mov	r3, r4
    2726:	aa1a      	add	r2, sp, #104	; 0x68
    2728:	4639      	mov	r1, r7
    272a:	4638      	mov	r0, r7
    272c:	f7fe f9fd 	bl	b2a <mul_mont_n>
    2730:	9500      	str	r5, [sp, #0]
    2732:	4623      	mov	r3, r4
    2734:	aa02      	add	r2, sp, #8
    2736:	4639      	mov	r1, r7
    2738:	4638      	mov	r0, r7
    273a:	f7fd ffec 	bl	716 <sub_mod_n>
    273e:	b026      	add	sp, #152	; 0x98
    2740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2744:	0001ade8 	.word	0x0001ade8
    2748:	fffcfffd 	.word	0xfffcfffd

0000274c <POINTonE1_precompute_w5>:
    274c:	b570      	push	{r4, r5, r6, lr}
    274e:	4606      	mov	r6, r0
    2750:	1f0b      	subs	r3, r1, #4
    2752:	1f02      	subs	r2, r0, #4
    2754:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    2758:	f853 4f04 	ldr.w	r4, [r3, #4]!
    275c:	f842 4f04 	str.w	r4, [r2, #4]!
    2760:	4283      	cmp	r3, r0
    2762:	d1f9      	bne.n	2758 <POINTonE1_precompute_w5+0xc>
    2764:	f106 0090 	add.w	r0, r6, #144	; 0x90
    2768:	f7ff ff4f 	bl	260a <POINTonE1_double>
    276c:	f506 7590 	add.w	r5, r6, #288	; 0x120
    2770:	4634      	mov	r4, r6
    2772:	f506 767c 	add.w	r6, r6, #1008	; 0x3f0
    2776:	4622      	mov	r2, r4
    2778:	3490      	adds	r4, #144	; 0x90
    277a:	4621      	mov	r1, r4
    277c:	4628      	mov	r0, r5
    277e:	f7fe fea5 	bl	14cc <POINTonE1_add>
    2782:	4621      	mov	r1, r4
    2784:	f105 0090 	add.w	r0, r5, #144	; 0x90
    2788:	f7ff ff3f 	bl	260a <POINTonE1_double>
    278c:	f505 7590 	add.w	r5, r5, #288	; 0x120
    2790:	42b4      	cmp	r4, r6
    2792:	d1f0      	bne.n	2776 <POINTonE1_precompute_w5+0x2a>
    2794:	bd70      	pop	{r4, r5, r6, pc}

00002796 <POINTonE1_add_n_dbl>:
    2796:	b570      	push	{r4, r5, r6, lr}
    2798:	4605      	mov	r5, r0
    279a:	4616      	mov	r6, r2
    279c:	2300      	movs	r3, #0
    279e:	460a      	mov	r2, r1
    27a0:	4601      	mov	r1, r0
    27a2:	f7ff f9a0 	bl	1ae6 <POINTonE1_dadd>
    27a6:	1e74      	subs	r4, r6, #1
    27a8:	b13e      	cbz	r6, 27ba <POINTonE1_add_n_dbl+0x24>
    27aa:	4629      	mov	r1, r5
    27ac:	4628      	mov	r0, r5
    27ae:	f7ff ff2c 	bl	260a <POINTonE1_double>
    27b2:	3c01      	subs	r4, #1
    27b4:	f1b4 3fff 	cmp.w	r4, #4294967295
    27b8:	d1f7      	bne.n	27aa <POINTonE1_add_n_dbl+0x14>
    27ba:	bd70      	pop	{r4, r5, r6, pc}

000027bc <POINTonE1_times_minus_z>:
    27bc:	b538      	push	{r3, r4, r5, lr}
    27be:	4604      	mov	r4, r0
    27c0:	460d      	mov	r5, r1
    27c2:	f7ff ff22 	bl	260a <POINTonE1_double>
    27c6:	2202      	movs	r2, #2
    27c8:	4629      	mov	r1, r5
    27ca:	4620      	mov	r0, r4
    27cc:	f7ff ffe3 	bl	2796 <POINTonE1_add_n_dbl>
    27d0:	2203      	movs	r2, #3
    27d2:	4629      	mov	r1, r5
    27d4:	4620      	mov	r0, r4
    27d6:	f7ff ffde 	bl	2796 <POINTonE1_add_n_dbl>
    27da:	2209      	movs	r2, #9
    27dc:	4629      	mov	r1, r5
    27de:	4620      	mov	r0, r4
    27e0:	f7ff ffd9 	bl	2796 <POINTonE1_add_n_dbl>
    27e4:	2220      	movs	r2, #32
    27e6:	4629      	mov	r1, r5
    27e8:	4620      	mov	r0, r4
    27ea:	f7ff ffd4 	bl	2796 <POINTonE1_add_n_dbl>
    27ee:	2210      	movs	r2, #16
    27f0:	4629      	mov	r1, r5
    27f2:	4620      	mov	r0, r4
    27f4:	f7ff ffcf 	bl	2796 <POINTonE1_add_n_dbl>
    27f8:	bd38      	pop	{r3, r4, r5, pc}

000027fa <POINTonE1_precompute_row_wbits>:
    27fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27fe:	4607      	mov	r7, r0
    2800:	4690      	mov	r8, r2
    2802:	3901      	subs	r1, #1
    2804:	2601      	movs	r6, #1
    2806:	408e      	lsls	r6, r1
    2808:	1f13      	subs	r3, r2, #4
    280a:	1f02      	subs	r2, r0, #4
    280c:	f108 005c 	add.w	r0, r8, #92	; 0x5c
    2810:	f853 1f04 	ldr.w	r1, [r3, #4]!
    2814:	f842 1f04 	str.w	r1, [r2, #4]!
    2818:	4283      	cmp	r3, r0
    281a:	d1f9      	bne.n	2810 <POINTonE1_precompute_row_wbits+0x16>
    281c:	4a17      	ldr	r2, [pc, #92]	; (287c <POINTonE1_precompute_row_wbits+0x82>)
    281e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    2822:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    2826:	f852 1b04 	ldr.w	r1, [r2], #4
    282a:	f843 1f04 	str.w	r1, [r3, #4]!
    282e:	4283      	cmp	r3, r0
    2830:	d1f9      	bne.n	2826 <POINTonE1_precompute_row_wbits+0x2c>
    2832:	f107 0590 	add.w	r5, r7, #144	; 0x90
    2836:	4639      	mov	r1, r7
    2838:	4628      	mov	r0, r5
    283a:	f7ff fee6 	bl	260a <POINTonE1_double>
    283e:	2e02      	cmp	r6, #2
    2840:	d919      	bls.n	2876 <POINTonE1_precompute_row_wbits+0x7c>
    2842:	f507 7490 	add.w	r4, r7, #288	; 0x120
    2846:	3e03      	subs	r6, #3
    2848:	0876      	lsrs	r6, r6, #1
    284a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    284e:	f507 7610 	add.w	r6, r7, #576	; 0x240
    2852:	eb06 1643 	add.w	r6, r6, r3, lsl #5
    2856:	4642      	mov	r2, r8
    2858:	f1a4 0190 	sub.w	r1, r4, #144	; 0x90
    285c:	4620      	mov	r0, r4
    285e:	f7fe ff7b 	bl	1758 <POINTonE1_add_affine>
    2862:	4629      	mov	r1, r5
    2864:	f104 0090 	add.w	r0, r4, #144	; 0x90
    2868:	f7ff fecf 	bl	260a <POINTonE1_double>
    286c:	f504 7490 	add.w	r4, r4, #288	; 0x120
    2870:	3590      	adds	r5, #144	; 0x90
    2872:	42b4      	cmp	r4, r6
    2874:	d1ef      	bne.n	2856 <POINTonE1_precompute_row_wbits+0x5c>
    2876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    287a:	bf00      	nop
    287c:	0001ae48 	.word	0x0001ae48

00002880 <cneg_mod_n>:
    2880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2884:	af00      	add	r7, sp, #0
    2886:	4693      	mov	fp, r2
    2888:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
    288c:	ea4f 0988 	mov.w	r9, r8, lsl #2
    2890:	f109 0207 	add.w	r2, r9, #7
    2894:	f022 0207 	bic.w	r2, r2, #7
    2898:	ebad 0d02 	sub.w	sp, sp, r2
    289c:	f1b8 0f00 	cmp.w	r8, #0
    28a0:	d041      	beq.n	2926 <cneg_mod_n+0xa6>
    28a2:	4682      	mov	sl, r0
    28a4:	460c      	mov	r4, r1
    28a6:	466d      	mov	r5, sp
    28a8:	3b04      	subs	r3, #4
    28aa:	1f0a      	subs	r2, r1, #4
    28ac:	f1a5 0c04 	sub.w	ip, r5, #4
    28b0:	4499      	add	r9, r3
    28b2:	4616      	mov	r6, r2
    28b4:	2000      	movs	r0, #0
    28b6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    28ba:	1a08      	subs	r0, r1, r0
    28bc:	eb61 0101 	sbc.w	r1, r1, r1
    28c0:	f856 ef04 	ldr.w	lr, [r6, #4]!
    28c4:	ebb0 000e 	subs.w	r0, r0, lr
    28c8:	f161 0100 	sbc.w	r1, r1, #0
    28cc:	f84c 0f04 	str.w	r0, [ip, #4]!
    28d0:	f001 0001 	and.w	r0, r1, #1
    28d4:	454b      	cmp	r3, r9
    28d6:	d1ee      	bne.n	28b6 <cneg_mod_n+0x36>
    28d8:	f038 4140 	bics.w	r1, r8, #3221225472	; 0xc0000000
    28dc:	d026      	beq.n	292c <cneg_mod_n+0xac>
    28de:	1f23      	subs	r3, r4, #4
    28e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    28e4:	2300      	movs	r3, #0
    28e6:	f852 0f04 	ldr.w	r0, [r2, #4]!
    28ea:	4303      	orrs	r3, r0
    28ec:	428a      	cmp	r2, r1
    28ee:	d1fa      	bne.n	28e6 <cneg_mod_n+0x66>
    28f0:	1e59      	subs	r1, r3, #1
    28f2:	ea21 0103 	bic.w	r1, r1, r3
    28f6:	2900      	cmp	r1, #0
    28f8:	bfb4      	ite	lt
    28fa:	2100      	movlt	r1, #0
    28fc:	f00b 0101 	andge.w	r1, fp, #1
    2900:	4248      	negs	r0, r1
    2902:	3c04      	subs	r4, #4
    2904:	3d04      	subs	r5, #4
    2906:	f1aa 0a04 	sub.w	sl, sl, #4
    290a:	2600      	movs	r6, #0
    290c:	3901      	subs	r1, #1
    290e:	f854 3f04 	ldr.w	r3, [r4, #4]!
    2912:	400b      	ands	r3, r1
    2914:	f855 2f04 	ldr.w	r2, [r5, #4]!
    2918:	4002      	ands	r2, r0
    291a:	4313      	orrs	r3, r2
    291c:	f84a 3f04 	str.w	r3, [sl, #4]!
    2920:	3601      	adds	r6, #1
    2922:	45b0      	cmp	r8, r6
    2924:	d8f3      	bhi.n	290e <cneg_mod_n+0x8e>
    2926:	46bd      	mov	sp, r7
    2928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    292c:	4608      	mov	r0, r1
    292e:	e7e8      	b.n	2902 <cneg_mod_n+0x82>

00002930 <POINTonE1_cneg>:
    2930:	b500      	push	{lr}
    2932:	b083      	sub	sp, #12
    2934:	460a      	mov	r2, r1
    2936:	3030      	adds	r0, #48	; 0x30
    2938:	230c      	movs	r3, #12
    293a:	9300      	str	r3, [sp, #0]
    293c:	4b03      	ldr	r3, [pc, #12]	; (294c <POINTonE1_cneg+0x1c>)
    293e:	4601      	mov	r1, r0
    2940:	f7ff ff9e 	bl	2880 <cneg_mod_n>
    2944:	b003      	add	sp, #12
    2946:	f85d fb04 	ldr.w	pc, [sp], #4
    294a:	bf00      	nop
    294c:	0001ade8 	.word	0x0001ade8

00002950 <POINTonE1_gather_booth_w5>:
    2950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2952:	460f      	mov	r7, r1
    2954:	f3c2 1140 	ubfx	r1, r2, #5, #1
    2958:	f002 0c1f 	and.w	ip, r2, #31
    295c:	4603      	mov	r3, r0
    295e:	f100 0490 	add.w	r4, r0, #144	; 0x90
    2962:	2200      	movs	r2, #0
    2964:	f843 2b04 	str.w	r2, [r3], #4
    2968:	42a3      	cmp	r3, r4
    296a:	d1fb      	bne.n	2964 <POINTonE1_gather_booth_w5+0x14>
    296c:	378c      	adds	r7, #140	; 0x8c
    296e:	f04f 0e01 	mov.w	lr, #1
    2972:	e005      	b.n	2980 <POINTonE1_gather_booth_w5+0x30>
    2974:	f10e 0e01 	add.w	lr, lr, #1
    2978:	3790      	adds	r7, #144	; 0x90
    297a:	f1be 0f11 	cmp.w	lr, #17
    297e:	d012      	beq.n	29a6 <POINTonE1_gather_booth_w5+0x56>
    2980:	ea8c 060e 	eor.w	r6, ip, lr
    2984:	b2f6      	uxtb	r6, r6
    2986:	3e01      	subs	r6, #1
    2988:	17f6      	asrs	r6, r6, #31
    298a:	f1a7 0490 	sub.w	r4, r7, #144	; 0x90
    298e:	1f02      	subs	r2, r0, #4
    2990:	f852 5f04 	ldr.w	r5, [r2, #4]!
    2994:	f854 3f04 	ldr.w	r3, [r4, #4]!
    2998:	2e00      	cmp	r6, #0
    299a:	bf08      	it	eq
    299c:	462b      	moveq	r3, r5
    299e:	6013      	str	r3, [r2, #0]
    29a0:	42bc      	cmp	r4, r7
    29a2:	d1f5      	bne.n	2990 <POINTonE1_gather_booth_w5+0x40>
    29a4:	e7e6      	b.n	2974 <POINTonE1_gather_booth_w5+0x24>
    29a6:	f7ff ffc3 	bl	2930 <POINTonE1_cneg>
    29aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000029ac <POINTonE1_mult_w5>:
    29ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    29b0:	f6ad 1d94 	subw	sp, sp, #2452	; 0x994
    29b4:	4605      	mov	r5, r0
    29b6:	4617      	mov	r7, r2
    29b8:	461e      	mov	r6, r3
    29ba:	4668      	mov	r0, sp
    29bc:	f7ff fec6 	bl	274c <POINTonE1_precompute_w5>
    29c0:	4b34      	ldr	r3, [pc, #208]	; (2a94 <POINTonE1_mult_w5+0xe8>)
    29c2:	fba3 2306 	umull	r2, r3, r3, r6
    29c6:	f023 0203 	bic.w	r2, r3, #3
    29ca:	eb02 0293 	add.w	r2, r2, r3, lsr #2
    29ce:	1ab2      	subs	r2, r6, r2
    29d0:	1c54      	adds	r4, r2, #1
    29d2:	1ab6      	subs	r6, r6, r2
    29d4:	d036      	beq.n	2a44 <POINTonE1_mult_w5+0x98>
    29d6:	4622      	mov	r2, r4
    29d8:	1e71      	subs	r1, r6, #1
    29da:	4638      	mov	r0, r7
    29dc:	f7fd fe50 	bl	680 <get_wval>
    29e0:	f04f 33ff 	mov.w	r3, #4294967295
    29e4:	40a3      	lsls	r3, r4
    29e6:	2105      	movs	r1, #5
    29e8:	ea20 0003 	bic.w	r0, r0, r3
    29ec:	f7fd fe71 	bl	6d2 <booth_encode>
    29f0:	4602      	mov	r2, r0
    29f2:	4669      	mov	r1, sp
    29f4:	4628      	mov	r0, r5
    29f6:	f7ff ffab 	bl	2950 <POINTonE1_gather_booth_w5>
    29fa:	f04f 0906 	mov.w	r9, #6
    29fe:	f04f 0805 	mov.w	r8, #5
    2a02:	2405      	movs	r4, #5
    2a04:	4629      	mov	r1, r5
    2a06:	4628      	mov	r0, r5
    2a08:	f7ff fdff 	bl	260a <POINTonE1_double>
    2a0c:	3c01      	subs	r4, #1
    2a0e:	d1f9      	bne.n	2a04 <POINTonE1_mult_w5+0x58>
    2a10:	1f74      	subs	r4, r6, #5
    2a12:	d027      	beq.n	2a64 <POINTonE1_mult_w5+0xb8>
    2a14:	464a      	mov	r2, r9
    2a16:	1fb1      	subs	r1, r6, #6
    2a18:	4638      	mov	r0, r7
    2a1a:	f7fd fe31 	bl	680 <get_wval>
    2a1e:	4641      	mov	r1, r8
    2a20:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2a24:	f7fd fe55 	bl	6d2 <booth_encode>
    2a28:	4602      	mov	r2, r0
    2a2a:	4669      	mov	r1, sp
    2a2c:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    2a30:	f7ff ff8e 	bl	2950 <POINTonE1_gather_booth_w5>
    2a34:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    2a38:	4629      	mov	r1, r5
    2a3a:	4628      	mov	r0, r5
    2a3c:	f7fe fd46 	bl	14cc <POINTonE1_add>
    2a40:	4626      	mov	r6, r4
    2a42:	e7de      	b.n	2a02 <POINTonE1_mult_w5+0x56>
    2a44:	7838      	ldrb	r0, [r7, #0]
    2a46:	f04f 33ff 	mov.w	r3, #4294967295
    2a4a:	40a3      	lsls	r3, r4
    2a4c:	43db      	mvns	r3, r3
    2a4e:	2105      	movs	r1, #5
    2a50:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    2a54:	f7fd fe3d 	bl	6d2 <booth_encode>
    2a58:	4602      	mov	r2, r0
    2a5a:	4669      	mov	r1, sp
    2a5c:	4628      	mov	r0, r5
    2a5e:	f7ff ff77 	bl	2950 <POINTonE1_gather_booth_w5>
    2a62:	e013      	b.n	2a8c <POINTonE1_mult_w5+0xe0>
    2a64:	7838      	ldrb	r0, [r7, #0]
    2a66:	0040      	lsls	r0, r0, #1
    2a68:	2105      	movs	r1, #5
    2a6a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    2a6e:	f7fd fe30 	bl	6d2 <booth_encode>
    2a72:	4602      	mov	r2, r0
    2a74:	4669      	mov	r1, sp
    2a76:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    2a7a:	f7ff ff69 	bl	2950 <POINTonE1_gather_booth_w5>
    2a7e:	2300      	movs	r3, #0
    2a80:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    2a84:	4629      	mov	r1, r5
    2a86:	4628      	mov	r0, r5
    2a88:	f7ff f82d 	bl	1ae6 <POINTonE1_dadd>
    2a8c:	f60d 1d94 	addw	sp, sp, #2452	; 0x994
    2a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2a94:	cccccccd 	.word	0xcccccccd

00002a98 <POINTonE1_gather_booth_w4>:
    2a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9a:	460f      	mov	r7, r1
    2a9c:	f3c2 1100 	ubfx	r1, r2, #4, #1
    2aa0:	f002 0c0f 	and.w	ip, r2, #15
    2aa4:	4603      	mov	r3, r0
    2aa6:	f100 0490 	add.w	r4, r0, #144	; 0x90
    2aaa:	2200      	movs	r2, #0
    2aac:	f843 2b04 	str.w	r2, [r3], #4
    2ab0:	42a3      	cmp	r3, r4
    2ab2:	d1fb      	bne.n	2aac <POINTonE1_gather_booth_w4+0x14>
    2ab4:	378c      	adds	r7, #140	; 0x8c
    2ab6:	f04f 0e01 	mov.w	lr, #1
    2aba:	ea8c 060e 	eor.w	r6, ip, lr
    2abe:	b2f6      	uxtb	r6, r6
    2ac0:	3e01      	subs	r6, #1
    2ac2:	17f6      	asrs	r6, r6, #31
    2ac4:	f1a7 0490 	sub.w	r4, r7, #144	; 0x90
    2ac8:	1f02      	subs	r2, r0, #4
    2aca:	f852 5f04 	ldr.w	r5, [r2, #4]!
    2ace:	f854 3f04 	ldr.w	r3, [r4, #4]!
    2ad2:	2e00      	cmp	r6, #0
    2ad4:	bf08      	it	eq
    2ad6:	462b      	moveq	r3, r5
    2ad8:	6013      	str	r3, [r2, #0]
    2ada:	42bc      	cmp	r4, r7
    2adc:	d1f5      	bne.n	2aca <POINTonE1_gather_booth_w4+0x32>
    2ade:	f10e 0e01 	add.w	lr, lr, #1
    2ae2:	3790      	adds	r7, #144	; 0x90
    2ae4:	f1be 0f09 	cmp.w	lr, #9
    2ae8:	d1e7      	bne.n	2aba <POINTonE1_gather_booth_w4+0x22>
    2aea:	f7ff ff21 	bl	2930 <POINTonE1_cneg>
    2aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002af0 <POINTonE1_mult_w4>:
    2af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2af4:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
    2af8:	4605      	mov	r5, r0
    2afa:	4690      	mov	r8, r2
    2afc:	461e      	mov	r6, r3
    2afe:	1f0c      	subs	r4, r1, #4
    2b00:	4668      	mov	r0, sp
    2b02:	aa24      	add	r2, sp, #144	; 0x90
    2b04:	f854 7f04 	ldr.w	r7, [r4, #4]!
    2b08:	f840 7b04 	str.w	r7, [r0], #4
    2b0c:	4282      	cmp	r2, r0
    2b0e:	d1f9      	bne.n	2b04 <POINTonE1_mult_w4+0x14>
    2b10:	a824      	add	r0, sp, #144	; 0x90
    2b12:	f7ff fd7a 	bl	260a <POINTonE1_double>
    2b16:	466a      	mov	r2, sp
    2b18:	a924      	add	r1, sp, #144	; 0x90
    2b1a:	a848      	add	r0, sp, #288	; 0x120
    2b1c:	f7fe fcd6 	bl	14cc <POINTonE1_add>
    2b20:	a924      	add	r1, sp, #144	; 0x90
    2b22:	a86c      	add	r0, sp, #432	; 0x1b0
    2b24:	f7ff fd71 	bl	260a <POINTonE1_double>
    2b28:	aa24      	add	r2, sp, #144	; 0x90
    2b2a:	a948      	add	r1, sp, #288	; 0x120
    2b2c:	a890      	add	r0, sp, #576	; 0x240
    2b2e:	f7fe fccd 	bl	14cc <POINTonE1_add>
    2b32:	a948      	add	r1, sp, #288	; 0x120
    2b34:	a8b4      	add	r0, sp, #720	; 0x2d0
    2b36:	f7ff fd68 	bl	260a <POINTonE1_double>
    2b3a:	aa48      	add	r2, sp, #288	; 0x120
    2b3c:	a96c      	add	r1, sp, #432	; 0x1b0
    2b3e:	a8d8      	add	r0, sp, #864	; 0x360
    2b40:	f7fe fcc4 	bl	14cc <POINTonE1_add>
    2b44:	a96c      	add	r1, sp, #432	; 0x1b0
    2b46:	a8fc      	add	r0, sp, #1008	; 0x3f0
    2b48:	f7ff fd5f 	bl	260a <POINTonE1_double>
    2b4c:	f006 0303 	and.w	r3, r6, #3
    2b50:	1c5c      	adds	r4, r3, #1
    2b52:	1af6      	subs	r6, r6, r3
    2b54:	d035      	beq.n	2bc2 <POINTonE1_mult_w4+0xd2>
    2b56:	4622      	mov	r2, r4
    2b58:	1e71      	subs	r1, r6, #1
    2b5a:	4640      	mov	r0, r8
    2b5c:	f7fd fd90 	bl	680 <get_wval>
    2b60:	f04f 33ff 	mov.w	r3, #4294967295
    2b64:	40a3      	lsls	r3, r4
    2b66:	2104      	movs	r1, #4
    2b68:	ea20 0003 	bic.w	r0, r0, r3
    2b6c:	f7fd fdb1 	bl	6d2 <booth_encode>
    2b70:	4602      	mov	r2, r0
    2b72:	4669      	mov	r1, sp
    2b74:	4628      	mov	r0, r5
    2b76:	f7ff ff8f 	bl	2a98 <POINTonE1_gather_booth_w4>
    2b7a:	f04f 0905 	mov.w	r9, #5
    2b7e:	2704      	movs	r7, #4
    2b80:	2404      	movs	r4, #4
    2b82:	4629      	mov	r1, r5
    2b84:	4628      	mov	r0, r5
    2b86:	f7ff fd40 	bl	260a <POINTonE1_double>
    2b8a:	3c01      	subs	r4, #1
    2b8c:	d1f9      	bne.n	2b82 <POINTonE1_mult_w4+0x92>
    2b8e:	1f34      	subs	r4, r6, #4
    2b90:	d028      	beq.n	2be4 <POINTonE1_mult_w4+0xf4>
    2b92:	464a      	mov	r2, r9
    2b94:	1f71      	subs	r1, r6, #5
    2b96:	4640      	mov	r0, r8
    2b98:	f7fd fd72 	bl	680 <get_wval>
    2b9c:	4639      	mov	r1, r7
    2b9e:	f000 001f 	and.w	r0, r0, #31
    2ba2:	f7fd fd96 	bl	6d2 <booth_encode>
    2ba6:	4602      	mov	r2, r0
    2ba8:	4669      	mov	r1, sp
    2baa:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    2bae:	f7ff ff73 	bl	2a98 <POINTonE1_gather_booth_w4>
    2bb2:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    2bb6:	4629      	mov	r1, r5
    2bb8:	4628      	mov	r0, r5
    2bba:	f7fe fc87 	bl	14cc <POINTonE1_add>
    2bbe:	4626      	mov	r6, r4
    2bc0:	e7de      	b.n	2b80 <POINTonE1_mult_w4+0x90>
    2bc2:	f898 0000 	ldrb.w	r0, [r8]
    2bc6:	f04f 33ff 	mov.w	r3, #4294967295
    2bca:	40a3      	lsls	r3, r4
    2bcc:	43db      	mvns	r3, r3
    2bce:	2104      	movs	r1, #4
    2bd0:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    2bd4:	f7fd fd7d 	bl	6d2 <booth_encode>
    2bd8:	4602      	mov	r2, r0
    2bda:	4669      	mov	r1, sp
    2bdc:	4628      	mov	r0, r5
    2bde:	f7ff ff5b 	bl	2a98 <POINTonE1_gather_booth_w4>
    2be2:	e014      	b.n	2c0e <POINTonE1_mult_w4+0x11e>
    2be4:	f898 0000 	ldrb.w	r0, [r8]
    2be8:	0040      	lsls	r0, r0, #1
    2bea:	2104      	movs	r1, #4
    2bec:	f000 001e 	and.w	r0, r0, #30
    2bf0:	f7fd fd6f 	bl	6d2 <booth_encode>
    2bf4:	4602      	mov	r2, r0
    2bf6:	4669      	mov	r1, sp
    2bf8:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    2bfc:	f7ff ff4c 	bl	2a98 <POINTonE1_gather_booth_w4>
    2c00:	2300      	movs	r3, #0
    2c02:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    2c06:	4629      	mov	r1, r5
    2c08:	4628      	mov	r0, r5
    2c0a:	f7fe ff6c 	bl	1ae6 <POINTonE1_dadd>
    2c0e:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
    2c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00002c16 <POINTonE1_gather_booth_wbits>:
    2c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c18:	460c      	mov	r4, r1
    2c1a:	fa23 f102 	lsr.w	r1, r3, r2
    2c1e:	f001 0101 	and.w	r1, r1, #1
    2c22:	f04f 35ff 	mov.w	r5, #4294967295
    2c26:	fa05 f202 	lsl.w	r2, r5, r2
    2c2a:	ea23 0502 	bic.w	r5, r3, r2
    2c2e:	ea62 0203 	orn	r2, r2, r3
    2c32:	1e6b      	subs	r3, r5, #1
    2c34:	4013      	ands	r3, r2
    2c36:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    2c3a:	4f0f      	ldr	r7, [pc, #60]	; (2c78 <POINTonE1_gather_booth_wbits+0x62>)
    2c3c:	f607 42bc 	addw	r2, r7, #3260	; 0xcbc
    2c40:	2b00      	cmp	r3, #0
    2c42:	bfb4      	ite	lt
    2c44:	462b      	movlt	r3, r5
    2c46:	1e6b      	subge	r3, r5, #1
    2c48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c4c:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    2c50:	3c04      	subs	r4, #4
    2c52:	1f05      	subs	r5, r0, #4
    2c54:	f607 571c 	addw	r7, r7, #3356	; 0xd1c
    2c58:	f854 6f04 	ldr.w	r6, [r4, #4]!
    2c5c:	f852 3f04 	ldr.w	r3, [r2, #4]!
    2c60:	f1bc 0f00 	cmp.w	ip, #0
    2c64:	bf08      	it	eq
    2c66:	4633      	moveq	r3, r6
    2c68:	f845 3f04 	str.w	r3, [r5, #4]!
    2c6c:	42ba      	cmp	r2, r7
    2c6e:	d1f3      	bne.n	2c58 <POINTonE1_gather_booth_wbits+0x42>
    2c70:	f7ff fe5e 	bl	2930 <POINTonE1_cneg>
    2c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c76:	bf00      	nop
    2c78:	0001ade8 	.word	0x0001ade8

00002c7c <POINTonE1_in_G1>:
    2c7c:	b510      	push	{r4, lr}
    2c7e:	b0c8      	sub	sp, #288	; 0x120
    2c80:	4604      	mov	r4, r0
    2c82:	4601      	mov	r1, r0
    2c84:	a824      	add	r0, sp, #144	; 0x90
    2c86:	f7ff fd99 	bl	27bc <POINTonE1_times_minus_z>
    2c8a:	a924      	add	r1, sp, #144	; 0x90
    2c8c:	4668      	mov	r0, sp
    2c8e:	f7ff fd95 	bl	27bc <POINTonE1_times_minus_z>
    2c92:	2101      	movs	r1, #1
    2c94:	4668      	mov	r0, sp
    2c96:	f7ff fe4b 	bl	2930 <POINTonE1_cneg>
    2c9a:	4621      	mov	r1, r4
    2c9c:	a824      	add	r0, sp, #144	; 0x90
    2c9e:	f7fe f851 	bl	d44 <sigma>
    2ca2:	a924      	add	r1, sp, #144	; 0x90
    2ca4:	4608      	mov	r0, r1
    2ca6:	f7fe f84d 	bl	d44 <sigma>
    2caa:	4669      	mov	r1, sp
    2cac:	a824      	add	r0, sp, #144	; 0x90
    2cae:	f7fe f8e3 	bl	e78 <POINTonE1_is_equal>
    2cb2:	b048      	add	sp, #288	; 0x120
    2cb4:	bd10      	pop	{r4, pc}

00002cb6 <POINTonE1xyzz_dadd_affine>:
    2cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cba:	b0c3      	sub	sp, #268	; 0x10c
    2cbc:	4604      	mov	r4, r0
    2cbe:	460d      	mov	r5, r1
    2cc0:	4617      	mov	r7, r2
    2cc2:	9303      	str	r3, [sp, #12]
    2cc4:	1f10      	subs	r0, r2, #4
    2cc6:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    2cca:	4603      	mov	r3, r0
    2ccc:	2200      	movs	r2, #0
    2cce:	f853 6f04 	ldr.w	r6, [r3, #4]!
    2cd2:	4332      	orrs	r2, r6
    2cd4:	428b      	cmp	r3, r1
    2cd6:	d1fa      	bne.n	2cce <POINTonE1xyzz_dadd_affine+0x18>
    2cd8:	1e56      	subs	r6, r2, #1
    2cda:	ea26 0202 	bic.w	r2, r6, r2
    2cde:	0fd2      	lsrs	r2, r2, #31
    2ce0:	d12c      	bne.n	2d3c <POINTonE1xyzz_dadd_affine+0x86>
    2ce2:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    2ce6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    2cea:	f105 0cbc 	add.w	ip, r5, #188	; 0xbc
    2cee:	f853 6f04 	ldr.w	r6, [r3, #4]!
    2cf2:	4332      	orrs	r2, r6
    2cf4:	4563      	cmp	r3, ip
    2cf6:	d1fa      	bne.n	2cee <POINTonE1xyzz_dadd_affine+0x38>
    2cf8:	1e56      	subs	r6, r2, #1
    2cfa:	ea26 0202 	bic.w	r2, r6, r2
    2cfe:	0fd6      	lsrs	r6, r2, #31
    2d00:	d028      	beq.n	2d54 <POINTonE1xyzz_dadd_affine+0x9e>
    2d02:	1f23      	subs	r3, r4, #4
    2d04:	f850 2f04 	ldr.w	r2, [r0, #4]!
    2d08:	f843 2f04 	str.w	r2, [r3, #4]!
    2d0c:	4288      	cmp	r0, r1
    2d0e:	d1f9      	bne.n	2d04 <POINTonE1xyzz_dadd_affine+0x4e>
    2d10:	4bb5      	ldr	r3, [pc, #724]	; (2fe8 <POINTonE1xyzz_dadd_affine+0x332>)
    2d12:	f103 0560 	add.w	r5, r3, #96	; 0x60
    2d16:	220c      	movs	r2, #12
    2d18:	9200      	str	r2, [sp, #0]
    2d1a:	9a03      	ldr	r2, [sp, #12]
    2d1c:	4629      	mov	r1, r5
    2d1e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2d22:	f7ff fdad 	bl	2880 <cneg_mod_n>
    2d26:	4629      	mov	r1, r5
    2d28:	f104 038c 	add.w	r3, r4, #140	; 0x8c
    2d2c:	34bc      	adds	r4, #188	; 0xbc
    2d2e:	f851 2b04 	ldr.w	r2, [r1], #4
    2d32:	f843 2f04 	str.w	r2, [r3, #4]!
    2d36:	42a3      	cmp	r3, r4
    2d38:	d1f9      	bne.n	2d2e <POINTonE1xyzz_dadd_affine+0x78>
    2d3a:	e008      	b.n	2d4e <POINTonE1xyzz_dadd_affine+0x98>
    2d3c:	1f2b      	subs	r3, r5, #4
    2d3e:	3c04      	subs	r4, #4
    2d40:	35bc      	adds	r5, #188	; 0xbc
    2d42:	f853 2f04 	ldr.w	r2, [r3, #4]!
    2d46:	f844 2f04 	str.w	r2, [r4, #4]!
    2d4a:	42ab      	cmp	r3, r5
    2d4c:	d1f9      	bne.n	2d42 <POINTonE1xyzz_dadd_affine+0x8c>
    2d4e:	b043      	add	sp, #268	; 0x10c
    2d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d54:	f105 0390 	add.w	r3, r5, #144	; 0x90
    2d58:	461a      	mov	r2, r3
    2d5a:	9304      	str	r3, [sp, #16]
    2d5c:	f8df 8288 	ldr.w	r8, [pc, #648]	; 2fe8 <POINTonE1xyzz_dadd_affine+0x332>
    2d60:	f04f 090c 	mov.w	r9, #12
    2d64:	f8cd 9004 	str.w	r9, [sp, #4]
    2d68:	f8df b280 	ldr.w	fp, [pc, #640]	; 2fec <POINTonE1xyzz_dadd_affine+0x336>
    2d6c:	f8cd b000 	str.w	fp, [sp]
    2d70:	4643      	mov	r3, r8
    2d72:	4639      	mov	r1, r7
    2d74:	a836      	add	r0, sp, #216	; 0xd8
    2d76:	f7fd fed8 	bl	b2a <mul_mont_n>
    2d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
    2d7e:	4619      	mov	r1, r3
    2d80:	9305      	str	r3, [sp, #20]
    2d82:	f8cd 9004 	str.w	r9, [sp, #4]
    2d86:	f8cd b000 	str.w	fp, [sp]
    2d8a:	4643      	mov	r3, r8
    2d8c:	4652      	mov	r2, sl
    2d8e:	a82a      	add	r0, sp, #168	; 0xa8
    2d90:	f7fd fecb 	bl	b2a <mul_mont_n>
    2d94:	f8cd 9000 	str.w	r9, [sp]
    2d98:	4643      	mov	r3, r8
    2d9a:	9a03      	ldr	r2, [sp, #12]
    2d9c:	a92a      	add	r1, sp, #168	; 0xa8
    2d9e:	4608      	mov	r0, r1
    2da0:	f7ff fd6e 	bl	2880 <cneg_mod_n>
    2da4:	f8cd 9000 	str.w	r9, [sp]
    2da8:	4643      	mov	r3, r8
    2daa:	462a      	mov	r2, r5
    2dac:	a936      	add	r1, sp, #216	; 0xd8
    2dae:	4608      	mov	r0, r1
    2db0:	f7fd fcb1 	bl	716 <sub_mod_n>
    2db4:	f105 0b30 	add.w	fp, r5, #48	; 0x30
    2db8:	f8cd 9000 	str.w	r9, [sp]
    2dbc:	4643      	mov	r3, r8
    2dbe:	465a      	mov	r2, fp
    2dc0:	a92a      	add	r1, sp, #168	; 0xa8
    2dc2:	4608      	mov	r0, r1
    2dc4:	f7fd fca7 	bl	716 <sub_mod_n>
    2dc8:	ab36      	add	r3, sp, #216	; 0xd8
    2dca:	a842      	add	r0, sp, #264	; 0x108
    2dcc:	4632      	mov	r2, r6
    2dce:	f853 1b04 	ldr.w	r1, [r3], #4
    2dd2:	430a      	orrs	r2, r1
    2dd4:	4283      	cmp	r3, r0
    2dd6:	d1fa      	bne.n	2dce <POINTonE1xyzz_dadd_affine+0x118>
    2dd8:	1e53      	subs	r3, r2, #1
    2dda:	4393      	bics	r3, r2
    2ddc:	d513      	bpl.n	2e06 <POINTonE1xyzz_dadd_affine+0x150>
    2dde:	ab2a      	add	r3, sp, #168	; 0xa8
    2de0:	a936      	add	r1, sp, #216	; 0xd8
    2de2:	f853 2b04 	ldr.w	r2, [r3], #4
    2de6:	4316      	orrs	r6, r2
    2de8:	428b      	cmp	r3, r1
    2dea:	d1fa      	bne.n	2de2 <POINTonE1xyzz_dadd_affine+0x12c>
    2dec:	1e73      	subs	r3, r6, #1
    2dee:	43b3      	bics	r3, r6
    2df0:	d47d      	bmi.n	2eee <POINTonE1xyzz_dadd_affine+0x238>
    2df2:	f104 0160 	add.w	r1, r4, #96	; 0x60
    2df6:	460b      	mov	r3, r1
    2df8:	34c0      	adds	r4, #192	; 0xc0
    2dfa:	2200      	movs	r2, #0
    2dfc:	f843 2b04 	str.w	r2, [r3], #4
    2e00:	42a3      	cmp	r3, r4
    2e02:	d1fb      	bne.n	2dfc <POINTonE1xyzz_dadd_affine+0x146>
    2e04:	e7a3      	b.n	2d4e <POINTonE1xyzz_dadd_affine+0x98>
    2e06:	4e78      	ldr	r6, [pc, #480]	; (2fe8 <POINTonE1xyzz_dadd_affine+0x332>)
    2e08:	270c      	movs	r7, #12
    2e0a:	9701      	str	r7, [sp, #4]
    2e0c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2fec <POINTonE1xyzz_dadd_affine+0x336>
    2e10:	f8cd 8000 	str.w	r8, [sp]
    2e14:	4633      	mov	r3, r6
    2e16:	aa36      	add	r2, sp, #216	; 0xd8
    2e18:	4611      	mov	r1, r2
    2e1a:	a806      	add	r0, sp, #24
    2e1c:	f7fd fe85 	bl	b2a <mul_mont_n>
    2e20:	9701      	str	r7, [sp, #4]
    2e22:	f8cd 8000 	str.w	r8, [sp]
    2e26:	4633      	mov	r3, r6
    2e28:	aa36      	add	r2, sp, #216	; 0xd8
    2e2a:	a906      	add	r1, sp, #24
    2e2c:	a812      	add	r0, sp, #72	; 0x48
    2e2e:	f7fd fe7c 	bl	b2a <mul_mont_n>
    2e32:	9701      	str	r7, [sp, #4]
    2e34:	f8cd 8000 	str.w	r8, [sp]
    2e38:	4633      	mov	r3, r6
    2e3a:	aa06      	add	r2, sp, #24
    2e3c:	4629      	mov	r1, r5
    2e3e:	a81e      	add	r0, sp, #120	; 0x78
    2e40:	f7fd fe73 	bl	b2a <mul_mont_n>
    2e44:	9701      	str	r7, [sp, #4]
    2e46:	f8cd 8000 	str.w	r8, [sp]
    2e4a:	4633      	mov	r3, r6
    2e4c:	aa2a      	add	r2, sp, #168	; 0xa8
    2e4e:	4611      	mov	r1, r2
    2e50:	4620      	mov	r0, r4
    2e52:	f7fd fe6a 	bl	b2a <mul_mont_n>
    2e56:	9700      	str	r7, [sp, #0]
    2e58:	4633      	mov	r3, r6
    2e5a:	aa1e      	add	r2, sp, #120	; 0x78
    2e5c:	4611      	mov	r1, r2
    2e5e:	a836      	add	r0, sp, #216	; 0xd8
    2e60:	f7fe f90c 	bl	107c <add_mod_n>
    2e64:	9700      	str	r7, [sp, #0]
    2e66:	4633      	mov	r3, r6
    2e68:	aa12      	add	r2, sp, #72	; 0x48
    2e6a:	4621      	mov	r1, r4
    2e6c:	4620      	mov	r0, r4
    2e6e:	f7fd fc52 	bl	716 <sub_mod_n>
    2e72:	9700      	str	r7, [sp, #0]
    2e74:	4633      	mov	r3, r6
    2e76:	aa36      	add	r2, sp, #216	; 0xd8
    2e78:	4621      	mov	r1, r4
    2e7a:	4620      	mov	r0, r4
    2e7c:	f7fd fc4b 	bl	716 <sub_mod_n>
    2e80:	9700      	str	r7, [sp, #0]
    2e82:	4633      	mov	r3, r6
    2e84:	4622      	mov	r2, r4
    2e86:	a91e      	add	r1, sp, #120	; 0x78
    2e88:	4608      	mov	r0, r1
    2e8a:	f7fd fc44 	bl	716 <sub_mod_n>
    2e8e:	9701      	str	r7, [sp, #4]
    2e90:	f8cd 8000 	str.w	r8, [sp]
    2e94:	4633      	mov	r3, r6
    2e96:	aa2a      	add	r2, sp, #168	; 0xa8
    2e98:	a91e      	add	r1, sp, #120	; 0x78
    2e9a:	4608      	mov	r0, r1
    2e9c:	f7fd fe45 	bl	b2a <mul_mont_n>
    2ea0:	f104 0530 	add.w	r5, r4, #48	; 0x30
    2ea4:	9701      	str	r7, [sp, #4]
    2ea6:	f8cd 8000 	str.w	r8, [sp]
    2eaa:	4633      	mov	r3, r6
    2eac:	aa12      	add	r2, sp, #72	; 0x48
    2eae:	4659      	mov	r1, fp
    2eb0:	4628      	mov	r0, r5
    2eb2:	f7fd fe3a 	bl	b2a <mul_mont_n>
    2eb6:	9700      	str	r7, [sp, #0]
    2eb8:	4633      	mov	r3, r6
    2eba:	462a      	mov	r2, r5
    2ebc:	a91e      	add	r1, sp, #120	; 0x78
    2ebe:	4628      	mov	r0, r5
    2ec0:	f7fd fc29 	bl	716 <sub_mod_n>
    2ec4:	9701      	str	r7, [sp, #4]
    2ec6:	f8cd 8000 	str.w	r8, [sp]
    2eca:	4633      	mov	r3, r6
    2ecc:	aa06      	add	r2, sp, #24
    2ece:	9904      	ldr	r1, [sp, #16]
    2ed0:	f104 0090 	add.w	r0, r4, #144	; 0x90
    2ed4:	f7fd fe29 	bl	b2a <mul_mont_n>
    2ed8:	9701      	str	r7, [sp, #4]
    2eda:	f8cd 8000 	str.w	r8, [sp]
    2ede:	4633      	mov	r3, r6
    2ee0:	aa12      	add	r2, sp, #72	; 0x48
    2ee2:	4651      	mov	r1, sl
    2ee4:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2ee8:	f7fd fe1f 	bl	b2a <mul_mont_n>
    2eec:	e72f      	b.n	2d4e <POINTonE1xyzz_dadd_affine+0x98>
    2eee:	4d3e      	ldr	r5, [pc, #248]	; (2fe8 <POINTonE1xyzz_dadd_affine+0x332>)
    2ef0:	260c      	movs	r6, #12
    2ef2:	9600      	str	r6, [sp, #0]
    2ef4:	462b      	mov	r3, r5
    2ef6:	f8dd b014 	ldr.w	fp, [sp, #20]
    2efa:	465a      	mov	r2, fp
    2efc:	4659      	mov	r1, fp
    2efe:	a806      	add	r0, sp, #24
    2f00:	f7fe f8bc 	bl	107c <add_mod_n>
    2f04:	f104 0a90 	add.w	sl, r4, #144	; 0x90
    2f08:	9601      	str	r6, [sp, #4]
    2f0a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2fec <POINTonE1xyzz_dadd_affine+0x336>
    2f0e:	f8cd 8000 	str.w	r8, [sp]
    2f12:	462b      	mov	r3, r5
    2f14:	aa06      	add	r2, sp, #24
    2f16:	4611      	mov	r1, r2
    2f18:	4650      	mov	r0, sl
    2f1a:	f7fd fe06 	bl	b2a <mul_mont_n>
    2f1e:	f104 0960 	add.w	r9, r4, #96	; 0x60
    2f22:	9601      	str	r6, [sp, #4]
    2f24:	f8cd 8000 	str.w	r8, [sp]
    2f28:	462b      	mov	r3, r5
    2f2a:	aa06      	add	r2, sp, #24
    2f2c:	4651      	mov	r1, sl
    2f2e:	4648      	mov	r0, r9
    2f30:	f7fd fdfb 	bl	b2a <mul_mont_n>
    2f34:	9601      	str	r6, [sp, #4]
    2f36:	f8cd 8000 	str.w	r8, [sp]
    2f3a:	462b      	mov	r3, r5
    2f3c:	4652      	mov	r2, sl
    2f3e:	4639      	mov	r1, r7
    2f40:	a812      	add	r0, sp, #72	; 0x48
    2f42:	f7fd fdf2 	bl	b2a <mul_mont_n>
    2f46:	9601      	str	r6, [sp, #4]
    2f48:	f8cd 8000 	str.w	r8, [sp]
    2f4c:	462b      	mov	r3, r5
    2f4e:	463a      	mov	r2, r7
    2f50:	4639      	mov	r1, r7
    2f52:	a81e      	add	r0, sp, #120	; 0x78
    2f54:	f7fd fde9 	bl	b2a <mul_mont_n>
    2f58:	4633      	mov	r3, r6
    2f5a:	462a      	mov	r2, r5
    2f5c:	a91e      	add	r1, sp, #120	; 0x78
    2f5e:	4608      	mov	r0, r1
    2f60:	f7fe fd26 	bl	19b0 <mul_by_3_mod_n>
    2f64:	9601      	str	r6, [sp, #4]
    2f66:	f8cd 8000 	str.w	r8, [sp]
    2f6a:	462b      	mov	r3, r5
    2f6c:	aa1e      	add	r2, sp, #120	; 0x78
    2f6e:	4611      	mov	r1, r2
    2f70:	4620      	mov	r0, r4
    2f72:	f7fd fdda 	bl	b2a <mul_mont_n>
    2f76:	9600      	str	r6, [sp, #0]
    2f78:	462b      	mov	r3, r5
    2f7a:	aa12      	add	r2, sp, #72	; 0x48
    2f7c:	4611      	mov	r1, r2
    2f7e:	a806      	add	r0, sp, #24
    2f80:	f7fe f87c 	bl	107c <add_mod_n>
    2f84:	9600      	str	r6, [sp, #0]
    2f86:	462b      	mov	r3, r5
    2f88:	aa06      	add	r2, sp, #24
    2f8a:	4621      	mov	r1, r4
    2f8c:	4620      	mov	r0, r4
    2f8e:	f7fd fbc2 	bl	716 <sub_mod_n>
    2f92:	f104 0730 	add.w	r7, r4, #48	; 0x30
    2f96:	9601      	str	r6, [sp, #4]
    2f98:	f8cd 8000 	str.w	r8, [sp]
    2f9c:	462b      	mov	r3, r5
    2f9e:	465a      	mov	r2, fp
    2fa0:	4649      	mov	r1, r9
    2fa2:	4638      	mov	r0, r7
    2fa4:	f7fd fdc1 	bl	b2a <mul_mont_n>
    2fa8:	9600      	str	r6, [sp, #0]
    2faa:	462b      	mov	r3, r5
    2fac:	4622      	mov	r2, r4
    2fae:	a912      	add	r1, sp, #72	; 0x48
    2fb0:	4608      	mov	r0, r1
    2fb2:	f7fd fbb0 	bl	716 <sub_mod_n>
    2fb6:	9601      	str	r6, [sp, #4]
    2fb8:	f8cd 8000 	str.w	r8, [sp]
    2fbc:	462b      	mov	r3, r5
    2fbe:	aa1e      	add	r2, sp, #120	; 0x78
    2fc0:	a912      	add	r1, sp, #72	; 0x48
    2fc2:	4608      	mov	r0, r1
    2fc4:	f7fd fdb1 	bl	b2a <mul_mont_n>
    2fc8:	9600      	str	r6, [sp, #0]
    2fca:	462b      	mov	r3, r5
    2fcc:	463a      	mov	r2, r7
    2fce:	a912      	add	r1, sp, #72	; 0x48
    2fd0:	4638      	mov	r0, r7
    2fd2:	f7fd fba0 	bl	716 <sub_mod_n>
    2fd6:	9600      	str	r6, [sp, #0]
    2fd8:	462b      	mov	r3, r5
    2fda:	9a03      	ldr	r2, [sp, #12]
    2fdc:	4649      	mov	r1, r9
    2fde:	4648      	mov	r0, r9
    2fe0:	f7ff fc4e 	bl	2880 <cneg_mod_n>
    2fe4:	e6b3      	b.n	2d4e <POINTonE1xyzz_dadd_affine+0x98>
    2fe6:	bf00      	nop
    2fe8:	0001ade8 	.word	0x0001ade8
    2fec:	fffcfffd 	.word	0xfffcfffd

00002ff0 <POINTonE1_bucket>:
    2ff0:	b538      	push	{r3, r4, r5, lr}
    2ff2:	4615      	mov	r5, r2
    2ff4:	2401      	movs	r4, #1
    2ff6:	4094      	lsls	r4, r2
    2ff8:	3c01      	subs	r4, #1
    2ffa:	400c      	ands	r4, r1
    2ffc:	d100      	bne.n	3000 <POINTonE1_bucket+0x10>
    2ffe:	bd38      	pop	{r3, r4, r5, pc}
    3000:	461a      	mov	r2, r3
    3002:	3c01      	subs	r4, #1
    3004:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3008:	eb00 1084 	add.w	r0, r0, r4, lsl #6
    300c:	fa21 f505 	lsr.w	r5, r1, r5
    3010:	f005 0301 	and.w	r3, r5, #1
    3014:	4601      	mov	r1, r0
    3016:	f7ff fe4e 	bl	2cb6 <POINTonE1xyzz_dadd_affine>
    301a:	e7f0      	b.n	2ffe <POINTonE1_bucket+0xe>

0000301c <POINTonE1s_tile_pippenger>:
    301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3020:	b089      	sub	sp, #36	; 0x24
    3022:	9007      	str	r0, [sp, #28]
    3024:	4693      	mov	fp, r2
    3026:	461c      	mov	r4, r3
    3028:	9b14      	ldr	r3, [sp, #80]	; 0x50
    302a:	9815      	ldr	r0, [sp, #84]	; 0x54
    302c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    302e:	6826      	ldr	r6, [r4, #0]
    3030:	460d      	mov	r5, r1
    3032:	f855 9b04 	ldr.w	r9, [r5], #4
    3036:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3038:	3207      	adds	r2, #7
    303a:	08d2      	lsrs	r2, r2, #3
    303c:	9206      	str	r2, [sp, #24]
    303e:	1c41      	adds	r1, r0, #1
    3040:	2201      	movs	r2, #1
    3042:	408a      	lsls	r2, r1
    3044:	3a01      	subs	r2, #1
    3046:	9203      	str	r2, [sp, #12]
    3048:	1e5a      	subs	r2, r3, #1
    304a:	ea22 0203 	bic.w	r2, r2, r3
    304e:	ea4f 7ad2 	mov.w	sl, r2, lsr #31
    3052:	f08a 0201 	eor.w	r2, sl, #1
    3056:	1a99      	subs	r1, r3, r2
    3058:	9104      	str	r1, [sp, #16]
    305a:	1813      	adds	r3, r2, r0
    305c:	9305      	str	r3, [sp, #20]
    305e:	461a      	mov	r2, r3
    3060:	4630      	mov	r0, r6
    3062:	f7fd fb19 	bl	698 <get_wval_limb>
    3066:	fa00 f00a 	lsl.w	r0, r0, sl
    306a:	4639      	mov	r1, r7
    306c:	9a03      	ldr	r2, [sp, #12]
    306e:	4010      	ands	r0, r2
    3070:	f7fd fb2f 	bl	6d2 <booth_encode>
    3074:	9002      	str	r0, [sp, #8]
    3076:	f8d4 8004 	ldr.w	r8, [r4, #4]
    307a:	f1b8 0f00 	cmp.w	r8, #0
    307e:	d01a      	beq.n	30b6 <POINTonE1s_tile_pippenger+0x9a>
    3080:	3408      	adds	r4, #8
    3082:	9a05      	ldr	r2, [sp, #20]
    3084:	9904      	ldr	r1, [sp, #16]
    3086:	4640      	mov	r0, r8
    3088:	f7fd fb06 	bl	698 <get_wval_limb>
    308c:	fa00 f00a 	lsl.w	r0, r0, sl
    3090:	4639      	mov	r1, r7
    3092:	9b03      	ldr	r3, [sp, #12]
    3094:	4018      	ands	r0, r3
    3096:	f7fd fb1c 	bl	6d2 <booth_encode>
    309a:	9001      	str	r0, [sp, #4]
    309c:	f10b 3bff 	add.w	fp, fp, #4294967295
    30a0:	464b      	mov	r3, r9
    30a2:	463a      	mov	r2, r7
    30a4:	9902      	ldr	r1, [sp, #8]
    30a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    30a8:	f7ff ffa2 	bl	2ff0 <POINTonE1_bucket>
    30ac:	f1bb 0f01 	cmp.w	fp, #1
    30b0:	d92e      	bls.n	3110 <POINTonE1s_tile_pippenger+0xf4>
    30b2:	2601      	movs	r6, #1
    30b4:	e014      	b.n	30e0 <POINTonE1s_tile_pippenger+0xc4>
    30b6:	3404      	adds	r4, #4
    30b8:	9b06      	ldr	r3, [sp, #24]
    30ba:	eb06 0803 	add.w	r8, r6, r3
    30be:	e7e0      	b.n	3082 <POINTonE1s_tile_pippenger+0x66>
    30c0:	9b06      	ldr	r3, [sp, #24]
    30c2:	4498      	add	r8, r3
    30c4:	e011      	b.n	30ea <POINTonE1s_tile_pippenger+0xce>
    30c6:	f109 0960 	add.w	r9, r9, #96	; 0x60
    30ca:	464b      	mov	r3, r9
    30cc:	463a      	mov	r2, r7
    30ce:	9901      	ldr	r1, [sp, #4]
    30d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    30d2:	f7ff ff8d 	bl	2ff0 <POINTonE1_bucket>
    30d6:	3601      	adds	r6, #1
    30d8:	45b3      	cmp	fp, r6
    30da:	d01b      	beq.n	3114 <POINTonE1s_tile_pippenger+0xf8>
    30dc:	9b02      	ldr	r3, [sp, #8]
    30de:	9301      	str	r3, [sp, #4]
    30e0:	6823      	ldr	r3, [r4, #0]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d0ec      	beq.n	30c0 <POINTonE1s_tile_pippenger+0xa4>
    30e6:	3404      	adds	r4, #4
    30e8:	4698      	mov	r8, r3
    30ea:	9a05      	ldr	r2, [sp, #20]
    30ec:	9904      	ldr	r1, [sp, #16]
    30ee:	4640      	mov	r0, r8
    30f0:	f7fd fad2 	bl	698 <get_wval_limb>
    30f4:	fa00 f00a 	lsl.w	r0, r0, sl
    30f8:	4639      	mov	r1, r7
    30fa:	9b03      	ldr	r3, [sp, #12]
    30fc:	4018      	ands	r0, r3
    30fe:	f7fd fae8 	bl	6d2 <booth_encode>
    3102:	9002      	str	r0, [sp, #8]
    3104:	682b      	ldr	r3, [r5, #0]
    3106:	2b00      	cmp	r3, #0
    3108:	d0dd      	beq.n	30c6 <POINTonE1s_tile_pippenger+0xaa>
    310a:	3504      	adds	r5, #4
    310c:	4699      	mov	r9, r3
    310e:	e7dc      	b.n	30ca <POINTonE1s_tile_pippenger+0xae>
    3110:	9b01      	ldr	r3, [sp, #4]
    3112:	9302      	str	r3, [sp, #8]
    3114:	682b      	ldr	r3, [r5, #0]
    3116:	b163      	cbz	r3, 3132 <POINTonE1s_tile_pippenger+0x116>
    3118:	463a      	mov	r2, r7
    311a:	9902      	ldr	r1, [sp, #8]
    311c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    311e:	f7ff ff67 	bl	2ff0 <POINTonE1_bucket>
    3122:	1e7a      	subs	r2, r7, #1
    3124:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3126:	9807      	ldr	r0, [sp, #28]
    3128:	f7ff f9a6 	bl	2478 <POINTonE1_integrate_buckets>
    312c:	b009      	add	sp, #36	; 0x24
    312e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3132:	f109 0360 	add.w	r3, r9, #96	; 0x60
    3136:	e7ef      	b.n	3118 <POINTonE1s_tile_pippenger+0xfc>

00003138 <sub_n_check_mod_n>:
    3138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    313c:	b083      	sub	sp, #12
    313e:	af02      	add	r7, sp, #8
    3140:	4606      	mov	r6, r0
    3142:	468c      	mov	ip, r1
    3144:	4696      	mov	lr, r2
    3146:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
    314a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
    314e:	f10b 0207 	add.w	r2, fp, #7
    3152:	f022 0207 	bic.w	r2, r2, #7
    3156:	ebad 0d02 	sub.w	sp, sp, r2
    315a:	f10d 0808 	add.w	r8, sp, #8
    315e:	ebad 0d02 	sub.w	sp, sp, r2
    3162:	a902      	add	r1, sp, #8
    3164:	ebad 0d02 	sub.w	sp, sp, r2
    3168:	aa02      	add	r2, sp, #8
    316a:	f1bb 0f00 	cmp.w	fp, #0
    316e:	d01f      	beq.n	31b0 <sub_n_check_mod_n+0x78>
    3170:	f10b 34ff 	add.w	r4, fp, #4294967295
    3174:	44dc      	add	ip, fp
    3176:	4625      	mov	r5, r4
    3178:	2000      	movs	r0, #0
    317a:	f81c ad01 	ldrb.w	sl, [ip, #-1]!
    317e:	ea4a 2000 	orr.w	r0, sl, r0, lsl #8
    3182:	f025 0a03 	bic.w	sl, r5, #3
    3186:	f841 000a 	str.w	r0, [r1, sl]
    318a:	3d01      	subs	r5, #1
    318c:	f1b5 3fff 	cmp.w	r5, #4294967295
    3190:	d1f3      	bne.n	317a <sub_n_check_mod_n+0x42>
    3192:	eb0e 050b 	add.w	r5, lr, fp
    3196:	2000      	movs	r0, #0
    3198:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
    319c:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
    31a0:	f024 0c03 	bic.w	ip, r4, #3
    31a4:	f842 000c 	str.w	r0, [r2, ip]
    31a8:	3c01      	subs	r4, #1
    31aa:	f1b4 3fff 	cmp.w	r4, #4294967295
    31ae:	d1f3      	bne.n	3198 <sub_n_check_mod_n+0x60>
    31b0:	f8cd 9000 	str.w	r9, [sp]
    31b4:	4640      	mov	r0, r8
    31b6:	f7fd faae 	bl	716 <sub_mod_n>
    31ba:	f039 4940 	bics.w	r9, r9, #3221225472	; 0xc0000000
    31be:	d024      	beq.n	320a <sub_n_check_mod_n+0xd2>
    31c0:	f1a8 0104 	sub.w	r1, r8, #4
    31c4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    31c8:	f1a9 0404 	sub.w	r4, r9, #4
    31cc:	4444      	add	r4, r8
    31ce:	460b      	mov	r3, r1
    31d0:	2200      	movs	r2, #0
    31d2:	f853 0f04 	ldr.w	r0, [r3, #4]!
    31d6:	4302      	orrs	r2, r0
    31d8:	429c      	cmp	r4, r3
    31da:	d1fa      	bne.n	31d2 <sub_n_check_mod_n+0x9a>
    31dc:	1e50      	subs	r0, r2, #1
    31de:	ea20 0002 	bic.w	r0, r0, r2
    31e2:	0fc0      	lsrs	r0, r0, #31
    31e4:	4546      	cmp	r6, r8
    31e6:	d011      	beq.n	320c <sub_n_check_mod_n+0xd4>
    31e8:	f1a9 0904 	sub.w	r9, r9, #4
    31ec:	44c8      	add	r8, r9
    31ee:	e002      	b.n	31f6 <sub_n_check_mod_n+0xbe>
    31f0:	3604      	adds	r6, #4
    31f2:	4541      	cmp	r1, r8
    31f4:	d00a      	beq.n	320c <sub_n_check_mod_n+0xd4>
    31f6:	f851 2f04 	ldr.w	r2, [r1, #4]!
    31fa:	4633      	mov	r3, r6
    31fc:	1d34      	adds	r4, r6, #4
    31fe:	f803 2b01 	strb.w	r2, [r3], #1
    3202:	0a12      	lsrs	r2, r2, #8
    3204:	42a3      	cmp	r3, r4
    3206:	d1fa      	bne.n	31fe <sub_n_check_mod_n+0xc6>
    3208:	e7f2      	b.n	31f0 <sub_n_check_mod_n+0xb8>
    320a:	2001      	movs	r0, #1
    320c:	f080 0001 	eor.w	r0, r0, #1
    3210:	3704      	adds	r7, #4
    3212:	46bd      	mov	sp, r7
    3214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003218 <from_mont_n>:
    3218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    321c:	b08b      	sub	sp, #44	; 0x2c
    321e:	af00      	add	r7, sp, #0
    3220:	6078      	str	r0, [r7, #4]
    3222:	460d      	mov	r5, r1
    3224:	603a      	str	r2, [r7, #0]
    3226:	61fb      	str	r3, [r7, #28]
    3228:	f8d7 b050 	ldr.w	fp, [r7, #80]	; 0x50
    322c:	ea4f 018b 	mov.w	r1, fp, lsl #2
    3230:	60b9      	str	r1, [r7, #8]
    3232:	1dcb      	adds	r3, r1, #7
    3234:	f023 0307 	bic.w	r3, r3, #7
    3238:	ebad 0d03 	sub.w	sp, sp, r3
    323c:	f1bb 0f00 	cmp.w	fp, #0
    3240:	d06e      	beq.n	3320 <from_mont_n+0x108>
    3242:	46ea      	mov	sl, sp
    3244:	4613      	mov	r3, r2
    3246:	6812      	ldr	r2, [r2, #0]
    3248:	61ba      	str	r2, [r7, #24]
    324a:	617b      	str	r3, [r7, #20]
    324c:	f1a3 0804 	sub.w	r8, r3, #4
    3250:	4488      	add	r8, r1
    3252:	f04f 0900 	mov.w	r9, #0
    3256:	f8c7 b010 	str.w	fp, [r7, #16]
    325a:	f8c7 a00c 	str.w	sl, [r7, #12]
    325e:	e008      	b.n	3272 <from_mont_n+0x5a>
    3260:	2301      	movs	r3, #1
    3262:	3b01      	subs	r3, #1
    3264:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
    3268:	f109 0901 	add.w	r9, r9, #1
    326c:	45cb      	cmp	fp, r9
    326e:	d029      	beq.n	32c4 <from_mont_n+0xac>
    3270:	68fd      	ldr	r5, [r7, #12]
    3272:	6829      	ldr	r1, [r5, #0]
    3274:	69fb      	ldr	r3, [r7, #28]
    3276:	fb03 fe01 	mul.w	lr, r3, r1
    327a:	69bb      	ldr	r3, [r7, #24]
    327c:	fbae 2303 	umull	r2, r3, lr, r3
    3280:	1852      	adds	r2, r2, r1
    3282:	f143 0300 	adc.w	r3, r3, #0
    3286:	461a      	mov	r2, r3
    3288:	f1bb 0f01 	cmp.w	fp, #1
    328c:	d9e8      	bls.n	3260 <from_mont_n+0x48>
    328e:	f1aa 0604 	sub.w	r6, sl, #4
    3292:	697c      	ldr	r4, [r7, #20]
    3294:	f854 0f04 	ldr.w	r0, [r4, #4]!
    3298:	fba0 010e 	umull	r0, r1, r0, lr
    329c:	f855 cf04 	ldr.w	ip, [r5, #4]!
    32a0:	2300      	movs	r3, #0
    32a2:	eb12 020c 	adds.w	r2, r2, ip
    32a6:	f143 0300 	adc.w	r3, r3, #0
    32aa:	e9c7 0108 	strd	r0, r1, [r7, #32]
    32ae:	1880      	adds	r0, r0, r2
    32b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    32b2:	eb43 0101 	adc.w	r1, r3, r1
    32b6:	460a      	mov	r2, r1
    32b8:	f846 0f04 	str.w	r0, [r6, #4]!
    32bc:	4544      	cmp	r4, r8
    32be:	d1e9      	bne.n	3294 <from_mont_n+0x7c>
    32c0:	693b      	ldr	r3, [r7, #16]
    32c2:	e7ce      	b.n	3262 <from_mont_n+0x4a>
    32c4:	f1aa 0404 	sub.w	r4, sl, #4
    32c8:	683b      	ldr	r3, [r7, #0]
    32ca:	1f1d      	subs	r5, r3, #4
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	1f19      	subs	r1, r3, #4
    32d0:	68bb      	ldr	r3, [r7, #8]
    32d2:	3b04      	subs	r3, #4
    32d4:	449a      	add	sl, r3
    32d6:	4622      	mov	r2, r4
    32d8:	2300      	movs	r3, #0
    32da:	468c      	mov	ip, r1
    32dc:	460e      	mov	r6, r1
    32de:	f852 0f04 	ldr.w	r0, [r2, #4]!
    32e2:	1ac0      	subs	r0, r0, r3
    32e4:	eb60 0100 	sbc.w	r1, r0, r0
    32e8:	f855 3f04 	ldr.w	r3, [r5, #4]!
    32ec:	1ac0      	subs	r0, r0, r3
    32ee:	f161 0100 	sbc.w	r1, r1, #0
    32f2:	f846 0f04 	str.w	r0, [r6, #4]!
    32f6:	f001 0301 	and.w	r3, r1, #1
    32fa:	4552      	cmp	r2, sl
    32fc:	d1ef      	bne.n	32de <from_mont_n+0xc6>
    32fe:	4661      	mov	r1, ip
    3300:	425e      	negs	r6, r3
    3302:	687a      	ldr	r2, [r7, #4]
    3304:	1f15      	subs	r5, r2, #4
    3306:	68ba      	ldr	r2, [r7, #8]
    3308:	4415      	add	r5, r2
    330a:	1e5a      	subs	r2, r3, #1
    330c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    3310:	4013      	ands	r3, r2
    3312:	f854 0f04 	ldr.w	r0, [r4, #4]!
    3316:	4030      	ands	r0, r6
    3318:	4303      	orrs	r3, r0
    331a:	600b      	str	r3, [r1, #0]
    331c:	42a9      	cmp	r1, r5
    331e:	d1f5      	bne.n	330c <from_mont_n+0xf4>
    3320:	372c      	adds	r7, #44	; 0x2c
    3322:	46bd      	mov	sp, r7
    3324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003328 <redc_mont_n>:
    3328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    332c:	b08d      	sub	sp, #52	; 0x34
    332e:	af00      	add	r7, sp, #0
    3330:	60f8      	str	r0, [r7, #12]
    3332:	60b9      	str	r1, [r7, #8]
    3334:	607a      	str	r2, [r7, #4]
    3336:	627b      	str	r3, [r7, #36]	; 0x24
    3338:	f8d7 b058 	ldr.w	fp, [r7, #88]	; 0x58
    333c:	ea4f 008b 	mov.w	r0, fp, lsl #2
    3340:	6138      	str	r0, [r7, #16]
    3342:	1dc3      	adds	r3, r0, #7
    3344:	f023 0307 	bic.w	r3, r3, #7
    3348:	ebad 0d03 	sub.w	sp, sp, r3
    334c:	f1bb 0f00 	cmp.w	fp, #0
    3350:	f000 8088 	beq.w	3464 <redc_mont_n+0x13c>
    3354:	46ea      	mov	sl, sp
    3356:	4613      	mov	r3, r2
    3358:	6812      	ldr	r2, [r2, #0]
    335a:	623a      	str	r2, [r7, #32]
    335c:	61fb      	str	r3, [r7, #28]
    335e:	f1a3 0804 	sub.w	r8, r3, #4
    3362:	4480      	add	r8, r0
    3364:	460d      	mov	r5, r1
    3366:	f04f 0900 	mov.w	r9, #0
    336a:	f8c7 b018 	str.w	fp, [r7, #24]
    336e:	f8c7 a014 	str.w	sl, [r7, #20]
    3372:	e008      	b.n	3386 <redc_mont_n+0x5e>
    3374:	2301      	movs	r3, #1
    3376:	3b01      	subs	r3, #1
    3378:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
    337c:	f109 0901 	add.w	r9, r9, #1
    3380:	45cb      	cmp	fp, r9
    3382:	d029      	beq.n	33d8 <redc_mont_n+0xb0>
    3384:	697d      	ldr	r5, [r7, #20]
    3386:	6829      	ldr	r1, [r5, #0]
    3388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    338a:	fb03 fe01 	mul.w	lr, r3, r1
    338e:	6a3b      	ldr	r3, [r7, #32]
    3390:	fbae 2303 	umull	r2, r3, lr, r3
    3394:	1852      	adds	r2, r2, r1
    3396:	f143 0300 	adc.w	r3, r3, #0
    339a:	461a      	mov	r2, r3
    339c:	f1bb 0f01 	cmp.w	fp, #1
    33a0:	d9e8      	bls.n	3374 <redc_mont_n+0x4c>
    33a2:	f1aa 0604 	sub.w	r6, sl, #4
    33a6:	69fc      	ldr	r4, [r7, #28]
    33a8:	f854 0f04 	ldr.w	r0, [r4, #4]!
    33ac:	fba0 010e 	umull	r0, r1, r0, lr
    33b0:	f855 cf04 	ldr.w	ip, [r5, #4]!
    33b4:	2300      	movs	r3, #0
    33b6:	eb12 020c 	adds.w	r2, r2, ip
    33ba:	f143 0300 	adc.w	r3, r3, #0
    33be:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    33c2:	1880      	adds	r0, r0, r2
    33c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    33c6:	eb43 0101 	adc.w	r1, r3, r1
    33ca:	460a      	mov	r2, r1
    33cc:	f846 0f04 	str.w	r0, [r6, #4]!
    33d0:	4544      	cmp	r4, r8
    33d2:	d1e9      	bne.n	33a8 <redc_mont_n+0x80>
    33d4:	69bb      	ldr	r3, [r7, #24]
    33d6:	e7ce      	b.n	3376 <redc_mont_n+0x4e>
    33d8:	693b      	ldr	r3, [r7, #16]
    33da:	1f1a      	subs	r2, r3, #4
    33dc:	68bb      	ldr	r3, [r7, #8]
    33de:	441a      	add	r2, r3
    33e0:	f1aa 0004 	sub.w	r0, sl, #4
    33e4:	3b04      	subs	r3, #4
    33e6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    33ea:	4601      	mov	r1, r0
    33ec:	2300      	movs	r3, #0
    33ee:	f852 6f04 	ldr.w	r6, [r2, #4]!
    33f2:	f851 4f04 	ldr.w	r4, [r1, #4]!
    33f6:	2500      	movs	r5, #0
    33f8:	19a4      	adds	r4, r4, r6
    33fa:	f145 0500 	adc.w	r5, r5, #0
    33fe:	18e4      	adds	r4, r4, r3
    3400:	f145 0500 	adc.w	r5, r5, #0
    3404:	600c      	str	r4, [r1, #0]
    3406:	462b      	mov	r3, r5
    3408:	454a      	cmp	r2, r9
    340a:	d1f0      	bne.n	33ee <redc_mont_n+0xc6>
    340c:	687a      	ldr	r2, [r7, #4]
    340e:	f1a2 0c04 	sub.w	ip, r2, #4
    3412:	68fa      	ldr	r2, [r7, #12]
    3414:	3a04      	subs	r2, #4
    3416:	6939      	ldr	r1, [r7, #16]
    3418:	3904      	subs	r1, #4
    341a:	448a      	add	sl, r1
    341c:	4616      	mov	r6, r2
    341e:	4601      	mov	r1, r0
    3420:	2400      	movs	r4, #0
    3422:	46ae      	mov	lr, r5
    3424:	f851 3f04 	ldr.w	r3, [r1, #4]!
    3428:	1b1c      	subs	r4, r3, r4
    342a:	eb63 0503 	sbc.w	r5, r3, r3
    342e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    3432:	1ae4      	subs	r4, r4, r3
    3434:	f165 0500 	sbc.w	r5, r5, #0
    3438:	f846 4f04 	str.w	r4, [r6, #4]!
    343c:	f005 0401 	and.w	r4, r5, #1
    3440:	4551      	cmp	r1, sl
    3442:	d1ef      	bne.n	3424 <redc_mont_n+0xfc>
    3444:	4673      	mov	r3, lr
    3446:	1b1c      	subs	r4, r3, r4
    3448:	68fb      	ldr	r3, [r7, #12]
    344a:	1f1d      	subs	r5, r3, #4
    344c:	693b      	ldr	r3, [r7, #16]
    344e:	441d      	add	r5, r3
    3450:	f852 1f04 	ldr.w	r1, [r2, #4]!
    3454:	f850 3f04 	ldr.w	r3, [r0, #4]!
    3458:	404b      	eors	r3, r1
    345a:	4023      	ands	r3, r4
    345c:	404b      	eors	r3, r1
    345e:	6013      	str	r3, [r2, #0]
    3460:	42aa      	cmp	r2, r5
    3462:	d1f5      	bne.n	3450 <redc_mont_n+0x128>
    3464:	3734      	adds	r7, #52	; 0x34
    3466:	46bd      	mov	sp, r7
    3468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000346c <sgn0_pty_mod_n>:
    346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3470:	af00      	add	r7, sp, #0
    3472:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    3476:	f10e 0307 	add.w	r3, lr, #7
    347a:	f023 0307 	bic.w	r3, r3, #7
    347e:	ebad 0d03 	sub.w	sp, sp, r3
    3482:	6805      	ldr	r5, [r0, #0]
    3484:	f005 0501 	and.w	r5, r5, #1
    3488:	b362      	cbz	r2, 34e4 <sgn0_pty_mod_n+0x78>
    348a:	46ec      	mov	ip, sp
    348c:	1f03      	subs	r3, r0, #4
    348e:	f1ac 0604 	sub.w	r6, ip, #4
    3492:	eb03 080e 	add.w	r8, r3, lr
    3496:	4634      	mov	r4, r6
    3498:	2000      	movs	r0, #0
    349a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    349e:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    34a2:	f844 0f04 	str.w	r0, [r4, #4]!
    34a6:	0fd0      	lsrs	r0, r2, #31
    34a8:	4543      	cmp	r3, r8
    34aa:	d1f6      	bne.n	349a <sgn0_pty_mod_n+0x2e>
    34ac:	3904      	subs	r1, #4
    34ae:	f1ae 0e04 	sub.w	lr, lr, #4
    34b2:	44f4      	add	ip, lr
    34b4:	2200      	movs	r2, #0
    34b6:	f856 3f04 	ldr.w	r3, [r6, #4]!
    34ba:	1a9a      	subs	r2, r3, r2
    34bc:	eb63 0303 	sbc.w	r3, r3, r3
    34c0:	f851 4f04 	ldr.w	r4, [r1, #4]!
    34c4:	1b12      	subs	r2, r2, r4
    34c6:	f163 0300 	sbc.w	r3, r3, #0
    34ca:	f003 0201 	and.w	r2, r3, #1
    34ce:	4566      	cmp	r6, ip
    34d0:	d1f1      	bne.n	34b6 <sgn0_pty_mod_n+0x4a>
    34d2:	1a83      	subs	r3, r0, r2
    34d4:	43db      	mvns	r3, r3
    34d6:	f003 0302 	and.w	r3, r3, #2
    34da:	ea43 0005 	orr.w	r0, r3, r5
    34de:	46bd      	mov	sp, r7
    34e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34e4:	4610      	mov	r0, r2
    34e6:	e7f4      	b.n	34d2 <sgn0_pty_mod_n+0x66>

000034e8 <POINTonE1_affine_Serialize_BE>:
    34e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ea:	b08f      	sub	sp, #60	; 0x3c
    34ec:	4605      	mov	r5, r0
    34ee:	460f      	mov	r7, r1
    34f0:	230c      	movs	r3, #12
    34f2:	9300      	str	r3, [sp, #0]
    34f4:	4b1e      	ldr	r3, [pc, #120]	; (3570 <POINTonE1_affine_Serialize_BE+0x88>)
    34f6:	4a1f      	ldr	r2, [pc, #124]	; (3574 <POINTonE1_affine_Serialize_BE+0x8c>)
    34f8:	a802      	add	r0, sp, #8
    34fa:	f7ff fe8d 	bl	3218 <from_mont_n>
    34fe:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3502:	462a      	mov	r2, r5
    3504:	462e      	mov	r6, r5
    3506:	f105 002f 	add.w	r0, r5, #47	; 0x2f
    350a:	1a83      	subs	r3, r0, r2
    350c:	f023 0103 	bic.w	r1, r3, #3
    3510:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    3514:	4461      	add	r1, ip
    3516:	f003 0303 	and.w	r3, r3, #3
    351a:	00db      	lsls	r3, r3, #3
    351c:	f851 1c30 	ldr.w	r1, [r1, #-48]
    3520:	fa21 f303 	lsr.w	r3, r1, r3
    3524:	f802 3b01 	strb.w	r3, [r2], #1
    3528:	42a2      	cmp	r2, r4
    352a:	d1ee      	bne.n	350a <POINTonE1_affine_Serialize_BE+0x22>
    352c:	230c      	movs	r3, #12
    352e:	9300      	str	r3, [sp, #0]
    3530:	4b0f      	ldr	r3, [pc, #60]	; (3570 <POINTonE1_affine_Serialize_BE+0x88>)
    3532:	4a10      	ldr	r2, [pc, #64]	; (3574 <POINTonE1_affine_Serialize_BE+0x8c>)
    3534:	f107 0130 	add.w	r1, r7, #48	; 0x30
    3538:	a802      	add	r0, sp, #8
    353a:	f7ff fe6d 	bl	3218 <from_mont_n>
    353e:	3560      	adds	r5, #96	; 0x60
    3540:	365f      	adds	r6, #95	; 0x5f
    3542:	1b33      	subs	r3, r6, r4
    3544:	f023 0203 	bic.w	r2, r3, #3
    3548:	a90e      	add	r1, sp, #56	; 0x38
    354a:	440a      	add	r2, r1
    354c:	f003 0303 	and.w	r3, r3, #3
    3550:	00db      	lsls	r3, r3, #3
    3552:	f852 2c30 	ldr.w	r2, [r2, #-48]
    3556:	fa22 f303 	lsr.w	r3, r2, r3
    355a:	f804 3b01 	strb.w	r3, [r4], #1
    355e:	42ac      	cmp	r4, r5
    3560:	d1ef      	bne.n	3542 <POINTonE1_affine_Serialize_BE+0x5a>
    3562:	220c      	movs	r2, #12
    3564:	4903      	ldr	r1, [pc, #12]	; (3574 <POINTonE1_affine_Serialize_BE+0x8c>)
    3566:	a802      	add	r0, sp, #8
    3568:	f7ff ff80 	bl	346c <sgn0_pty_mod_n>
    356c:	b00f      	add	sp, #60	; 0x3c
    356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3570:	fffcfffd 	.word	0xfffcfffd
    3574:	0001ade8 	.word	0x0001ade8

00003578 <mul_mont_nonred_n>:
    3578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    357c:	b087      	sub	sp, #28
    357e:	af00      	add	r7, sp, #0
    3580:	6078      	str	r0, [r7, #4]
    3582:	60b9      	str	r1, [r7, #8]
    3584:	4610      	mov	r0, r2
    3586:	60fa      	str	r2, [r7, #12]
    3588:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    358a:	1c65      	adds	r5, r4, #1
    358c:	00ad      	lsls	r5, r5, #2
    358e:	1dea      	adds	r2, r5, #7
    3590:	f022 0207 	bic.w	r2, r2, #7
    3594:	ebad 0d02 	sub.w	sp, sp, r2
    3598:	466e      	mov	r6, sp
    359a:	f8d0 8000 	ldr.w	r8, [r0]
    359e:	b314      	cbz	r4, 35e6 <mul_mont_nonred_n+0x6e>
    35a0:	1f0a      	subs	r2, r1, #4
    35a2:	f1a6 0c04 	sub.w	ip, r6, #4
    35a6:	f1a5 0e04 	sub.w	lr, r5, #4
    35aa:	4496      	add	lr, r2
    35ac:	2000      	movs	r0, #0
    35ae:	f852 9f04 	ldr.w	r9, [r2, #4]!
    35b2:	2100      	movs	r1, #0
    35b4:	fbe8 0109 	umlal	r0, r1, r8, r9
    35b8:	f84c 0f04 	str.w	r0, [ip, #4]!
    35bc:	4608      	mov	r0, r1
    35be:	4572      	cmp	r2, lr
    35c0:	d1f5      	bne.n	35ae <mul_mont_nonred_n+0x36>
    35c2:	46a4      	mov	ip, r4
    35c4:	6832      	ldr	r2, [r6, #0]
    35c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    35c8:	fb02 f201 	mul.w	r2, r2, r1
    35cc:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
    35d0:	6819      	ldr	r1, [r3, #0]
    35d2:	6179      	str	r1, [r7, #20]
    35d4:	613b      	str	r3, [r7, #16]
    35d6:	441d      	add	r5, r3
    35d8:	3d08      	subs	r5, #8
    35da:	f04f 0a01 	mov.w	sl, #1
    35de:	603c      	str	r4, [r7, #0]
    35e0:	eb06 0b84 	add.w	fp, r6, r4, lsl #2
    35e4:	e037      	b.n	3656 <mul_mont_nonred_n+0xde>
    35e6:	4620      	mov	r0, r4
    35e8:	46a4      	mov	ip, r4
    35ea:	e7eb      	b.n	35c4 <mul_mont_nonred_n+0x4c>
    35ec:	6872      	ldr	r2, [r6, #4]
    35ee:	441a      	add	r2, r3
    35f0:	6032      	str	r2, [r6, #0]
    35f2:	4554      	cmp	r4, sl
    35f4:	d056      	beq.n	36a4 <mul_mont_nonred_n+0x12c>
    35f6:	b914      	cbnz	r4, 35fe <mul_mont_nonred_n+0x86>
    35f8:	6838      	ldr	r0, [r7, #0]
    35fa:	4603      	mov	r3, r0
    35fc:	e023      	b.n	3646 <mul_mont_nonred_n+0xce>
    35fe:	68fb      	ldr	r3, [r7, #12]
    3600:	f853 e02a 	ldr.w	lr, [r3, sl, lsl #2]
    3604:	e002      	b.n	360c <mul_mont_nonred_n+0x94>
    3606:	68fb      	ldr	r3, [r7, #12]
    3608:	f853 e02a 	ldr.w	lr, [r3, sl, lsl #2]
    360c:	68bb      	ldr	r3, [r7, #8]
    360e:	f1a3 0c04 	sub.w	ip, r3, #4
    3612:	1f32      	subs	r2, r6, #4
    3614:	2300      	movs	r3, #0
    3616:	4618      	mov	r0, r3
    3618:	46b1      	mov	r9, r6
    361a:	46a8      	mov	r8, r5
    361c:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    3620:	f852 6f04 	ldr.w	r6, [r2, #4]!
    3624:	2100      	movs	r1, #0
    3626:	1980      	adds	r0, r0, r6
    3628:	f141 0100 	adc.w	r1, r1, #0
    362c:	fbee 0105 	umlal	r0, r1, lr, r5
    3630:	6010      	str	r0, [r2, #0]
    3632:	4608      	mov	r0, r1
    3634:	3301      	adds	r3, #1
    3636:	429c      	cmp	r4, r3
    3638:	d8f0      	bhi.n	361c <mul_mont_nonred_n+0xa4>
    363a:	464e      	mov	r6, r9
    363c:	4645      	mov	r5, r8
    363e:	2c00      	cmp	r4, #0
    3640:	bf14      	ite	ne
    3642:	4623      	movne	r3, r4
    3644:	2301      	moveq	r3, #1
    3646:	6832      	ldr	r2, [r6, #0]
    3648:	6c39      	ldr	r1, [r7, #64]	; 0x40
    364a:	fb02 f201 	mul.w	r2, r2, r1
    364e:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    3652:	f10a 0a01 	add.w	sl, sl, #1
    3656:	4694      	mov	ip, r2
    3658:	697b      	ldr	r3, [r7, #20]
    365a:	fba2 2303 	umull	r2, r3, r2, r3
    365e:	6831      	ldr	r1, [r6, #0]
    3660:	1852      	adds	r2, r2, r1
    3662:	f143 0300 	adc.w	r3, r3, #0
    3666:	469e      	mov	lr, r3
    3668:	2c01      	cmp	r4, #1
    366a:	d9bf      	bls.n	35ec <mul_mont_nonred_n+0x74>
    366c:	4630      	mov	r0, r6
    366e:	6939      	ldr	r1, [r7, #16]
    3670:	46b0      	mov	r8, r6
    3672:	f851 2f04 	ldr.w	r2, [r1, #4]!
    3676:	fba2 230c 	umull	r2, r3, r2, ip
    367a:	eb12 020e 	adds.w	r2, r2, lr
    367e:	f143 0300 	adc.w	r3, r3, #0
    3682:	6846      	ldr	r6, [r0, #4]
    3684:	1992      	adds	r2, r2, r6
    3686:	f143 0300 	adc.w	r3, r3, #0
    368a:	f840 2b04 	str.w	r2, [r0], #4
    368e:	469e      	mov	lr, r3
    3690:	42a9      	cmp	r1, r5
    3692:	d1ee      	bne.n	3672 <mul_mont_nonred_n+0xfa>
    3694:	4646      	mov	r6, r8
    3696:	f8db 3000 	ldr.w	r3, [fp]
    369a:	4473      	add	r3, lr
    369c:	f84b 3c04 	str.w	r3, [fp, #-4]
    36a0:	4554      	cmp	r4, sl
    36a2:	d1b0      	bne.n	3606 <mul_mont_nonred_n+0x8e>
    36a4:	f03a 4140 	bics.w	r1, sl, #3221225472	; 0xc0000000
    36a8:	d00a      	beq.n	36c0 <mul_mont_nonred_n+0x148>
    36aa:	3e04      	subs	r6, #4
    36ac:	687b      	ldr	r3, [r7, #4]
    36ae:	3b04      	subs	r3, #4
    36b0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    36b4:	f856 2f04 	ldr.w	r2, [r6, #4]!
    36b8:	f843 2f04 	str.w	r2, [r3, #4]!
    36bc:	428e      	cmp	r6, r1
    36be:	d1f9      	bne.n	36b4 <mul_mont_nonred_n+0x13c>
    36c0:	371c      	adds	r7, #28
    36c2:	46bd      	mov	sp, r7
    36c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000036c8 <smul_n_shift_n>:
    36c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36cc:	b085      	sub	sp, #20
    36ce:	af00      	add	r7, sp, #0
    36d0:	60f8      	str	r0, [r7, #12]
    36d2:	4616      	mov	r6, r2
    36d4:	607b      	str	r3, [r7, #4]
    36d6:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
    36da:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
    36dc:	1c6a      	adds	r2, r5, #1
    36de:	60ba      	str	r2, [r7, #8]
    36e0:	0094      	lsls	r4, r2, #2
    36e2:	603c      	str	r4, [r7, #0]
    36e4:	1de3      	adds	r3, r4, #7
    36e6:	f023 0307 	bic.w	r3, r3, #7
    36ea:	ebad 0d03 	sub.w	sp, sp, r3
    36ee:	466c      	mov	r4, sp
    36f0:	ebad 0d03 	sub.w	sp, sp, r3
    36f4:	46e8      	mov	r8, sp
    36f6:	6833      	ldr	r3, [r6, #0]
    36f8:	ea4f 79e3 	mov.w	r9, r3, asr #31
    36fc:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    3700:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    3704:	462b      	mov	r3, r5
    3706:	464a      	mov	r2, r9
    3708:	4620      	mov	r0, r4
    370a:	f7fd f939 	bl	980 <cneg_n>
    370e:	462b      	mov	r3, r5
    3710:	4652      	mov	r2, sl
    3712:	4621      	mov	r1, r4
    3714:	4620      	mov	r0, r4
    3716:	f7fd f96a 	bl	9ee <umul_n>
    371a:	ea09 090a 	and.w	r9, r9, sl
    371e:	eba0 0009 	sub.w	r0, r0, r9
    3722:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    3726:	f8db 3000 	ldr.w	r3, [fp]
    372a:	ea4f 79e3 	mov.w	r9, r3, asr #31
    372e:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    3732:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    3736:	462b      	mov	r3, r5
    3738:	464a      	mov	r2, r9
    373a:	6879      	ldr	r1, [r7, #4]
    373c:	4640      	mov	r0, r8
    373e:	f7fd f91f 	bl	980 <cneg_n>
    3742:	462b      	mov	r3, r5
    3744:	4652      	mov	r2, sl
    3746:	4641      	mov	r1, r8
    3748:	4640      	mov	r0, r8
    374a:	f7fd f950 	bl	9ee <umul_n>
    374e:	ea09 090a 	and.w	r9, r9, sl
    3752:	eba0 0009 	sub.w	r0, r0, r9
    3756:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    375a:	68bb      	ldr	r3, [r7, #8]
    375c:	4642      	mov	r2, r8
    375e:	4621      	mov	r1, r4
    3760:	4620      	mov	r0, r4
    3762:	f7fd f928 	bl	9b6 <add_n>
    3766:	6822      	ldr	r2, [r4, #0]
    3768:	b175      	cbz	r5, 3788 <smul_n_shift_n+0xc0>
    376a:	4621      	mov	r1, r4
    376c:	68f8      	ldr	r0, [r7, #12]
    376e:	3804      	subs	r0, #4
    3770:	683b      	ldr	r3, [r7, #0]
    3772:	3b04      	subs	r3, #4
    3774:	441c      	add	r4, r3
    3776:	0f93      	lsrs	r3, r2, #30
    3778:	f851 2f04 	ldr.w	r2, [r1, #4]!
    377c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    3780:	f840 3f04 	str.w	r3, [r0, #4]!
    3784:	42a1      	cmp	r1, r4
    3786:	d1f6      	bne.n	3776 <smul_n_shift_n+0xae>
    3788:	17d4      	asrs	r4, r2, #31
    378a:	6833      	ldr	r3, [r6, #0]
    378c:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    3790:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    3794:	6033      	str	r3, [r6, #0]
    3796:	f8db 3000 	ldr.w	r3, [fp]
    379a:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    379e:	eba3 72e2 	sub.w	r2, r3, r2, asr #31
    37a2:	f8cb 2000 	str.w	r2, [fp]
    37a6:	462b      	mov	r3, r5
    37a8:	4622      	mov	r2, r4
    37aa:	68f9      	ldr	r1, [r7, #12]
    37ac:	4608      	mov	r0, r1
    37ae:	f7fd f8e7 	bl	980 <cneg_n>
    37b2:	4620      	mov	r0, r4
    37b4:	3714      	adds	r7, #20
    37b6:	46bd      	mov	sp, r7
    37b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000037bc <smul_2n>:
    37bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37c0:	b083      	sub	sp, #12
    37c2:	af00      	add	r7, sp, #0
    37c4:	6038      	str	r0, [r7, #0]
    37c6:	469b      	mov	fp, r3
    37c8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
    37cc:	6b7e      	ldr	r6, [r7, #52]	; 0x34
    37ce:	00b3      	lsls	r3, r6, #2
    37d0:	3307      	adds	r3, #7
    37d2:	f023 0307 	bic.w	r3, r3, #7
    37d6:	ebad 0d03 	sub.w	sp, sp, r3
    37da:	46e8      	mov	r8, sp
    37dc:	ebad 0d03 	sub.w	sp, sp, r3
    37e0:	46e9      	mov	r9, sp
    37e2:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
    37e6:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
    37ea:	4633      	mov	r3, r6
    37ec:	17d2      	asrs	r2, r2, #31
    37ee:	4640      	mov	r0, r8
    37f0:	f7fd f8c6 	bl	980 <cneg_n>
    37f4:	4604      	mov	r4, r0
    37f6:	4633      	mov	r3, r6
    37f8:	462a      	mov	r2, r5
    37fa:	4641      	mov	r1, r8
    37fc:	4640      	mov	r0, r8
    37fe:	f7fd f8f6 	bl	9ee <umul_n>
    3802:	6078      	str	r0, [r7, #4]
    3804:	4025      	ands	r5, r4
    3806:	ea8a 74ea 	eor.w	r4, sl, sl, asr #31
    380a:	eba4 74ea 	sub.w	r4, r4, sl, asr #31
    380e:	4633      	mov	r3, r6
    3810:	ea4f 72ea 	mov.w	r2, sl, asr #31
    3814:	4659      	mov	r1, fp
    3816:	4648      	mov	r0, r9
    3818:	f7fd f8b2 	bl	980 <cneg_n>
    381c:	4683      	mov	fp, r0
    381e:	4633      	mov	r3, r6
    3820:	4622      	mov	r2, r4
    3822:	4649      	mov	r1, r9
    3824:	4648      	mov	r0, r9
    3826:	f7fd f8e2 	bl	9ee <umul_n>
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	4403      	add	r3, r0
    382e:	469a      	mov	sl, r3
    3830:	ea04 040b 	and.w	r4, r4, fp
    3834:	4633      	mov	r3, r6
    3836:	464a      	mov	r2, r9
    3838:	4641      	mov	r1, r8
    383a:	6838      	ldr	r0, [r7, #0]
    383c:	f7fd f8bb 	bl	9b6 <add_n>
    3840:	4450      	add	r0, sl
    3842:	1b40      	subs	r0, r0, r5
    3844:	1b00      	subs	r0, r0, r4
    3846:	370c      	adds	r7, #12
    3848:	46bd      	mov	sp, r7
    384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000384e <quot_rem_n>:
    384e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3852:	b083      	sub	sp, #12
    3854:	af00      	add	r7, sp, #0
    3856:	4683      	mov	fp, r0
    3858:	6079      	str	r1, [r7, #4]
    385a:	469a      	mov	sl, r3
    385c:	f103 0801 	add.w	r8, r3, #1
    3860:	ea4f 0888 	mov.w	r8, r8, lsl #2
    3864:	f108 0307 	add.w	r3, r8, #7
    3868:	f023 0307 	bic.w	r3, r3, #7
    386c:	ebad 0d03 	sub.w	sp, sp, r3
    3870:	46e9      	mov	r9, sp
    3872:	f1ba 0f00 	cmp.w	sl, #0
    3876:	d052      	beq.n	391e <quot_rem_n+0xd0>
    3878:	1f0b      	subs	r3, r1, #4
    387a:	f1a9 0404 	sub.w	r4, r9, #4
    387e:	f1a8 0504 	sub.w	r5, r8, #4
    3882:	441d      	add	r5, r3
    3884:	2000      	movs	r0, #0
    3886:	f853 6f04 	ldr.w	r6, [r3, #4]!
    388a:	2100      	movs	r1, #0
    388c:	fbe2 0106 	umlal	r0, r1, r2, r6
    3890:	f844 0f04 	str.w	r0, [r4, #4]!
    3894:	4608      	mov	r0, r1
    3896:	42ab      	cmp	r3, r5
    3898:	d1f5      	bne.n	3886 <quot_rem_n+0x38>
    389a:	4653      	mov	r3, sl
    389c:	f849 0023 	str.w	r0, [r9, r3, lsl #2]
    38a0:	f1ab 0c04 	sub.w	ip, fp, #4
    38a4:	f1a9 0104 	sub.w	r1, r9, #4
    38a8:	f1a8 0e04 	sub.w	lr, r8, #4
    38ac:	44de      	add	lr, fp
    38ae:	460e      	mov	r6, r1
    38b0:	4663      	mov	r3, ip
    38b2:	2000      	movs	r0, #0
    38b4:	f853 4f04 	ldr.w	r4, [r3, #4]!
    38b8:	1a24      	subs	r4, r4, r0
    38ba:	eb64 0504 	sbc.w	r5, r4, r4
    38be:	f856 0f04 	ldr.w	r0, [r6, #4]!
    38c2:	1a24      	subs	r4, r4, r0
    38c4:	f165 0500 	sbc.w	r5, r5, #0
    38c8:	6034      	str	r4, [r6, #0]
    38ca:	f005 0001 	and.w	r0, r5, #1
    38ce:	4573      	cmp	r3, lr
    38d0:	d1f0      	bne.n	38b4 <quot_rem_n+0x66>
    38d2:	f1c0 0e00 	rsb	lr, r0, #0
    38d6:	f1ba 0f00 	cmp.w	sl, #0
    38da:	d019      	beq.n	3910 <quot_rem_n+0xc2>
    38dc:	687b      	ldr	r3, [r7, #4]
    38de:	1f1e      	subs	r6, r3, #4
    38e0:	f1a8 0808 	sub.w	r8, r8, #8
    38e4:	44c8      	add	r8, r9
    38e6:	2400      	movs	r4, #0
    38e8:	f856 3f04 	ldr.w	r3, [r6, #4]!
    38ec:	ea0e 0303 	and.w	r3, lr, r3
    38f0:	f851 9f04 	ldr.w	r9, [r1, #4]!
    38f4:	2500      	movs	r5, #0
    38f6:	eb14 0409 	adds.w	r4, r4, r9
    38fa:	f145 0500 	adc.w	r5, r5, #0
    38fe:	18e4      	adds	r4, r4, r3
    3900:	f145 0500 	adc.w	r5, r5, #0
    3904:	f84c 4f04 	str.w	r4, [ip, #4]!
    3908:	f005 0401 	and.w	r4, r5, #1
    390c:	4541      	cmp	r1, r8
    390e:	d1eb      	bne.n	38e8 <quot_rem_n+0x9a>
    3910:	1a10      	subs	r0, r2, r0
    3912:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
    3916:	370c      	adds	r7, #12
    3918:	46bd      	mov	sp, r7
    391a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    391e:	4650      	mov	r0, sl
    3920:	4653      	mov	r3, sl
    3922:	e7bb      	b.n	389c <quot_rem_n+0x4e>

00003924 <POINTonE1s_mult_w5>:
    3924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3928:	b0a9      	sub	sp, #164	; 0xa4
    392a:	af00      	add	r7, sp, #0
    392c:	4605      	mov	r5, r0
    392e:	4688      	mov	r8, r1
    3930:	607a      	str	r2, [r7, #4]
    3932:	603b      	str	r3, [r7, #0]
    3934:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
    3938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    393c:	b16b      	cbz	r3, 395a <POINTonE1s_mult_w5+0x36>
    393e:	f1b8 0f00 	cmp.w	r8, #0
    3942:	d025      	beq.n	3990 <POINTonE1s_mult_w5+0x6c>
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	b31b      	cbz	r3, 3990 <POINTonE1s_mult_w5+0x6c>
    3948:	f8d7 60cc 	ldr.w	r6, [r7, #204]	; 0xcc
    394c:	eb03 0ac3 	add.w	sl, r3, r3, lsl #3
    3950:	eb06 2a0a 	add.w	sl, r6, sl, lsl #8
    3954:	f04f 0900 	mov.w	r9, #0
    3958:	e012      	b.n	3980 <POINTonE1s_mult_w5+0x5c>
    395a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    395e:	466a      	mov	r2, sp
    3960:	eba2 2303 	sub.w	r3, r2, r3, lsl #8
    3964:	469d      	mov	sp, r3
    3966:	f8c7 d0cc 	str.w	sp, [r7, #204]	; 0xcc
    396a:	e7e8      	b.n	393e <POINTonE1s_mult_w5+0x1a>
    396c:	f109 0990 	add.w	r9, r9, #144	; 0x90
    3970:	4649      	mov	r1, r9
    3972:	4630      	mov	r0, r6
    3974:	f7fe feea 	bl	274c <POINTonE1_precompute_w5>
    3978:	f506 6610 	add.w	r6, r6, #2304	; 0x900
    397c:	4556      	cmp	r6, sl
    397e:	d007      	beq.n	3990 <POINTonE1s_mult_w5+0x6c>
    3980:	f8d8 3000 	ldr.w	r3, [r8]
    3984:	2b00      	cmp	r3, #0
    3986:	d0f1      	beq.n	396c <POINTonE1s_mult_w5+0x48>
    3988:	f108 0804 	add.w	r8, r8, #4
    398c:	4699      	mov	r9, r3
    398e:	e7ef      	b.n	3970 <POINTonE1s_mult_w5+0x4c>
    3990:	1de3      	adds	r3, r4, #7
    3992:	08db      	lsrs	r3, r3, #3
    3994:	60bb      	str	r3, [r7, #8]
    3996:	f8d7 8000 	ldr.w	r8, [r7]
    399a:	f858 6b04 	ldr.w	r6, [r8], #4
    399e:	4b60      	ldr	r3, [pc, #384]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    39a0:	fba3 2304 	umull	r2, r3, r3, r4
    39a4:	f023 0a03 	bic.w	sl, r3, #3
    39a8:	eb0a 0393 	add.w	r3, sl, r3, lsr #2
    39ac:	eba4 0a03 	sub.w	sl, r4, r3
    39b0:	f10a 0201 	add.w	r2, sl, #1
    39b4:	f04f 0b01 	mov.w	fp, #1
    39b8:	fa0b fb02 	lsl.w	fp, fp, r2
    39bc:	f10b 3bff 	add.w	fp, fp, #4294967295
    39c0:	ebb4 040a 	subs.w	r4, r4, sl
    39c4:	d01b      	beq.n	39fe <POINTonE1s_mult_w5+0xda>
    39c6:	f104 39ff 	add.w	r9, r4, #4294967295
    39ca:	4649      	mov	r1, r9
    39cc:	4630      	mov	r0, r6
    39ce:	f7fc fe57 	bl	680 <get_wval>
    39d2:	2105      	movs	r1, #5
    39d4:	ea00 000b 	and.w	r0, r0, fp
    39d8:	f7fc fe7b 	bl	6d2 <booth_encode>
    39dc:	4602      	mov	r2, r0
    39de:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
    39e2:	4628      	mov	r0, r5
    39e4:	f7fe ffb4 	bl	2950 <POINTonE1_gather_booth_w5>
    39e8:	687b      	ldr	r3, [r7, #4]
    39ea:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    39ee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
    39f2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    39f6:	2401      	movs	r4, #1
    39f8:	4653      	mov	r3, sl
    39fa:	4692      	mov	sl, r2
    39fc:	e046      	b.n	3a8c <POINTonE1s_mult_w5+0x168>
    39fe:	7830      	ldrb	r0, [r6, #0]
    3a00:	2105      	movs	r1, #5
    3a02:	ea0b 0040 	and.w	r0, fp, r0, lsl #1
    3a06:	f7fc fe64 	bl	6d2 <booth_encode>
    3a0a:	4602      	mov	r2, r0
    3a0c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
    3a10:	4628      	mov	r0, r5
    3a12:	f7fe ff9d 	bl	2950 <POINTonE1_gather_booth_w5>
    3a16:	f8c7 8000 	str.w	r8, [r7]
    3a1a:	2401      	movs	r4, #1
    3a1c:	e044      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3a1e:	68bb      	ldr	r3, [r7, #8]
    3a20:	441e      	add	r6, r3
    3a22:	68fa      	ldr	r2, [r7, #12]
    3a24:	4649      	mov	r1, r9
    3a26:	4630      	mov	r0, r6
    3a28:	f7fc fe2a 	bl	680 <get_wval>
    3a2c:	2105      	movs	r1, #5
    3a2e:	ea00 000b 	and.w	r0, r0, fp
    3a32:	f7fc fe4e 	bl	6d2 <booth_encode>
    3a36:	4602      	mov	r2, r0
    3a38:	4621      	mov	r1, r4
    3a3a:	f107 0010 	add.w	r0, r7, #16
    3a3e:	f7fe ff87 	bl	2950 <POINTonE1_gather_booth_w5>
    3a42:	2300      	movs	r3, #0
    3a44:	f107 0210 	add.w	r2, r7, #16
    3a48:	4629      	mov	r1, r5
    3a4a:	4628      	mov	r0, r5
    3a4c:	f7fe f84b 	bl	1ae6 <POINTonE1_dadd>
    3a50:	f504 6410 	add.w	r4, r4, #2304	; 0x900
    3a54:	45a2      	cmp	sl, r4
    3a56:	d007      	beq.n	3a68 <POINTonE1s_mult_w5+0x144>
    3a58:	f8d8 3000 	ldr.w	r3, [r8]
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	d0de      	beq.n	3a1e <POINTonE1s_mult_w5+0xfa>
    3a60:	f108 0804 	add.w	r8, r8, #4
    3a64:	461e      	mov	r6, r3
    3a66:	e7dc      	b.n	3a22 <POINTonE1s_mult_w5+0xfe>
    3a68:	2405      	movs	r4, #5
    3a6a:	4629      	mov	r1, r5
    3a6c:	4628      	mov	r0, r5
    3a6e:	f7fe fdcc 	bl	260a <POINTonE1_double>
    3a72:	3c01      	subs	r4, #1
    3a74:	d1f9      	bne.n	3a6a <POINTonE1s_mult_w5+0x146>
    3a76:	f1a9 0205 	sub.w	r2, r9, #5
    3a7a:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
    3a7e:	2305      	movs	r3, #5
    3a80:	f1b9 0f04 	cmp.w	r9, #4
    3a84:	d00e      	beq.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a86:	4691      	mov	r9, r2
    3a88:	f8d7 8000 	ldr.w	r8, [r7]
    3a8c:	687a      	ldr	r2, [r7, #4]
    3a8e:	42a2      	cmp	r2, r4
    3a90:	d9ea      	bls.n	3a68 <POINTonE1s_mult_w5+0x144>
    3a92:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    3a96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
    3a9a:	eb02 2404 	add.w	r4, r2, r4, lsl #8
    3a9e:	3301      	adds	r3, #1
    3aa0:	60fb      	str	r3, [r7, #12]
    3aa2:	e7d9      	b.n	3a58 <POINTonE1s_mult_w5+0x134>
    3aa4:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
    3aa8:	687b      	ldr	r3, [r7, #4]
    3aaa:	42a3      	cmp	r3, r4
    3aac:	d934      	bls.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3aae:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    3ab2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
    3ab6:	eb02 2404 	add.w	r4, r2, r4, lsl #8
    3aba:	eb03 08c3 	add.w	r8, r3, r3, lsl #3
    3abe:	eb02 2808 	add.w	r8, r2, r8, lsl #8
    3ac2:	f04f 0a05 	mov.w	sl, #5
    3ac6:	f04f 0900 	mov.w	r9, #0
    3aca:	f8c7 800c 	str.w	r8, [r7, #12]
    3ace:	f8d7 8000 	ldr.w	r8, [r7]
    3ad2:	e019      	b.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
    3ad4:	68bb      	ldr	r3, [r7, #8]
    3ad6:	441e      	add	r6, r3
    3ad8:	7830      	ldrb	r0, [r6, #0]
    3ada:	4651      	mov	r1, sl
    3adc:	ea0b 0040 	and.w	r0, fp, r0, lsl #1
    3ae0:	f7fc fdf7 	bl	6d2 <booth_encode>
    3ae4:	4602      	mov	r2, r0
    3ae6:	4621      	mov	r1, r4
    3ae8:	f107 0010 	add.w	r0, r7, #16
    3aec:	f7fe ff30 	bl	2950 <POINTonE1_gather_booth_w5>
    3af0:	464b      	mov	r3, r9
    3af2:	f107 0210 	add.w	r2, r7, #16
    3af6:	4629      	mov	r1, r5
    3af8:	4628      	mov	r0, r5
    3afa:	f7fd fff4 	bl	1ae6 <POINTonE1_dadd>
    3afe:	f504 6410 	add.w	r4, r4, #2304	; 0x900
    3b02:	68fb      	ldr	r3, [r7, #12]
    3b04:	42a3      	cmp	r3, r4
    3b06:	d007      	beq.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3b08:	f8d8 3000 	ldr.w	r3, [r8]
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d0e1      	beq.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
    3b10:	f108 0804 	add.w	r8, r8, #4
    3b14:	461e      	mov	r6, r3
    3b16:	e7df      	b.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3b18:	37a4      	adds	r7, #164	; 0xa4
    3b1a:	46bd      	mov	sp, r7
    3b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b20:	cccccccd 	.word	0xcccccccd

00003b24 <POINTonE1_affine_Compress_BE>:
    3b24:	b570      	push	{r4, r5, r6, lr}
    3b26:	b09a      	sub	sp, #104	; 0x68
    3b28:	4605      	mov	r5, r0
    3b2a:	460c      	mov	r4, r1
    3b2c:	230c      	movs	r3, #12
    3b2e:	9300      	str	r3, [sp, #0]
    3b30:	4b15      	ldr	r3, [pc, #84]	; (3b88 <POINTonE1_affine_Compress_BE+0x64>)
    3b32:	4a16      	ldr	r2, [pc, #88]	; (3b8c <POINTonE1_affine_Compress_BE+0x68>)
    3b34:	a80e      	add	r0, sp, #56	; 0x38
    3b36:	f7ff fb6f 	bl	3218 <from_mont_n>
    3b3a:	f105 0630 	add.w	r6, r5, #48	; 0x30
    3b3e:	462a      	mov	r2, r5
    3b40:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    3b44:	1a8b      	subs	r3, r1, r2
    3b46:	f023 0003 	bic.w	r0, r3, #3
    3b4a:	ad1a      	add	r5, sp, #104	; 0x68
    3b4c:	4428      	add	r0, r5
    3b4e:	f003 0303 	and.w	r3, r3, #3
    3b52:	00db      	lsls	r3, r3, #3
    3b54:	f850 0c30 	ldr.w	r0, [r0, #-48]
    3b58:	fa20 f303 	lsr.w	r3, r0, r3
    3b5c:	f802 3b01 	strb.w	r3, [r2], #1
    3b60:	42b2      	cmp	r2, r6
    3b62:	d1ef      	bne.n	3b44 <POINTonE1_affine_Compress_BE+0x20>
    3b64:	4d09      	ldr	r5, [pc, #36]	; (3b8c <POINTonE1_affine_Compress_BE+0x68>)
    3b66:	260c      	movs	r6, #12
    3b68:	9600      	str	r6, [sp, #0]
    3b6a:	4b07      	ldr	r3, [pc, #28]	; (3b88 <POINTonE1_affine_Compress_BE+0x64>)
    3b6c:	462a      	mov	r2, r5
    3b6e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    3b72:	a802      	add	r0, sp, #8
    3b74:	f7ff fb50 	bl	3218 <from_mont_n>
    3b78:	4632      	mov	r2, r6
    3b7a:	4629      	mov	r1, r5
    3b7c:	a802      	add	r0, sp, #8
    3b7e:	f7ff fc75 	bl	346c <sgn0_pty_mod_n>
    3b82:	b01a      	add	sp, #104	; 0x68
    3b84:	bd70      	pop	{r4, r5, r6, pc}
    3b86:	bf00      	nop
    3b88:	fffcfffd 	.word	0xfffcfffd
    3b8c:	0001ade8 	.word	0x0001ade8

00003b90 <POINTonE2_cneg>:
    3b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b92:	b083      	sub	sp, #12
    3b94:	4604      	mov	r4, r0
    3b96:	460d      	mov	r5, r1
    3b98:	3060      	adds	r0, #96	; 0x60
    3b9a:	4e09      	ldr	r6, [pc, #36]	; (3bc0 <POINTonE2_cneg+0x30>)
    3b9c:	270c      	movs	r7, #12
    3b9e:	9700      	str	r7, [sp, #0]
    3ba0:	4633      	mov	r3, r6
    3ba2:	460a      	mov	r2, r1
    3ba4:	4601      	mov	r1, r0
    3ba6:	f7fe fe6b 	bl	2880 <cneg_mod_n>
    3baa:	f104 0090 	add.w	r0, r4, #144	; 0x90
    3bae:	9700      	str	r7, [sp, #0]
    3bb0:	4633      	mov	r3, r6
    3bb2:	462a      	mov	r2, r5
    3bb4:	4601      	mov	r1, r0
    3bb6:	f7fe fe63 	bl	2880 <cneg_mod_n>
    3bba:	b003      	add	sp, #12
    3bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bbe:	bf00      	nop
    3bc0:	0001ade8 	.word	0x0001ade8

00003bc4 <POINTonE2_gather_booth_w5>:
    3bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bc6:	460f      	mov	r7, r1
    3bc8:	f3c2 1140 	ubfx	r1, r2, #5, #1
    3bcc:	f002 0c1f 	and.w	ip, r2, #31
    3bd0:	4603      	mov	r3, r0
    3bd2:	f500 7490 	add.w	r4, r0, #288	; 0x120
    3bd6:	2200      	movs	r2, #0
    3bd8:	f843 2b04 	str.w	r2, [r3], #4
    3bdc:	42a3      	cmp	r3, r4
    3bde:	d1fb      	bne.n	3bd8 <POINTonE2_gather_booth_w5+0x14>
    3be0:	f507 778e 	add.w	r7, r7, #284	; 0x11c
    3be4:	f04f 0e01 	mov.w	lr, #1
    3be8:	e006      	b.n	3bf8 <POINTonE2_gather_booth_w5+0x34>
    3bea:	f10e 0e01 	add.w	lr, lr, #1
    3bee:	f507 7790 	add.w	r7, r7, #288	; 0x120
    3bf2:	f1be 0f11 	cmp.w	lr, #17
    3bf6:	d012      	beq.n	3c1e <POINTonE2_gather_booth_w5+0x5a>
    3bf8:	ea8c 060e 	eor.w	r6, ip, lr
    3bfc:	b2f6      	uxtb	r6, r6
    3bfe:	3e01      	subs	r6, #1
    3c00:	17f6      	asrs	r6, r6, #31
    3c02:	f5a7 7490 	sub.w	r4, r7, #288	; 0x120
    3c06:	1f02      	subs	r2, r0, #4
    3c08:	f852 5f04 	ldr.w	r5, [r2, #4]!
    3c0c:	f854 3f04 	ldr.w	r3, [r4, #4]!
    3c10:	2e00      	cmp	r6, #0
    3c12:	bf08      	it	eq
    3c14:	462b      	moveq	r3, r5
    3c16:	6013      	str	r3, [r2, #0]
    3c18:	42bc      	cmp	r4, r7
    3c1a:	d1f5      	bne.n	3c08 <POINTonE2_gather_booth_w5+0x44>
    3c1c:	e7e5      	b.n	3bea <POINTonE2_gather_booth_w5+0x26>
    3c1e:	f7ff ffb7 	bl	3b90 <POINTonE2_cneg>
    3c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003c24 <POINTonE2_gather_booth_w4>:
    3c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c26:	460f      	mov	r7, r1
    3c28:	f3c2 1100 	ubfx	r1, r2, #4, #1
    3c2c:	f002 0c0f 	and.w	ip, r2, #15
    3c30:	4603      	mov	r3, r0
    3c32:	f500 7490 	add.w	r4, r0, #288	; 0x120
    3c36:	2200      	movs	r2, #0
    3c38:	f843 2b04 	str.w	r2, [r3], #4
    3c3c:	42a3      	cmp	r3, r4
    3c3e:	d1fb      	bne.n	3c38 <POINTonE2_gather_booth_w4+0x14>
    3c40:	f507 778e 	add.w	r7, r7, #284	; 0x11c
    3c44:	f04f 0e01 	mov.w	lr, #1
    3c48:	ea8c 060e 	eor.w	r6, ip, lr
    3c4c:	b2f6      	uxtb	r6, r6
    3c4e:	3e01      	subs	r6, #1
    3c50:	17f6      	asrs	r6, r6, #31
    3c52:	f5a7 7490 	sub.w	r4, r7, #288	; 0x120
    3c56:	1f02      	subs	r2, r0, #4
    3c58:	f852 5f04 	ldr.w	r5, [r2, #4]!
    3c5c:	f854 3f04 	ldr.w	r3, [r4, #4]!
    3c60:	2e00      	cmp	r6, #0
    3c62:	bf08      	it	eq
    3c64:	462b      	moveq	r3, r5
    3c66:	6013      	str	r3, [r2, #0]
    3c68:	42bc      	cmp	r4, r7
    3c6a:	d1f5      	bne.n	3c58 <POINTonE2_gather_booth_w4+0x34>
    3c6c:	f10e 0e01 	add.w	lr, lr, #1
    3c70:	f507 7790 	add.w	r7, r7, #288	; 0x120
    3c74:	f1be 0f09 	cmp.w	lr, #9
    3c78:	d1e6      	bne.n	3c48 <POINTonE2_gather_booth_w4+0x24>
    3c7a:	f7ff ff89 	bl	3b90 <POINTonE2_cneg>
    3c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003c80 <POINTonE2_gather_booth_wbits>:
    3c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c82:	460c      	mov	r4, r1
    3c84:	fa23 f102 	lsr.w	r1, r3, r2
    3c88:	f001 0101 	and.w	r1, r1, #1
    3c8c:	f04f 35ff 	mov.w	r5, #4294967295
    3c90:	fa05 f202 	lsl.w	r2, r5, r2
    3c94:	ea23 0502 	bic.w	r5, r3, r2
    3c98:	ea62 0203 	orn	r2, r2, r3
    3c9c:	1e6b      	subs	r3, r5, #1
    3c9e:	4013      	ands	r3, r2
    3ca0:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    3ca4:	4f0e      	ldr	r7, [pc, #56]	; (3ce0 <POINTonE2_gather_booth_wbits+0x60>)
    3ca6:	f607 521c 	addw	r2, r7, #3356	; 0xd1c
    3caa:	2b00      	cmp	r3, #0
    3cac:	bfb4      	ite	lt
    3cae:	462b      	movlt	r3, r5
    3cb0:	1e6b      	subge	r3, r5, #1
    3cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3cb6:	eb04 1483 	add.w	r4, r4, r3, lsl #6
    3cba:	3c04      	subs	r4, #4
    3cbc:	1f05      	subs	r5, r0, #4
    3cbe:	f607 57dc 	addw	r7, r7, #3548	; 0xddc
    3cc2:	f854 6f04 	ldr.w	r6, [r4, #4]!
    3cc6:	f852 3f04 	ldr.w	r3, [r2, #4]!
    3cca:	f1bc 0f00 	cmp.w	ip, #0
    3cce:	bf08      	it	eq
    3cd0:	4633      	moveq	r3, r6
    3cd2:	f845 3f04 	str.w	r3, [r5, #4]!
    3cd6:	42ba      	cmp	r2, r7
    3cd8:	d1f3      	bne.n	3cc2 <POINTonE2_gather_booth_wbits+0x42>
    3cda:	f7ff ff59 	bl	3b90 <POINTonE2_cneg>
    3cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ce0:	0001ade8 	.word	0x0001ade8

00003ce4 <neg_fp6>:
    3ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ce6:	b083      	sub	sp, #12
    3ce8:	4604      	mov	r4, r0
    3cea:	460d      	mov	r5, r1
    3cec:	4e1a      	ldr	r6, [pc, #104]	; (3d58 <neg_fp6+0x74>)
    3cee:	270c      	movs	r7, #12
    3cf0:	9700      	str	r7, [sp, #0]
    3cf2:	4633      	mov	r3, r6
    3cf4:	2201      	movs	r2, #1
    3cf6:	f7fe fdc3 	bl	2880 <cneg_mod_n>
    3cfa:	9700      	str	r7, [sp, #0]
    3cfc:	4633      	mov	r3, r6
    3cfe:	2201      	movs	r2, #1
    3d00:	f105 0130 	add.w	r1, r5, #48	; 0x30
    3d04:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3d08:	f7fe fdba 	bl	2880 <cneg_mod_n>
    3d0c:	9700      	str	r7, [sp, #0]
    3d0e:	4633      	mov	r3, r6
    3d10:	2201      	movs	r2, #1
    3d12:	f105 0160 	add.w	r1, r5, #96	; 0x60
    3d16:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3d1a:	f7fe fdb1 	bl	2880 <cneg_mod_n>
    3d1e:	9700      	str	r7, [sp, #0]
    3d20:	4633      	mov	r3, r6
    3d22:	2201      	movs	r2, #1
    3d24:	f105 0190 	add.w	r1, r5, #144	; 0x90
    3d28:	f104 0090 	add.w	r0, r4, #144	; 0x90
    3d2c:	f7fe fda8 	bl	2880 <cneg_mod_n>
    3d30:	9700      	str	r7, [sp, #0]
    3d32:	4633      	mov	r3, r6
    3d34:	2201      	movs	r2, #1
    3d36:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    3d3a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    3d3e:	f7fe fd9f 	bl	2880 <cneg_mod_n>
    3d42:	9700      	str	r7, [sp, #0]
    3d44:	4633      	mov	r3, r6
    3d46:	2201      	movs	r2, #1
    3d48:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    3d4c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    3d50:	f7fe fd96 	bl	2880 <cneg_mod_n>
    3d54:	b003      	add	sp, #12
    3d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d58:	0001ade8 	.word	0x0001ade8

00003d5c <conjugate_fp12>:
    3d5c:	b508      	push	{r3, lr}
    3d5e:	f500 7090 	add.w	r0, r0, #288	; 0x120
    3d62:	4601      	mov	r1, r0
    3d64:	f7ff ffbe 	bl	3ce4 <neg_fp6>
    3d68:	bd08      	pop	{r3, pc}

00003d6a <add_fp6>:
    3d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d6e:	b082      	sub	sp, #8
    3d70:	4604      	mov	r4, r0
    3d72:	460d      	mov	r5, r1
    3d74:	4616      	mov	r6, r2
    3d76:	4f21      	ldr	r7, [pc, #132]	; (3dfc <add_fp6+0x92>)
    3d78:	f04f 080c 	mov.w	r8, #12
    3d7c:	f8cd 8000 	str.w	r8, [sp]
    3d80:	463b      	mov	r3, r7
    3d82:	f7fd f97b 	bl	107c <add_mod_n>
    3d86:	f8cd 8000 	str.w	r8, [sp]
    3d8a:	463b      	mov	r3, r7
    3d8c:	f106 0230 	add.w	r2, r6, #48	; 0x30
    3d90:	f105 0130 	add.w	r1, r5, #48	; 0x30
    3d94:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3d98:	f7fd f970 	bl	107c <add_mod_n>
    3d9c:	f8cd 8000 	str.w	r8, [sp]
    3da0:	463b      	mov	r3, r7
    3da2:	f106 0260 	add.w	r2, r6, #96	; 0x60
    3da6:	f105 0160 	add.w	r1, r5, #96	; 0x60
    3daa:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3dae:	f7fd f965 	bl	107c <add_mod_n>
    3db2:	f8cd 8000 	str.w	r8, [sp]
    3db6:	463b      	mov	r3, r7
    3db8:	f106 0290 	add.w	r2, r6, #144	; 0x90
    3dbc:	f105 0190 	add.w	r1, r5, #144	; 0x90
    3dc0:	f104 0090 	add.w	r0, r4, #144	; 0x90
    3dc4:	f7fd f95a 	bl	107c <add_mod_n>
    3dc8:	f8cd 8000 	str.w	r8, [sp]
    3dcc:	463b      	mov	r3, r7
    3dce:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
    3dd2:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    3dd6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    3dda:	f7fd f94f 	bl	107c <add_mod_n>
    3dde:	f8cd 8000 	str.w	r8, [sp]
    3de2:	463b      	mov	r3, r7
    3de4:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
    3de8:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    3dec:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    3df0:	f7fd f944 	bl	107c <add_mod_n>
    3df4:	b002      	add	sp, #8
    3df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dfa:	bf00      	nop
    3dfc:	0001ade8 	.word	0x0001ade8

00003e00 <sub_fp6>:
    3e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e04:	b082      	sub	sp, #8
    3e06:	4604      	mov	r4, r0
    3e08:	460d      	mov	r5, r1
    3e0a:	4616      	mov	r6, r2
    3e0c:	4f20      	ldr	r7, [pc, #128]	; (3e90 <sub_fp6+0x90>)
    3e0e:	f04f 080c 	mov.w	r8, #12
    3e12:	f8cd 8000 	str.w	r8, [sp]
    3e16:	463b      	mov	r3, r7
    3e18:	f7fc fc7d 	bl	716 <sub_mod_n>
    3e1c:	f8cd 8000 	str.w	r8, [sp]
    3e20:	463b      	mov	r3, r7
    3e22:	f106 0230 	add.w	r2, r6, #48	; 0x30
    3e26:	f105 0130 	add.w	r1, r5, #48	; 0x30
    3e2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3e2e:	f7fc fc72 	bl	716 <sub_mod_n>
    3e32:	f8cd 8000 	str.w	r8, [sp]
    3e36:	463b      	mov	r3, r7
    3e38:	f106 0260 	add.w	r2, r6, #96	; 0x60
    3e3c:	f105 0160 	add.w	r1, r5, #96	; 0x60
    3e40:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3e44:	f7fc fc67 	bl	716 <sub_mod_n>
    3e48:	f8cd 8000 	str.w	r8, [sp]
    3e4c:	463b      	mov	r3, r7
    3e4e:	f106 0290 	add.w	r2, r6, #144	; 0x90
    3e52:	f105 0190 	add.w	r1, r5, #144	; 0x90
    3e56:	f104 0090 	add.w	r0, r4, #144	; 0x90
    3e5a:	f7fc fc5c 	bl	716 <sub_mod_n>
    3e5e:	f8cd 8000 	str.w	r8, [sp]
    3e62:	463b      	mov	r3, r7
    3e64:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
    3e68:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    3e6c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    3e70:	f7fc fc51 	bl	716 <sub_mod_n>
    3e74:	f8cd 8000 	str.w	r8, [sp]
    3e78:	463b      	mov	r3, r7
    3e7a:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
    3e7e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    3e82:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    3e86:	f7fc fc46 	bl	716 <sub_mod_n>
    3e8a:	b002      	add	sp, #8
    3e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e90:	0001ade8 	.word	0x0001ade8

00003e94 <POINTonE2_affine_Compress_BE>:
    3e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e96:	b0a7      	sub	sp, #156	; 0x9c
    3e98:	4606      	mov	r6, r0
    3e9a:	460d      	mov	r5, r1
    3e9c:	230c      	movs	r3, #12
    3e9e:	9300      	str	r3, [sp, #0]
    3ea0:	4b3f      	ldr	r3, [pc, #252]	; (3fa0 <POINTonE2_affine_Compress_BE+0x10c>)
    3ea2:	4a40      	ldr	r2, [pc, #256]	; (3fa4 <POINTonE2_affine_Compress_BE+0x110>)
    3ea4:	3130      	adds	r1, #48	; 0x30
    3ea6:	a81a      	add	r0, sp, #104	; 0x68
    3ea8:	f7ff f9b6 	bl	3218 <from_mont_n>
    3eac:	f106 0430 	add.w	r4, r6, #48	; 0x30
    3eb0:	4632      	mov	r2, r6
    3eb2:	4637      	mov	r7, r6
    3eb4:	f106 002f 	add.w	r0, r6, #47	; 0x2f
    3eb8:	1a83      	subs	r3, r0, r2
    3eba:	f023 0103 	bic.w	r1, r3, #3
    3ebe:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
    3ec2:	4461      	add	r1, ip
    3ec4:	f003 0303 	and.w	r3, r3, #3
    3ec8:	00db      	lsls	r3, r3, #3
    3eca:	f851 1c30 	ldr.w	r1, [r1, #-48]
    3ece:	fa21 f303 	lsr.w	r3, r1, r3
    3ed2:	f802 3b01 	strb.w	r3, [r2], #1
    3ed6:	42a2      	cmp	r2, r4
    3ed8:	d1ee      	bne.n	3eb8 <POINTonE2_affine_Compress_BE+0x24>
    3eda:	230c      	movs	r3, #12
    3edc:	9300      	str	r3, [sp, #0]
    3ede:	4b30      	ldr	r3, [pc, #192]	; (3fa0 <POINTonE2_affine_Compress_BE+0x10c>)
    3ee0:	4a30      	ldr	r2, [pc, #192]	; (3fa4 <POINTonE2_affine_Compress_BE+0x110>)
    3ee2:	4629      	mov	r1, r5
    3ee4:	a81a      	add	r0, sp, #104	; 0x68
    3ee6:	f7ff f997 	bl	3218 <from_mont_n>
    3eea:	3660      	adds	r6, #96	; 0x60
    3eec:	375f      	adds	r7, #95	; 0x5f
    3eee:	1b3b      	subs	r3, r7, r4
    3ef0:	f023 0203 	bic.w	r2, r3, #3
    3ef4:	a926      	add	r1, sp, #152	; 0x98
    3ef6:	440a      	add	r2, r1
    3ef8:	f003 0303 	and.w	r3, r3, #3
    3efc:	00db      	lsls	r3, r3, #3
    3efe:	f852 2c30 	ldr.w	r2, [r2, #-48]
    3f02:	fa22 f303 	lsr.w	r3, r2, r3
    3f06:	f804 3b01 	strb.w	r3, [r4], #1
    3f0a:	42b4      	cmp	r4, r6
    3f0c:	d1ef      	bne.n	3eee <POINTonE2_affine_Compress_BE+0x5a>
    3f0e:	4f24      	ldr	r7, [pc, #144]	; (3fa0 <POINTonE2_affine_Compress_BE+0x10c>)
    3f10:	4c24      	ldr	r4, [pc, #144]	; (3fa4 <POINTonE2_affine_Compress_BE+0x110>)
    3f12:	260c      	movs	r6, #12
    3f14:	9600      	str	r6, [sp, #0]
    3f16:	463b      	mov	r3, r7
    3f18:	4622      	mov	r2, r4
    3f1a:	f105 0160 	add.w	r1, r5, #96	; 0x60
    3f1e:	a802      	add	r0, sp, #8
    3f20:	f7ff f97a 	bl	3218 <from_mont_n>
    3f24:	9600      	str	r6, [sp, #0]
    3f26:	463b      	mov	r3, r7
    3f28:	4622      	mov	r2, r4
    3f2a:	f105 0190 	add.w	r1, r5, #144	; 0x90
    3f2e:	a80e      	add	r0, sp, #56	; 0x38
    3f30:	f7ff f972 	bl	3218 <from_mont_n>
    3f34:	4632      	mov	r2, r6
    3f36:	4621      	mov	r1, r4
    3f38:	a802      	add	r0, sp, #8
    3f3a:	f7ff fa97 	bl	346c <sgn0_pty_mod_n>
    3f3e:	4605      	mov	r5, r0
    3f40:	4632      	mov	r2, r6
    3f42:	4621      	mov	r1, r4
    3f44:	a80e      	add	r0, sp, #56	; 0x38
    3f46:	f7ff fa91 	bl	346c <sgn0_pty_mod_n>
    3f4a:	aa0d      	add	r2, sp, #52	; 0x34
    3f4c:	ab02      	add	r3, sp, #8
    3f4e:	ae19      	add	r6, sp, #100	; 0x64
    3f50:	2100      	movs	r1, #0
    3f52:	f852 4f04 	ldr.w	r4, [r2, #4]!
    3f56:	4321      	orrs	r1, r4
    3f58:	4296      	cmp	r6, r2
    3f5a:	d1fa      	bne.n	3f52 <POINTonE2_affine_Compress_BE+0xbe>
    3f5c:	1e4c      	subs	r4, r1, #1
    3f5e:	ea24 0101 	bic.w	r1, r4, r1
    3f62:	0fcc      	lsrs	r4, r1, #31
    3f64:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    3f68:	3c01      	subs	r4, #1
    3f6a:	4004      	ands	r4, r0
    3f6c:	430c      	orrs	r4, r1
    3f6e:	f103 0630 	add.w	r6, r3, #48	; 0x30
    3f72:	2200      	movs	r2, #0
    3f74:	f853 1b04 	ldr.w	r1, [r3], #4
    3f78:	430a      	orrs	r2, r1
    3f7a:	429e      	cmp	r6, r3
    3f7c:	d1fa      	bne.n	3f74 <POINTonE2_affine_Compress_BE+0xe0>
    3f7e:	1e53      	subs	r3, r2, #1
    3f80:	ea23 0202 	bic.w	r2, r3, r2
    3f84:	0fd3      	lsrs	r3, r2, #31
    3f86:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    3f8a:	3b01      	subs	r3, #1
    3f8c:	402b      	ands	r3, r5
    3f8e:	4303      	orrs	r3, r0
    3f90:	f003 0301 	and.w	r3, r3, #1
    3f94:	f004 0002 	and.w	r0, r4, #2
    3f98:	4318      	orrs	r0, r3
    3f9a:	b027      	add	sp, #156	; 0x9c
    3f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f9e:	bf00      	nop
    3fa0:	fffcfffd 	.word	0xfffcfffd
    3fa4:	0001ade8 	.word	0x0001ade8

00003fa8 <POINTonE2_affine_Serialize_BE>:
    3fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fac:	b09a      	sub	sp, #104	; 0x68
    3fae:	4606      	mov	r6, r0
    3fb0:	4688      	mov	r8, r1
    3fb2:	230c      	movs	r3, #12
    3fb4:	9300      	str	r3, [sp, #0]
    3fb6:	4b53      	ldr	r3, [pc, #332]	; (4104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    3fb8:	4a53      	ldr	r2, [pc, #332]	; (4108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    3fba:	3130      	adds	r1, #48	; 0x30
    3fbc:	a80e      	add	r0, sp, #56	; 0x38
    3fbe:	f7ff f92b 	bl	3218 <from_mont_n>
    3fc2:	f106 0430 	add.w	r4, r6, #48	; 0x30
    3fc6:	4632      	mov	r2, r6
    3fc8:	4637      	mov	r7, r6
    3fca:	f106 002f 	add.w	r0, r6, #47	; 0x2f
    3fce:	1a83      	subs	r3, r0, r2
    3fd0:	f023 0103 	bic.w	r1, r3, #3
    3fd4:	ad1a      	add	r5, sp, #104	; 0x68
    3fd6:	4429      	add	r1, r5
    3fd8:	f003 0303 	and.w	r3, r3, #3
    3fdc:	00db      	lsls	r3, r3, #3
    3fde:	f851 1c30 	ldr.w	r1, [r1, #-48]
    3fe2:	fa21 f303 	lsr.w	r3, r1, r3
    3fe6:	f802 3b01 	strb.w	r3, [r2], #1
    3fea:	42a2      	cmp	r2, r4
    3fec:	d1ef      	bne.n	3fce <POINTonE2_affine_Serialize_BE+0x26>
    3fee:	230c      	movs	r3, #12
    3ff0:	9300      	str	r3, [sp, #0]
    3ff2:	4b44      	ldr	r3, [pc, #272]	; (4104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    3ff4:	4a44      	ldr	r2, [pc, #272]	; (4108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    3ff6:	4641      	mov	r1, r8
    3ff8:	a802      	add	r0, sp, #8
    3ffa:	f7ff f90d 	bl	3218 <from_mont_n>
    3ffe:	f106 0560 	add.w	r5, r6, #96	; 0x60
    4002:	f107 015f 	add.w	r1, r7, #95	; 0x5f
    4006:	1b0b      	subs	r3, r1, r4
    4008:	f023 0203 	bic.w	r2, r3, #3
    400c:	a81a      	add	r0, sp, #104	; 0x68
    400e:	4402      	add	r2, r0
    4010:	f003 0303 	and.w	r3, r3, #3
    4014:	00db      	lsls	r3, r3, #3
    4016:	f852 2c60 	ldr.w	r2, [r2, #-96]
    401a:	fa22 f303 	lsr.w	r3, r2, r3
    401e:	f804 3b01 	strb.w	r3, [r4], #1
    4022:	42ac      	cmp	r4, r5
    4024:	d1ef      	bne.n	4006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
    4026:	230c      	movs	r3, #12
    4028:	9300      	str	r3, [sp, #0]
    402a:	4b36      	ldr	r3, [pc, #216]	; (4104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    402c:	4a36      	ldr	r2, [pc, #216]	; (4108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    402e:	f108 0190 	add.w	r1, r8, #144	; 0x90
    4032:	a80e      	add	r0, sp, #56	; 0x38
    4034:	f7ff f8f0 	bl	3218 <from_mont_n>
    4038:	f106 0490 	add.w	r4, r6, #144	; 0x90
    403c:	f107 018f 	add.w	r1, r7, #143	; 0x8f
    4040:	1b4b      	subs	r3, r1, r5
    4042:	f023 0203 	bic.w	r2, r3, #3
    4046:	a81a      	add	r0, sp, #104	; 0x68
    4048:	4402      	add	r2, r0
    404a:	f003 0303 	and.w	r3, r3, #3
    404e:	00db      	lsls	r3, r3, #3
    4050:	f852 2c30 	ldr.w	r2, [r2, #-48]
    4054:	fa22 f303 	lsr.w	r3, r2, r3
    4058:	f805 3b01 	strb.w	r3, [r5], #1
    405c:	42a5      	cmp	r5, r4
    405e:	d1ef      	bne.n	4040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
    4060:	230c      	movs	r3, #12
    4062:	9300      	str	r3, [sp, #0]
    4064:	4b27      	ldr	r3, [pc, #156]	; (4104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    4066:	4a28      	ldr	r2, [pc, #160]	; (4108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    4068:	f108 0160 	add.w	r1, r8, #96	; 0x60
    406c:	a802      	add	r0, sp, #8
    406e:	f7ff f8d3 	bl	3218 <from_mont_n>
    4072:	36c0      	adds	r6, #192	; 0xc0
    4074:	37bf      	adds	r7, #191	; 0xbf
    4076:	1b3b      	subs	r3, r7, r4
    4078:	f023 0203 	bic.w	r2, r3, #3
    407c:	a91a      	add	r1, sp, #104	; 0x68
    407e:	440a      	add	r2, r1
    4080:	f003 0303 	and.w	r3, r3, #3
    4084:	00db      	lsls	r3, r3, #3
    4086:	f852 2c60 	ldr.w	r2, [r2, #-96]
    408a:	fa22 f303 	lsr.w	r3, r2, r3
    408e:	f804 3b01 	strb.w	r3, [r4], #1
    4092:	42b4      	cmp	r4, r6
    4094:	d1ef      	bne.n	4076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    4096:	4c1c      	ldr	r4, [pc, #112]	; (4108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    4098:	220c      	movs	r2, #12
    409a:	4621      	mov	r1, r4
    409c:	a802      	add	r0, sp, #8
    409e:	f7ff f9e5 	bl	346c <sgn0_pty_mod_n>
    40a2:	4605      	mov	r5, r0
    40a4:	220c      	movs	r2, #12
    40a6:	4621      	mov	r1, r4
    40a8:	a80e      	add	r0, sp, #56	; 0x38
    40aa:	f7ff f9df 	bl	346c <sgn0_pty_mod_n>
    40ae:	aa0d      	add	r2, sp, #52	; 0x34
    40b0:	ab02      	add	r3, sp, #8
    40b2:	ae19      	add	r6, sp, #100	; 0x64
    40b4:	2100      	movs	r1, #0
    40b6:	f852 4f04 	ldr.w	r4, [r2, #4]!
    40ba:	4321      	orrs	r1, r4
    40bc:	42b2      	cmp	r2, r6
    40be:	d1fa      	bne.n	40b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    40c0:	1e4c      	subs	r4, r1, #1
    40c2:	ea24 0101 	bic.w	r1, r4, r1
    40c6:	0fcc      	lsrs	r4, r1, #31
    40c8:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    40cc:	3c01      	subs	r4, #1
    40ce:	4004      	ands	r4, r0
    40d0:	430c      	orrs	r4, r1
    40d2:	f103 0630 	add.w	r6, r3, #48	; 0x30
    40d6:	2200      	movs	r2, #0
    40d8:	f853 1b04 	ldr.w	r1, [r3], #4
    40dc:	430a      	orrs	r2, r1
    40de:	42b3      	cmp	r3, r6
    40e0:	d1fa      	bne.n	40d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    40e2:	1e53      	subs	r3, r2, #1
    40e4:	ea23 0202 	bic.w	r2, r3, r2
    40e8:	0fd3      	lsrs	r3, r2, #31
    40ea:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    40ee:	3b01      	subs	r3, #1
    40f0:	402b      	ands	r3, r5
    40f2:	4303      	orrs	r3, r0
    40f4:	f003 0301 	and.w	r3, r3, #1
    40f8:	f004 0002 	and.w	r0, r4, #2
    40fc:	4318      	orrs	r0, r3
    40fe:	b01a      	add	sp, #104	; 0x68
    4100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4104:	fffcfffd 	.word	0xfffcfffd
    4108:	0001ade8 	.word	0x0001ade8

0000410c <add_n_check_mod_n>:
    410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4110:	b083      	sub	sp, #12
    4112:	af02      	add	r7, sp, #8
    4114:	4606      	mov	r6, r0
    4116:	468c      	mov	ip, r1
    4118:	4696      	mov	lr, r2
    411a:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
    411e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
    4122:	f10b 0207 	add.w	r2, fp, #7
    4126:	f022 0207 	bic.w	r2, r2, #7
    412a:	ebad 0d02 	sub.w	sp, sp, r2
    412e:	f10d 0808 	add.w	r8, sp, #8
    4132:	ebad 0d02 	sub.w	sp, sp, r2
    4136:	a902      	add	r1, sp, #8
    4138:	ebad 0d02 	sub.w	sp, sp, r2
    413c:	aa02      	add	r2, sp, #8
    413e:	f1bb 0f00 	cmp.w	fp, #0
    4142:	d01f      	beq.n	4184 <add_n_check_mod_n+0x78>
    4144:	f10b 34ff 	add.w	r4, fp, #4294967295
    4148:	44dc      	add	ip, fp
    414a:	4625      	mov	r5, r4
    414c:	2000      	movs	r0, #0
    414e:	f81c ad01 	ldrb.w	sl, [ip, #-1]!
    4152:	ea4a 2000 	orr.w	r0, sl, r0, lsl #8
    4156:	f025 0a03 	bic.w	sl, r5, #3
    415a:	f841 000a 	str.w	r0, [r1, sl]
    415e:	3d01      	subs	r5, #1
    4160:	f1b5 3fff 	cmp.w	r5, #4294967295
    4164:	d1f3      	bne.n	414e <add_n_check_mod_n+0x42>
    4166:	eb0e 050b 	add.w	r5, lr, fp
    416a:	2000      	movs	r0, #0
    416c:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
    4170:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
    4174:	f024 0c03 	bic.w	ip, r4, #3
    4178:	f842 000c 	str.w	r0, [r2, ip]
    417c:	3c01      	subs	r4, #1
    417e:	f1b4 3fff 	cmp.w	r4, #4294967295
    4182:	d1f3      	bne.n	416c <add_n_check_mod_n+0x60>
    4184:	f8cd 9000 	str.w	r9, [sp]
    4188:	4640      	mov	r0, r8
    418a:	f7fc ff77 	bl	107c <add_mod_n>
    418e:	f039 4940 	bics.w	r9, r9, #3221225472	; 0xc0000000
    4192:	d024      	beq.n	41de <add_n_check_mod_n+0xd2>
    4194:	f1a8 0104 	sub.w	r1, r8, #4
    4198:	ea4f 0989 	mov.w	r9, r9, lsl #2
    419c:	f1a9 0404 	sub.w	r4, r9, #4
    41a0:	4444      	add	r4, r8
    41a2:	460b      	mov	r3, r1
    41a4:	2200      	movs	r2, #0
    41a6:	f853 0f04 	ldr.w	r0, [r3, #4]!
    41aa:	4302      	orrs	r2, r0
    41ac:	429c      	cmp	r4, r3
    41ae:	d1fa      	bne.n	41a6 <add_n_check_mod_n+0x9a>
    41b0:	1e50      	subs	r0, r2, #1
    41b2:	ea20 0002 	bic.w	r0, r0, r2
    41b6:	0fc0      	lsrs	r0, r0, #31
    41b8:	4546      	cmp	r6, r8
    41ba:	d011      	beq.n	41e0 <add_n_check_mod_n+0xd4>
    41bc:	f1a9 0904 	sub.w	r9, r9, #4
    41c0:	44c8      	add	r8, r9
    41c2:	e002      	b.n	41ca <add_n_check_mod_n+0xbe>
    41c4:	3604      	adds	r6, #4
    41c6:	4541      	cmp	r1, r8
    41c8:	d00a      	beq.n	41e0 <add_n_check_mod_n+0xd4>
    41ca:	f851 2f04 	ldr.w	r2, [r1, #4]!
    41ce:	4633      	mov	r3, r6
    41d0:	1d34      	adds	r4, r6, #4
    41d2:	f803 2b01 	strb.w	r2, [r3], #1
    41d6:	0a12      	lsrs	r2, r2, #8
    41d8:	42a3      	cmp	r3, r4
    41da:	d1fa      	bne.n	41d2 <add_n_check_mod_n+0xc6>
    41dc:	e7f2      	b.n	41c4 <add_n_check_mod_n+0xb8>
    41de:	2001      	movs	r0, #1
    41e0:	f080 0001 	eor.w	r0, r0, #1
    41e4:	3704      	adds	r7, #4
    41e6:	46bd      	mov	sp, r7
    41e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000041ec <ab_approximation_n>:
    41ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41f0:	4691      	mov	r9, r2
    41f2:	469a      	mov	sl, r3
    41f4:	9c08      	ldr	r4, [sp, #32]
    41f6:	1e65      	subs	r5, r4, #1
    41f8:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    41fc:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    4200:	3a02      	subs	r2, #2
    4202:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
    4206:	f85a 7025 	ldr.w	r7, [sl, r5, lsl #2]
    420a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    420e:	2c03      	cmp	r4, #3
    4210:	d024      	beq.n	425c <ab_approximation_n+0x70>
    4212:	f1a4 0e02 	sub.w	lr, r4, #2
    4216:	eb01 0c8e 	add.w	ip, r1, lr, lsl #2
    421a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
    421e:	f101 0804 	add.w	r8, r1, #4
    4222:	ea43 0407 	orr.w	r4, r3, r7
    4226:	1e65      	subs	r5, r4, #1
    4228:	ea25 0404 	bic.w	r4, r5, r4
    422c:	ea83 0506 	eor.w	r5, r3, r6
    4230:	ea05 75e4 	and.w	r5, r5, r4, asr #31
    4234:	406b      	eors	r3, r5
    4236:	ea82 0507 	eor.w	r5, r2, r7
    423a:	ea05 75e4 	and.w	r5, r5, r4, asr #31
    423e:	406f      	eors	r7, r5
    4240:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
    4244:	4075      	eors	r5, r6
    4246:	ea05 75e4 	and.w	r5, r5, r4, asr #31
    424a:	406e      	eors	r6, r5
    424c:	f85e 5d04 	ldr.w	r5, [lr, #-4]!
    4250:	4055      	eors	r5, r2
    4252:	ea05 74e4 	and.w	r4, r5, r4, asr #31
    4256:	4062      	eors	r2, r4
    4258:	45c4      	cmp	ip, r8
    425a:	d1e2      	bne.n	4222 <ab_approximation_n+0x36>
    425c:	ea43 0e07 	orr.w	lr, r3, r7
    4260:	f10e 38ff 	add.w	r8, lr, #4294967295
    4264:	ea28 080e 	bic.w	r8, r8, lr
    4268:	ea4f 4c1e 	mov.w	ip, lr, lsr #16
    426c:	f1cc 0400 	rsb	r4, ip, #0
    4270:	17e4      	asrs	r4, r4, #31
    4272:	f004 0510 	and.w	r5, r4, #16
    4276:	f1b8 0f00 	cmp.w	r8, #0
    427a:	bfb4      	ite	lt
    427c:	46a8      	movlt	r8, r5
    427e:	f105 0801 	addge.w	r8, r5, #1
    4282:	2c00      	cmp	r4, #0
    4284:	bf14      	ite	ne
    4286:	4665      	movne	r5, ip
    4288:	4675      	moveq	r5, lr
    428a:	ea4f 2c15 	mov.w	ip, r5, lsr #8
    428e:	f1cc 0400 	rsb	r4, ip, #0
    4292:	17e4      	asrs	r4, r4, #31
    4294:	f004 0e08 	and.w	lr, r4, #8
    4298:	44f0      	add	r8, lr
    429a:	2c00      	cmp	r4, #0
    429c:	bf08      	it	eq
    429e:	46ac      	moveq	ip, r5
    42a0:	ea4f 151c 	mov.w	r5, ip, lsr #4
    42a4:	426c      	negs	r4, r5
    42a6:	17e4      	asrs	r4, r4, #31
    42a8:	f004 0e04 	and.w	lr, r4, #4
    42ac:	44f0      	add	r8, lr
    42ae:	2c00      	cmp	r4, #0
    42b0:	bf14      	ite	ne
    42b2:	462c      	movne	r4, r5
    42b4:	4664      	moveq	r4, ip
    42b6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    42ba:	f1cc 0e00 	rsb	lr, ip, #0
    42be:	ea4f 7eee 	mov.w	lr, lr, asr #31
    42c2:	f00e 0502 	and.w	r5, lr, #2
    42c6:	4445      	add	r5, r8
    42c8:	f1be 0f00 	cmp.w	lr, #0
    42cc:	bf18      	it	ne
    42ce:	4664      	movne	r4, ip
    42d0:	eb05 0554 	add.w	r5, r5, r4, lsr #1
    42d4:	f1c5 0420 	rsb	r4, r5, #32
    42d8:	6809      	ldr	r1, [r1, #0]
    42da:	6001      	str	r1, [r0, #0]
    42dc:	f1c5 011f 	rsb	r1, r5, #31
    42e0:	ea21 0104 	bic.w	r1, r1, r4
    42e4:	43c9      	mvns	r1, r1
    42e6:	0fc9      	lsrs	r1, r1, #31
    42e8:	4249      	negs	r1, r1
    42ea:	f004 041f 	and.w	r4, r4, #31
    42ee:	f005 051f 	and.w	r5, r5, #31
    42f2:	400e      	ands	r6, r1
    42f4:	40ee      	lsrs	r6, r5
    42f6:	40a3      	lsls	r3, r4
    42f8:	4333      	orrs	r3, r6
    42fa:	6043      	str	r3, [r0, #4]
    42fc:	f8da 3000 	ldr.w	r3, [sl]
    4300:	f8c9 3000 	str.w	r3, [r9]
    4304:	400a      	ands	r2, r1
    4306:	40ea      	lsrs	r2, r5
    4308:	40a7      	lsls	r7, r4
    430a:	4317      	orrs	r7, r2
    430c:	f8c9 7004 	str.w	r7, [r9, #4]
    4310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004314 <ct_inverse_mod_n>:
    4314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4318:	b095      	sub	sp, #84	; 0x54
    431a:	af02      	add	r7, sp, #8
    431c:	60b8      	str	r0, [r7, #8]
    431e:	607b      	str	r3, [r7, #4]
    4320:	f8d7 8070 	ldr.w	r8, [r7, #112]	; 0x70
    4324:	ea4f 0388 	mov.w	r3, r8, lsl #2
    4328:	60fb      	str	r3, [r7, #12]
    432a:	3307      	adds	r3, #7
    432c:	f023 0307 	bic.w	r3, r3, #7
    4330:	ebad 0d03 	sub.w	sp, sp, r3
    4334:	f10d 0a08 	add.w	sl, sp, #8
    4338:	ebad 0d03 	sub.w	sp, sp, r3
    433c:	ae02      	add	r6, sp, #8
    433e:	ea4f 0348 	mov.w	r3, r8, lsl #1
    4342:	61fb      	str	r3, [r7, #28]
    4344:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    4348:	61bb      	str	r3, [r7, #24]
    434a:	466b      	mov	r3, sp
    434c:	eba3 03c8 	sub.w	r3, r3, r8, lsl #3
    4350:	469d      	mov	sp, r3
    4352:	ab02      	add	r3, sp, #8
    4354:	627b      	str	r3, [r7, #36]	; 0x24
    4356:	466b      	mov	r3, sp
    4358:	eba3 03c8 	sub.w	r3, r3, r8, lsl #3
    435c:	469d      	mov	sp, r3
    435e:	ab02      	add	r3, sp, #8
    4360:	623b      	str	r3, [r7, #32]
    4362:	466b      	mov	r3, sp
    4364:	eba3 03c8 	sub.w	r3, r3, r8, lsl #3
    4368:	469d      	mov	sp, r3
    436a:	f10d 0908 	add.w	r9, sp, #8
    436e:	f038 4440 	bics.w	r4, r8, #3221225472	; 0xc0000000
    4372:	617c      	str	r4, [r7, #20]
    4374:	d014      	beq.n	43a0 <ct_inverse_mod_n+0x8c>
    4376:	1f0b      	subs	r3, r1, #4
    4378:	f1aa 0104 	sub.w	r1, sl, #4
    437c:	00a0      	lsls	r0, r4, #2
    437e:	eb03 0584 	add.w	r5, r3, r4, lsl #2
    4382:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4386:	f841 4f04 	str.w	r4, [r1, #4]!
    438a:	42ab      	cmp	r3, r5
    438c:	d1f9      	bne.n	4382 <ct_inverse_mod_n+0x6e>
    438e:	1f13      	subs	r3, r2, #4
    4390:	1f32      	subs	r2, r6, #4
    4392:	4418      	add	r0, r3
    4394:	f853 1f04 	ldr.w	r1, [r3, #4]!
    4398:	f842 1f04 	str.w	r1, [r2, #4]!
    439c:	4283      	cmp	r3, r0
    439e:	d1f9      	bne.n	4394 <ct_inverse_mod_n+0x80>
    43a0:	69bb      	ldr	r3, [r7, #24]
    43a2:	089c      	lsrs	r4, r3, #2
    43a4:	2b03      	cmp	r3, #3
    43a6:	d907      	bls.n	43b8 <ct_inverse_mod_n+0xa4>
    43a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    43aa:	2300      	movs	r3, #0
    43ac:	4619      	mov	r1, r3
    43ae:	f842 1b04 	str.w	r1, [r2], #4
    43b2:	3301      	adds	r3, #1
    43b4:	429c      	cmp	r4, r3
    43b6:	d8fa      	bhi.n	43ae <ct_inverse_mod_n+0x9a>
    43b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    43ba:	2301      	movs	r3, #1
    43bc:	6013      	str	r3, [r2, #0]
    43be:	69bb      	ldr	r3, [r7, #24]
    43c0:	2b03      	cmp	r3, #3
    43c2:	d907      	bls.n	43d4 <ct_inverse_mod_n+0xc0>
    43c4:	6a3a      	ldr	r2, [r7, #32]
    43c6:	2300      	movs	r3, #0
    43c8:	4619      	mov	r1, r3
    43ca:	f842 1b04 	str.w	r1, [r2], #4
    43ce:	3301      	adds	r3, #1
    43d0:	42a3      	cmp	r3, r4
    43d2:	d3fa      	bcc.n	43ca <ct_inverse_mod_n+0xb6>
    43d4:	6a3b      	ldr	r3, [r7, #32]
    43d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
    43da:	603a      	str	r2, [r7, #0]
    43dc:	4b6a      	ldr	r3, [pc, #424]	; (4588 <ct_inverse_mod_n+0x274>)
    43de:	4611      	mov	r1, r2
    43e0:	fba3 1301 	umull	r1, r3, r3, r1
    43e4:	091b      	lsrs	r3, r3, #4
    43e6:	613b      	str	r3, [r7, #16]
    43e8:	2a1d      	cmp	r2, #29
    43ea:	d966      	bls.n	44ba <ct_inverse_mod_n+0x1a6>
    43ec:	697b      	ldr	r3, [r7, #20]
    43ee:	eb09 0583 	add.w	r5, r9, r3, lsl #2
    43f2:	3d04      	subs	r5, #4
    43f4:	f04f 0b00 	mov.w	fp, #0
    43f8:	e004      	b.n	4404 <ct_inverse_mod_n+0xf0>
    43fa:	f10b 0b01 	add.w	fp, fp, #1
    43fe:	693b      	ldr	r3, [r7, #16]
    4400:	459b      	cmp	fp, r3
    4402:	d25a      	bcs.n	44ba <ct_inverse_mod_n+0x1a6>
    4404:	f8cd 8000 	str.w	r8, [sp]
    4408:	4633      	mov	r3, r6
    440a:	f107 0238 	add.w	r2, r7, #56	; 0x38
    440e:	4651      	mov	r1, sl
    4410:	f107 0040 	add.w	r0, r7, #64	; 0x40
    4414:	f7ff feea 	bl	41ec <ab_approximation_n>
    4418:	231e      	movs	r3, #30
    441a:	f107 0238 	add.w	r2, r7, #56	; 0x38
    441e:	f107 0140 	add.w	r1, r7, #64	; 0x40
    4422:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4426:	f7fc fa36 	bl	896 <inner_loop_n>
    442a:	f8cd 8004 	str.w	r8, [sp, #4]
    442e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    4432:	9300      	str	r3, [sp, #0]
    4434:	4633      	mov	r3, r6
    4436:	f107 0228 	add.w	r2, r7, #40	; 0x28
    443a:	4651      	mov	r1, sl
    443c:	4648      	mov	r0, r9
    443e:	f7ff f943 	bl	36c8 <smul_n_shift_n>
    4442:	f8cd 8004 	str.w	r8, [sp, #4]
    4446:	f107 0334 	add.w	r3, r7, #52	; 0x34
    444a:	9300      	str	r3, [sp, #0]
    444c:	4633      	mov	r3, r6
    444e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    4452:	4651      	mov	r1, sl
    4454:	4630      	mov	r0, r6
    4456:	f7ff f937 	bl	36c8 <smul_n_shift_n>
    445a:	697b      	ldr	r3, [r7, #20]
    445c:	b14b      	cbz	r3, 4472 <ct_inverse_mod_n+0x15e>
    445e:	f1a9 0304 	sub.w	r3, r9, #4
    4462:	f1aa 0204 	sub.w	r2, sl, #4
    4466:	f853 1f04 	ldr.w	r1, [r3, #4]!
    446a:	f842 1f04 	str.w	r1, [r2, #4]!
    446e:	42ab      	cmp	r3, r5
    4470:	d1f9      	bne.n	4466 <ct_inverse_mod_n+0x152>
    4472:	69fb      	ldr	r3, [r7, #28]
    4474:	9301      	str	r3, [sp, #4]
    4476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4478:	9300      	str	r3, [sp, #0]
    447a:	6a3b      	ldr	r3, [r7, #32]
    447c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    447e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4480:	4648      	mov	r0, r9
    4482:	f7ff f99b 	bl	37bc <smul_2n>
    4486:	69fa      	ldr	r2, [r7, #28]
    4488:	9201      	str	r2, [sp, #4]
    448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    448c:	9300      	str	r3, [sp, #0]
    448e:	6a38      	ldr	r0, [r7, #32]
    4490:	4603      	mov	r3, r0
    4492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    4494:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4496:	f7ff f991 	bl	37bc <smul_2n>
    449a:	69bb      	ldr	r3, [r7, #24]
    449c:	2b03      	cmp	r3, #3
    449e:	d9ac      	bls.n	43fa <ct_inverse_mod_n+0xe6>
    44a0:	f1a9 0104 	sub.w	r1, r9, #4
    44a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44a6:	1f1a      	subs	r2, r3, #4
    44a8:	2300      	movs	r3, #0
    44aa:	f851 0f04 	ldr.w	r0, [r1, #4]!
    44ae:	f842 0f04 	str.w	r0, [r2, #4]!
    44b2:	3301      	adds	r3, #1
    44b4:	429c      	cmp	r4, r3
    44b6:	d8f8      	bhi.n	44aa <ct_inverse_mod_n+0x196>
    44b8:	e79f      	b.n	43fa <ct_inverse_mod_n+0xe6>
    44ba:	4b33      	ldr	r3, [pc, #204]	; (4588 <ct_inverse_mod_n+0x274>)
    44bc:	6839      	ldr	r1, [r7, #0]
    44be:	460a      	mov	r2, r1
    44c0:	fba3 2302 	umull	r2, r3, r3, r2
    44c4:	f023 020f 	bic.w	r2, r3, #15
    44c8:	eba2 1313 	sub.w	r3, r2, r3, lsr #4
    44cc:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    44d0:	4632      	mov	r2, r6
    44d2:	4651      	mov	r1, sl
    44d4:	f107 0028 	add.w	r0, r7, #40	; 0x28
    44d8:	f7fc f9dd 	bl	896 <inner_loop_n>
    44dc:	69fb      	ldr	r3, [r7, #28]
    44de:	9301      	str	r3, [sp, #4]
    44e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44e2:	9300      	str	r3, [sp, #0]
    44e4:	6a3b      	ldr	r3, [r7, #32]
    44e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    44e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    44ea:	68bc      	ldr	r4, [r7, #8]
    44ec:	4620      	mov	r0, r4
    44ee:	f7ff f965 	bl	37bc <smul_2n>
    44f2:	ea4f 7ee0 	mov.w	lr, r0, asr #31
    44f6:	f1b8 0f00 	cmp.w	r8, #0
    44fa:	d043      	beq.n	4584 <ct_inverse_mod_n+0x270>
    44fc:	68fb      	ldr	r3, [r7, #12]
    44fe:	3b04      	subs	r3, #4
    4500:	4423      	add	r3, r4
    4502:	6879      	ldr	r1, [r7, #4]
    4504:	3904      	subs	r1, #4
    4506:	f1a4 0c04 	sub.w	ip, r4, #4
    450a:	69ba      	ldr	r2, [r7, #24]
    450c:	4494      	add	ip, r2
    450e:	460e      	mov	r6, r1
    4510:	2400      	movs	r4, #0
    4512:	4681      	mov	r9, r0
    4514:	4620      	mov	r0, r4
    4516:	460d      	mov	r5, r1
    4518:	f856 2f04 	ldr.w	r2, [r6, #4]!
    451c:	ea0e 0202 	and.w	r2, lr, r2
    4520:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4524:	2100      	movs	r1, #0
    4526:	1900      	adds	r0, r0, r4
    4528:	f141 0100 	adc.w	r1, r1, #0
    452c:	1880      	adds	r0, r0, r2
    452e:	f141 0100 	adc.w	r1, r1, #0
    4532:	6018      	str	r0, [r3, #0]
    4534:	4608      	mov	r0, r1
    4536:	459c      	cmp	ip, r3
    4538:	d1ee      	bne.n	4518 <ct_inverse_mod_n+0x204>
    453a:	460c      	mov	r4, r1
    453c:	4629      	mov	r1, r5
    453e:	444c      	add	r4, r9
    4540:	4262      	negs	r2, r4
    4542:	4314      	orrs	r4, r2
    4544:	f1aa 0504 	sub.w	r5, sl, #4
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	1f18      	subs	r0, r3, #4
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	4418      	add	r0, r3
    4550:	f851 3f04 	ldr.w	r3, [r1, #4]!
    4554:	4023      	ands	r3, r4
    4556:	f845 3f04 	str.w	r3, [r5, #4]!
    455a:	4281      	cmp	r1, r0
    455c:	d1f8      	bne.n	4550 <ct_inverse_mod_n+0x23c>
    455e:	4643      	mov	r3, r8
    4560:	17d2      	asrs	r2, r2, #31
    4562:	4651      	mov	r1, sl
    4564:	4650      	mov	r0, sl
    4566:	f7fc fa0b 	bl	980 <cneg_n>
    456a:	68bb      	ldr	r3, [r7, #8]
    456c:	68fa      	ldr	r2, [r7, #12]
    456e:	4413      	add	r3, r2
    4570:	4618      	mov	r0, r3
    4572:	4643      	mov	r3, r8
    4574:	4652      	mov	r2, sl
    4576:	4601      	mov	r1, r0
    4578:	f7fc fa1d 	bl	9b6 <add_n>
    457c:	374c      	adds	r7, #76	; 0x4c
    457e:	46bd      	mov	sp, r7
    4580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4584:	4242      	negs	r2, r0
    4586:	e7ea      	b.n	455e <ct_inverse_mod_n+0x24a>
    4588:	88888889 	.word	0x88888889

0000458c <reciprocal_fr>:
    458c:	b5f0      	push	{r4, r5, r6, r7, lr}
    458e:	b093      	sub	sp, #76	; 0x4c
    4590:	4604      	mov	r4, r0
    4592:	4d11      	ldr	r5, [pc, #68]	; (45d8 <reciprocal_fr+0x4c>)
    4594:	f505 6660 	add.w	r6, r5, #3584	; 0xe00
    4598:	2708      	movs	r7, #8
    459a:	9700      	str	r7, [sp, #0]
    459c:	f505 635e 	add.w	r3, r5, #3552	; 0xde0
    45a0:	4632      	mov	r2, r6
    45a2:	eb0d 0007 	add.w	r0, sp, r7
    45a6:	f7ff feb5 	bl	4314 <ct_inverse_mod_n>
    45aa:	9700      	str	r7, [sp, #0]
    45ac:	f04f 33ff 	mov.w	r3, #4294967295
    45b0:	4632      	mov	r2, r6
    45b2:	eb0d 0107 	add.w	r1, sp, r7
    45b6:	4620      	mov	r0, r4
    45b8:	f7fe feb6 	bl	3328 <redc_mont_n>
    45bc:	9701      	str	r7, [sp, #4]
    45be:	f04f 33ff 	mov.w	r3, #4294967295
    45c2:	9300      	str	r3, [sp, #0]
    45c4:	4633      	mov	r3, r6
    45c6:	f505 6262 	add.w	r2, r5, #3616	; 0xe20
    45ca:	4621      	mov	r1, r4
    45cc:	4620      	mov	r0, r4
    45ce:	f7fc faac 	bl	b2a <mul_mont_n>
    45d2:	b013      	add	sp, #76	; 0x4c
    45d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45d6:	bf00      	nop
    45d8:	0001ade8 	.word	0x0001ade8

000045dc <ct_is_sqr_mod_n>:
    45dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45e0:	b08f      	sub	sp, #60	; 0x3c
    45e2:	af02      	add	r7, sp, #8
    45e4:	4692      	mov	sl, r2
    45e6:	0093      	lsls	r3, r2, #2
    45e8:	3307      	adds	r3, #7
    45ea:	f023 0307 	bic.w	r3, r3, #7
    45ee:	ebad 0d03 	sub.w	sp, sp, r3
    45f2:	f10d 0808 	add.w	r8, sp, #8
    45f6:	ebad 0d03 	sub.w	sp, sp, r3
    45fa:	ae02      	add	r6, sp, #8
    45fc:	ebad 0d03 	sub.w	sp, sp, r3
    4600:	ab02      	add	r3, sp, #8
    4602:	60fb      	str	r3, [r7, #12]
    4604:	f032 4440 	bics.w	r4, r2, #3221225472	; 0xc0000000
    4608:	60bc      	str	r4, [r7, #8]
    460a:	d015      	beq.n	4638 <ct_is_sqr_mod_n+0x5c>
    460c:	1f03      	subs	r3, r0, #4
    460e:	f1a8 0204 	sub.w	r2, r8, #4
    4612:	4620      	mov	r0, r4
    4614:	00a4      	lsls	r4, r4, #2
    4616:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    461a:	f853 0f04 	ldr.w	r0, [r3, #4]!
    461e:	f842 0f04 	str.w	r0, [r2, #4]!
    4622:	42ab      	cmp	r3, r5
    4624:	d1f9      	bne.n	461a <ct_is_sqr_mod_n+0x3e>
    4626:	1f0b      	subs	r3, r1, #4
    4628:	1f32      	subs	r2, r6, #4
    462a:	1918      	adds	r0, r3, r4
    462c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    4630:	f842 1f04 	str.w	r1, [r2, #4]!
    4634:	4283      	cmp	r3, r0
    4636:	d1f9      	bne.n	462c <ct_is_sqr_mod_n+0x50>
    4638:	ea4f 128a 	mov.w	r2, sl, lsl #6
    463c:	603a      	str	r2, [r7, #0]
    463e:	4b3a      	ldr	r3, [pc, #232]	; (4728 <ct_is_sqr_mod_n+0x14c>)
    4640:	4611      	mov	r1, r2
    4642:	fba3 1301 	umull	r1, r3, r3, r1
    4646:	091b      	lsrs	r3, r3, #4
    4648:	607b      	str	r3, [r7, #4]
    464a:	2a1d      	cmp	r2, #29
    464c:	d94e      	bls.n	46ec <ct_is_sqr_mod_n+0x110>
    464e:	68fb      	ldr	r3, [r7, #12]
    4650:	68ba      	ldr	r2, [r7, #8]
    4652:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    4656:	3c04      	subs	r4, #4
    4658:	f04f 0900 	mov.w	r9, #0
    465c:	46cb      	mov	fp, r9
    465e:	e008      	b.n	4672 <ct_is_sqr_mod_n+0x96>
    4660:	6830      	ldr	r0, [r6, #0]
    4662:	ea05 0550 	and.w	r5, r5, r0, lsr #1
    4666:	44a9      	add	r9, r5
    4668:	f10b 0b01 	add.w	fp, fp, #1
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	459b      	cmp	fp, r3
    4670:	d23e      	bcs.n	46f0 <ct_is_sqr_mod_n+0x114>
    4672:	f8cd a000 	str.w	sl, [sp]
    4676:	4633      	mov	r3, r6
    4678:	f107 0220 	add.w	r2, r7, #32
    467c:	4641      	mov	r1, r8
    467e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4682:	f7ff fdb3 	bl	41ec <ab_approximation_n>
    4686:	231e      	movs	r3, #30
    4688:	9300      	str	r3, [sp, #0]
    468a:	f107 0320 	add.w	r3, r7, #32
    468e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    4692:	f107 0110 	add.w	r1, r7, #16
    4696:	4648      	mov	r0, r9
    4698:	f7fc f9be 	bl	a18 <legendre_loop_n>
    469c:	4681      	mov	r9, r0
    469e:	f8cd a004 	str.w	sl, [sp, #4]
    46a2:	f107 0314 	add.w	r3, r7, #20
    46a6:	9300      	str	r3, [sp, #0]
    46a8:	4633      	mov	r3, r6
    46aa:	f107 0210 	add.w	r2, r7, #16
    46ae:	4641      	mov	r1, r8
    46b0:	68f8      	ldr	r0, [r7, #12]
    46b2:	f7ff f809 	bl	36c8 <smul_n_shift_n>
    46b6:	4605      	mov	r5, r0
    46b8:	f8cd a004 	str.w	sl, [sp, #4]
    46bc:	f107 031c 	add.w	r3, r7, #28
    46c0:	9300      	str	r3, [sp, #0]
    46c2:	4633      	mov	r3, r6
    46c4:	f107 0218 	add.w	r2, r7, #24
    46c8:	4641      	mov	r1, r8
    46ca:	4630      	mov	r0, r6
    46cc:	f7fe fffc 	bl	36c8 <smul_n_shift_n>
    46d0:	68bb      	ldr	r3, [r7, #8]
    46d2:	2b00      	cmp	r3, #0
    46d4:	d0c4      	beq.n	4660 <ct_is_sqr_mod_n+0x84>
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	3b04      	subs	r3, #4
    46da:	f1a8 0204 	sub.w	r2, r8, #4
    46de:	f853 1f04 	ldr.w	r1, [r3, #4]!
    46e2:	f842 1f04 	str.w	r1, [r2, #4]!
    46e6:	42a3      	cmp	r3, r4
    46e8:	d1f9      	bne.n	46de <ct_is_sqr_mod_n+0x102>
    46ea:	e7b9      	b.n	4660 <ct_is_sqr_mod_n+0x84>
    46ec:	f04f 0900 	mov.w	r9, #0
    46f0:	4b0d      	ldr	r3, [pc, #52]	; (4728 <ct_is_sqr_mod_n+0x14c>)
    46f2:	6839      	ldr	r1, [r7, #0]
    46f4:	460a      	mov	r2, r1
    46f6:	fba3 2302 	umull	r2, r3, r3, r2
    46fa:	f023 020f 	bic.w	r2, r3, #15
    46fe:	eba2 1313 	sub.w	r3, r2, r3, lsr #4
    4702:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    4706:	9300      	str	r3, [sp, #0]
    4708:	4633      	mov	r3, r6
    470a:	4642      	mov	r2, r8
    470c:	f107 0110 	add.w	r1, r7, #16
    4710:	4648      	mov	r0, r9
    4712:	f7fc f981 	bl	a18 <legendre_loop_n>
    4716:	f080 0001 	eor.w	r0, r0, #1
    471a:	f000 0001 	and.w	r0, r0, #1
    471e:	3734      	adds	r7, #52	; 0x34
    4720:	46bd      	mov	sp, r7
    4722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4726:	bf00      	nop
    4728:	88888889 	.word	0x88888889

0000472c <blst_p1_cneg>:
    472c:	b508      	push	{r3, lr}
    472e:	1e4b      	subs	r3, r1, #1
    4730:	ea23 0101 	bic.w	r1, r3, r1
    4734:	43c9      	mvns	r1, r1
    4736:	0fc9      	lsrs	r1, r1, #31
    4738:	f7fe f8fa 	bl	2930 <POINTonE1_cneg>
    473c:	bd08      	pop	{r3, pc}

0000473e <blst_p1_from_affine>:
    473e:	b470      	push	{r4, r5, r6}
    4740:	1f0a      	subs	r2, r1, #4
    4742:	1f04      	subs	r4, r0, #4
    4744:	f101 055c 	add.w	r5, r1, #92	; 0x5c
    4748:	4613      	mov	r3, r2
    474a:	f853 6f04 	ldr.w	r6, [r3, #4]!
    474e:	f844 6f04 	str.w	r6, [r4, #4]!
    4752:	42ab      	cmp	r3, r5
    4754:	d1f9      	bne.n	474a <blst_p1_from_affine+0xc>
    4756:	4613      	mov	r3, r2
    4758:	2400      	movs	r4, #0
    475a:	f853 6f04 	ldr.w	r6, [r3, #4]!
    475e:	4334      	orrs	r4, r6
    4760:	42ab      	cmp	r3, r5
    4762:	d1fa      	bne.n	475a <blst_p1_from_affine+0x1c>
    4764:	1e63      	subs	r3, r4, #1
    4766:	ea23 0404 	bic.w	r4, r3, r4
    476a:	17e4      	asrs	r4, r4, #31
    476c:	4d08      	ldr	r5, [pc, #32]	; (4790 <blst_p1_from_affine+0x52>)
    476e:	305c      	adds	r0, #92	; 0x5c
    4770:	f101 062c 	add.w	r6, r1, #44	; 0x2c
    4774:	f855 1b04 	ldr.w	r1, [r5], #4
    4778:	f852 3f04 	ldr.w	r3, [r2, #4]!
    477c:	2c00      	cmp	r4, #0
    477e:	bf08      	it	eq
    4780:	460b      	moveq	r3, r1
    4782:	f840 3f04 	str.w	r3, [r0, #4]!
    4786:	42b2      	cmp	r2, r6
    4788:	d1f4      	bne.n	4774 <blst_p1_from_affine+0x36>
    478a:	bc70      	pop	{r4, r5, r6}
    478c:	4770      	bx	lr
    478e:	bf00      	nop
    4790:	0001ae48 	.word	0x0001ae48

00004794 <blst_p1_affine_on_curve>:
    4794:	b510      	push	{r4, lr}
    4796:	4604      	mov	r4, r0
    4798:	f7fc fcc6 	bl	1128 <POINTonE1_affine_on_curve>
    479c:	1f23      	subs	r3, r4, #4
    479e:	345c      	adds	r4, #92	; 0x5c
    47a0:	2200      	movs	r2, #0
    47a2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    47a6:	430a      	orrs	r2, r1
    47a8:	42a3      	cmp	r3, r4
    47aa:	d1fa      	bne.n	47a2 <blst_p1_affine_on_curve+0xe>
    47ac:	1e53      	subs	r3, r2, #1
    47ae:	ea23 0202 	bic.w	r2, r3, r2
    47b2:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    47b6:	bd10      	pop	{r4, pc}

000047b8 <blst_p1_on_curve>:
    47b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    47bc:	b0a7      	sub	sp, #156	; 0x9c
    47be:	4604      	mov	r4, r0
    47c0:	f100 0960 	add.w	r9, r0, #96	; 0x60
    47c4:	f100 025c 	add.w	r2, r0, #92	; 0x5c
    47c8:	f100 018c 	add.w	r1, r0, #140	; 0x8c
    47cc:	2300      	movs	r3, #0
    47ce:	f852 0f04 	ldr.w	r0, [r2, #4]!
    47d2:	4303      	orrs	r3, r0
    47d4:	428a      	cmp	r2, r1
    47d6:	d1fa      	bne.n	47ce <blst_p1_on_curve+0x16>
    47d8:	f103 38ff 	add.w	r8, r3, #4294967295
    47dc:	ea28 0803 	bic.w	r8, r8, r3
    47e0:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    47e4:	4d2a      	ldr	r5, [pc, #168]	; (4890 <blst_p1_on_curve+0xd8>)
    47e6:	260c      	movs	r6, #12
    47e8:	9601      	str	r6, [sp, #4]
    47ea:	4f2a      	ldr	r7, [pc, #168]	; (4894 <blst_p1_on_curve+0xdc>)
    47ec:	9700      	str	r7, [sp, #0]
    47ee:	462b      	mov	r3, r5
    47f0:	464a      	mov	r2, r9
    47f2:	4649      	mov	r1, r9
    47f4:	a81a      	add	r0, sp, #104	; 0x68
    47f6:	f7fc f998 	bl	b2a <mul_mont_n>
    47fa:	9601      	str	r6, [sp, #4]
    47fc:	9700      	str	r7, [sp, #0]
    47fe:	462b      	mov	r3, r5
    4800:	464a      	mov	r2, r9
    4802:	a91a      	add	r1, sp, #104	; 0x68
    4804:	4608      	mov	r0, r1
    4806:	f7fc f990 	bl	b2a <mul_mont_n>
    480a:	9601      	str	r6, [sp, #4]
    480c:	9700      	str	r7, [sp, #0]
    480e:	462b      	mov	r3, r5
    4810:	aa1a      	add	r2, sp, #104	; 0x68
    4812:	4611      	mov	r1, r2
    4814:	4610      	mov	r0, r2
    4816:	f7fc f988 	bl	b2a <mul_mont_n>
    481a:	9600      	str	r6, [sp, #0]
    481c:	462b      	mov	r3, r5
    481e:	2202      	movs	r2, #2
    4820:	a91a      	add	r1, sp, #104	; 0x68
    4822:	4608      	mov	r0, r1
    4824:	f7fd fe92 	bl	254c <lshift_mod_n>
    4828:	9601      	str	r6, [sp, #4]
    482a:	9700      	str	r7, [sp, #0]
    482c:	462b      	mov	r3, r5
    482e:	4622      	mov	r2, r4
    4830:	4621      	mov	r1, r4
    4832:	a802      	add	r0, sp, #8
    4834:	f7fc f979 	bl	b2a <mul_mont_n>
    4838:	9601      	str	r6, [sp, #4]
    483a:	9700      	str	r7, [sp, #0]
    483c:	462b      	mov	r3, r5
    483e:	4622      	mov	r2, r4
    4840:	a902      	add	r1, sp, #8
    4842:	4608      	mov	r0, r1
    4844:	f7fc f971 	bl	b2a <mul_mont_n>
    4848:	9600      	str	r6, [sp, #0]
    484a:	462b      	mov	r3, r5
    484c:	aa1a      	add	r2, sp, #104	; 0x68
    484e:	a902      	add	r1, sp, #8
    4850:	4608      	mov	r0, r1
    4852:	f7fc fc13 	bl	107c <add_mod_n>
    4856:	f104 0130 	add.w	r1, r4, #48	; 0x30
    485a:	9601      	str	r6, [sp, #4]
    485c:	9700      	str	r7, [sp, #0]
    485e:	462b      	mov	r3, r5
    4860:	460a      	mov	r2, r1
    4862:	a80e      	add	r0, sp, #56	; 0x38
    4864:	f7fc f961 	bl	b2a <mul_mont_n>
    4868:	ab02      	add	r3, sp, #8
    486a:	aa0e      	add	r2, sp, #56	; 0x38
    486c:	4614      	mov	r4, r2
    486e:	2000      	movs	r0, #0
    4870:	f853 1b04 	ldr.w	r1, [r3], #4
    4874:	f852 5b04 	ldr.w	r5, [r2], #4
    4878:	4069      	eors	r1, r5
    487a:	4308      	orrs	r0, r1
    487c:	42a3      	cmp	r3, r4
    487e:	d1f7      	bne.n	4870 <blst_p1_on_curve+0xb8>
    4880:	1e43      	subs	r3, r0, #1
    4882:	ea23 0000 	bic.w	r0, r3, r0
    4886:	ea48 70d0 	orr.w	r0, r8, r0, lsr #31
    488a:	b027      	add	sp, #156	; 0x9c
    488c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4890:	0001ade8 	.word	0x0001ade8
    4894:	fffcfffd 	.word	0xfffcfffd

00004898 <blst_p1_affine_serialize>:
    4898:	b538      	push	{r3, r4, r5, lr}
    489a:	1f0b      	subs	r3, r1, #4
    489c:	f101 055c 	add.w	r5, r1, #92	; 0x5c
    48a0:	2200      	movs	r2, #0
    48a2:	f853 4f04 	ldr.w	r4, [r3, #4]!
    48a6:	4322      	orrs	r2, r4
    48a8:	42ab      	cmp	r3, r5
    48aa:	d1fa      	bne.n	48a2 <blst_p1_affine_serialize+0xa>
    48ac:	1e53      	subs	r3, r2, #1
    48ae:	4393      	bics	r3, r2
    48b0:	d50a      	bpl.n	48c8 <blst_p1_affine_serialize+0x30>
    48b2:	1e43      	subs	r3, r0, #1
    48b4:	f100 015f 	add.w	r1, r0, #95	; 0x5f
    48b8:	2200      	movs	r2, #0
    48ba:	f803 2f01 	strb.w	r2, [r3, #1]!
    48be:	428b      	cmp	r3, r1
    48c0:	d1fb      	bne.n	48ba <blst_p1_affine_serialize+0x22>
    48c2:	2340      	movs	r3, #64	; 0x40
    48c4:	7003      	strb	r3, [r0, #0]
    48c6:	bd38      	pop	{r3, r4, r5, pc}
    48c8:	f7fe fe0e 	bl	34e8 <POINTonE1_affine_Serialize_BE>
    48cc:	e7fb      	b.n	48c6 <blst_p1_affine_serialize+0x2e>

000048ce <blst_p1_affine_compress>:
    48ce:	b570      	push	{r4, r5, r6, lr}
    48d0:	4606      	mov	r6, r0
    48d2:	1f0b      	subs	r3, r1, #4
    48d4:	f101 055c 	add.w	r5, r1, #92	; 0x5c
    48d8:	2200      	movs	r2, #0
    48da:	f853 4f04 	ldr.w	r4, [r3, #4]!
    48de:	4322      	orrs	r2, r4
    48e0:	42ab      	cmp	r3, r5
    48e2:	d1fa      	bne.n	48da <blst_p1_affine_compress+0xc>
    48e4:	1e53      	subs	r3, r2, #1
    48e6:	4393      	bics	r3, r2
    48e8:	d50a      	bpl.n	4900 <blst_p1_affine_compress+0x32>
    48ea:	1e73      	subs	r3, r6, #1
    48ec:	f106 012f 	add.w	r1, r6, #47	; 0x2f
    48f0:	2200      	movs	r2, #0
    48f2:	f803 2f01 	strb.w	r2, [r3, #1]!
    48f6:	428b      	cmp	r3, r1
    48f8:	d1fb      	bne.n	48f2 <blst_p1_affine_compress+0x24>
    48fa:	23c0      	movs	r3, #192	; 0xc0
    48fc:	7033      	strb	r3, [r6, #0]
    48fe:	bd70      	pop	{r4, r5, r6, pc}
    4900:	4630      	mov	r0, r6
    4902:	f7ff f90f 	bl	3b24 <POINTonE1_affine_Compress_BE>
    4906:	0103      	lsls	r3, r0, #4
    4908:	f003 0320 	and.w	r3, r3, #32
    490c:	7832      	ldrb	r2, [r6, #0]
    490e:	4313      	orrs	r3, r2
    4910:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4914:	7033      	strb	r3, [r6, #0]
    4916:	e7f2      	b.n	48fe <blst_p1_affine_compress+0x30>

00004918 <blst_p1_add>:
    4918:	b508      	push	{r3, lr}
    491a:	f7fc fdd7 	bl	14cc <POINTonE1_add>
    491e:	bd08      	pop	{r3, pc}

00004920 <blst_p1_add_or_double>:
    4920:	b508      	push	{r3, lr}
    4922:	2300      	movs	r3, #0
    4924:	f7fd f8df 	bl	1ae6 <POINTonE1_dadd>
    4928:	bd08      	pop	{r3, pc}

0000492a <blst_p1_add_affine>:
    492a:	b508      	push	{r3, lr}
    492c:	f7fc ff14 	bl	1758 <POINTonE1_add_affine>
    4930:	bd08      	pop	{r3, pc}

00004932 <blst_p1_add_or_double_affine>:
    4932:	b508      	push	{r3, lr}
    4934:	f7fd fa84 	bl	1e40 <POINTonE1_dadd_affine>
    4938:	bd08      	pop	{r3, pc}

0000493a <blst_p1_double>:
    493a:	b508      	push	{r3, lr}
    493c:	f7fd fe65 	bl	260a <POINTonE1_double>
    4940:	bd08      	pop	{r3, pc}

00004942 <blst_p1_is_equal>:
    4942:	b508      	push	{r3, lr}
    4944:	f7fc fa98 	bl	e78 <POINTonE1_is_equal>
    4948:	bd08      	pop	{r3, pc}

0000494a <blst_p1_unchecked_mult>:
    494a:	b943      	cbnz	r3, 495e <blst_p1_unchecked_mult+0x14>
    494c:	4603      	mov	r3, r0
    494e:	f100 0190 	add.w	r1, r0, #144	; 0x90
    4952:	2200      	movs	r2, #0
    4954:	f843 2b04 	str.w	r2, [r3], #4
    4958:	428b      	cmp	r3, r1
    495a:	d1fb      	bne.n	4954 <blst_p1_unchecked_mult+0xa>
    495c:	4770      	bx	lr
    495e:	b510      	push	{r4, lr}
    4960:	f7fe f8c6 	bl	2af0 <POINTonE1_mult_w4>
    4964:	bd10      	pop	{r4, pc}

00004966 <blst_p1_affine_is_equal>:
    4966:	b430      	push	{r4, r5}
    4968:	1f02      	subs	r2, r0, #4
    496a:	3904      	subs	r1, #4
    496c:	f100 055c 	add.w	r5, r0, #92	; 0x5c
    4970:	2000      	movs	r0, #0
    4972:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4976:	f851 4f04 	ldr.w	r4, [r1, #4]!
    497a:	4063      	eors	r3, r4
    497c:	4318      	orrs	r0, r3
    497e:	42aa      	cmp	r2, r5
    4980:	d1f7      	bne.n	4972 <blst_p1_affine_is_equal+0xc>
    4982:	1e43      	subs	r3, r0, #1
    4984:	ea23 0000 	bic.w	r0, r3, r0
    4988:	0fc0      	lsrs	r0, r0, #31
    498a:	bc30      	pop	{r4, r5}
    498c:	4770      	bx	lr

0000498e <blst_p1_is_inf>:
    498e:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    4992:	f100 018c 	add.w	r1, r0, #140	; 0x8c
    4996:	2000      	movs	r0, #0
    4998:	f853 2f04 	ldr.w	r2, [r3, #4]!
    499c:	4310      	orrs	r0, r2
    499e:	428b      	cmp	r3, r1
    49a0:	d1fa      	bne.n	4998 <blst_p1_is_inf+0xa>
    49a2:	1e43      	subs	r3, r0, #1
    49a4:	ea23 0000 	bic.w	r0, r3, r0
    49a8:	0fc0      	lsrs	r0, r0, #31
    49aa:	4770      	bx	lr

000049ac <blst_p1_generator>:
    49ac:	4800      	ldr	r0, [pc, #0]	; (49b0 <blst_p1_generator+0x4>)
    49ae:	4770      	bx	lr
    49b0:	0001bc28 	.word	0x0001bc28

000049b4 <blst_p1_affine_is_inf>:
    49b4:	1f03      	subs	r3, r0, #4
    49b6:	f100 015c 	add.w	r1, r0, #92	; 0x5c
    49ba:	2000      	movs	r0, #0
    49bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    49c0:	4310      	orrs	r0, r2
    49c2:	428b      	cmp	r3, r1
    49c4:	d1fa      	bne.n	49bc <blst_p1_affine_is_inf+0x8>
    49c6:	1e43      	subs	r3, r0, #1
    49c8:	ea23 0000 	bic.w	r0, r3, r0
    49cc:	0fc0      	lsrs	r0, r0, #31
    49ce:	4770      	bx	lr

000049d0 <blst_p1_affine_generator>:
    49d0:	4800      	ldr	r0, [pc, #0]	; (49d4 <blst_p1_affine_generator+0x4>)
    49d2:	4770      	bx	lr
    49d4:	0001bc28 	.word	0x0001bc28

000049d8 <blst_p1_in_g1>:
    49d8:	b508      	push	{r3, lr}
    49da:	f7fe f94f 	bl	2c7c <POINTonE1_in_G1>
    49de:	bd08      	pop	{r3, pc}

000049e0 <blst_p1_affine_in_g1>:
    49e0:	b570      	push	{r4, r5, r6, lr}
    49e2:	b0a4      	sub	sp, #144	; 0x90
    49e4:	1f02      	subs	r2, r0, #4
    49e6:	466b      	mov	r3, sp
    49e8:	ad18      	add	r5, sp, #96	; 0x60
    49ea:	4611      	mov	r1, r2
    49ec:	f851 4f04 	ldr.w	r4, [r1, #4]!
    49f0:	f843 4b04 	str.w	r4, [r3], #4
    49f4:	42ab      	cmp	r3, r5
    49f6:	d1f9      	bne.n	49ec <blst_p1_affine_in_g1+0xc>
    49f8:	f100 055c 	add.w	r5, r0, #92	; 0x5c
    49fc:	4613      	mov	r3, r2
    49fe:	2100      	movs	r1, #0
    4a00:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4a04:	4321      	orrs	r1, r4
    4a06:	42ab      	cmp	r3, r5
    4a08:	d1fa      	bne.n	4a00 <blst_p1_affine_in_g1+0x20>
    4a0a:	1e4b      	subs	r3, r1, #1
    4a0c:	ea23 0101 	bic.w	r1, r3, r1
    4a10:	17c9      	asrs	r1, r1, #31
    4a12:	4d0a      	ldr	r5, [pc, #40]	; (4a3c <blst_p1_affine_in_g1+0x5c>)
    4a14:	ac17      	add	r4, sp, #92	; 0x5c
    4a16:	f100 062c 	add.w	r6, r0, #44	; 0x2c
    4a1a:	f855 0b04 	ldr.w	r0, [r5], #4
    4a1e:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4a22:	2900      	cmp	r1, #0
    4a24:	bf08      	it	eq
    4a26:	4603      	moveq	r3, r0
    4a28:	f844 3f04 	str.w	r3, [r4, #4]!
    4a2c:	42b2      	cmp	r2, r6
    4a2e:	d1f4      	bne.n	4a1a <blst_p1_affine_in_g1+0x3a>
    4a30:	4668      	mov	r0, sp
    4a32:	f7fe f923 	bl	2c7c <POINTonE1_in_G1>
    4a36:	b024      	add	sp, #144	; 0x90
    4a38:	bd70      	pop	{r4, r5, r6, pc}
    4a3a:	bf00      	nop
    4a3c:	0001ae48 	.word	0x0001ae48

00004a40 <blst_p2_cneg>:
    4a40:	b508      	push	{r3, lr}
    4a42:	1e4b      	subs	r3, r1, #1
    4a44:	ea23 0101 	bic.w	r1, r3, r1
    4a48:	43c9      	mvns	r1, r1
    4a4a:	0fc9      	lsrs	r1, r1, #31
    4a4c:	f7ff f8a0 	bl	3b90 <POINTonE2_cneg>
    4a50:	bd08      	pop	{r3, pc}

00004a52 <blst_p2_from_affine>:
    4a52:	b470      	push	{r4, r5, r6}
    4a54:	1f0c      	subs	r4, r1, #4
    4a56:	1f02      	subs	r2, r0, #4
    4a58:	31bc      	adds	r1, #188	; 0xbc
    4a5a:	4623      	mov	r3, r4
    4a5c:	f853 5f04 	ldr.w	r5, [r3, #4]!
    4a60:	f842 5f04 	str.w	r5, [r2, #4]!
    4a64:	428b      	cmp	r3, r1
    4a66:	d1f9      	bne.n	4a5c <blst_p2_from_affine+0xa>
    4a68:	4623      	mov	r3, r4
    4a6a:	2200      	movs	r2, #0
    4a6c:	f853 5f04 	ldr.w	r5, [r3, #4]!
    4a70:	432a      	orrs	r2, r5
    4a72:	428b      	cmp	r3, r1
    4a74:	d1fa      	bne.n	4a6c <blst_p2_from_affine+0x1a>
    4a76:	1e55      	subs	r5, r2, #1
    4a78:	ea25 0202 	bic.w	r2, r5, r2
    4a7c:	17d5      	asrs	r5, r2, #31
    4a7e:	4e09      	ldr	r6, [pc, #36]	; (4aa4 <blst_p2_from_affine+0x52>)
    4a80:	f106 0260 	add.w	r2, r6, #96	; 0x60
    4a84:	30bc      	adds	r0, #188	; 0xbc
    4a86:	36c0      	adds	r6, #192	; 0xc0
    4a88:	f852 1b04 	ldr.w	r1, [r2], #4
    4a8c:	f854 3f04 	ldr.w	r3, [r4, #4]!
    4a90:	2d00      	cmp	r5, #0
    4a92:	bf08      	it	eq
    4a94:	460b      	moveq	r3, r1
    4a96:	f840 3f04 	str.w	r3, [r0, #4]!
    4a9a:	42b2      	cmp	r2, r6
    4a9c:	d1f4      	bne.n	4a88 <blst_p2_from_affine+0x36>
    4a9e:	bc70      	pop	{r4, r5, r6}
    4aa0:	4770      	bx	lr
    4aa2:	bf00      	nop
    4aa4:	0001ade8 	.word	0x0001ade8

00004aa8 <blst_p2_affine_serialize>:
    4aa8:	b538      	push	{r3, r4, r5, lr}
    4aaa:	1f0b      	subs	r3, r1, #4
    4aac:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
    4ab0:	2200      	movs	r2, #0
    4ab2:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4ab6:	4322      	orrs	r2, r4
    4ab8:	42ab      	cmp	r3, r5
    4aba:	d1fa      	bne.n	4ab2 <blst_p2_affine_serialize+0xa>
    4abc:	1e53      	subs	r3, r2, #1
    4abe:	4393      	bics	r3, r2
    4ac0:	d50a      	bpl.n	4ad8 <blst_p2_affine_serialize+0x30>
    4ac2:	1e43      	subs	r3, r0, #1
    4ac4:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
    4ac8:	2200      	movs	r2, #0
    4aca:	f803 2f01 	strb.w	r2, [r3, #1]!
    4ace:	428b      	cmp	r3, r1
    4ad0:	d1fb      	bne.n	4aca <blst_p2_affine_serialize+0x22>
    4ad2:	2340      	movs	r3, #64	; 0x40
    4ad4:	7003      	strb	r3, [r0, #0]
    4ad6:	bd38      	pop	{r3, r4, r5, pc}
    4ad8:	f7ff fa66 	bl	3fa8 <POINTonE2_affine_Serialize_BE>
    4adc:	e7fb      	b.n	4ad6 <blst_p2_affine_serialize+0x2e>

00004ade <blst_p2_affine_compress>:
    4ade:	b570      	push	{r4, r5, r6, lr}
    4ae0:	4606      	mov	r6, r0
    4ae2:	1f0b      	subs	r3, r1, #4
    4ae4:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
    4ae8:	2200      	movs	r2, #0
    4aea:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4aee:	4322      	orrs	r2, r4
    4af0:	42ab      	cmp	r3, r5
    4af2:	d1fa      	bne.n	4aea <blst_p2_affine_compress+0xc>
    4af4:	1e53      	subs	r3, r2, #1
    4af6:	4393      	bics	r3, r2
    4af8:	d50a      	bpl.n	4b10 <blst_p2_affine_compress+0x32>
    4afa:	1e73      	subs	r3, r6, #1
    4afc:	f106 015f 	add.w	r1, r6, #95	; 0x5f
    4b00:	2200      	movs	r2, #0
    4b02:	f803 2f01 	strb.w	r2, [r3, #1]!
    4b06:	428b      	cmp	r3, r1
    4b08:	d1fb      	bne.n	4b02 <blst_p2_affine_compress+0x24>
    4b0a:	23c0      	movs	r3, #192	; 0xc0
    4b0c:	7033      	strb	r3, [r6, #0]
    4b0e:	bd70      	pop	{r4, r5, r6, pc}
    4b10:	4630      	mov	r0, r6
    4b12:	f7ff f9bf 	bl	3e94 <POINTonE2_affine_Compress_BE>
    4b16:	0103      	lsls	r3, r0, #4
    4b18:	f003 0320 	and.w	r3, r3, #32
    4b1c:	7832      	ldrb	r2, [r6, #0]
    4b1e:	4313      	orrs	r3, r2
    4b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b24:	7033      	strb	r3, [r6, #0]
    4b26:	e7f2      	b.n	4b0e <blst_p2_affine_compress+0x30>

00004b28 <blst_p2_affine_is_equal>:
    4b28:	b430      	push	{r4, r5}
    4b2a:	1f02      	subs	r2, r0, #4
    4b2c:	3904      	subs	r1, #4
    4b2e:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
    4b32:	2000      	movs	r0, #0
    4b34:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4b38:	f851 4f04 	ldr.w	r4, [r1, #4]!
    4b3c:	4063      	eors	r3, r4
    4b3e:	4318      	orrs	r0, r3
    4b40:	42aa      	cmp	r2, r5
    4b42:	d1f7      	bne.n	4b34 <blst_p2_affine_is_equal+0xc>
    4b44:	1e43      	subs	r3, r0, #1
    4b46:	ea23 0000 	bic.w	r0, r3, r0
    4b4a:	0fc0      	lsrs	r0, r0, #31
    4b4c:	bc30      	pop	{r4, r5}
    4b4e:	4770      	bx	lr

00004b50 <blst_p2_is_inf>:
    4b50:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
    4b54:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    4b58:	2000      	movs	r0, #0
    4b5a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    4b5e:	4310      	orrs	r0, r2
    4b60:	428b      	cmp	r3, r1
    4b62:	d1fa      	bne.n	4b5a <blst_p2_is_inf+0xa>
    4b64:	1e43      	subs	r3, r0, #1
    4b66:	ea23 0000 	bic.w	r0, r3, r0
    4b6a:	0fc0      	lsrs	r0, r0, #31
    4b6c:	4770      	bx	lr

00004b6e <blst_p2_generator>:
    4b6e:	4801      	ldr	r0, [pc, #4]	; (4b74 <blst_p2_generator+0x6>)
    4b70:	4770      	bx	lr
    4b72:	bf00      	nop
    4b74:	0001bcb8 	.word	0x0001bcb8

00004b78 <blst_p2_affine_is_inf>:
    4b78:	1f03      	subs	r3, r0, #4
    4b7a:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    4b7e:	2000      	movs	r0, #0
    4b80:	f853 2f04 	ldr.w	r2, [r3, #4]!
    4b84:	4310      	orrs	r0, r2
    4b86:	428b      	cmp	r3, r1
    4b88:	d1fa      	bne.n	4b80 <blst_p2_affine_is_inf+0x8>
    4b8a:	1e43      	subs	r3, r0, #1
    4b8c:	ea23 0000 	bic.w	r0, r3, r0
    4b90:	0fc0      	lsrs	r0, r0, #31
    4b92:	4770      	bx	lr

00004b94 <blst_p2_affine_generator>:
    4b94:	4800      	ldr	r0, [pc, #0]	; (4b98 <blst_p2_affine_generator+0x4>)
    4b96:	4770      	bx	lr
    4b98:	0001bcb8 	.word	0x0001bcb8

00004b9c <blst_fp12_conjugate>:
    4b9c:	b508      	push	{r3, lr}
    4b9e:	f7ff f8dd 	bl	3d5c <conjugate_fp12>
    4ba2:	bd08      	pop	{r3, pc}

00004ba4 <blst_fp12_is_equal>:
    4ba4:	b430      	push	{r4, r5}
    4ba6:	1f02      	subs	r2, r0, #4
    4ba8:	3904      	subs	r1, #4
    4baa:	f500 750f 	add.w	r5, r0, #572	; 0x23c
    4bae:	2000      	movs	r0, #0
    4bb0:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4bb4:	f851 4f04 	ldr.w	r4, [r1, #4]!
    4bb8:	4063      	eors	r3, r4
    4bba:	4318      	orrs	r0, r3
    4bbc:	42aa      	cmp	r2, r5
    4bbe:	d1f7      	bne.n	4bb0 <blst_fp12_is_equal+0xc>
    4bc0:	1e43      	subs	r3, r0, #1
    4bc2:	ea23 0000 	bic.w	r0, r3, r0
    4bc6:	0fc0      	lsrs	r0, r0, #31
    4bc8:	bc30      	pop	{r4, r5}
    4bca:	4770      	bx	lr

00004bcc <blst_fp12_is_one>:
    4bcc:	b470      	push	{r4, r5, r6}
    4bce:	1f04      	subs	r4, r0, #4
    4bd0:	4e10      	ldr	r6, [pc, #64]	; (4c14 <blst_fp12_is_one+0x48>)
    4bd2:	f106 0260 	add.w	r2, r6, #96	; 0x60
    4bd6:	36c0      	adds	r6, #192	; 0xc0
    4bd8:	2100      	movs	r1, #0
    4bda:	f852 3b04 	ldr.w	r3, [r2], #4
    4bde:	f854 5f04 	ldr.w	r5, [r4, #4]!
    4be2:	406b      	eors	r3, r5
    4be4:	4319      	orrs	r1, r3
    4be6:	42b2      	cmp	r2, r6
    4be8:	d1f7      	bne.n	4bda <blst_fp12_is_one+0xe>
    4bea:	1e4b      	subs	r3, r1, #1
    4bec:	ea23 0101 	bic.w	r1, r3, r1
    4bf0:	0fc9      	lsrs	r1, r1, #31
    4bf2:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    4bf6:	f500 750f 	add.w	r5, r0, #572	; 0x23c
    4bfa:	2200      	movs	r2, #0
    4bfc:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4c00:	4322      	orrs	r2, r4
    4c02:	42ab      	cmp	r3, r5
    4c04:	d1fa      	bne.n	4bfc <blst_fp12_is_one+0x30>
    4c06:	1e50      	subs	r0, r2, #1
    4c08:	ea20 0002 	bic.w	r0, r0, r2
    4c0c:	ea01 70d0 	and.w	r0, r1, r0, lsr #31
    4c10:	bc70      	pop	{r4, r5, r6}
    4c12:	4770      	bx	lr
    4c14:	0001ade8 	.word	0x0001ade8

00004c18 <blst_fp12_one>:
    4c18:	4800      	ldr	r0, [pc, #0]	; (4c1c <blst_fp12_one+0x4>)
    4c1a:	4770      	bx	lr
    4c1c:	0001ae48 	.word	0x0001ae48

00004c20 <blst_bendian_from_fp12>:
    4c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c24:	b091      	sub	sp, #68	; 0x44
    4c26:	9103      	str	r1, [sp, #12]
    4c28:	f100 09c0 	add.w	r9, r0, #192	; 0xc0
    4c2c:	f04f 0b00 	mov.w	fp, #0
    4c30:	e006      	b.n	4c40 <blst_bendian_from_fp12+0x20>
    4c32:	f109 09c0 	add.w	r9, r9, #192	; 0xc0
    4c36:	f10b 0b60 	add.w	fp, fp, #96	; 0x60
    4c3a:	f5bb 7f90 	cmp.w	fp, #288	; 0x120
    4c3e:	d048      	beq.n	4cd2 <blst_bendian_from_fp12+0xb2>
    4c40:	f1a9 05c0 	sub.w	r5, r9, #192	; 0xc0
    4c44:	f1a9 0760 	sub.w	r7, r9, #96	; 0x60
    4c48:	9b03      	ldr	r3, [sp, #12]
    4c4a:	eb03 080b 	add.w	r8, r3, fp
    4c4e:	f1a9 0690 	sub.w	r6, r9, #144	; 0x90
    4c52:	230c      	movs	r3, #12
    4c54:	9300      	str	r3, [sp, #0]
    4c56:	4b20      	ldr	r3, [pc, #128]	; (4cd8 <blst_bendian_from_fp12+0xb8>)
    4c58:	4a20      	ldr	r2, [pc, #128]	; (4cdc <blst_bendian_from_fp12+0xbc>)
    4c5a:	4641      	mov	r1, r8
    4c5c:	a804      	add	r0, sp, #16
    4c5e:	f7fe fadb 	bl	3218 <from_mont_n>
    4c62:	462c      	mov	r4, r5
    4c64:	46aa      	mov	sl, r5
    4c66:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    4c6a:	1b0b      	subs	r3, r1, r4
    4c6c:	f023 0203 	bic.w	r2, r3, #3
    4c70:	a810      	add	r0, sp, #64	; 0x40
    4c72:	4402      	add	r2, r0
    4c74:	f003 0303 	and.w	r3, r3, #3
    4c78:	00db      	lsls	r3, r3, #3
    4c7a:	f852 2c30 	ldr.w	r2, [r2, #-48]
    4c7e:	fa22 f303 	lsr.w	r3, r2, r3
    4c82:	f804 3b01 	strb.w	r3, [r4], #1
    4c86:	42b4      	cmp	r4, r6
    4c88:	d1ef      	bne.n	4c6a <blst_bendian_from_fp12+0x4a>
    4c8a:	230c      	movs	r3, #12
    4c8c:	9300      	str	r3, [sp, #0]
    4c8e:	4b12      	ldr	r3, [pc, #72]	; (4cd8 <blst_bendian_from_fp12+0xb8>)
    4c90:	4a12      	ldr	r2, [pc, #72]	; (4cdc <blst_bendian_from_fp12+0xbc>)
    4c92:	f108 0130 	add.w	r1, r8, #48	; 0x30
    4c96:	a804      	add	r0, sp, #16
    4c98:	f7fe fabe 	bl	3218 <from_mont_n>
    4c9c:	f10a 015f 	add.w	r1, sl, #95	; 0x5f
    4ca0:	1b0b      	subs	r3, r1, r4
    4ca2:	f023 0203 	bic.w	r2, r3, #3
    4ca6:	a810      	add	r0, sp, #64	; 0x40
    4ca8:	4402      	add	r2, r0
    4caa:	f003 0303 	and.w	r3, r3, #3
    4cae:	00db      	lsls	r3, r3, #3
    4cb0:	f852 2c30 	ldr.w	r2, [r2, #-48]
    4cb4:	fa22 f303 	lsr.w	r3, r2, r3
    4cb8:	f804 3b01 	strb.w	r3, [r4], #1
    4cbc:	42bc      	cmp	r4, r7
    4cbe:	d1ef      	bne.n	4ca0 <blst_bendian_from_fp12+0x80>
    4cc0:	f10a 0560 	add.w	r5, sl, #96	; 0x60
    4cc4:	3760      	adds	r7, #96	; 0x60
    4cc6:	f508 7890 	add.w	r8, r8, #288	; 0x120
    4cca:	3660      	adds	r6, #96	; 0x60
    4ccc:	454d      	cmp	r5, r9
    4cce:	d1c0      	bne.n	4c52 <blst_bendian_from_fp12+0x32>
    4cd0:	e7af      	b.n	4c32 <blst_bendian_from_fp12+0x12>
    4cd2:	b011      	add	sp, #68	; 0x44
    4cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cd8:	fffcfffd 	.word	0xfffcfffd
    4cdc:	0001ade8 	.word	0x0001ade8

00004ce0 <blst_pairing_sizeof>:
    4ce0:	f44f 6047 	mov.w	r0, #3184	; 0xc70
    4ce4:	4770      	bx	lr

00004ce6 <blst_pairing_init>:
    4ce6:	2900      	cmp	r1, #0
    4ce8:	bf14      	ite	ne
    4cea:	2140      	movne	r1, #64	; 0x40
    4cec:	2100      	moveq	r1, #0
    4cee:	6001      	str	r1, [r0, #0]
    4cf0:	2100      	movs	r1, #0
    4cf2:	6041      	str	r1, [r0, #4]
    4cf4:	f500 6147 	add.w	r1, r0, #3184	; 0xc70
    4cf8:	4291      	cmp	r1, r2
    4cfa:	bf08      	it	eq
    4cfc:	222a      	moveq	r2, #42	; 0x2a
    4cfe:	6082      	str	r2, [r0, #8]
    4d00:	60c3      	str	r3, [r0, #12]
    4d02:	4770      	bx	lr

00004d04 <blst_pairing_get_dst>:
    4d04:	4603      	mov	r3, r0
    4d06:	6880      	ldr	r0, [r0, #8]
    4d08:	282a      	cmp	r0, #42	; 0x2a
    4d0a:	bf08      	it	eq
    4d0c:	f503 6047 	addeq.w	r0, r3, #3184	; 0xc70
    4d10:	4770      	bx	lr

00004d12 <blst_fp_is_square>:
    4d12:	b508      	push	{r3, lr}
    4d14:	220c      	movs	r2, #12
    4d16:	4902      	ldr	r1, [pc, #8]	; (4d20 <blst_fp_is_square+0xe>)
    4d18:	f7ff fc60 	bl	45dc <ct_is_sqr_mod_n>
    4d1c:	bd08      	pop	{r3, pc}
    4d1e:	bf00      	nop
    4d20:	0001ade8 	.word	0x0001ade8

00004d24 <blst_fp2_is_square>:
    4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d26:	b09b      	sub	sp, #108	; 0x6c
    4d28:	4604      	mov	r4, r0
    4d2a:	4d11      	ldr	r5, [pc, #68]	; (4d70 <blst_fp2_is_square+0x4c>)
    4d2c:	260c      	movs	r6, #12
    4d2e:	9601      	str	r6, [sp, #4]
    4d30:	4f10      	ldr	r7, [pc, #64]	; (4d74 <blst_fp2_is_square+0x50>)
    4d32:	9700      	str	r7, [sp, #0]
    4d34:	462b      	mov	r3, r5
    4d36:	4602      	mov	r2, r0
    4d38:	4601      	mov	r1, r0
    4d3a:	a80e      	add	r0, sp, #56	; 0x38
    4d3c:	f7fb fef5 	bl	b2a <mul_mont_n>
    4d40:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4d44:	9601      	str	r6, [sp, #4]
    4d46:	9700      	str	r7, [sp, #0]
    4d48:	462b      	mov	r3, r5
    4d4a:	460a      	mov	r2, r1
    4d4c:	a802      	add	r0, sp, #8
    4d4e:	f7fb feec 	bl	b2a <mul_mont_n>
    4d52:	9600      	str	r6, [sp, #0]
    4d54:	462b      	mov	r3, r5
    4d56:	aa02      	add	r2, sp, #8
    4d58:	a90e      	add	r1, sp, #56	; 0x38
    4d5a:	4608      	mov	r0, r1
    4d5c:	f7fc f98e 	bl	107c <add_mod_n>
    4d60:	4632      	mov	r2, r6
    4d62:	4629      	mov	r1, r5
    4d64:	a80e      	add	r0, sp, #56	; 0x38
    4d66:	f7ff fc39 	bl	45dc <ct_is_sqr_mod_n>
    4d6a:	b01b      	add	sp, #108	; 0x6c
    4d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d6e:	bf00      	nop
    4d70:	0001ade8 	.word	0x0001ade8
    4d74:	fffcfffd 	.word	0xfffcfffd

00004d78 <blst_fr_inverse>:
    4d78:	b508      	push	{r3, lr}
    4d7a:	f7ff fc07 	bl	458c <reciprocal_fr>
    4d7e:	bd08      	pop	{r3, pc}

00004d80 <blst_fr_eucl_inverse>:
    4d80:	b508      	push	{r3, lr}
    4d82:	f7ff fc03 	bl	458c <reciprocal_fr>
    4d86:	bd08      	pop	{r3, pc}

00004d88 <blst_p1s_mult_wbits_precompute_sizeof>:
    4d88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4d8c:	0149      	lsls	r1, r1, #5
    4d8e:	3801      	subs	r0, #1
    4d90:	fa01 f000 	lsl.w	r0, r1, r0
    4d94:	4770      	bx	lr

00004d96 <blst_p1s_mult_wbits_scratch_sizeof>:
    4d96:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    4d9a:	bf28      	it	cs
    4d9c:	f44f 5000 	movcs.w	r0, #8192	; 0x2000
    4da0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    4da4:	0100      	lsls	r0, r0, #4
    4da6:	4770      	bx	lr

00004da8 <blst_p2s_mult_wbits_precompute_sizeof>:
    4da8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4dac:	0189      	lsls	r1, r1, #6
    4dae:	3801      	subs	r0, #1
    4db0:	fa01 f000 	lsl.w	r0, r1, r0
    4db4:	4770      	bx	lr

00004db6 <blst_p2s_mult_wbits_scratch_sizeof>:
    4db6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    4dba:	bf28      	it	cs
    4dbc:	f44f 5080 	movcs.w	r0, #4096	; 0x1000
    4dc0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    4dc4:	0140      	lsls	r0, r0, #5
    4dc6:	4770      	bx	lr

00004dc8 <blst_p1s_mult_pippenger_scratch_sizeof>:
    4dc8:	b508      	push	{r3, lr}
    4dca:	f7fb fc8e 	bl	6ea <pippenger_window_size>
    4dce:	3801      	subs	r0, #1
    4dd0:	23c0      	movs	r3, #192	; 0xc0
    4dd2:	fa03 f000 	lsl.w	r0, r3, r0
    4dd6:	bd08      	pop	{r3, pc}

00004dd8 <blst_p1s_tile_pippenger>:
    4dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dda:	b087      	sub	sp, #28
    4ddc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4dde:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4de0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    4de2:	1937      	adds	r7, r6, r4
    4de4:	42af      	cmp	r7, r5
    4de6:	bf86      	itte	hi
    4de8:	1bac      	subhi	r4, r5, r6
    4dea:	1c67      	addhi	r7, r4, #1
    4dec:	4627      	movls	r7, r4
    4dee:	9704      	str	r7, [sp, #16]
    4df0:	9403      	str	r4, [sp, #12]
    4df2:	9602      	str	r6, [sp, #8]
    4df4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4df6:	9401      	str	r4, [sp, #4]
    4df8:	9500      	str	r5, [sp, #0]
    4dfa:	f7fe f90f 	bl	301c <POINTonE1s_tile_pippenger>
    4dfe:	b007      	add	sp, #28
    4e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004e02 <blst_p1s_mult_pippenger>:
    4e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e06:	b0ad      	sub	sp, #180	; 0xb4
    4e08:	4605      	mov	r5, r0
    4e0a:	468a      	mov	sl, r1
    4e0c:	4617      	mov	r7, r2
    4e0e:	4698      	mov	r8, r3
    4e10:	9e36      	ldr	r6, [sp, #216]	; 0xd8
    4e12:	4610      	mov	r0, r2
    4e14:	f7fb fc69 	bl	6ea <pippenger_window_size>
    4e18:	4604      	mov	r4, r0
    4e1a:	1e42      	subs	r2, r0, #1
    4e1c:	23c0      	movs	r3, #192	; 0xc0
    4e1e:	4093      	lsls	r3, r2
    4e20:	2b03      	cmp	r3, #3
    4e22:	d908      	bls.n	4e36 <blst_p1s_mult_pippenger+0x34>
    4e24:	0899      	lsrs	r1, r3, #2
    4e26:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    4e28:	2300      	movs	r3, #0
    4e2a:	4618      	mov	r0, r3
    4e2c:	f842 0b04 	str.w	r0, [r2], #4
    4e30:	3301      	adds	r3, #1
    4e32:	4299      	cmp	r1, r3
    4e34:	d8fa      	bhi.n	4e2c <blst_p1s_mult_pippenger+0x2a>
    4e36:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    4e38:	462b      	mov	r3, r5
    4e3a:	f105 0190 	add.w	r1, r5, #144	; 0x90
    4e3e:	2200      	movs	r2, #0
    4e40:	f843 2b04 	str.w	r2, [r3], #4
    4e44:	428b      	cmp	r3, r1
    4e46:	d1fb      	bne.n	4e40 <blst_p1s_mult_pippenger+0x3e>
    4e48:	fbb6 f3f4 	udiv	r3, r6, r4
    4e4c:	fb04 6313 	mls	r3, r4, r3, r6
    4e50:	1c5a      	adds	r2, r3, #1
    4e52:	ebb6 0903 	subs.w	r9, r6, r3
    4e56:	d03d      	beq.n	4ed4 <blst_p1s_mult_pippenger+0xd2>
    4e58:	9407      	str	r4, [sp, #28]
    4e5a:	e00c      	b.n	4e76 <blst_p1s_mult_pippenger+0x74>
    4e5c:	4629      	mov	r1, r5
    4e5e:	4628      	mov	r0, r5
    4e60:	f7fd fbd3 	bl	260a <POINTonE1_double>
    4e64:	f10b 0b01 	add.w	fp, fp, #1
    4e68:	455c      	cmp	r4, fp
    4e6a:	d1f7      	bne.n	4e5c <blst_p1s_mult_pippenger+0x5a>
    4e6c:	ebb9 0904 	subs.w	r9, r9, r4
    4e70:	d019      	beq.n	4ea6 <blst_p1s_mult_pippenger+0xa4>
    4e72:	9b07      	ldr	r3, [sp, #28]
    4e74:	461a      	mov	r2, r3
    4e76:	9204      	str	r2, [sp, #16]
    4e78:	9303      	str	r3, [sp, #12]
    4e7a:	f8cd 9008 	str.w	r9, [sp, #8]
    4e7e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    4e80:	9301      	str	r3, [sp, #4]
    4e82:	9600      	str	r6, [sp, #0]
    4e84:	4643      	mov	r3, r8
    4e86:	463a      	mov	r2, r7
    4e88:	4651      	mov	r1, sl
    4e8a:	a808      	add	r0, sp, #32
    4e8c:	f7fe f8c6 	bl	301c <POINTonE1s_tile_pippenger>
    4e90:	2300      	movs	r3, #0
    4e92:	aa08      	add	r2, sp, #32
    4e94:	4629      	mov	r1, r5
    4e96:	4628      	mov	r0, r5
    4e98:	f7fc fe25 	bl	1ae6 <POINTonE1_dadd>
    4e9c:	2c00      	cmp	r4, #0
    4e9e:	d0e5      	beq.n	4e6c <blst_p1s_mult_pippenger+0x6a>
    4ea0:	f04f 0b00 	mov.w	fp, #0
    4ea4:	e7da      	b.n	4e5c <blst_p1s_mult_pippenger+0x5a>
    4ea6:	4622      	mov	r2, r4
    4ea8:	9204      	str	r2, [sp, #16]
    4eaa:	9403      	str	r4, [sp, #12]
    4eac:	2400      	movs	r4, #0
    4eae:	9402      	str	r4, [sp, #8]
    4eb0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    4eb2:	9301      	str	r3, [sp, #4]
    4eb4:	9600      	str	r6, [sp, #0]
    4eb6:	4643      	mov	r3, r8
    4eb8:	463a      	mov	r2, r7
    4eba:	4651      	mov	r1, sl
    4ebc:	a808      	add	r0, sp, #32
    4ebe:	f7fe f8ad 	bl	301c <POINTonE1s_tile_pippenger>
    4ec2:	4623      	mov	r3, r4
    4ec4:	aa08      	add	r2, sp, #32
    4ec6:	4629      	mov	r1, r5
    4ec8:	4628      	mov	r0, r5
    4eca:	f7fc fe0c 	bl	1ae6 <POINTonE1_dadd>
    4ece:	b02d      	add	sp, #180	; 0xb4
    4ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ed4:	461c      	mov	r4, r3
    4ed6:	e7e7      	b.n	4ea8 <blst_p1s_mult_pippenger+0xa6>

00004ed8 <blst_p2s_mult_pippenger_scratch_sizeof>:
    4ed8:	b508      	push	{r3, lr}
    4eda:	f7fb fc06 	bl	6ea <pippenger_window_size>
    4ede:	3801      	subs	r0, #1
    4ee0:	f44f 73c0 	mov.w	r3, #384	; 0x180
    4ee4:	fa03 f000 	lsl.w	r0, r3, r0
    4ee8:	bd08      	pop	{r3, pc}

00004eea <mul_mont_sparse_256>:
    4eea:	b510      	push	{r4, lr}
    4eec:	b082      	sub	sp, #8
    4eee:	2408      	movs	r4, #8
    4ef0:	9401      	str	r4, [sp, #4]
    4ef2:	9c04      	ldr	r4, [sp, #16]
    4ef4:	9400      	str	r4, [sp, #0]
    4ef6:	f7fb fe18 	bl	b2a <mul_mont_n>
    4efa:	b002      	add	sp, #8
    4efc:	bd10      	pop	{r4, pc}

00004efe <sqr_mont_sparse_256>:
    4efe:	b510      	push	{r4, lr}
    4f00:	b082      	sub	sp, #8
    4f02:	2408      	movs	r4, #8
    4f04:	9401      	str	r4, [sp, #4]
    4f06:	9300      	str	r3, [sp, #0]
    4f08:	4613      	mov	r3, r2
    4f0a:	460a      	mov	r2, r1
    4f0c:	f7fb fe0d 	bl	b2a <mul_mont_n>
    4f10:	b002      	add	sp, #8
    4f12:	bd10      	pop	{r4, pc}

00004f14 <mul_mont_384>:
    4f14:	b510      	push	{r4, lr}
    4f16:	b082      	sub	sp, #8
    4f18:	240c      	movs	r4, #12
    4f1a:	9401      	str	r4, [sp, #4]
    4f1c:	9c04      	ldr	r4, [sp, #16]
    4f1e:	9400      	str	r4, [sp, #0]
    4f20:	f7fb fe03 	bl	b2a <mul_mont_n>
    4f24:	b002      	add	sp, #8
    4f26:	bd10      	pop	{r4, pc}

00004f28 <sqr_mont_384>:
    4f28:	b510      	push	{r4, lr}
    4f2a:	b082      	sub	sp, #8
    4f2c:	240c      	movs	r4, #12
    4f2e:	9401      	str	r4, [sp, #4]
    4f30:	9300      	str	r3, [sp, #0]
    4f32:	4613      	mov	r3, r2
    4f34:	460a      	mov	r2, r1
    4f36:	f7fb fdf8 	bl	b2a <mul_mont_n>
    4f3a:	b002      	add	sp, #8
    4f3c:	bd10      	pop	{r4, pc}

00004f3e <add_mod_256>:
    4f3e:	b510      	push	{r4, lr}
    4f40:	b082      	sub	sp, #8
    4f42:	2408      	movs	r4, #8
    4f44:	9400      	str	r4, [sp, #0]
    4f46:	f7fc f899 	bl	107c <add_mod_n>
    4f4a:	b002      	add	sp, #8
    4f4c:	bd10      	pop	{r4, pc}

00004f4e <add_mod_384>:
    4f4e:	b510      	push	{r4, lr}
    4f50:	b082      	sub	sp, #8
    4f52:	240c      	movs	r4, #12
    4f54:	9400      	str	r4, [sp, #0]
    4f56:	f7fc f891 	bl	107c <add_mod_n>
    4f5a:	b002      	add	sp, #8
    4f5c:	bd10      	pop	{r4, pc}

00004f5e <sub_mod_256>:
    4f5e:	b510      	push	{r4, lr}
    4f60:	b082      	sub	sp, #8
    4f62:	2408      	movs	r4, #8
    4f64:	9400      	str	r4, [sp, #0]
    4f66:	f7fb fbd6 	bl	716 <sub_mod_n>
    4f6a:	b002      	add	sp, #8
    4f6c:	bd10      	pop	{r4, pc}

00004f6e <sub_mod_384>:
    4f6e:	b510      	push	{r4, lr}
    4f70:	b082      	sub	sp, #8
    4f72:	240c      	movs	r4, #12
    4f74:	9400      	str	r4, [sp, #0]
    4f76:	f7fb fbce 	bl	716 <sub_mod_n>
    4f7a:	b002      	add	sp, #8
    4f7c:	bd10      	pop	{r4, pc}

00004f7e <mul_by_3_mod_256>:
    4f7e:	b508      	push	{r3, lr}
    4f80:	2308      	movs	r3, #8
    4f82:	f7fc fd15 	bl	19b0 <mul_by_3_mod_n>
    4f86:	bd08      	pop	{r3, pc}

00004f88 <mul_by_3_mod_384>:
    4f88:	b508      	push	{r3, lr}
    4f8a:	230c      	movs	r3, #12
    4f8c:	f7fc fd10 	bl	19b0 <mul_by_3_mod_n>
    4f90:	bd08      	pop	{r3, pc}

00004f92 <lshift_mod_256>:
    4f92:	b510      	push	{r4, lr}
    4f94:	b082      	sub	sp, #8
    4f96:	2408      	movs	r4, #8
    4f98:	9400      	str	r4, [sp, #0]
    4f9a:	f7fd fad7 	bl	254c <lshift_mod_n>
    4f9e:	b002      	add	sp, #8
    4fa0:	bd10      	pop	{r4, pc}

00004fa2 <lshift_mod_384>:
    4fa2:	b510      	push	{r4, lr}
    4fa4:	b082      	sub	sp, #8
    4fa6:	240c      	movs	r4, #12
    4fa8:	9400      	str	r4, [sp, #0]
    4faa:	f7fd facf 	bl	254c <lshift_mod_n>
    4fae:	b002      	add	sp, #8
    4fb0:	bd10      	pop	{r4, pc}

00004fb2 <cneg_mod_256>:
    4fb2:	b510      	push	{r4, lr}
    4fb4:	b082      	sub	sp, #8
    4fb6:	2408      	movs	r4, #8
    4fb8:	9400      	str	r4, [sp, #0]
    4fba:	f7fd fc61 	bl	2880 <cneg_mod_n>
    4fbe:	b002      	add	sp, #8
    4fc0:	bd10      	pop	{r4, pc}

00004fc2 <cneg_mod_384>:
    4fc2:	b510      	push	{r4, lr}
    4fc4:	b082      	sub	sp, #8
    4fc6:	240c      	movs	r4, #12
    4fc8:	9400      	str	r4, [sp, #0]
    4fca:	f7fd fc59 	bl	2880 <cneg_mod_n>
    4fce:	b002      	add	sp, #8
    4fd0:	bd10      	pop	{r4, pc}

00004fd2 <check_mod_256>:
    4fd2:	b508      	push	{r3, lr}
    4fd4:	2208      	movs	r2, #8
    4fd6:	f7fb fbd4 	bl	782 <check_mod_n>
    4fda:	bd08      	pop	{r3, pc}

00004fdc <add_n_check_mod_256>:
    4fdc:	b510      	push	{r4, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	2408      	movs	r4, #8
    4fe2:	9400      	str	r4, [sp, #0]
    4fe4:	f7ff f892 	bl	410c <add_n_check_mod_n>
    4fe8:	b002      	add	sp, #8
    4fea:	bd10      	pop	{r4, pc}

00004fec <sub_n_check_mod_256>:
    4fec:	b510      	push	{r4, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	2408      	movs	r4, #8
    4ff2:	9400      	str	r4, [sp, #0]
    4ff4:	f7fe f8a0 	bl	3138 <sub_n_check_mod_n>
    4ff8:	b002      	add	sp, #8
    4ffa:	bd10      	pop	{r4, pc}

00004ffc <from_mont_256>:
    4ffc:	b510      	push	{r4, lr}
    4ffe:	b082      	sub	sp, #8
    5000:	2408      	movs	r4, #8
    5002:	9400      	str	r4, [sp, #0]
    5004:	f7fe f908 	bl	3218 <from_mont_n>
    5008:	b002      	add	sp, #8
    500a:	bd10      	pop	{r4, pc}

0000500c <from_mont_384>:
    500c:	b510      	push	{r4, lr}
    500e:	b082      	sub	sp, #8
    5010:	240c      	movs	r4, #12
    5012:	9400      	str	r4, [sp, #0]
    5014:	f7fe f900 	bl	3218 <from_mont_n>
    5018:	b002      	add	sp, #8
    501a:	bd10      	pop	{r4, pc}

0000501c <redc_mont_256>:
    501c:	b510      	push	{r4, lr}
    501e:	b082      	sub	sp, #8
    5020:	2408      	movs	r4, #8
    5022:	9400      	str	r4, [sp, #0]
    5024:	f7fe f980 	bl	3328 <redc_mont_n>
    5028:	b002      	add	sp, #8
    502a:	bd10      	pop	{r4, pc}

0000502c <redc_mont_384>:
    502c:	b510      	push	{r4, lr}
    502e:	b082      	sub	sp, #8
    5030:	240c      	movs	r4, #12
    5032:	9400      	str	r4, [sp, #0]
    5034:	f7fe f978 	bl	3328 <redc_mont_n>
    5038:	b002      	add	sp, #8
    503a:	bd10      	pop	{r4, pc}

0000503c <rshift_mod_256>:
    503c:	b510      	push	{r4, lr}
    503e:	b082      	sub	sp, #8
    5040:	2408      	movs	r4, #8
    5042:	9400      	str	r4, [sp, #0]
    5044:	f7fb fbcb 	bl	7de <rshift_mod_n>
    5048:	b002      	add	sp, #8
    504a:	bd10      	pop	{r4, pc}

0000504c <rshift_mod_384>:
    504c:	b510      	push	{r4, lr}
    504e:	b082      	sub	sp, #8
    5050:	240c      	movs	r4, #12
    5052:	9400      	str	r4, [sp, #0]
    5054:	f7fb fbc3 	bl	7de <rshift_mod_n>
    5058:	b002      	add	sp, #8
    505a:	bd10      	pop	{r4, pc}

0000505c <div_by_2_mod_384>:
    505c:	b500      	push	{lr}
    505e:	b083      	sub	sp, #12
    5060:	4613      	mov	r3, r2
    5062:	220c      	movs	r2, #12
    5064:	9200      	str	r2, [sp, #0]
    5066:	2201      	movs	r2, #1
    5068:	f7fb fbb9 	bl	7de <rshift_mod_n>
    506c:	b003      	add	sp, #12
    506e:	f85d fb04 	ldr.w	pc, [sp], #4

00005072 <sgn0_pty_mod_384>:
    5072:	b508      	push	{r3, lr}
    5074:	220c      	movs	r2, #12
    5076:	f7fe f9f9 	bl	346c <sgn0_pty_mod_n>
    507a:	bd08      	pop	{r3, pc}

0000507c <sgn0_pty_mont_384>:
    507c:	b530      	push	{r4, r5, lr}
    507e:	b08f      	sub	sp, #60	; 0x3c
    5080:	460c      	mov	r4, r1
    5082:	4613      	mov	r3, r2
    5084:	250c      	movs	r5, #12
    5086:	9500      	str	r5, [sp, #0]
    5088:	460a      	mov	r2, r1
    508a:	4601      	mov	r1, r0
    508c:	a802      	add	r0, sp, #8
    508e:	f7fe f8c3 	bl	3218 <from_mont_n>
    5092:	462a      	mov	r2, r5
    5094:	4621      	mov	r1, r4
    5096:	a802      	add	r0, sp, #8
    5098:	f7fe f9e8 	bl	346c <sgn0_pty_mod_n>
    509c:	b00f      	add	sp, #60	; 0x3c
    509e:	bd30      	pop	{r4, r5, pc}

000050a0 <sgn0_pty_mod_384x>:
    50a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50a2:	4606      	mov	r6, r0
    50a4:	460c      	mov	r4, r1
    50a6:	220c      	movs	r2, #12
    50a8:	f7fe f9e0 	bl	346c <sgn0_pty_mod_n>
    50ac:	4605      	mov	r5, r0
    50ae:	220c      	movs	r2, #12
    50b0:	4621      	mov	r1, r4
    50b2:	f106 0030 	add.w	r0, r6, #48	; 0x30
    50b6:	f7fe f9d9 	bl	346c <sgn0_pty_mod_n>
    50ba:	f106 032c 	add.w	r3, r6, #44	; 0x2c
    50be:	f106 075c 	add.w	r7, r6, #92	; 0x5c
    50c2:	2100      	movs	r1, #0
    50c4:	f853 4f04 	ldr.w	r4, [r3, #4]!
    50c8:	4321      	orrs	r1, r4
    50ca:	42bb      	cmp	r3, r7
    50cc:	d1fa      	bne.n	50c4 <sgn0_pty_mod_384x+0x24>
    50ce:	1e4f      	subs	r7, r1, #1
    50d0:	ea27 0101 	bic.w	r1, r7, r1
    50d4:	0fcf      	lsrs	r7, r1, #31
    50d6:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    50da:	3f01      	subs	r7, #1
    50dc:	4007      	ands	r7, r0
    50de:	430f      	orrs	r7, r1
    50e0:	1f33      	subs	r3, r6, #4
    50e2:	f106 042c 	add.w	r4, r6, #44	; 0x2c
    50e6:	2200      	movs	r2, #0
    50e8:	f853 1f04 	ldr.w	r1, [r3, #4]!
    50ec:	430a      	orrs	r2, r1
    50ee:	42a3      	cmp	r3, r4
    50f0:	d1fa      	bne.n	50e8 <sgn0_pty_mod_384x+0x48>
    50f2:	1e53      	subs	r3, r2, #1
    50f4:	ea23 0202 	bic.w	r2, r3, r2
    50f8:	0fd3      	lsrs	r3, r2, #31
    50fa:	ea00 72e2 	and.w	r2, r0, r2, asr #31
    50fe:	1e58      	subs	r0, r3, #1
    5100:	4005      	ands	r5, r0
    5102:	4315      	orrs	r5, r2
    5104:	f005 0501 	and.w	r5, r5, #1
    5108:	f007 0002 	and.w	r0, r7, #2
    510c:	4328      	orrs	r0, r5
    510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005110 <sgn0_pty_mont_384x>:
    5110:	b5f0      	push	{r4, r5, r6, r7, lr}
    5112:	b09b      	sub	sp, #108	; 0x6c
    5114:	4605      	mov	r5, r0
    5116:	460c      	mov	r4, r1
    5118:	4617      	mov	r7, r2
    511a:	260c      	movs	r6, #12
    511c:	9600      	str	r6, [sp, #0]
    511e:	4613      	mov	r3, r2
    5120:	460a      	mov	r2, r1
    5122:	4601      	mov	r1, r0
    5124:	a802      	add	r0, sp, #8
    5126:	f7fe f877 	bl	3218 <from_mont_n>
    512a:	9600      	str	r6, [sp, #0]
    512c:	463b      	mov	r3, r7
    512e:	4622      	mov	r2, r4
    5130:	f105 0130 	add.w	r1, r5, #48	; 0x30
    5134:	a80e      	add	r0, sp, #56	; 0x38
    5136:	f7fe f86f 	bl	3218 <from_mont_n>
    513a:	4632      	mov	r2, r6
    513c:	4621      	mov	r1, r4
    513e:	a802      	add	r0, sp, #8
    5140:	f7fe f994 	bl	346c <sgn0_pty_mod_n>
    5144:	4605      	mov	r5, r0
    5146:	4632      	mov	r2, r6
    5148:	4621      	mov	r1, r4
    514a:	a80e      	add	r0, sp, #56	; 0x38
    514c:	f7fe f98e 	bl	346c <sgn0_pty_mod_n>
    5150:	aa0d      	add	r2, sp, #52	; 0x34
    5152:	ab02      	add	r3, sp, #8
    5154:	ac19      	add	r4, sp, #100	; 0x64
    5156:	2100      	movs	r1, #0
    5158:	f852 6f04 	ldr.w	r6, [r2, #4]!
    515c:	4331      	orrs	r1, r6
    515e:	42a2      	cmp	r2, r4
    5160:	d1fa      	bne.n	5158 <sgn0_pty_mont_384x+0x48>
    5162:	1e4a      	subs	r2, r1, #1
    5164:	ea22 0201 	bic.w	r2, r2, r1
    5168:	0fd1      	lsrs	r1, r2, #31
    516a:	ea05 72e2 	and.w	r2, r5, r2, asr #31
    516e:	3901      	subs	r1, #1
    5170:	4001      	ands	r1, r0
    5172:	430a      	orrs	r2, r1
    5174:	f103 0130 	add.w	r1, r3, #48	; 0x30
    5178:	2600      	movs	r6, #0
    517a:	f853 4b04 	ldr.w	r4, [r3], #4
    517e:	4326      	orrs	r6, r4
    5180:	428b      	cmp	r3, r1
    5182:	d1fa      	bne.n	517a <sgn0_pty_mont_384x+0x6a>
    5184:	1e74      	subs	r4, r6, #1
    5186:	ea24 0406 	bic.w	r4, r4, r6
    518a:	0fe3      	lsrs	r3, r4, #31
    518c:	ea00 70e4 	and.w	r0, r0, r4, asr #31
    5190:	3b01      	subs	r3, #1
    5192:	402b      	ands	r3, r5
    5194:	4303      	orrs	r3, r0
    5196:	f003 0301 	and.w	r3, r3, #1
    519a:	f002 0002 	and.w	r0, r2, #2
    519e:	4318      	orrs	r0, r3
    51a0:	b01b      	add	sp, #108	; 0x6c
    51a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000051a4 <mul_mont_384x>:
    51a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51a8:	b0a7      	sub	sp, #156	; 0x9c
    51aa:	4605      	mov	r5, r0
    51ac:	4688      	mov	r8, r1
    51ae:	4617      	mov	r7, r2
    51b0:	461c      	mov	r4, r3
    51b2:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
    51b6:	f101 0a30 	add.w	sl, r1, #48	; 0x30
    51ba:	260c      	movs	r6, #12
    51bc:	9600      	str	r6, [sp, #0]
    51be:	4652      	mov	r2, sl
    51c0:	a81a      	add	r0, sp, #104	; 0x68
    51c2:	f7fb ff5b 	bl	107c <add_mod_n>
    51c6:	f107 0b30 	add.w	fp, r7, #48	; 0x30
    51ca:	9600      	str	r6, [sp, #0]
    51cc:	4623      	mov	r3, r4
    51ce:	465a      	mov	r2, fp
    51d0:	4639      	mov	r1, r7
    51d2:	a80e      	add	r0, sp, #56	; 0x38
    51d4:	f7fb ff52 	bl	107c <add_mod_n>
    51d8:	9601      	str	r6, [sp, #4]
    51da:	f8cd 9000 	str.w	r9, [sp]
    51de:	4623      	mov	r3, r4
    51e0:	aa1a      	add	r2, sp, #104	; 0x68
    51e2:	a90e      	add	r1, sp, #56	; 0x38
    51e4:	4608      	mov	r0, r1
    51e6:	f7fb fca0 	bl	b2a <mul_mont_n>
    51ea:	9601      	str	r6, [sp, #4]
    51ec:	f8cd 9000 	str.w	r9, [sp]
    51f0:	4623      	mov	r3, r4
    51f2:	463a      	mov	r2, r7
    51f4:	4641      	mov	r1, r8
    51f6:	a81a      	add	r0, sp, #104	; 0x68
    51f8:	f7fb fc97 	bl	b2a <mul_mont_n>
    51fc:	9601      	str	r6, [sp, #4]
    51fe:	f8cd 9000 	str.w	r9, [sp]
    5202:	4623      	mov	r3, r4
    5204:	465a      	mov	r2, fp
    5206:	4651      	mov	r1, sl
    5208:	a802      	add	r0, sp, #8
    520a:	f7fb fc8e 	bl	b2a <mul_mont_n>
    520e:	9600      	str	r6, [sp, #0]
    5210:	4623      	mov	r3, r4
    5212:	aa02      	add	r2, sp, #8
    5214:	a91a      	add	r1, sp, #104	; 0x68
    5216:	4628      	mov	r0, r5
    5218:	f7fb fa7d 	bl	716 <sub_mod_n>
    521c:	3530      	adds	r5, #48	; 0x30
    521e:	9600      	str	r6, [sp, #0]
    5220:	4623      	mov	r3, r4
    5222:	aa1a      	add	r2, sp, #104	; 0x68
    5224:	a90e      	add	r1, sp, #56	; 0x38
    5226:	4628      	mov	r0, r5
    5228:	f7fb fa75 	bl	716 <sub_mod_n>
    522c:	9600      	str	r6, [sp, #0]
    522e:	4623      	mov	r3, r4
    5230:	aa02      	add	r2, sp, #8
    5232:	4629      	mov	r1, r5
    5234:	4628      	mov	r0, r5
    5236:	f7fb fa6e 	bl	716 <sub_mod_n>
    523a:	b027      	add	sp, #156	; 0x9c
    523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005240 <psi>:
    5240:	b5f0      	push	{r4, r5, r6, r7, lr}
    5242:	b083      	sub	sp, #12
    5244:	4606      	mov	r6, r0
    5246:	1f0b      	subs	r3, r1, #4
    5248:	1f02      	subs	r2, r0, #4
    524a:	f501 758e 	add.w	r5, r1, #284	; 0x11c
    524e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    5252:	f842 4f04 	str.w	r4, [r2, #4]!
    5256:	42ab      	cmp	r3, r5
    5258:	d1f9      	bne.n	524e <psi+0xe>
    525a:	f106 0030 	add.w	r0, r6, #48	; 0x30
    525e:	4c15      	ldr	r4, [pc, #84]	; (52b4 <psi+0x74>)
    5260:	250c      	movs	r5, #12
    5262:	9500      	str	r5, [sp, #0]
    5264:	4623      	mov	r3, r4
    5266:	2201      	movs	r2, #1
    5268:	4601      	mov	r1, r0
    526a:	f7fd fb09 	bl	2880 <cneg_mod_n>
    526e:	4f12      	ldr	r7, [pc, #72]	; (52b8 <psi+0x78>)
    5270:	9700      	str	r7, [sp, #0]
    5272:	4623      	mov	r3, r4
    5274:	f504 627f 	add.w	r2, r4, #4080	; 0xff0
    5278:	4631      	mov	r1, r6
    527a:	4630      	mov	r0, r6
    527c:	f7ff ff92 	bl	51a4 <mul_mont_384x>
    5280:	f106 0090 	add.w	r0, r6, #144	; 0x90
    5284:	9500      	str	r5, [sp, #0]
    5286:	4623      	mov	r3, r4
    5288:	2201      	movs	r2, #1
    528a:	4601      	mov	r1, r0
    528c:	f7fd faf8 	bl	2880 <cneg_mod_n>
    5290:	f106 0060 	add.w	r0, r6, #96	; 0x60
    5294:	9700      	str	r7, [sp, #0]
    5296:	4623      	mov	r3, r4
    5298:	4a08      	ldr	r2, [pc, #32]	; (52bc <psi+0x7c>)
    529a:	4601      	mov	r1, r0
    529c:	f7ff ff82 	bl	51a4 <mul_mont_384x>
    52a0:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
    52a4:	9500      	str	r5, [sp, #0]
    52a6:	4623      	mov	r3, r4
    52a8:	2201      	movs	r2, #1
    52aa:	4601      	mov	r1, r0
    52ac:	f7fd fae8 	bl	2880 <cneg_mod_n>
    52b0:	b003      	add	sp, #12
    52b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52b4:	0001ade8 	.word	0x0001ade8
    52b8:	fffcfffd 	.word	0xfffcfffd
    52bc:	0001be38 	.word	0x0001be38

000052c0 <map_fp2_times_Zz>:
    52c0:	b1f3      	cbz	r3, 5300 <map_fp2_times_Zz+0x40>
    52c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    52c6:	b083      	sub	sp, #12
    52c8:	4606      	mov	r6, r0
    52ca:	460f      	mov	r7, r1
    52cc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    52d0:	0164      	lsls	r4, r4, #5
    52d2:	f8df 9030 	ldr.w	r9, [pc, #48]	; 5304 <map_fp2_times_Zz+0x44>
    52d6:	f1a2 0560 	sub.w	r5, r2, #96	; 0x60
    52da:	f8df 802c 	ldr.w	r8, [pc, #44]	; 5308 <map_fp2_times_Zz+0x48>
    52de:	f1a7 0160 	sub.w	r1, r7, #96	; 0x60
    52e2:	f1a6 0060 	sub.w	r0, r6, #96	; 0x60
    52e6:	f8cd 8000 	str.w	r8, [sp]
    52ea:	464b      	mov	r3, r9
    52ec:	192a      	adds	r2, r5, r4
    52ee:	4421      	add	r1, r4
    52f0:	4420      	add	r0, r4
    52f2:	f7ff ff57 	bl	51a4 <mul_mont_384x>
    52f6:	3c60      	subs	r4, #96	; 0x60
    52f8:	d1f1      	bne.n	52de <map_fp2_times_Zz+0x1e>
    52fa:	b003      	add	sp, #12
    52fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5300:	4770      	bx	lr
    5302:	bf00      	nop
    5304:	0001ade8 	.word	0x0001ade8
    5308:	fffcfffd 	.word	0xfffcfffd

0000530c <frobenius_map_fp6>:
    530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5310:	b085      	sub	sp, #20
    5312:	4604      	mov	r4, r0
    5314:	460e      	mov	r6, r1
    5316:	4615      	mov	r5, r2
    5318:	1f0b      	subs	r3, r1, #4
    531a:	1f02      	subs	r2, r0, #4
    531c:	312c      	adds	r1, #44	; 0x2c
    531e:	f853 0f04 	ldr.w	r0, [r3, #4]!
    5322:	f842 0f04 	str.w	r0, [r2, #4]!
    5326:	428b      	cmp	r3, r1
    5328:	d1f9      	bne.n	531e <frobenius_map_fp6+0x12>
    532a:	f005 0901 	and.w	r9, r5, #1
    532e:	230c      	movs	r3, #12
    5330:	9300      	str	r3, [sp, #0]
    5332:	4b35      	ldr	r3, [pc, #212]	; (5408 <frobenius_map_fp6+0xfc>)
    5334:	464a      	mov	r2, r9
    5336:	f106 0130 	add.w	r1, r6, #48	; 0x30
    533a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    533e:	f7fd fa9f 	bl	2880 <cneg_mod_n>
    5342:	f104 0b60 	add.w	fp, r4, #96	; 0x60
    5346:	f106 035c 	add.w	r3, r6, #92	; 0x5c
    534a:	f104 025c 	add.w	r2, r4, #92	; 0x5c
    534e:	f106 018c 	add.w	r1, r6, #140	; 0x8c
    5352:	f853 0f04 	ldr.w	r0, [r3, #4]!
    5356:	f842 0f04 	str.w	r0, [r2, #4]!
    535a:	428b      	cmp	r3, r1
    535c:	d1f9      	bne.n	5352 <frobenius_map_fp6+0x46>
    535e:	230c      	movs	r3, #12
    5360:	9300      	str	r3, [sp, #0]
    5362:	4b29      	ldr	r3, [pc, #164]	; (5408 <frobenius_map_fp6+0xfc>)
    5364:	464a      	mov	r2, r9
    5366:	f106 0190 	add.w	r1, r6, #144	; 0x90
    536a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    536e:	f7fd fa87 	bl	2880 <cneg_mod_n>
    5372:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
    5376:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
    537a:	f106 01ec 	add.w	r1, r6, #236	; 0xec
    537e:	f853 0f04 	ldr.w	r0, [r3, #4]!
    5382:	f842 0f04 	str.w	r0, [r2, #4]!
    5386:	428b      	cmp	r3, r1
    5388:	d1f9      	bne.n	537e <frobenius_map_fp6+0x72>
    538a:	f104 08f0 	add.w	r8, r4, #240	; 0xf0
    538e:	4f1e      	ldr	r7, [pc, #120]	; (5408 <frobenius_map_fp6+0xfc>)
    5390:	f04f 0a0c 	mov.w	sl, #12
    5394:	f8cd a000 	str.w	sl, [sp]
    5398:	463b      	mov	r3, r7
    539a:	464a      	mov	r2, r9
    539c:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
    53a0:	4640      	mov	r0, r8
    53a2:	f7fd fa6d 	bl	2880 <cneg_mod_n>
    53a6:	3d01      	subs	r5, #1
    53a8:	4e18      	ldr	r6, [pc, #96]	; (540c <frobenius_map_fp6+0x100>)
    53aa:	f1a6 0248 	sub.w	r2, r6, #72	; 0x48
    53ae:	006b      	lsls	r3, r5, #1
    53b0:	9303      	str	r3, [sp, #12]
    53b2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    53b6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5410 <frobenius_map_fp6+0x104>
    53ba:	f8cd 9000 	str.w	r9, [sp]
    53be:	463b      	mov	r3, r7
    53c0:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    53c4:	4659      	mov	r1, fp
    53c6:	4658      	mov	r0, fp
    53c8:	f7ff feec 	bl	51a4 <mul_mont_384x>
    53cc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    53d0:	36d8      	adds	r6, #216	; 0xd8
    53d2:	9b03      	ldr	r3, [sp, #12]
    53d4:	441d      	add	r5, r3
    53d6:	eb06 1605 	add.w	r6, r6, r5, lsl #4
    53da:	f8cd a004 	str.w	sl, [sp, #4]
    53de:	f8cd 9000 	str.w	r9, [sp]
    53e2:	463b      	mov	r3, r7
    53e4:	4632      	mov	r2, r6
    53e6:	4601      	mov	r1, r0
    53e8:	f7fb fb9f 	bl	b2a <mul_mont_n>
    53ec:	f8cd a004 	str.w	sl, [sp, #4]
    53f0:	f8cd 9000 	str.w	r9, [sp]
    53f4:	463b      	mov	r3, r7
    53f6:	4632      	mov	r2, r6
    53f8:	4641      	mov	r1, r8
    53fa:	4640      	mov	r0, r8
    53fc:	f7fb fb95 	bl	b2a <mul_mont_n>
    5400:	b005      	add	sp, #20
    5402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5406:	bf00      	nop
    5408:	0001ade8 	.word	0x0001ade8
    540c:	0001bee0 	.word	0x0001bee0
    5410:	fffcfffd 	.word	0xfffcfffd

00005414 <frobenius_map_fp12>:
    5414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5418:	b082      	sub	sp, #8
    541a:	4605      	mov	r5, r0
    541c:	460e      	mov	r6, r1
    541e:	4614      	mov	r4, r2
    5420:	f7ff ff74 	bl	530c <frobenius_map_fp6>
    5424:	f505 7790 	add.w	r7, r5, #288	; 0x120
    5428:	4622      	mov	r2, r4
    542a:	f506 7190 	add.w	r1, r6, #288	; 0x120
    542e:	4638      	mov	r0, r7
    5430:	f7ff ff6c 	bl	530c <frobenius_map_fp6>
    5434:	3c01      	subs	r4, #1
    5436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    543a:	4b11      	ldr	r3, [pc, #68]	; (5480 <frobenius_map_fp12+0x6c>)
    543c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    5440:	4e10      	ldr	r6, [pc, #64]	; (5484 <frobenius_map_fp12+0x70>)
    5442:	f8df 8044 	ldr.w	r8, [pc, #68]	; 5488 <frobenius_map_fp12+0x74>
    5446:	f8cd 8000 	str.w	r8, [sp]
    544a:	4633      	mov	r3, r6
    544c:	4622      	mov	r2, r4
    544e:	4639      	mov	r1, r7
    5450:	4638      	mov	r0, r7
    5452:	f7ff fea7 	bl	51a4 <mul_mont_384x>
    5456:	f505 70c0 	add.w	r0, r5, #384	; 0x180
    545a:	f8cd 8000 	str.w	r8, [sp]
    545e:	4633      	mov	r3, r6
    5460:	4622      	mov	r2, r4
    5462:	4601      	mov	r1, r0
    5464:	f7ff fe9e 	bl	51a4 <mul_mont_384x>
    5468:	f505 70f0 	add.w	r0, r5, #480	; 0x1e0
    546c:	f8cd 8000 	str.w	r8, [sp]
    5470:	4633      	mov	r3, r6
    5472:	4622      	mov	r2, r4
    5474:	4601      	mov	r1, r0
    5476:	f7ff fe95 	bl	51a4 <mul_mont_384x>
    547a:	b002      	add	sp, #8
    547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5480:	0001c048 	.word	0x0001c048
    5484:	0001ade8 	.word	0x0001ade8
    5488:	fffcfffd 	.word	0xfffcfffd

0000548c <blst_fp12_frobenius_map>:
    548c:	b508      	push	{r3, lr}
    548e:	f7ff ffc1 	bl	5414 <frobenius_map_fp12>
    5492:	bd08      	pop	{r3, pc}

00005494 <map_fp2>:
    5494:	b36b      	cbz	r3, 54f2 <map_fp2+0x5e>
    5496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    549a:	b082      	sub	sp, #8
    549c:	4605      	mov	r5, r0
    549e:	4689      	mov	r9, r1
    54a0:	4690      	mov	r8, r2
    54a2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    54a6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
    54aa:	3c60      	subs	r4, #96	; 0x60
    54ac:	4e11      	ldr	r6, [pc, #68]	; (54f4 <map_fp2+0x60>)
    54ae:	f8df a048 	ldr.w	sl, [pc, #72]	; 54f8 <map_fp2+0x64>
    54b2:	270c      	movs	r7, #12
    54b4:	f8cd a000 	str.w	sl, [sp]
    54b8:	4633      	mov	r3, r6
    54ba:	464a      	mov	r2, r9
    54bc:	4629      	mov	r1, r5
    54be:	4628      	mov	r0, r5
    54c0:	f7ff fe70 	bl	51a4 <mul_mont_384x>
    54c4:	9700      	str	r7, [sp, #0]
    54c6:	4633      	mov	r3, r6
    54c8:	4622      	mov	r2, r4
    54ca:	4629      	mov	r1, r5
    54cc:	4628      	mov	r0, r5
    54ce:	f7fb fdd5 	bl	107c <add_mod_n>
    54d2:	f105 0030 	add.w	r0, r5, #48	; 0x30
    54d6:	9700      	str	r7, [sp, #0]
    54d8:	4633      	mov	r3, r6
    54da:	f104 0230 	add.w	r2, r4, #48	; 0x30
    54de:	4601      	mov	r1, r0
    54e0:	f7fb fdcc 	bl	107c <add_mod_n>
    54e4:	4544      	cmp	r4, r8
    54e6:	f1a4 0460 	sub.w	r4, r4, #96	; 0x60
    54ea:	d1e3      	bne.n	54b4 <map_fp2+0x20>
    54ec:	b002      	add	sp, #8
    54ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54f2:	4770      	bx	lr
    54f4:	0001ade8 	.word	0x0001ade8
    54f8:	fffcfffd 	.word	0xfffcfffd

000054fc <mul_fp6>:
    54fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5500:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
    5504:	4683      	mov	fp, r0
    5506:	460f      	mov	r7, r1
    5508:	4616      	mov	r6, r2
    550a:	4cad      	ldr	r4, [pc, #692]	; (57c0 <mul_fp6+0x2c4>)
    550c:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 57c4 <mul_fp6+0x2c8>
    5510:	f8cd a000 	str.w	sl, [sp]
    5514:	4623      	mov	r3, r4
    5516:	a88e      	add	r0, sp, #568	; 0x238
    5518:	f7ff fe44 	bl	51a4 <mul_mont_384x>
    551c:	f107 0960 	add.w	r9, r7, #96	; 0x60
    5520:	f106 0860 	add.w	r8, r6, #96	; 0x60
    5524:	f8cd a000 	str.w	sl, [sp]
    5528:	4623      	mov	r3, r4
    552a:	4642      	mov	r2, r8
    552c:	4649      	mov	r1, r9
    552e:	a876      	add	r0, sp, #472	; 0x1d8
    5530:	f7ff fe38 	bl	51a4 <mul_mont_384x>
    5534:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    5538:	f106 03c0 	add.w	r3, r6, #192	; 0xc0
    553c:	461a      	mov	r2, r3
    553e:	f8cd a000 	str.w	sl, [sp]
    5542:	4623      	mov	r3, r4
    5544:	9204      	str	r2, [sp, #16]
    5546:	9103      	str	r1, [sp, #12]
    5548:	a85e      	add	r0, sp, #376	; 0x178
    554a:	f7ff fe2b 	bl	51a4 <mul_mont_384x>
    554e:	250c      	movs	r5, #12
    5550:	9500      	str	r5, [sp, #0]
    5552:	4623      	mov	r3, r4
    5554:	9a03      	ldr	r2, [sp, #12]
    5556:	4649      	mov	r1, r9
    5558:	a82e      	add	r0, sp, #184	; 0xb8
    555a:	f7fb fd8f 	bl	107c <add_mod_n>
    555e:	f107 0190 	add.w	r1, r7, #144	; 0x90
    5562:	9108      	str	r1, [sp, #32]
    5564:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
    5568:	9009      	str	r0, [sp, #36]	; 0x24
    556a:	9500      	str	r5, [sp, #0]
    556c:	4623      	mov	r3, r4
    556e:	4602      	mov	r2, r0
    5570:	a83a      	add	r0, sp, #232	; 0xe8
    5572:	f7fb fd83 	bl	107c <add_mod_n>
    5576:	9500      	str	r5, [sp, #0]
    5578:	4623      	mov	r3, r4
    557a:	9a04      	ldr	r2, [sp, #16]
    557c:	4641      	mov	r1, r8
    557e:	a816      	add	r0, sp, #88	; 0x58
    5580:	f7fb fd7c 	bl	107c <add_mod_n>
    5584:	f106 0190 	add.w	r1, r6, #144	; 0x90
    5588:	9106      	str	r1, [sp, #24]
    558a:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
    558e:	461a      	mov	r2, r3
    5590:	9307      	str	r3, [sp, #28]
    5592:	9500      	str	r5, [sp, #0]
    5594:	4623      	mov	r3, r4
    5596:	a822      	add	r0, sp, #136	; 0x88
    5598:	f7fb fd70 	bl	107c <add_mod_n>
    559c:	f8cd a000 	str.w	sl, [sp]
    55a0:	4623      	mov	r3, r4
    55a2:	aa16      	add	r2, sp, #88	; 0x58
    55a4:	a92e      	add	r1, sp, #184	; 0xb8
    55a6:	a846      	add	r0, sp, #280	; 0x118
    55a8:	f7ff fdfc 	bl	51a4 <mul_mont_384x>
    55ac:	9500      	str	r5, [sp, #0]
    55ae:	4623      	mov	r3, r4
    55b0:	aa76      	add	r2, sp, #472	; 0x1d8
    55b2:	a946      	add	r1, sp, #280	; 0x118
    55b4:	4608      	mov	r0, r1
    55b6:	f7fb f8ae 	bl	716 <sub_mod_n>
    55ba:	9500      	str	r5, [sp, #0]
    55bc:	4623      	mov	r3, r4
    55be:	aa82      	add	r2, sp, #520	; 0x208
    55c0:	a952      	add	r1, sp, #328	; 0x148
    55c2:	4608      	mov	r0, r1
    55c4:	f7fb f8a7 	bl	716 <sub_mod_n>
    55c8:	9500      	str	r5, [sp, #0]
    55ca:	4623      	mov	r3, r4
    55cc:	aa5e      	add	r2, sp, #376	; 0x178
    55ce:	a946      	add	r1, sp, #280	; 0x118
    55d0:	4608      	mov	r0, r1
    55d2:	f7fb f8a0 	bl	716 <sub_mod_n>
    55d6:	9500      	str	r5, [sp, #0]
    55d8:	4623      	mov	r3, r4
    55da:	aa6a      	add	r2, sp, #424	; 0x1a8
    55dc:	a952      	add	r1, sp, #328	; 0x148
    55de:	4608      	mov	r0, r1
    55e0:	f7fb f899 	bl	716 <sub_mod_n>
    55e4:	9500      	str	r5, [sp, #0]
    55e6:	4623      	mov	r3, r4
    55e8:	aa52      	add	r2, sp, #328	; 0x148
    55ea:	a946      	add	r1, sp, #280	; 0x118
    55ec:	a80a      	add	r0, sp, #40	; 0x28
    55ee:	f7fb fd45 	bl	107c <add_mod_n>
    55f2:	9500      	str	r5, [sp, #0]
    55f4:	4623      	mov	r3, r4
    55f6:	aa52      	add	r2, sp, #328	; 0x148
    55f8:	a946      	add	r1, sp, #280	; 0x118
    55fa:	4608      	mov	r0, r1
    55fc:	f7fb f88b 	bl	716 <sub_mod_n>
    5600:	ab0a      	add	r3, sp, #40	; 0x28
    5602:	aa51      	add	r2, sp, #324	; 0x144
    5604:	a916      	add	r1, sp, #88	; 0x58
    5606:	f853 0b04 	ldr.w	r0, [r3], #4
    560a:	f842 0f04 	str.w	r0, [r2, #4]!
    560e:	4299      	cmp	r1, r3
    5610:	d1f9      	bne.n	5606 <mul_fp6+0x10a>
    5612:	4c6b      	ldr	r4, [pc, #428]	; (57c0 <mul_fp6+0x2c4>)
    5614:	250c      	movs	r5, #12
    5616:	9500      	str	r5, [sp, #0]
    5618:	4623      	mov	r3, r4
    561a:	464a      	mov	r2, r9
    561c:	4639      	mov	r1, r7
    561e:	a82e      	add	r0, sp, #184	; 0xb8
    5620:	f7fb fd2c 	bl	107c <add_mod_n>
    5624:	f107 0330 	add.w	r3, r7, #48	; 0x30
    5628:	4619      	mov	r1, r3
    562a:	9305      	str	r3, [sp, #20]
    562c:	9500      	str	r5, [sp, #0]
    562e:	4623      	mov	r3, r4
    5630:	9a08      	ldr	r2, [sp, #32]
    5632:	a83a      	add	r0, sp, #232	; 0xe8
    5634:	f7fb fd22 	bl	107c <add_mod_n>
    5638:	9500      	str	r5, [sp, #0]
    563a:	4623      	mov	r3, r4
    563c:	4642      	mov	r2, r8
    563e:	4631      	mov	r1, r6
    5640:	a816      	add	r0, sp, #88	; 0x58
    5642:	f7fb fd1b 	bl	107c <add_mod_n>
    5646:	f106 0a30 	add.w	sl, r6, #48	; 0x30
    564a:	9500      	str	r5, [sp, #0]
    564c:	4623      	mov	r3, r4
    564e:	9a06      	ldr	r2, [sp, #24]
    5650:	4651      	mov	r1, sl
    5652:	a822      	add	r0, sp, #136	; 0x88
    5654:	f7fb fd12 	bl	107c <add_mod_n>
    5658:	f10b 0860 	add.w	r8, fp, #96	; 0x60
    565c:	4b59      	ldr	r3, [pc, #356]	; (57c4 <mul_fp6+0x2c8>)
    565e:	9300      	str	r3, [sp, #0]
    5660:	4623      	mov	r3, r4
    5662:	aa16      	add	r2, sp, #88	; 0x58
    5664:	a92e      	add	r1, sp, #184	; 0xb8
    5666:	4640      	mov	r0, r8
    5668:	f7ff fd9c 	bl	51a4 <mul_mont_384x>
    566c:	9500      	str	r5, [sp, #0]
    566e:	4623      	mov	r3, r4
    5670:	aa8e      	add	r2, sp, #568	; 0x238
    5672:	4641      	mov	r1, r8
    5674:	4640      	mov	r0, r8
    5676:	f7fb f84e 	bl	716 <sub_mod_n>
    567a:	f10b 0990 	add.w	r9, fp, #144	; 0x90
    567e:	9500      	str	r5, [sp, #0]
    5680:	4623      	mov	r3, r4
    5682:	aa9a      	add	r2, sp, #616	; 0x268
    5684:	4649      	mov	r1, r9
    5686:	4648      	mov	r0, r9
    5688:	f7fb f845 	bl	716 <sub_mod_n>
    568c:	9500      	str	r5, [sp, #0]
    568e:	4623      	mov	r3, r4
    5690:	aa76      	add	r2, sp, #472	; 0x1d8
    5692:	4641      	mov	r1, r8
    5694:	4640      	mov	r0, r8
    5696:	f7fb f83e 	bl	716 <sub_mod_n>
    569a:	9500      	str	r5, [sp, #0]
    569c:	4623      	mov	r3, r4
    569e:	aa82      	add	r2, sp, #520	; 0x208
    56a0:	4649      	mov	r1, r9
    56a2:	4648      	mov	r0, r9
    56a4:	f7fb f837 	bl	716 <sub_mod_n>
    56a8:	9500      	str	r5, [sp, #0]
    56aa:	4623      	mov	r3, r4
    56ac:	aa6a      	add	r2, sp, #424	; 0x1a8
    56ae:	a95e      	add	r1, sp, #376	; 0x178
    56b0:	a80a      	add	r0, sp, #40	; 0x28
    56b2:	f7fb fce3 	bl	107c <add_mod_n>
    56b6:	9500      	str	r5, [sp, #0]
    56b8:	4623      	mov	r3, r4
    56ba:	aa6a      	add	r2, sp, #424	; 0x1a8
    56bc:	a95e      	add	r1, sp, #376	; 0x178
    56be:	a82e      	add	r0, sp, #184	; 0xb8
    56c0:	f7fb f829 	bl	716 <sub_mod_n>
    56c4:	ab0a      	add	r3, sp, #40	; 0x28
    56c6:	aa39      	add	r2, sp, #228	; 0xe4
    56c8:	a916      	add	r1, sp, #88	; 0x58
    56ca:	f853 0b04 	ldr.w	r0, [r3], #4
    56ce:	f842 0f04 	str.w	r0, [r2, #4]!
    56d2:	4299      	cmp	r1, r3
    56d4:	d1f9      	bne.n	56ca <mul_fp6+0x1ce>
    56d6:	4c3a      	ldr	r4, [pc, #232]	; (57c0 <mul_fp6+0x2c4>)
    56d8:	250c      	movs	r5, #12
    56da:	9500      	str	r5, [sp, #0]
    56dc:	4623      	mov	r3, r4
    56de:	aa2e      	add	r2, sp, #184	; 0xb8
    56e0:	4641      	mov	r1, r8
    56e2:	4640      	mov	r0, r8
    56e4:	f7fb fcca 	bl	107c <add_mod_n>
    56e8:	9500      	str	r5, [sp, #0]
    56ea:	4623      	mov	r3, r4
    56ec:	aa3a      	add	r2, sp, #232	; 0xe8
    56ee:	4649      	mov	r1, r9
    56f0:	4648      	mov	r0, r9
    56f2:	f7fb fcc3 	bl	107c <add_mod_n>
    56f6:	9500      	str	r5, [sp, #0]
    56f8:	4623      	mov	r3, r4
    56fa:	9a03      	ldr	r2, [sp, #12]
    56fc:	4639      	mov	r1, r7
    56fe:	a82e      	add	r0, sp, #184	; 0xb8
    5700:	f7fb fcbc 	bl	107c <add_mod_n>
    5704:	9500      	str	r5, [sp, #0]
    5706:	4623      	mov	r3, r4
    5708:	9a09      	ldr	r2, [sp, #36]	; 0x24
    570a:	9905      	ldr	r1, [sp, #20]
    570c:	a83a      	add	r0, sp, #232	; 0xe8
    570e:	f7fb fcb5 	bl	107c <add_mod_n>
    5712:	9500      	str	r5, [sp, #0]
    5714:	4623      	mov	r3, r4
    5716:	9a04      	ldr	r2, [sp, #16]
    5718:	4631      	mov	r1, r6
    571a:	a816      	add	r0, sp, #88	; 0x58
    571c:	f7fb fcae 	bl	107c <add_mod_n>
    5720:	9500      	str	r5, [sp, #0]
    5722:	4623      	mov	r3, r4
    5724:	9a07      	ldr	r2, [sp, #28]
    5726:	4651      	mov	r1, sl
    5728:	a822      	add	r0, sp, #136	; 0x88
    572a:	f7fb fca7 	bl	107c <add_mod_n>
    572e:	f10b 06c0 	add.w	r6, fp, #192	; 0xc0
    5732:	4b24      	ldr	r3, [pc, #144]	; (57c4 <mul_fp6+0x2c8>)
    5734:	9300      	str	r3, [sp, #0]
    5736:	4623      	mov	r3, r4
    5738:	aa16      	add	r2, sp, #88	; 0x58
    573a:	a92e      	add	r1, sp, #184	; 0xb8
    573c:	4630      	mov	r0, r6
    573e:	f7ff fd31 	bl	51a4 <mul_mont_384x>
    5742:	9500      	str	r5, [sp, #0]
    5744:	4623      	mov	r3, r4
    5746:	aa8e      	add	r2, sp, #568	; 0x238
    5748:	4631      	mov	r1, r6
    574a:	4630      	mov	r0, r6
    574c:	f7fa ffe3 	bl	716 <sub_mod_n>
    5750:	f10b 07f0 	add.w	r7, fp, #240	; 0xf0
    5754:	9500      	str	r5, [sp, #0]
    5756:	4623      	mov	r3, r4
    5758:	aa9a      	add	r2, sp, #616	; 0x268
    575a:	4639      	mov	r1, r7
    575c:	4638      	mov	r0, r7
    575e:	f7fa ffda 	bl	716 <sub_mod_n>
    5762:	9500      	str	r5, [sp, #0]
    5764:	4623      	mov	r3, r4
    5766:	aa5e      	add	r2, sp, #376	; 0x178
    5768:	4631      	mov	r1, r6
    576a:	4630      	mov	r0, r6
    576c:	f7fa ffd3 	bl	716 <sub_mod_n>
    5770:	9500      	str	r5, [sp, #0]
    5772:	4623      	mov	r3, r4
    5774:	aa6a      	add	r2, sp, #424	; 0x1a8
    5776:	4639      	mov	r1, r7
    5778:	4638      	mov	r0, r7
    577a:	f7fa ffcc 	bl	716 <sub_mod_n>
    577e:	9500      	str	r5, [sp, #0]
    5780:	4623      	mov	r3, r4
    5782:	aa76      	add	r2, sp, #472	; 0x1d8
    5784:	4631      	mov	r1, r6
    5786:	4630      	mov	r0, r6
    5788:	f7fb fc78 	bl	107c <add_mod_n>
    578c:	9500      	str	r5, [sp, #0]
    578e:	4623      	mov	r3, r4
    5790:	aa82      	add	r2, sp, #520	; 0x208
    5792:	4639      	mov	r1, r7
    5794:	4638      	mov	r0, r7
    5796:	f7fb fc71 	bl	107c <add_mod_n>
    579a:	9500      	str	r5, [sp, #0]
    579c:	4623      	mov	r3, r4
    579e:	aa8e      	add	r2, sp, #568	; 0x238
    57a0:	a946      	add	r1, sp, #280	; 0x118
    57a2:	4658      	mov	r0, fp
    57a4:	f7fb fc6a 	bl	107c <add_mod_n>
    57a8:	9500      	str	r5, [sp, #0]
    57aa:	4623      	mov	r3, r4
    57ac:	aa9a      	add	r2, sp, #616	; 0x268
    57ae:	a952      	add	r1, sp, #328	; 0x148
    57b0:	f10b 0030 	add.w	r0, fp, #48	; 0x30
    57b4:	f7fb fc62 	bl	107c <add_mod_n>
    57b8:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
    57bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57c0:	0001ade8 	.word	0x0001ade8
    57c4:	fffcfffd 	.word	0xfffcfffd

000057c8 <mul_fp12>:
    57c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57cc:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
    57d0:	4604      	mov	r4, r0
    57d2:	460d      	mov	r5, r1
    57d4:	4616      	mov	r6, r2
    57d6:	a89e      	add	r0, sp, #632	; 0x278
    57d8:	f7ff fe90 	bl	54fc <mul_fp6>
    57dc:	f505 7890 	add.w	r8, r5, #288	; 0x120
    57e0:	f506 7790 	add.w	r7, r6, #288	; 0x120
    57e4:	463a      	mov	r2, r7
    57e6:	4641      	mov	r1, r8
    57e8:	a856      	add	r0, sp, #344	; 0x158
    57ea:	f7ff fe87 	bl	54fc <mul_fp6>
    57ee:	4642      	mov	r2, r8
    57f0:	4629      	mov	r1, r5
    57f2:	a80e      	add	r0, sp, #56	; 0x38
    57f4:	f7fe fab9 	bl	3d6a <add_fp6>
    57f8:	f504 7590 	add.w	r5, r4, #288	; 0x120
    57fc:	463a      	mov	r2, r7
    57fe:	4631      	mov	r1, r6
    5800:	4628      	mov	r0, r5
    5802:	f7fe fab2 	bl	3d6a <add_fp6>
    5806:	aa0e      	add	r2, sp, #56	; 0x38
    5808:	4629      	mov	r1, r5
    580a:	4628      	mov	r0, r5
    580c:	f7ff fe76 	bl	54fc <mul_fp6>
    5810:	aa9e      	add	r2, sp, #632	; 0x278
    5812:	4629      	mov	r1, r5
    5814:	4628      	mov	r0, r5
    5816:	f7fe faf3 	bl	3e00 <sub_fp6>
    581a:	aa56      	add	r2, sp, #344	; 0x158
    581c:	4629      	mov	r1, r5
    581e:	4628      	mov	r0, r5
    5820:	f7fe faee 	bl	3e00 <sub_fp6>
    5824:	4d26      	ldr	r5, [pc, #152]	; (58c0 <mul_fp12+0xf8>)
    5826:	260c      	movs	r6, #12
    5828:	9600      	str	r6, [sp, #0]
    582a:	462b      	mov	r3, r5
    582c:	aa92      	add	r2, sp, #584	; 0x248
    582e:	a986      	add	r1, sp, #536	; 0x218
    5830:	a802      	add	r0, sp, #8
    5832:	f7fb fc23 	bl	107c <add_mod_n>
    5836:	9600      	str	r6, [sp, #0]
    5838:	462b      	mov	r3, r5
    583a:	aa92      	add	r2, sp, #584	; 0x248
    583c:	a986      	add	r1, sp, #536	; 0x218
    583e:	4608      	mov	r0, r1
    5840:	f7fa ff69 	bl	716 <sub_mod_n>
    5844:	ab02      	add	r3, sp, #8
    5846:	aa91      	add	r2, sp, #580	; 0x244
    5848:	a90e      	add	r1, sp, #56	; 0x38
    584a:	f853 0b04 	ldr.w	r0, [r3], #4
    584e:	f842 0f04 	str.w	r0, [r2, #4]!
    5852:	428b      	cmp	r3, r1
    5854:	d1f9      	bne.n	584a <mul_fp12+0x82>
    5856:	4d1a      	ldr	r5, [pc, #104]	; (58c0 <mul_fp12+0xf8>)
    5858:	260c      	movs	r6, #12
    585a:	9600      	str	r6, [sp, #0]
    585c:	462b      	mov	r3, r5
    585e:	aa86      	add	r2, sp, #536	; 0x218
    5860:	a99e      	add	r1, sp, #632	; 0x278
    5862:	4620      	mov	r0, r4
    5864:	f7fb fc0a 	bl	107c <add_mod_n>
    5868:	9600      	str	r6, [sp, #0]
    586a:	462b      	mov	r3, r5
    586c:	aa92      	add	r2, sp, #584	; 0x248
    586e:	a9aa      	add	r1, sp, #680	; 0x2a8
    5870:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5874:	f7fb fc02 	bl	107c <add_mod_n>
    5878:	9600      	str	r6, [sp, #0]
    587a:	462b      	mov	r3, r5
    587c:	aa56      	add	r2, sp, #344	; 0x158
    587e:	a9b6      	add	r1, sp, #728	; 0x2d8
    5880:	f104 0060 	add.w	r0, r4, #96	; 0x60
    5884:	f7fb fbfa 	bl	107c <add_mod_n>
    5888:	9600      	str	r6, [sp, #0]
    588a:	462b      	mov	r3, r5
    588c:	aa62      	add	r2, sp, #392	; 0x188
    588e:	a9c2      	add	r1, sp, #776	; 0x308
    5890:	f104 0090 	add.w	r0, r4, #144	; 0x90
    5894:	f7fb fbf2 	bl	107c <add_mod_n>
    5898:	9600      	str	r6, [sp, #0]
    589a:	462b      	mov	r3, r5
    589c:	aa6e      	add	r2, sp, #440	; 0x1b8
    589e:	a9ce      	add	r1, sp, #824	; 0x338
    58a0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    58a4:	f7fb fbea 	bl	107c <add_mod_n>
    58a8:	9600      	str	r6, [sp, #0]
    58aa:	462b      	mov	r3, r5
    58ac:	aa7a      	add	r2, sp, #488	; 0x1e8
    58ae:	a9da      	add	r1, sp, #872	; 0x368
    58b0:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    58b4:	f7fb fbe2 	bl	107c <add_mod_n>
    58b8:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
    58bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58c0:	0001ade8 	.word	0x0001ade8

000058c4 <blst_fp12_mul>:
    58c4:	b508      	push	{r3, lr}
    58c6:	f7ff ff7f 	bl	57c8 <mul_fp12>
    58ca:	bd08      	pop	{r3, pc}

000058cc <sqr_fp12>:
    58cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58d0:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
    58d4:	4605      	mov	r5, r0
    58d6:	460c      	mov	r4, r1
    58d8:	f501 7990 	add.w	r9, r1, #288	; 0x120
    58dc:	464a      	mov	r2, r9
    58de:	a856      	add	r0, sp, #344	; 0x158
    58e0:	f7fe fa43 	bl	3d6a <add_fp6>
    58e4:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
    58e8:	f504 7704 	add.w	r7, r4, #528	; 0x210
    58ec:	f8df 8164 	ldr.w	r8, [pc, #356]	; 5a54 <sqr_fp12+0x188>
    58f0:	f04f 0a0c 	mov.w	sl, #12
    58f4:	f8cd a000 	str.w	sl, [sp]
    58f8:	4643      	mov	r3, r8
    58fa:	463a      	mov	r2, r7
    58fc:	4631      	mov	r1, r6
    58fe:	a802      	add	r0, sp, #8
    5900:	f7fb fbbc 	bl	107c <add_mod_n>
    5904:	f8cd a000 	str.w	sl, [sp]
    5908:	4643      	mov	r3, r8
    590a:	463a      	mov	r2, r7
    590c:	4631      	mov	r1, r6
    590e:	a83e      	add	r0, sp, #248	; 0xf8
    5910:	f7fa ff01 	bl	716 <sub_mod_n>
    5914:	ab02      	add	r3, sp, #8
    5916:	f50d 7892 	add.w	r8, sp, #292	; 0x124
    591a:	a90e      	add	r1, sp, #56	; 0x38
    591c:	4642      	mov	r2, r8
    591e:	f853 0b04 	ldr.w	r0, [r3], #4
    5922:	f842 0f04 	str.w	r0, [r2, #4]!
    5926:	428b      	cmp	r3, r1
    5928:	d1f9      	bne.n	591e <sqr_fp12+0x52>
    592a:	4e4a      	ldr	r6, [pc, #296]	; (5a54 <sqr_fp12+0x188>)
    592c:	270c      	movs	r7, #12
    592e:	9700      	str	r7, [sp, #0]
    5930:	4633      	mov	r3, r6
    5932:	aa3e      	add	r2, sp, #248	; 0xf8
    5934:	4621      	mov	r1, r4
    5936:	a80e      	add	r0, sp, #56	; 0x38
    5938:	f7fb fba0 	bl	107c <add_mod_n>
    593c:	9700      	str	r7, [sp, #0]
    593e:	4633      	mov	r3, r6
    5940:	aa4a      	add	r2, sp, #296	; 0x128
    5942:	f104 0130 	add.w	r1, r4, #48	; 0x30
    5946:	a81a      	add	r0, sp, #104	; 0x68
    5948:	f7fb fb98 	bl	107c <add_mod_n>
    594c:	9700      	str	r7, [sp, #0]
    594e:	4633      	mov	r3, r6
    5950:	f504 7290 	add.w	r2, r4, #288	; 0x120
    5954:	f104 0160 	add.w	r1, r4, #96	; 0x60
    5958:	a826      	add	r0, sp, #152	; 0x98
    595a:	f7fb fb8f 	bl	107c <add_mod_n>
    595e:	9700      	str	r7, [sp, #0]
    5960:	4633      	mov	r3, r6
    5962:	f504 72a8 	add.w	r2, r4, #336	; 0x150
    5966:	f104 0190 	add.w	r1, r4, #144	; 0x90
    596a:	a832      	add	r0, sp, #200	; 0xc8
    596c:	f7fb fb86 	bl	107c <add_mod_n>
    5970:	9700      	str	r7, [sp, #0]
    5972:	4633      	mov	r3, r6
    5974:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    5978:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    597c:	a83e      	add	r0, sp, #248	; 0xf8
    597e:	f7fb fb7d 	bl	107c <add_mod_n>
    5982:	9700      	str	r7, [sp, #0]
    5984:	4633      	mov	r3, r6
    5986:	f504 72d8 	add.w	r2, r4, #432	; 0x1b0
    598a:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    598e:	a84a      	add	r0, sp, #296	; 0x128
    5990:	f7fb fb74 	bl	107c <add_mod_n>
    5994:	aa0e      	add	r2, sp, #56	; 0x38
    5996:	a956      	add	r1, sp, #344	; 0x158
    5998:	4608      	mov	r0, r1
    599a:	f7ff fdaf 	bl	54fc <mul_fp6>
    599e:	464a      	mov	r2, r9
    59a0:	4621      	mov	r1, r4
    59a2:	a80e      	add	r0, sp, #56	; 0x38
    59a4:	f7ff fdaa 	bl	54fc <mul_fp6>
    59a8:	aa0e      	add	r2, sp, #56	; 0x38
    59aa:	4611      	mov	r1, r2
    59ac:	f505 7090 	add.w	r0, r5, #288	; 0x120
    59b0:	f7fe f9db 	bl	3d6a <add_fp6>
    59b4:	aa0e      	add	r2, sp, #56	; 0x38
    59b6:	a956      	add	r1, sp, #344	; 0x158
    59b8:	4628      	mov	r0, r5
    59ba:	f7fe fa21 	bl	3e00 <sub_fp6>
    59be:	9700      	str	r7, [sp, #0]
    59c0:	4633      	mov	r3, r6
    59c2:	aa4a      	add	r2, sp, #296	; 0x128
    59c4:	a93e      	add	r1, sp, #248	; 0xf8
    59c6:	a802      	add	r0, sp, #8
    59c8:	f7fb fb58 	bl	107c <add_mod_n>
    59cc:	9700      	str	r7, [sp, #0]
    59ce:	4633      	mov	r3, r6
    59d0:	aa4a      	add	r2, sp, #296	; 0x128
    59d2:	a93e      	add	r1, sp, #248	; 0xf8
    59d4:	4608      	mov	r0, r1
    59d6:	f7fa fe9e 	bl	716 <sub_mod_n>
    59da:	ab02      	add	r3, sp, #8
    59dc:	aa0e      	add	r2, sp, #56	; 0x38
    59de:	f853 1b04 	ldr.w	r1, [r3], #4
    59e2:	f848 1f04 	str.w	r1, [r8, #4]!
    59e6:	429a      	cmp	r2, r3
    59e8:	d1f9      	bne.n	59de <sqr_fp12+0x112>
    59ea:	4c1a      	ldr	r4, [pc, #104]	; (5a54 <sqr_fp12+0x188>)
    59ec:	260c      	movs	r6, #12
    59ee:	9600      	str	r6, [sp, #0]
    59f0:	4623      	mov	r3, r4
    59f2:	aa3e      	add	r2, sp, #248	; 0xf8
    59f4:	4629      	mov	r1, r5
    59f6:	4628      	mov	r0, r5
    59f8:	f7fa fe8d 	bl	716 <sub_mod_n>
    59fc:	f105 0030 	add.w	r0, r5, #48	; 0x30
    5a00:	9600      	str	r6, [sp, #0]
    5a02:	4623      	mov	r3, r4
    5a04:	aa4a      	add	r2, sp, #296	; 0x128
    5a06:	4601      	mov	r1, r0
    5a08:	f7fa fe85 	bl	716 <sub_mod_n>
    5a0c:	f105 0060 	add.w	r0, r5, #96	; 0x60
    5a10:	9600      	str	r6, [sp, #0]
    5a12:	4623      	mov	r3, r4
    5a14:	aa0e      	add	r2, sp, #56	; 0x38
    5a16:	4601      	mov	r1, r0
    5a18:	f7fa fe7d 	bl	716 <sub_mod_n>
    5a1c:	f105 0090 	add.w	r0, r5, #144	; 0x90
    5a20:	9600      	str	r6, [sp, #0]
    5a22:	4623      	mov	r3, r4
    5a24:	aa1a      	add	r2, sp, #104	; 0x68
    5a26:	4601      	mov	r1, r0
    5a28:	f7fa fe75 	bl	716 <sub_mod_n>
    5a2c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    5a30:	9600      	str	r6, [sp, #0]
    5a32:	4623      	mov	r3, r4
    5a34:	aa26      	add	r2, sp, #152	; 0x98
    5a36:	4601      	mov	r1, r0
    5a38:	f7fa fe6d 	bl	716 <sub_mod_n>
    5a3c:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
    5a40:	9600      	str	r6, [sp, #0]
    5a42:	4623      	mov	r3, r4
    5a44:	aa32      	add	r2, sp, #200	; 0xc8
    5a46:	4601      	mov	r1, r0
    5a48:	f7fa fe65 	bl	716 <sub_mod_n>
    5a4c:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
    5a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a54:	0001ade8 	.word	0x0001ade8

00005a58 <blst_fp12_sqr>:
    5a58:	b508      	push	{r3, lr}
    5a5a:	f7ff ff37 	bl	58cc <sqr_fp12>
    5a5e:	bd08      	pop	{r3, pc}

00005a60 <mul_by_xy0_fp6>:
    5a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a64:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    5a68:	4606      	mov	r6, r0
    5a6a:	4688      	mov	r8, r1
    5a6c:	4617      	mov	r7, r2
    5a6e:	4c55      	ldr	r4, [pc, #340]	; (5bc4 <mul_by_xy0_fp6+0x164>)
    5a70:	4d55      	ldr	r5, [pc, #340]	; (5bc8 <mul_by_xy0_fp6+0x168>)
    5a72:	9500      	str	r5, [sp, #0]
    5a74:	4623      	mov	r3, r4
    5a76:	a86e      	add	r0, sp, #440	; 0x1b8
    5a78:	f7ff fb94 	bl	51a4 <mul_mont_384x>
    5a7c:	f108 0b60 	add.w	fp, r8, #96	; 0x60
    5a80:	f107 0960 	add.w	r9, r7, #96	; 0x60
    5a84:	9500      	str	r5, [sp, #0]
    5a86:	4623      	mov	r3, r4
    5a88:	464a      	mov	r2, r9
    5a8a:	4659      	mov	r1, fp
    5a8c:	a856      	add	r0, sp, #344	; 0x158
    5a8e:	f7ff fb89 	bl	51a4 <mul_mont_384x>
    5a92:	f108 0ac0 	add.w	sl, r8, #192	; 0xc0
    5a96:	9500      	str	r5, [sp, #0]
    5a98:	4623      	mov	r3, r4
    5a9a:	464a      	mov	r2, r9
    5a9c:	4651      	mov	r1, sl
    5a9e:	a83e      	add	r0, sp, #248	; 0xf8
    5aa0:	f7ff fb80 	bl	51a4 <mul_mont_384x>
    5aa4:	250c      	movs	r5, #12
    5aa6:	9500      	str	r5, [sp, #0]
    5aa8:	4623      	mov	r3, r4
    5aaa:	aa4a      	add	r2, sp, #296	; 0x128
    5aac:	a93e      	add	r1, sp, #248	; 0xf8
    5aae:	a802      	add	r0, sp, #8
    5ab0:	f7fb fae4 	bl	107c <add_mod_n>
    5ab4:	9500      	str	r5, [sp, #0]
    5ab6:	4623      	mov	r3, r4
    5ab8:	aa4a      	add	r2, sp, #296	; 0x128
    5aba:	a93e      	add	r1, sp, #248	; 0xf8
    5abc:	4608      	mov	r0, r1
    5abe:	f7fa fe2a 	bl	716 <sub_mod_n>
    5ac2:	ab02      	add	r3, sp, #8
    5ac4:	aa49      	add	r2, sp, #292	; 0x124
    5ac6:	a90e      	add	r1, sp, #56	; 0x38
    5ac8:	f853 0b04 	ldr.w	r0, [r3], #4
    5acc:	f842 0f04 	str.w	r0, [r2, #4]!
    5ad0:	4299      	cmp	r1, r3
    5ad2:	d1f9      	bne.n	5ac8 <mul_by_xy0_fp6+0x68>
    5ad4:	4c3b      	ldr	r4, [pc, #236]	; (5bc4 <mul_by_xy0_fp6+0x164>)
    5ad6:	250c      	movs	r5, #12
    5ad8:	9500      	str	r5, [sp, #0]
    5ada:	4623      	mov	r3, r4
    5adc:	465a      	mov	r2, fp
    5ade:	4641      	mov	r1, r8
    5ae0:	a826      	add	r0, sp, #152	; 0x98
    5ae2:	f7fb facb 	bl	107c <add_mod_n>
    5ae6:	9500      	str	r5, [sp, #0]
    5ae8:	4623      	mov	r3, r4
    5aea:	f108 0290 	add.w	r2, r8, #144	; 0x90
    5aee:	f108 0130 	add.w	r1, r8, #48	; 0x30
    5af2:	a832      	add	r0, sp, #200	; 0xc8
    5af4:	f7fb fac2 	bl	107c <add_mod_n>
    5af8:	9500      	str	r5, [sp, #0]
    5afa:	4623      	mov	r3, r4
    5afc:	464a      	mov	r2, r9
    5afe:	4639      	mov	r1, r7
    5b00:	a80e      	add	r0, sp, #56	; 0x38
    5b02:	f7fb fabb 	bl	107c <add_mod_n>
    5b06:	9500      	str	r5, [sp, #0]
    5b08:	4623      	mov	r3, r4
    5b0a:	f107 0290 	add.w	r2, r7, #144	; 0x90
    5b0e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    5b12:	a81a      	add	r0, sp, #104	; 0x68
    5b14:	f7fb fab2 	bl	107c <add_mod_n>
    5b18:	f106 0860 	add.w	r8, r6, #96	; 0x60
    5b1c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 5bc8 <mul_by_xy0_fp6+0x168>
    5b20:	f8cd b000 	str.w	fp, [sp]
    5b24:	4623      	mov	r3, r4
    5b26:	aa0e      	add	r2, sp, #56	; 0x38
    5b28:	a926      	add	r1, sp, #152	; 0x98
    5b2a:	4640      	mov	r0, r8
    5b2c:	f7ff fb3a 	bl	51a4 <mul_mont_384x>
    5b30:	9500      	str	r5, [sp, #0]
    5b32:	4623      	mov	r3, r4
    5b34:	aa6e      	add	r2, sp, #440	; 0x1b8
    5b36:	4641      	mov	r1, r8
    5b38:	4640      	mov	r0, r8
    5b3a:	f7fa fdec 	bl	716 <sub_mod_n>
    5b3e:	f106 0990 	add.w	r9, r6, #144	; 0x90
    5b42:	9500      	str	r5, [sp, #0]
    5b44:	4623      	mov	r3, r4
    5b46:	aa7a      	add	r2, sp, #488	; 0x1e8
    5b48:	4649      	mov	r1, r9
    5b4a:	4648      	mov	r0, r9
    5b4c:	f7fa fde3 	bl	716 <sub_mod_n>
    5b50:	9500      	str	r5, [sp, #0]
    5b52:	4623      	mov	r3, r4
    5b54:	aa56      	add	r2, sp, #344	; 0x158
    5b56:	4641      	mov	r1, r8
    5b58:	4640      	mov	r0, r8
    5b5a:	f7fa fddc 	bl	716 <sub_mod_n>
    5b5e:	9500      	str	r5, [sp, #0]
    5b60:	4623      	mov	r3, r4
    5b62:	aa62      	add	r2, sp, #392	; 0x188
    5b64:	4649      	mov	r1, r9
    5b66:	4648      	mov	r0, r9
    5b68:	f7fa fdd5 	bl	716 <sub_mod_n>
    5b6c:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
    5b70:	f8cd b000 	str.w	fp, [sp]
    5b74:	4623      	mov	r3, r4
    5b76:	463a      	mov	r2, r7
    5b78:	4651      	mov	r1, sl
    5b7a:	4640      	mov	r0, r8
    5b7c:	f7ff fb12 	bl	51a4 <mul_mont_384x>
    5b80:	9500      	str	r5, [sp, #0]
    5b82:	4623      	mov	r3, r4
    5b84:	aa56      	add	r2, sp, #344	; 0x158
    5b86:	4641      	mov	r1, r8
    5b88:	4640      	mov	r0, r8
    5b8a:	f7fb fa77 	bl	107c <add_mod_n>
    5b8e:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
    5b92:	9500      	str	r5, [sp, #0]
    5b94:	4623      	mov	r3, r4
    5b96:	aa62      	add	r2, sp, #392	; 0x188
    5b98:	4601      	mov	r1, r0
    5b9a:	f7fb fa6f 	bl	107c <add_mod_n>
    5b9e:	9500      	str	r5, [sp, #0]
    5ba0:	4623      	mov	r3, r4
    5ba2:	aa6e      	add	r2, sp, #440	; 0x1b8
    5ba4:	a93e      	add	r1, sp, #248	; 0xf8
    5ba6:	4630      	mov	r0, r6
    5ba8:	f7fb fa68 	bl	107c <add_mod_n>
    5bac:	9500      	str	r5, [sp, #0]
    5bae:	4623      	mov	r3, r4
    5bb0:	aa7a      	add	r2, sp, #488	; 0x1e8
    5bb2:	a94a      	add	r1, sp, #296	; 0x128
    5bb4:	f106 0030 	add.w	r0, r6, #48	; 0x30
    5bb8:	f7fb fa60 	bl	107c <add_mod_n>
    5bbc:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
    5bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bc4:	0001ade8 	.word	0x0001ade8
    5bc8:	fffcfffd 	.word	0xfffcfffd

00005bcc <mul_by_xy00z0_fp12>:
    5bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bd0:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
    5bd4:	4605      	mov	r5, r0
    5bd6:	460f      	mov	r7, r1
    5bd8:	4616      	mov	r6, r2
    5bda:	a8b6      	add	r0, sp, #728	; 0x2d8
    5bdc:	f7ff ff40 	bl	5a60 <mul_by_xy0_fp6>
    5be0:	f507 7990 	add.w	r9, r7, #288	; 0x120
    5be4:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
    5be8:	4c5d      	ldr	r4, [pc, #372]	; (5d60 <mul_by_xy00z0_fp12+0x194>)
    5bea:	f8df a178 	ldr.w	sl, [pc, #376]	; 5d64 <mul_by_xy00z0_fp12+0x198>
    5bee:	f8cd a000 	str.w	sl, [sp]
    5bf2:	4623      	mov	r3, r4
    5bf4:	4642      	mov	r2, r8
    5bf6:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
    5bfa:	a80e      	add	r0, sp, #56	; 0x38
    5bfc:	f7ff fad2 	bl	51a4 <mul_mont_384x>
    5c00:	f8cd a000 	str.w	sl, [sp]
    5c04:	4623      	mov	r3, r4
    5c06:	4642      	mov	r2, r8
    5c08:	f507 71c0 	add.w	r1, r7, #384	; 0x180
    5c0c:	a89e      	add	r0, sp, #632	; 0x278
    5c0e:	f7ff fac9 	bl	51a4 <mul_mont_384x>
    5c12:	f8cd a000 	str.w	sl, [sp]
    5c16:	4623      	mov	r3, r4
    5c18:	4642      	mov	r2, r8
    5c1a:	4649      	mov	r1, r9
    5c1c:	a886      	add	r0, sp, #536	; 0x218
    5c1e:	f7ff fac1 	bl	51a4 <mul_mont_384x>
    5c22:	f04f 0a0c 	mov.w	sl, #12
    5c26:	f8cd a000 	str.w	sl, [sp]
    5c2a:	4623      	mov	r3, r4
    5c2c:	aa1a      	add	r2, sp, #104	; 0x68
    5c2e:	a90e      	add	r1, sp, #56	; 0x38
    5c30:	a802      	add	r0, sp, #8
    5c32:	f7fb fa23 	bl	107c <add_mod_n>
    5c36:	f8cd a000 	str.w	sl, [sp]
    5c3a:	4623      	mov	r3, r4
    5c3c:	aa1a      	add	r2, sp, #104	; 0x68
    5c3e:	a90e      	add	r1, sp, #56	; 0x38
    5c40:	a86e      	add	r0, sp, #440	; 0x1b8
    5c42:	f7fa fd68 	bl	716 <sub_mod_n>
    5c46:	ab02      	add	r3, sp, #8
    5c48:	aa79      	add	r2, sp, #484	; 0x1e4
    5c4a:	a80e      	add	r0, sp, #56	; 0x38
    5c4c:	f853 1b04 	ldr.w	r1, [r3], #4
    5c50:	f842 1f04 	str.w	r1, [r2, #4]!
    5c54:	4283      	cmp	r3, r0
    5c56:	d1f9      	bne.n	5c4c <mul_by_xy00z0_fp12+0x80>
    5c58:	1f34      	subs	r4, r6, #4
    5c5a:	ab26      	add	r3, sp, #152	; 0x98
    5c5c:	a93e      	add	r1, sp, #248	; 0xf8
    5c5e:	f854 2f04 	ldr.w	r2, [r4, #4]!
    5c62:	f843 2b04 	str.w	r2, [r3], #4
    5c66:	428b      	cmp	r3, r1
    5c68:	d1f9      	bne.n	5c5e <mul_by_xy00z0_fp12+0x92>
    5c6a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 5d60 <mul_by_xy00z0_fp12+0x194>
    5c6e:	f04f 0b0c 	mov.w	fp, #12
    5c72:	f8cd b000 	str.w	fp, [sp]
    5c76:	4653      	mov	r3, sl
    5c78:	4642      	mov	r2, r8
    5c7a:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5c7e:	a83e      	add	r0, sp, #248	; 0xf8
    5c80:	f7fb f9fc 	bl	107c <add_mod_n>
    5c84:	f8cd b000 	str.w	fp, [sp]
    5c88:	4653      	mov	r3, sl
    5c8a:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
    5c8e:	f106 0190 	add.w	r1, r6, #144	; 0x90
    5c92:	a84a      	add	r0, sp, #296	; 0x128
    5c94:	f7fb f9f2 	bl	107c <add_mod_n>
    5c98:	f505 7490 	add.w	r4, r5, #288	; 0x120
    5c9c:	464a      	mov	r2, r9
    5c9e:	4639      	mov	r1, r7
    5ca0:	4620      	mov	r0, r4
    5ca2:	f7fe f862 	bl	3d6a <add_fp6>
    5ca6:	aa26      	add	r2, sp, #152	; 0x98
    5ca8:	4621      	mov	r1, r4
    5caa:	4620      	mov	r0, r4
    5cac:	f7ff fed8 	bl	5a60 <mul_by_xy0_fp6>
    5cb0:	aab6      	add	r2, sp, #728	; 0x2d8
    5cb2:	4621      	mov	r1, r4
    5cb4:	4620      	mov	r0, r4
    5cb6:	f7fe f8a3 	bl	3e00 <sub_fp6>
    5cba:	aa6e      	add	r2, sp, #440	; 0x1b8
    5cbc:	4621      	mov	r1, r4
    5cbe:	4620      	mov	r0, r4
    5cc0:	f7fe f89e 	bl	3e00 <sub_fp6>
    5cc4:	f8cd b000 	str.w	fp, [sp]
    5cc8:	4653      	mov	r3, sl
    5cca:	aaaa      	add	r2, sp, #680	; 0x2a8
    5ccc:	a99e      	add	r1, sp, #632	; 0x278
    5cce:	a80e      	add	r0, sp, #56	; 0x38
    5cd0:	f7fb f9d4 	bl	107c <add_mod_n>
    5cd4:	f8cd b000 	str.w	fp, [sp]
    5cd8:	4653      	mov	r3, sl
    5cda:	aaaa      	add	r2, sp, #680	; 0x2a8
    5cdc:	a99e      	add	r1, sp, #632	; 0x278
    5cde:	4608      	mov	r0, r1
    5ce0:	f7fa fd19 	bl	716 <sub_mod_n>
    5ce4:	ab0e      	add	r3, sp, #56	; 0x38
    5ce6:	aaa9      	add	r2, sp, #676	; 0x2a4
    5ce8:	a81a      	add	r0, sp, #104	; 0x68
    5cea:	f853 1b04 	ldr.w	r1, [r3], #4
    5cee:	f842 1f04 	str.w	r1, [r2, #4]!
    5cf2:	4283      	cmp	r3, r0
    5cf4:	d1f9      	bne.n	5cea <mul_by_xy00z0_fp12+0x11e>
    5cf6:	4c1a      	ldr	r4, [pc, #104]	; (5d60 <mul_by_xy00z0_fp12+0x194>)
    5cf8:	260c      	movs	r6, #12
    5cfa:	9600      	str	r6, [sp, #0]
    5cfc:	4623      	mov	r3, r4
    5cfe:	aa9e      	add	r2, sp, #632	; 0x278
    5d00:	a9b6      	add	r1, sp, #728	; 0x2d8
    5d02:	4628      	mov	r0, r5
    5d04:	f7fb f9ba 	bl	107c <add_mod_n>
    5d08:	9600      	str	r6, [sp, #0]
    5d0a:	4623      	mov	r3, r4
    5d0c:	aaaa      	add	r2, sp, #680	; 0x2a8
    5d0e:	a9c2      	add	r1, sp, #776	; 0x308
    5d10:	f105 0030 	add.w	r0, r5, #48	; 0x30
    5d14:	f7fb f9b2 	bl	107c <add_mod_n>
    5d18:	9600      	str	r6, [sp, #0]
    5d1a:	4623      	mov	r3, r4
    5d1c:	aa6e      	add	r2, sp, #440	; 0x1b8
    5d1e:	a9ce      	add	r1, sp, #824	; 0x338
    5d20:	f105 0060 	add.w	r0, r5, #96	; 0x60
    5d24:	f7fb f9aa 	bl	107c <add_mod_n>
    5d28:	9600      	str	r6, [sp, #0]
    5d2a:	4623      	mov	r3, r4
    5d2c:	aa7a      	add	r2, sp, #488	; 0x1e8
    5d2e:	a9da      	add	r1, sp, #872	; 0x368
    5d30:	f105 0090 	add.w	r0, r5, #144	; 0x90
    5d34:	f7fb f9a2 	bl	107c <add_mod_n>
    5d38:	9600      	str	r6, [sp, #0]
    5d3a:	4623      	mov	r3, r4
    5d3c:	aa86      	add	r2, sp, #536	; 0x218
    5d3e:	a9e6      	add	r1, sp, #920	; 0x398
    5d40:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
    5d44:	f7fb f99a 	bl	107c <add_mod_n>
    5d48:	9600      	str	r6, [sp, #0]
    5d4a:	4623      	mov	r3, r4
    5d4c:	aa92      	add	r2, sp, #584	; 0x248
    5d4e:	a9f2      	add	r1, sp, #968	; 0x3c8
    5d50:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
    5d54:	f7fb f992 	bl	107c <add_mod_n>
    5d58:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
    5d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d60:	0001ade8 	.word	0x0001ade8
    5d64:	fffcfffd 	.word	0xfffcfffd

00005d68 <blst_fp12_mul_by_xy00z0>:
    5d68:	b508      	push	{r3, lr}
    5d6a:	f7ff ff2f 	bl	5bcc <mul_by_xy00z0_fp12>
    5d6e:	bd08      	pop	{r3, pc}

00005d70 <post_add_n_dbl>:
    5d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d74:	b0c8      	sub	sp, #288	; 0x120
    5d76:	4604      	mov	r4, r0
    5d78:	4617      	mov	r7, r2
    5d7a:	4698      	mov	r8, r3
    5d7c:	f501 7590 	add.w	r5, r1, #288	; 0x120
    5d80:	4668      	mov	r0, sp
    5d82:	f7fb f835 	bl	df0 <post_line_by_Px2>
    5d86:	466a      	mov	r2, sp
    5d88:	4621      	mov	r1, r4
    5d8a:	4620      	mov	r0, r4
    5d8c:	f7ff ff1e 	bl	5bcc <mul_by_xy00z0_fp12>
    5d90:	f108 36ff 	add.w	r6, r8, #4294967295
    5d94:	f1b8 0f00 	cmp.w	r8, #0
    5d98:	d013      	beq.n	5dc2 <post_add_n_dbl+0x52>
    5d9a:	4621      	mov	r1, r4
    5d9c:	4620      	mov	r0, r4
    5d9e:	f7ff fd95 	bl	58cc <sqr_fp12>
    5da2:	4629      	mov	r1, r5
    5da4:	463a      	mov	r2, r7
    5da6:	f505 7590 	add.w	r5, r5, #288	; 0x120
    5daa:	4668      	mov	r0, sp
    5dac:	f7fb f820 	bl	df0 <post_line_by_Px2>
    5db0:	466a      	mov	r2, sp
    5db2:	4621      	mov	r1, r4
    5db4:	4620      	mov	r0, r4
    5db6:	f7ff ff09 	bl	5bcc <mul_by_xy00z0_fp12>
    5dba:	3e01      	subs	r6, #1
    5dbc:	f1b6 3fff 	cmp.w	r6, #4294967295
    5dc0:	d1eb      	bne.n	5d9a <post_add_n_dbl+0x2a>
    5dc2:	b048      	add	sp, #288	; 0x120
    5dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005dc8 <miller_loop_lines>:
    5dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dcc:	b0e2      	sub	sp, #392	; 0x188
    5dce:	4605      	mov	r5, r0
    5dd0:	460e      	mov	r6, r1
    5dd2:	4614      	mov	r4, r2
    5dd4:	4f32      	ldr	r7, [pc, #200]	; (5ea0 <miller_loop_lines+0xd8>)
    5dd6:	f04f 080c 	mov.w	r8, #12
    5dda:	f8cd 8000 	str.w	r8, [sp]
    5dde:	463b      	mov	r3, r7
    5de0:	4611      	mov	r1, r2
    5de2:	a84a      	add	r0, sp, #296	; 0x128
    5de4:	f7fb f94a 	bl	107c <add_mod_n>
    5de8:	f8cd 8000 	str.w	r8, [sp]
    5dec:	463b      	mov	r3, r7
    5dee:	2201      	movs	r2, #1
    5df0:	a94a      	add	r1, sp, #296	; 0x128
    5df2:	4608      	mov	r0, r1
    5df4:	f7fc fd44 	bl	2880 <cneg_mod_n>
    5df8:	f104 0130 	add.w	r1, r4, #48	; 0x30
    5dfc:	f8cd 8000 	str.w	r8, [sp]
    5e00:	463b      	mov	r3, r7
    5e02:	460a      	mov	r2, r1
    5e04:	a856      	add	r0, sp, #344	; 0x158
    5e06:	f7fb f939 	bl	107c <add_mod_n>
    5e0a:	aa4a      	add	r2, sp, #296	; 0x128
    5e0c:	4631      	mov	r1, r6
    5e0e:	a802      	add	r0, sp, #8
    5e10:	f7fa ffee 	bl	df0 <post_line_by_Px2>
    5e14:	462b      	mov	r3, r5
    5e16:	f505 7110 	add.w	r1, r5, #576	; 0x240
    5e1a:	2200      	movs	r2, #0
    5e1c:	f843 2b04 	str.w	r2, [r3], #4
    5e20:	428b      	cmp	r3, r1
    5e22:	d1fb      	bne.n	5e1c <miller_loop_lines+0x54>
    5e24:	ab01      	add	r3, sp, #4
    5e26:	1f2a      	subs	r2, r5, #4
    5e28:	a831      	add	r0, sp, #196	; 0xc4
    5e2a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    5e2e:	f842 1f04 	str.w	r1, [r2, #4]!
    5e32:	4283      	cmp	r3, r0
    5e34:	d1f9      	bne.n	5e2a <miller_loop_lines+0x62>
    5e36:	ab31      	add	r3, sp, #196	; 0xc4
    5e38:	f505 72be 	add.w	r2, r5, #380	; 0x17c
    5e3c:	a949      	add	r1, sp, #292	; 0x124
    5e3e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    5e42:	f842 4f04 	str.w	r4, [r2, #4]!
    5e46:	428b      	cmp	r3, r1
    5e48:	d1f9      	bne.n	5e3e <miller_loop_lines+0x76>
    5e4a:	2302      	movs	r3, #2
    5e4c:	aa4a      	add	r2, sp, #296	; 0x128
    5e4e:	f506 7190 	add.w	r1, r6, #288	; 0x120
    5e52:	4628      	mov	r0, r5
    5e54:	f7ff ff8c 	bl	5d70 <post_add_n_dbl>
    5e58:	2303      	movs	r3, #3
    5e5a:	aa4a      	add	r2, sp, #296	; 0x128
    5e5c:	f506 6190 	add.w	r1, r6, #1152	; 0x480
    5e60:	4628      	mov	r0, r5
    5e62:	f7ff ff85 	bl	5d70 <post_add_n_dbl>
    5e66:	2309      	movs	r3, #9
    5e68:	aa4a      	add	r2, sp, #296	; 0x128
    5e6a:	f506 6110 	add.w	r1, r6, #2304	; 0x900
    5e6e:	4628      	mov	r0, r5
    5e70:	f7ff ff7e 	bl	5d70 <post_add_n_dbl>
    5e74:	2320      	movs	r3, #32
    5e76:	aa4a      	add	r2, sp, #296	; 0x128
    5e78:	f506 51a2 	add.w	r1, r6, #5184	; 0x1440
    5e7c:	4628      	mov	r0, r5
    5e7e:	f7ff ff77 	bl	5d70 <post_add_n_dbl>
    5e82:	2310      	movs	r3, #16
    5e84:	aa4a      	add	r2, sp, #296	; 0x128
    5e86:	f506 5165 	add.w	r1, r6, #14656	; 0x3940
    5e8a:	3120      	adds	r1, #32
    5e8c:	4628      	mov	r0, r5
    5e8e:	f7ff ff6f 	bl	5d70 <post_add_n_dbl>
    5e92:	4628      	mov	r0, r5
    5e94:	f7fd ff62 	bl	3d5c <conjugate_fp12>
    5e98:	b062      	add	sp, #392	; 0x188
    5e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e9e:	bf00      	nop
    5ea0:	0001ade8 	.word	0x0001ade8

00005ea4 <blst_miller_loop_lines>:
    5ea4:	b508      	push	{r3, lr}
    5ea6:	f7ff ff8f 	bl	5dc8 <miller_loop_lines>
    5eaa:	bd08      	pop	{r3, pc}

00005eac <sqr_n_mul_mont_383>:
    5eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5eb0:	b082      	sub	sp, #8
    5eb2:	4605      	mov	r5, r0
    5eb4:	461e      	mov	r6, r3
    5eb6:	9f08      	ldr	r7, [sp, #32]
    5eb8:	b182      	cbz	r2, 5edc <sqr_n_mul_mont_383+0x30>
    5eba:	1e54      	subs	r4, r2, #1
    5ebc:	f04f 080c 	mov.w	r8, #12
    5ec0:	e000      	b.n	5ec4 <sqr_n_mul_mont_383+0x18>
    5ec2:	4629      	mov	r1, r5
    5ec4:	f8cd 8004 	str.w	r8, [sp, #4]
    5ec8:	9700      	str	r7, [sp, #0]
    5eca:	4633      	mov	r3, r6
    5ecc:	460a      	mov	r2, r1
    5ece:	4628      	mov	r0, r5
    5ed0:	f7fd fb52 	bl	3578 <mul_mont_nonred_n>
    5ed4:	3c01      	subs	r4, #1
    5ed6:	f1b4 3fff 	cmp.w	r4, #4294967295
    5eda:	d1f2      	bne.n	5ec2 <sqr_n_mul_mont_383+0x16>
    5edc:	230c      	movs	r3, #12
    5ede:	9301      	str	r3, [sp, #4]
    5ee0:	9700      	str	r7, [sp, #0]
    5ee2:	4633      	mov	r3, r6
    5ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ee6:	4629      	mov	r1, r5
    5ee8:	4628      	mov	r0, r5
    5eea:	f7fa fe1e 	bl	b2a <mul_mont_n>
    5eee:	b002      	add	sp, #8
    5ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005ef4 <flt_reciprocal_fp>:
    5ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ef8:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    5efc:	9003      	str	r0, [sp, #12]
    5efe:	1f0b      	subs	r3, r1, #4
    5f00:	aa0f      	add	r2, sp, #60	; 0x3c
    5f02:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5f06:	f853 1f04 	ldr.w	r1, [r3, #4]!
    5f0a:	f842 1f04 	str.w	r1, [r2, #4]!
    5f0e:	4283      	cmp	r3, r0
    5f10:	d1f9      	bne.n	5f06 <flt_reciprocal_fp+0x12>
    5f12:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 6200 <flt_reciprocal_fp+0x30c>
    5f16:	270c      	movs	r7, #12
    5f18:	9701      	str	r7, [sp, #4]
    5f1a:	4eb8      	ldr	r6, [pc, #736]	; (61fc <flt_reciprocal_fp+0x308>)
    5f1c:	9600      	str	r6, [sp, #0]
    5f1e:	465b      	mov	r3, fp
    5f20:	aa10      	add	r2, sp, #64	; 0x40
    5f22:	4611      	mov	r1, r2
    5f24:	a804      	add	r0, sp, #16
    5f26:	f7fa fe00 	bl	b2a <mul_mont_n>
    5f2a:	ad70      	add	r5, sp, #448	; 0x1c0
    5f2c:	9701      	str	r7, [sp, #4]
    5f2e:	9600      	str	r6, [sp, #0]
    5f30:	465b      	mov	r3, fp
    5f32:	aa10      	add	r2, sp, #64	; 0x40
    5f34:	a904      	add	r1, sp, #16
    5f36:	4628      	mov	r0, r5
    5f38:	f7fa fdf7 	bl	b2a <mul_mont_n>
    5f3c:	ac40      	add	r4, sp, #256	; 0x100
    5f3e:	9701      	str	r7, [sp, #4]
    5f40:	9600      	str	r6, [sp, #0]
    5f42:	465b      	mov	r3, fp
    5f44:	aa04      	add	r2, sp, #16
    5f46:	4611      	mov	r1, r2
    5f48:	4620      	mov	r0, r4
    5f4a:	f7fa fdee 	bl	b2a <mul_mont_n>
    5f4e:	9701      	str	r7, [sp, #4]
    5f50:	9600      	str	r6, [sp, #0]
    5f52:	465b      	mov	r3, fp
    5f54:	aa04      	add	r2, sp, #16
    5f56:	4629      	mov	r1, r5
    5f58:	a81c      	add	r0, sp, #112	; 0x70
    5f5a:	f7fa fde6 	bl	b2a <mul_mont_n>
    5f5e:	9701      	str	r7, [sp, #4]
    5f60:	9600      	str	r6, [sp, #0]
    5f62:	465b      	mov	r3, fp
    5f64:	462a      	mov	r2, r5
    5f66:	4621      	mov	r1, r4
    5f68:	a858      	add	r0, sp, #352	; 0x160
    5f6a:	f7fa fdde 	bl	b2a <mul_mont_n>
    5f6e:	9701      	str	r7, [sp, #4]
    5f70:	9600      	str	r6, [sp, #0]
    5f72:	465b      	mov	r3, fp
    5f74:	4622      	mov	r2, r4
    5f76:	a91c      	add	r1, sp, #112	; 0x70
    5f78:	a87c      	add	r0, sp, #496	; 0x1f0
    5f7a:	f7fa fdd6 	bl	b2a <mul_mont_n>
    5f7e:	9701      	str	r7, [sp, #4]
    5f80:	9600      	str	r6, [sp, #0]
    5f82:	465b      	mov	r3, fp
    5f84:	4622      	mov	r2, r4
    5f86:	a958      	add	r1, sp, #352	; 0x160
    5f88:	a8a0      	add	r0, sp, #640	; 0x280
    5f8a:	f7fa fdce 	bl	b2a <mul_mont_n>
    5f8e:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
    5f92:	9701      	str	r7, [sp, #4]
    5f94:	9600      	str	r6, [sp, #0]
    5f96:	465b      	mov	r3, fp
    5f98:	4622      	mov	r2, r4
    5f9a:	a97c      	add	r1, sp, #496	; 0x1f0
    5f9c:	4640      	mov	r0, r8
    5f9e:	f7fa fdc4 	bl	b2a <mul_mont_n>
    5fa2:	f50d 79c8 	add.w	r9, sp, #400	; 0x190
    5fa6:	9701      	str	r7, [sp, #4]
    5fa8:	9600      	str	r6, [sp, #0]
    5faa:	465b      	mov	r3, fp
    5fac:	4622      	mov	r2, r4
    5fae:	a9a0      	add	r1, sp, #640	; 0x280
    5fb0:	4648      	mov	r0, r9
    5fb2:	f7fa fdba 	bl	b2a <mul_mont_n>
    5fb6:	9701      	str	r7, [sp, #4]
    5fb8:	9600      	str	r6, [sp, #0]
    5fba:	465b      	mov	r3, fp
    5fbc:	4622      	mov	r2, r4
    5fbe:	4641      	mov	r1, r8
    5fc0:	a8b8      	add	r0, sp, #736	; 0x2e0
    5fc2:	f7fa fdb2 	bl	b2a <mul_mont_n>
    5fc6:	9701      	str	r7, [sp, #4]
    5fc8:	9600      	str	r6, [sp, #0]
    5fca:	465b      	mov	r3, fp
    5fcc:	4622      	mov	r2, r4
    5fce:	4649      	mov	r1, r9
    5fd0:	a888      	add	r0, sp, #544	; 0x220
    5fd2:	f7fa fdaa 	bl	b2a <mul_mont_n>
    5fd6:	9701      	str	r7, [sp, #4]
    5fd8:	9600      	str	r6, [sp, #0]
    5fda:	465b      	mov	r3, fp
    5fdc:	4622      	mov	r2, r4
    5fde:	a9b8      	add	r1, sp, #736	; 0x2e0
    5fe0:	a828      	add	r0, sp, #160	; 0xa0
    5fe2:	f7fa fda2 	bl	b2a <mul_mont_n>
    5fe6:	9701      	str	r7, [sp, #4]
    5fe8:	9600      	str	r6, [sp, #0]
    5fea:	465b      	mov	r3, fp
    5fec:	4622      	mov	r2, r4
    5fee:	a988      	add	r1, sp, #544	; 0x220
    5ff0:	a894      	add	r0, sp, #592	; 0x250
    5ff2:	f7fa fd9a 	bl	b2a <mul_mont_n>
    5ff6:	9701      	str	r7, [sp, #4]
    5ff8:	9600      	str	r6, [sp, #0]
    5ffa:	465b      	mov	r3, fp
    5ffc:	4642      	mov	r2, r8
    5ffe:	4641      	mov	r1, r8
    6000:	a804      	add	r0, sp, #16
    6002:	f7fa fd92 	bl	b2a <mul_mont_n>
    6006:	9701      	str	r7, [sp, #4]
    6008:	9600      	str	r6, [sp, #0]
    600a:	465b      	mov	r3, fp
    600c:	4622      	mov	r2, r4
    600e:	a994      	add	r1, sp, #592	; 0x250
    6010:	a8ac      	add	r0, sp, #688	; 0x2b0
    6012:	f7fa fd8a 	bl	b2a <mul_mont_n>
    6016:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    601a:	9701      	str	r7, [sp, #4]
    601c:	9600      	str	r6, [sp, #0]
    601e:	465b      	mov	r3, fp
    6020:	462a      	mov	r2, r5
    6022:	a904      	add	r1, sp, #16
    6024:	4650      	mov	r0, sl
    6026:	f7fa fd80 	bl	b2a <mul_mont_n>
    602a:	9701      	str	r7, [sp, #4]
    602c:	9600      	str	r6, [sp, #0]
    602e:	465b      	mov	r3, fp
    6030:	aa1c      	add	r2, sp, #112	; 0x70
    6032:	a904      	add	r1, sp, #16
    6034:	4620      	mov	r0, r4
    6036:	f7fa fd78 	bl	b2a <mul_mont_n>
    603a:	abb8      	add	r3, sp, #736	; 0x2e0
    603c:	9301      	str	r3, [sp, #4]
    603e:	9600      	str	r6, [sp, #0]
    6040:	465b      	mov	r3, fp
    6042:	463a      	mov	r2, r7
    6044:	a904      	add	r1, sp, #16
    6046:	4608      	mov	r0, r1
    6048:	f7ff ff30 	bl	5eac <sqr_n_mul_mont_383>
    604c:	f8cd 9004 	str.w	r9, [sp, #4]
    6050:	9600      	str	r6, [sp, #0]
    6052:	465b      	mov	r3, fp
    6054:	2207      	movs	r2, #7
    6056:	a904      	add	r1, sp, #16
    6058:	4608      	mov	r0, r1
    605a:	f7ff ff27 	bl	5eac <sqr_n_mul_mont_383>
    605e:	ab1c      	add	r3, sp, #112	; 0x70
    6060:	9301      	str	r3, [sp, #4]
    6062:	9600      	str	r6, [sp, #0]
    6064:	465b      	mov	r3, fp
    6066:	2204      	movs	r2, #4
    6068:	a904      	add	r1, sp, #16
    606a:	4608      	mov	r0, r1
    606c:	f7ff ff1e 	bl	5eac <sqr_n_mul_mont_383>
    6070:	ab58      	add	r3, sp, #352	; 0x160
    6072:	9301      	str	r3, [sp, #4]
    6074:	9600      	str	r6, [sp, #0]
    6076:	465b      	mov	r3, fp
    6078:	2206      	movs	r2, #6
    607a:	a904      	add	r1, sp, #16
    607c:	4608      	mov	r0, r1
    607e:	f7ff ff15 	bl	5eac <sqr_n_mul_mont_383>
    6082:	ab94      	add	r3, sp, #592	; 0x250
    6084:	9301      	str	r3, [sp, #4]
    6086:	9600      	str	r6, [sp, #0]
    6088:	465b      	mov	r3, fp
    608a:	2207      	movs	r2, #7
    608c:	a904      	add	r1, sp, #16
    608e:	4608      	mov	r0, r1
    6090:	f7ff ff0c 	bl	5eac <sqr_n_mul_mont_383>
    6094:	9401      	str	r4, [sp, #4]
    6096:	9600      	str	r6, [sp, #0]
    6098:	465b      	mov	r3, fp
    609a:	2205      	movs	r2, #5
    609c:	a904      	add	r1, sp, #16
    609e:	4608      	mov	r0, r1
    60a0:	f7ff ff04 	bl	5eac <sqr_n_mul_mont_383>
    60a4:	9501      	str	r5, [sp, #4]
    60a6:	9600      	str	r6, [sp, #0]
    60a8:	465b      	mov	r3, fp
    60aa:	2202      	movs	r2, #2
    60ac:	a904      	add	r1, sp, #16
    60ae:	4608      	mov	r0, r1
    60b0:	f7ff fefc 	bl	5eac <sqr_n_mul_mont_383>
    60b4:	f8cd 8004 	str.w	r8, [sp, #4]
    60b8:	9600      	str	r6, [sp, #0]
    60ba:	465b      	mov	r3, fp
    60bc:	2206      	movs	r2, #6
    60be:	a904      	add	r1, sp, #16
    60c0:	4608      	mov	r0, r1
    60c2:	f7ff fef3 	bl	5eac <sqr_n_mul_mont_383>
    60c6:	f8cd 8004 	str.w	r8, [sp, #4]
    60ca:	9600      	str	r6, [sp, #0]
    60cc:	465b      	mov	r3, fp
    60ce:	2206      	movs	r2, #6
    60d0:	a904      	add	r1, sp, #16
    60d2:	4608      	mov	r0, r1
    60d4:	f7ff feea 	bl	5eac <sqr_n_mul_mont_383>
    60d8:	ab7c      	add	r3, sp, #496	; 0x1f0
    60da:	9301      	str	r3, [sp, #4]
    60dc:	9600      	str	r6, [sp, #0]
    60de:	465b      	mov	r3, fp
    60e0:	2206      	movs	r2, #6
    60e2:	a904      	add	r1, sp, #16
    60e4:	4608      	mov	r0, r1
    60e6:	f7ff fee1 	bl	5eac <sqr_n_mul_mont_383>
    60ea:	9501      	str	r5, [sp, #4]
    60ec:	9600      	str	r6, [sp, #0]
    60ee:	465b      	mov	r3, fp
    60f0:	2203      	movs	r2, #3
    60f2:	a904      	add	r1, sp, #16
    60f4:	4608      	mov	r0, r1
    60f6:	f7ff fed9 	bl	5eac <sqr_n_mul_mont_383>
    60fa:	f8cd 8004 	str.w	r8, [sp, #4]
    60fe:	9600      	str	r6, [sp, #0]
    6100:	465b      	mov	r3, fp
    6102:	2207      	movs	r2, #7
    6104:	a904      	add	r1, sp, #16
    6106:	4608      	mov	r0, r1
    6108:	f7ff fed0 	bl	5eac <sqr_n_mul_mont_383>
    610c:	f8cd 8004 	str.w	r8, [sp, #4]
    6110:	9600      	str	r6, [sp, #0]
    6112:	465b      	mov	r3, fp
    6114:	2204      	movs	r2, #4
    6116:	a904      	add	r1, sp, #16
    6118:	4608      	mov	r0, r1
    611a:	f7ff fec7 	bl	5eac <sqr_n_mul_mont_383>
    611e:	f8cd 9004 	str.w	r9, [sp, #4]
    6122:	9600      	str	r6, [sp, #0]
    6124:	465b      	mov	r3, fp
    6126:	2206      	movs	r2, #6
    6128:	a904      	add	r1, sp, #16
    612a:	4608      	mov	r0, r1
    612c:	f7ff febe 	bl	5eac <sqr_n_mul_mont_383>
    6130:	abac      	add	r3, sp, #688	; 0x2b0
    6132:	9301      	str	r3, [sp, #4]
    6134:	9600      	str	r6, [sp, #0]
    6136:	465b      	mov	r3, fp
    6138:	2206      	movs	r2, #6
    613a:	a904      	add	r1, sp, #16
    613c:	4608      	mov	r0, r1
    613e:	f7ff feb5 	bl	5eac <sqr_n_mul_mont_383>
    6142:	ab10      	add	r3, sp, #64	; 0x40
    6144:	9301      	str	r3, [sp, #4]
    6146:	9600      	str	r6, [sp, #0]
    6148:	465b      	mov	r3, fp
    614a:	2203      	movs	r2, #3
    614c:	a904      	add	r1, sp, #16
    614e:	4608      	mov	r0, r1
    6150:	f7ff feac 	bl	5eac <sqr_n_mul_mont_383>
    6154:	f8cd 8004 	str.w	r8, [sp, #4]
    6158:	9600      	str	r6, [sp, #0]
    615a:	465b      	mov	r3, fp
    615c:	2208      	movs	r2, #8
    615e:	a904      	add	r1, sp, #16
    6160:	4608      	mov	r0, r1
    6162:	f7ff fea3 	bl	5eac <sqr_n_mul_mont_383>
    6166:	ab94      	add	r3, sp, #592	; 0x250
    6168:	9301      	str	r3, [sp, #4]
    616a:	9600      	str	r6, [sp, #0]
    616c:	465b      	mov	r3, fp
    616e:	2207      	movs	r2, #7
    6170:	a904      	add	r1, sp, #16
    6172:	4608      	mov	r0, r1
    6174:	f7ff fe9a 	bl	5eac <sqr_n_mul_mont_383>
    6178:	aba0      	add	r3, sp, #640	; 0x280
    617a:	9301      	str	r3, [sp, #4]
    617c:	9600      	str	r6, [sp, #0]
    617e:	465b      	mov	r3, fp
    6180:	2205      	movs	r2, #5
    6182:	a904      	add	r1, sp, #16
    6184:	4608      	mov	r0, r1
    6186:	f7ff fe91 	bl	5eac <sqr_n_mul_mont_383>
    618a:	f8cd 8004 	str.w	r8, [sp, #4]
    618e:	9600      	str	r6, [sp, #0]
    6190:	465b      	mov	r3, fp
    6192:	2206      	movs	r2, #6
    6194:	a904      	add	r1, sp, #16
    6196:	4608      	mov	r0, r1
    6198:	f7ff fe88 	bl	5eac <sqr_n_mul_mont_383>
    619c:	f8cd a004 	str.w	sl, [sp, #4]
    61a0:	9600      	str	r6, [sp, #0]
    61a2:	465b      	mov	r3, fp
    61a4:	2206      	movs	r2, #6
    61a6:	a904      	add	r1, sp, #16
    61a8:	4608      	mov	r0, r1
    61aa:	f7ff fe7f 	bl	5eac <sqr_n_mul_mont_383>
    61ae:	ab7c      	add	r3, sp, #496	; 0x1f0
    61b0:	9301      	str	r3, [sp, #4]
    61b2:	9600      	str	r6, [sp, #0]
    61b4:	465b      	mov	r3, fp
    61b6:	2204      	movs	r2, #4
    61b8:	a904      	add	r1, sp, #16
    61ba:	4608      	mov	r0, r1
    61bc:	f7ff fe76 	bl	5eac <sqr_n_mul_mont_383>
    61c0:	f8cd a004 	str.w	sl, [sp, #4]
    61c4:	9600      	str	r6, [sp, #0]
    61c6:	465b      	mov	r3, fp
    61c8:	2208      	movs	r2, #8
    61ca:	a904      	add	r1, sp, #16
    61cc:	4608      	mov	r0, r1
    61ce:	f7ff fe6d 	bl	5eac <sqr_n_mul_mont_383>
    61d2:	f8cd 8004 	str.w	r8, [sp, #4]
    61d6:	9600      	str	r6, [sp, #0]
    61d8:	465b      	mov	r3, fp
    61da:	2204      	movs	r2, #4
    61dc:	a904      	add	r1, sp, #16
    61de:	4608      	mov	r0, r1
    61e0:	f7ff fe64 	bl	5eac <sqr_n_mul_mont_383>
    61e4:	ab94      	add	r3, sp, #592	; 0x250
    61e6:	9301      	str	r3, [sp, #4]
    61e8:	9600      	str	r6, [sp, #0]
    61ea:	465b      	mov	r3, fp
    61ec:	2207      	movs	r2, #7
    61ee:	a904      	add	r1, sp, #16
    61f0:	4608      	mov	r0, r1
    61f2:	f7ff fe5b 	bl	5eac <sqr_n_mul_mont_383>
    61f6:	ab88      	add	r3, sp, #544	; 0x220
    61f8:	9301      	str	r3, [sp, #4]
    61fa:	e003      	b.n	6204 <flt_reciprocal_fp+0x310>
    61fc:	fffcfffd 	.word	0xfffcfffd
    6200:	0001ade8 	.word	0x0001ade8
    6204:	9600      	str	r6, [sp, #0]
    6206:	465b      	mov	r3, fp
    6208:	2209      	movs	r2, #9
    620a:	a904      	add	r1, sp, #16
    620c:	4608      	mov	r0, r1
    620e:	f7ff fe4d 	bl	5eac <sqr_n_mul_mont_383>
    6212:	9501      	str	r5, [sp, #4]
    6214:	9600      	str	r6, [sp, #0]
    6216:	465b      	mov	r3, fp
    6218:	2202      	movs	r2, #2
    621a:	a904      	add	r1, sp, #16
    621c:	4608      	mov	r0, r1
    621e:	f7ff fe45 	bl	5eac <sqr_n_mul_mont_383>
    6222:	ab58      	add	r3, sp, #352	; 0x160
    6224:	9301      	str	r3, [sp, #4]
    6226:	9600      	str	r6, [sp, #0]
    6228:	465b      	mov	r3, fp
    622a:	2205      	movs	r2, #5
    622c:	a904      	add	r1, sp, #16
    622e:	4608      	mov	r0, r1
    6230:	f7ff fe3c 	bl	5eac <sqr_n_mul_mont_383>
    6234:	ab1c      	add	r3, sp, #112	; 0x70
    6236:	9301      	str	r3, [sp, #4]
    6238:	9600      	str	r6, [sp, #0]
    623a:	465b      	mov	r3, fp
    623c:	2207      	movs	r2, #7
    623e:	a904      	add	r1, sp, #16
    6240:	4608      	mov	r0, r1
    6242:	f7ff fe33 	bl	5eac <sqr_n_mul_mont_383>
    6246:	ab7c      	add	r3, sp, #496	; 0x1f0
    6248:	9301      	str	r3, [sp, #4]
    624a:	9600      	str	r6, [sp, #0]
    624c:	465b      	mov	r3, fp
    624e:	2207      	movs	r2, #7
    6250:	a904      	add	r1, sp, #16
    6252:	4608      	mov	r0, r1
    6254:	f7ff fe2a 	bl	5eac <sqr_n_mul_mont_383>
    6258:	ab94      	add	r3, sp, #592	; 0x250
    625a:	9301      	str	r3, [sp, #4]
    625c:	9600      	str	r6, [sp, #0]
    625e:	465b      	mov	r3, fp
    6260:	2206      	movs	r2, #6
    6262:	a904      	add	r1, sp, #16
    6264:	4608      	mov	r0, r1
    6266:	f7ff fe21 	bl	5eac <sqr_n_mul_mont_383>
    626a:	f8cd a004 	str.w	sl, [sp, #4]
    626e:	9600      	str	r6, [sp, #0]
    6270:	465b      	mov	r3, fp
    6272:	2205      	movs	r2, #5
    6274:	a904      	add	r1, sp, #16
    6276:	4608      	mov	r0, r1
    6278:	f7ff fe18 	bl	5eac <sqr_n_mul_mont_383>
    627c:	ab88      	add	r3, sp, #544	; 0x220
    627e:	9301      	str	r3, [sp, #4]
    6280:	9600      	str	r6, [sp, #0]
    6282:	465b      	mov	r3, fp
    6284:	2205      	movs	r2, #5
    6286:	a904      	add	r1, sp, #16
    6288:	4608      	mov	r0, r1
    628a:	f7ff fe0f 	bl	5eac <sqr_n_mul_mont_383>
    628e:	ab88      	add	r3, sp, #544	; 0x220
    6290:	9301      	str	r3, [sp, #4]
    6292:	9600      	str	r6, [sp, #0]
    6294:	465b      	mov	r3, fp
    6296:	2205      	movs	r2, #5
    6298:	a904      	add	r1, sp, #16
    629a:	4608      	mov	r0, r1
    629c:	f7ff fe06 	bl	5eac <sqr_n_mul_mont_383>
    62a0:	f8cd 8004 	str.w	r8, [sp, #4]
    62a4:	9600      	str	r6, [sp, #0]
    62a6:	465b      	mov	r3, fp
    62a8:	2208      	movs	r2, #8
    62aa:	a904      	add	r1, sp, #16
    62ac:	4608      	mov	r0, r1
    62ae:	f7ff fdfd 	bl	5eac <sqr_n_mul_mont_383>
    62b2:	ab28      	add	r3, sp, #160	; 0xa0
    62b4:	9301      	str	r3, [sp, #4]
    62b6:	9600      	str	r6, [sp, #0]
    62b8:	465b      	mov	r3, fp
    62ba:	2207      	movs	r2, #7
    62bc:	a904      	add	r1, sp, #16
    62be:	4608      	mov	r0, r1
    62c0:	f7ff fdf4 	bl	5eac <sqr_n_mul_mont_383>
    62c4:	f8cd 9004 	str.w	r9, [sp, #4]
    62c8:	9600      	str	r6, [sp, #0]
    62ca:	465b      	mov	r3, fp
    62cc:	2209      	movs	r2, #9
    62ce:	a904      	add	r1, sp, #16
    62d0:	4608      	mov	r0, r1
    62d2:	f7ff fdeb 	bl	5eac <sqr_n_mul_mont_383>
    62d6:	f8cd 8004 	str.w	r8, [sp, #4]
    62da:	9600      	str	r6, [sp, #0]
    62dc:	465b      	mov	r3, fp
    62de:	2205      	movs	r2, #5
    62e0:	a904      	add	r1, sp, #16
    62e2:	4608      	mov	r0, r1
    62e4:	f7ff fde2 	bl	5eac <sqr_n_mul_mont_383>
    62e8:	9501      	str	r5, [sp, #4]
    62ea:	9600      	str	r6, [sp, #0]
    62ec:	465b      	mov	r3, fp
    62ee:	2203      	movs	r2, #3
    62f0:	a904      	add	r1, sp, #16
    62f2:	4608      	mov	r0, r1
    62f4:	f7ff fdda 	bl	5eac <sqr_n_mul_mont_383>
    62f8:	f8cd 9004 	str.w	r9, [sp, #4]
    62fc:	9600      	str	r6, [sp, #0]
    62fe:	465b      	mov	r3, fp
    6300:	2208      	movs	r2, #8
    6302:	a904      	add	r1, sp, #16
    6304:	4608      	mov	r0, r1
    6306:	f7ff fdd1 	bl	5eac <sqr_n_mul_mont_383>
    630a:	9501      	str	r5, [sp, #4]
    630c:	9600      	str	r6, [sp, #0]
    630e:	465b      	mov	r3, fp
    6310:	2203      	movs	r2, #3
    6312:	a904      	add	r1, sp, #16
    6314:	4608      	mov	r0, r1
    6316:	f7ff fdc9 	bl	5eac <sqr_n_mul_mont_383>
    631a:	ab7c      	add	r3, sp, #496	; 0x1f0
    631c:	9301      	str	r3, [sp, #4]
    631e:	9600      	str	r6, [sp, #0]
    6320:	465b      	mov	r3, fp
    6322:	2207      	movs	r2, #7
    6324:	a904      	add	r1, sp, #16
    6326:	4608      	mov	r0, r1
    6328:	f7ff fdc0 	bl	5eac <sqr_n_mul_mont_383>
    632c:	f8cd 9004 	str.w	r9, [sp, #4]
    6330:	9600      	str	r6, [sp, #0]
    6332:	465b      	mov	r3, fp
    6334:	2209      	movs	r2, #9
    6336:	a904      	add	r1, sp, #16
    6338:	4608      	mov	r0, r1
    633a:	f7ff fdb7 	bl	5eac <sqr_n_mul_mont_383>
    633e:	ab28      	add	r3, sp, #160	; 0xa0
    6340:	9301      	str	r3, [sp, #4]
    6342:	9600      	str	r6, [sp, #0]
    6344:	465b      	mov	r3, fp
    6346:	2206      	movs	r2, #6
    6348:	a904      	add	r1, sp, #16
    634a:	4608      	mov	r0, r1
    634c:	f7ff fdae 	bl	5eac <sqr_n_mul_mont_383>
    6350:	9401      	str	r4, [sp, #4]
    6352:	9600      	str	r6, [sp, #0]
    6354:	465b      	mov	r3, fp
    6356:	2206      	movs	r2, #6
    6358:	a904      	add	r1, sp, #16
    635a:	4608      	mov	r0, r1
    635c:	f7ff fda6 	bl	5eac <sqr_n_mul_mont_383>
    6360:	9401      	str	r4, [sp, #4]
    6362:	9600      	str	r6, [sp, #0]
    6364:	465b      	mov	r3, fp
    6366:	2205      	movs	r2, #5
    6368:	a904      	add	r1, sp, #16
    636a:	4608      	mov	r0, r1
    636c:	f7ff fd9e 	bl	5eac <sqr_n_mul_mont_383>
    6370:	9401      	str	r4, [sp, #4]
    6372:	9600      	str	r6, [sp, #0]
    6374:	465b      	mov	r3, fp
    6376:	2205      	movs	r2, #5
    6378:	a904      	add	r1, sp, #16
    637a:	4608      	mov	r0, r1
    637c:	f7ff fd96 	bl	5eac <sqr_n_mul_mont_383>
    6380:	f8cd 8004 	str.w	r8, [sp, #4]
    6384:	9600      	str	r6, [sp, #0]
    6386:	465b      	mov	r3, fp
    6388:	2204      	movs	r2, #4
    638a:	a904      	add	r1, sp, #16
    638c:	4608      	mov	r0, r1
    638e:	f7ff fd8d 	bl	5eac <sqr_n_mul_mont_383>
    6392:	9501      	str	r5, [sp, #4]
    6394:	9600      	str	r6, [sp, #0]
    6396:	465b      	mov	r3, fp
    6398:	2203      	movs	r2, #3
    639a:	a904      	add	r1, sp, #16
    639c:	4608      	mov	r0, r1
    639e:	f7ff fd85 	bl	5eac <sqr_n_mul_mont_383>
    63a2:	ab28      	add	r3, sp, #160	; 0xa0
    63a4:	9301      	str	r3, [sp, #4]
    63a6:	9600      	str	r6, [sp, #0]
    63a8:	465b      	mov	r3, fp
    63aa:	2208      	movs	r2, #8
    63ac:	a904      	add	r1, sp, #16
    63ae:	4608      	mov	r0, r1
    63b0:	f7ff fd7c 	bl	5eac <sqr_n_mul_mont_383>
    63b4:	9401      	str	r4, [sp, #4]
    63b6:	9600      	str	r6, [sp, #0]
    63b8:	465b      	mov	r3, fp
    63ba:	2207      	movs	r2, #7
    63bc:	a904      	add	r1, sp, #16
    63be:	4608      	mov	r0, r1
    63c0:	f7ff fd74 	bl	5eac <sqr_n_mul_mont_383>
    63c4:	9401      	str	r4, [sp, #4]
    63c6:	9600      	str	r6, [sp, #0]
    63c8:	465b      	mov	r3, fp
    63ca:	2205      	movs	r2, #5
    63cc:	a904      	add	r1, sp, #16
    63ce:	4608      	mov	r0, r1
    63d0:	f7ff fd6c 	bl	5eac <sqr_n_mul_mont_383>
    63d4:	9401      	str	r4, [sp, #4]
    63d6:	9600      	str	r6, [sp, #0]
    63d8:	465b      	mov	r3, fp
    63da:	2205      	movs	r2, #5
    63dc:	a904      	add	r1, sp, #16
    63de:	4608      	mov	r0, r1
    63e0:	f7ff fd64 	bl	5eac <sqr_n_mul_mont_383>
    63e4:	f8cd 9004 	str.w	r9, [sp, #4]
    63e8:	9600      	str	r6, [sp, #0]
    63ea:	465b      	mov	r3, fp
    63ec:	2204      	movs	r2, #4
    63ee:	a904      	add	r1, sp, #16
    63f0:	4608      	mov	r0, r1
    63f2:	f7ff fd5b 	bl	5eac <sqr_n_mul_mont_383>
    63f6:	ab58      	add	r3, sp, #352	; 0x160
    63f8:	9301      	str	r3, [sp, #4]
    63fa:	9600      	str	r6, [sp, #0]
    63fc:	465b      	mov	r3, fp
    63fe:	2204      	movs	r2, #4
    6400:	a904      	add	r1, sp, #16
    6402:	4608      	mov	r0, r1
    6404:	f7ff fd52 	bl	5eac <sqr_n_mul_mont_383>
    6408:	9401      	str	r4, [sp, #4]
    640a:	9600      	str	r6, [sp, #0]
    640c:	465b      	mov	r3, fp
    640e:	2207      	movs	r2, #7
    6410:	a904      	add	r1, sp, #16
    6412:	4608      	mov	r0, r1
    6414:	f7ff fd4a 	bl	5eac <sqr_n_mul_mont_383>
    6418:	f8cd a004 	str.w	sl, [sp, #4]
    641c:	9600      	str	r6, [sp, #0]
    641e:	465b      	mov	r3, fp
    6420:	2205      	movs	r2, #5
    6422:	a904      	add	r1, sp, #16
    6424:	4608      	mov	r0, r1
    6426:	f7ff fd41 	bl	5eac <sqr_n_mul_mont_383>
    642a:	ae40      	add	r6, sp, #256	; 0x100
    642c:	9601      	str	r6, [sp, #4]
    642e:	4d2c      	ldr	r5, [pc, #176]	; (64e0 <CONFIG_MAIN_STACK_SIZE+0xe0>)
    6430:	9500      	str	r5, [sp, #0]
    6432:	465b      	mov	r3, fp
    6434:	2205      	movs	r2, #5
    6436:	a904      	add	r1, sp, #16
    6438:	4608      	mov	r0, r1
    643a:	f7ff fd37 	bl	5eac <sqr_n_mul_mont_383>
    643e:	9601      	str	r6, [sp, #4]
    6440:	9500      	str	r5, [sp, #0]
    6442:	465b      	mov	r3, fp
    6444:	2205      	movs	r2, #5
    6446:	a904      	add	r1, sp, #16
    6448:	4608      	mov	r0, r1
    644a:	f7ff fd2f 	bl	5eac <sqr_n_mul_mont_383>
    644e:	9601      	str	r6, [sp, #4]
    6450:	9500      	str	r5, [sp, #0]
    6452:	465b      	mov	r3, fp
    6454:	2205      	movs	r2, #5
    6456:	a904      	add	r1, sp, #16
    6458:	4608      	mov	r0, r1
    645a:	f7ff fd27 	bl	5eac <sqr_n_mul_mont_383>
    645e:	9601      	str	r6, [sp, #4]
    6460:	9500      	str	r5, [sp, #0]
    6462:	465b      	mov	r3, fp
    6464:	2205      	movs	r2, #5
    6466:	a904      	add	r1, sp, #16
    6468:	4608      	mov	r0, r1
    646a:	f7ff fd1f 	bl	5eac <sqr_n_mul_mont_383>
    646e:	9601      	str	r6, [sp, #4]
    6470:	9500      	str	r5, [sp, #0]
    6472:	465b      	mov	r3, fp
    6474:	2205      	movs	r2, #5
    6476:	a904      	add	r1, sp, #16
    6478:	4608      	mov	r0, r1
    647a:	f7ff fd17 	bl	5eac <sqr_n_mul_mont_383>
    647e:	9601      	str	r6, [sp, #4]
    6480:	9500      	str	r5, [sp, #0]
    6482:	465b      	mov	r3, fp
    6484:	2205      	movs	r2, #5
    6486:	a904      	add	r1, sp, #16
    6488:	4608      	mov	r0, r1
    648a:	f7ff fd0f 	bl	5eac <sqr_n_mul_mont_383>
    648e:	ab34      	add	r3, sp, #208	; 0xd0
    6490:	9301      	str	r3, [sp, #4]
    6492:	9500      	str	r5, [sp, #0]
    6494:	465b      	mov	r3, fp
    6496:	2204      	movs	r2, #4
    6498:	a904      	add	r1, sp, #16
    649a:	4608      	mov	r0, r1
    649c:	f7ff fd06 	bl	5eac <sqr_n_mul_mont_383>
    64a0:	ab28      	add	r3, sp, #160	; 0xa0
    64a2:	9301      	str	r3, [sp, #4]
    64a4:	9500      	str	r5, [sp, #0]
    64a6:	465b      	mov	r3, fp
    64a8:	2206      	movs	r2, #6
    64aa:	a904      	add	r1, sp, #16
    64ac:	4608      	mov	r0, r1
    64ae:	f7ff fcfd 	bl	5eac <sqr_n_mul_mont_383>
    64b2:	ab1c      	add	r3, sp, #112	; 0x70
    64b4:	9301      	str	r3, [sp, #4]
    64b6:	9500      	str	r5, [sp, #0]
    64b8:	465b      	mov	r3, fp
    64ba:	2204      	movs	r2, #4
    64bc:	a904      	add	r1, sp, #16
    64be:	4608      	mov	r0, r1
    64c0:	f7ff fcf4 	bl	5eac <sqr_n_mul_mont_383>
    64c4:	ab10      	add	r3, sp, #64	; 0x40
    64c6:	9301      	str	r3, [sp, #4]
    64c8:	9500      	str	r5, [sp, #0]
    64ca:	465b      	mov	r3, fp
    64cc:	2203      	movs	r2, #3
    64ce:	a904      	add	r1, sp, #16
    64d0:	9803      	ldr	r0, [sp, #12]
    64d2:	f7ff fceb 	bl	5eac <sqr_n_mul_mont_383>
    64d6:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
    64da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64de:	bf00      	nop
    64e0:	fffcfffd 	.word	0xfffcfffd

000064e4 <reciprocal_fp>:
    64e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    64e8:	b09b      	sub	sp, #108	; 0x6c
    64ea:	4680      	mov	r8, r0
    64ec:	4689      	mov	r9, r1
    64ee:	4f2b      	ldr	r7, [pc, #172]	; (659c <reciprocal_fp+0xb8>)
    64f0:	4c2b      	ldr	r4, [pc, #172]	; (65a0 <reciprocal_fp+0xbc>)
    64f2:	250c      	movs	r5, #12
    64f4:	9500      	str	r5, [sp, #0]
    64f6:	f507 7322 	add.w	r3, r7, #648	; 0x288
    64fa:	4622      	mov	r2, r4
    64fc:	a802      	add	r0, sp, #8
    64fe:	f7fd ff09 	bl	4314 <ct_inverse_mod_n>
    6502:	4e28      	ldr	r6, [pc, #160]	; (65a4 <reciprocal_fp+0xc0>)
    6504:	9500      	str	r5, [sp, #0]
    6506:	4633      	mov	r3, r6
    6508:	4622      	mov	r2, r4
    650a:	a902      	add	r1, sp, #8
    650c:	4608      	mov	r0, r1
    650e:	f7fc ff0b 	bl	3328 <redc_mont_n>
    6512:	9501      	str	r5, [sp, #4]
    6514:	9600      	str	r6, [sp, #0]
    6516:	4623      	mov	r3, r4
    6518:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
    651c:	a902      	add	r1, sp, #8
    651e:	4608      	mov	r0, r1
    6520:	f7fa fb03 	bl	b2a <mul_mont_n>
    6524:	9501      	str	r5, [sp, #4]
    6526:	9600      	str	r6, [sp, #0]
    6528:	4623      	mov	r3, r4
    652a:	464a      	mov	r2, r9
    652c:	a902      	add	r1, sp, #8
    652e:	a80e      	add	r0, sp, #56	; 0x38
    6530:	f7fa fafb 	bl	b2a <mul_mont_n>
    6534:	ad0d      	add	r5, sp, #52	; 0x34
    6536:	f104 0660 	add.w	r6, r4, #96	; 0x60
    653a:	f104 0390 	add.w	r3, r4, #144	; 0x90
    653e:	4629      	mov	r1, r5
    6540:	2700      	movs	r7, #0
    6542:	f856 4b04 	ldr.w	r4, [r6], #4
    6546:	f851 0f04 	ldr.w	r0, [r1, #4]!
    654a:	4044      	eors	r4, r0
    654c:	4327      	orrs	r7, r4
    654e:	429e      	cmp	r6, r3
    6550:	d1f7      	bne.n	6542 <reciprocal_fp+0x5e>
    6552:	1e7b      	subs	r3, r7, #1
    6554:	ea23 0707 	bic.w	r7, r3, r7
    6558:	0fff      	lsrs	r7, r7, #31
    655a:	a902      	add	r1, sp, #8
    655c:	a819      	add	r0, sp, #100	; 0x64
    655e:	2300      	movs	r3, #0
    6560:	f855 2f04 	ldr.w	r2, [r5, #4]!
    6564:	4313      	orrs	r3, r2
    6566:	4285      	cmp	r5, r0
    6568:	d1fa      	bne.n	6560 <reciprocal_fp+0x7c>
    656a:	1e5a      	subs	r2, r3, #1
    656c:	ea22 0303 	bic.w	r3, r2, r3
    6570:	ea57 73d3 	orrs.w	r3, r7, r3, lsr #31
    6574:	d00c      	beq.n	6590 <reciprocal_fp+0xac>
    6576:	f1a8 0304 	sub.w	r3, r8, #4
    657a:	f108 082c 	add.w	r8, r8, #44	; 0x2c
    657e:	f851 2b04 	ldr.w	r2, [r1], #4
    6582:	f843 2f04 	str.w	r2, [r3, #4]!
    6586:	4543      	cmp	r3, r8
    6588:	d1f9      	bne.n	657e <reciprocal_fp+0x9a>
    658a:	b01b      	add	sp, #108	; 0x6c
    658c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6590:	4649      	mov	r1, r9
    6592:	4640      	mov	r0, r8
    6594:	f7ff fcae 	bl	5ef4 <flt_reciprocal_fp>
    6598:	e7f7      	b.n	658a <reciprocal_fp+0xa6>
    659a:	bf00      	nop
    659c:	0001bee0 	.word	0x0001bee0
    65a0:	0001ade8 	.word	0x0001ade8
    65a4:	fffcfffd 	.word	0xfffcfffd

000065a8 <POINTonE1_from_Jacobian>:
    65a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    65ac:	b09b      	sub	sp, #108	; 0x6c
    65ae:	4607      	mov	r7, r0
    65b0:	4689      	mov	r9, r1
    65b2:	3160      	adds	r1, #96	; 0x60
    65b4:	f109 045c 	add.w	r4, r9, #92	; 0x5c
    65b8:	f109 068c 	add.w	r6, r9, #140	; 0x8c
    65bc:	4623      	mov	r3, r4
    65be:	f04f 0800 	mov.w	r8, #0
    65c2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    65c6:	ea48 0802 	orr.w	r8, r8, r2
    65ca:	42b3      	cmp	r3, r6
    65cc:	d1f9      	bne.n	65c2 <POINTonE1_from_Jacobian+0x1a>
    65ce:	a80e      	add	r0, sp, #56	; 0x38
    65d0:	f7ff ff88 	bl	64e4 <reciprocal_fp>
    65d4:	4d23      	ldr	r5, [pc, #140]	; (6664 <POINTonE1_from_Jacobian+0xbc>)
    65d6:	f04f 0b0c 	mov.w	fp, #12
    65da:	f8cd b004 	str.w	fp, [sp, #4]
    65de:	f8df a088 	ldr.w	sl, [pc, #136]	; 6668 <POINTonE1_from_Jacobian+0xc0>
    65e2:	f8cd a000 	str.w	sl, [sp]
    65e6:	462b      	mov	r3, r5
    65e8:	aa0e      	add	r2, sp, #56	; 0x38
    65ea:	4611      	mov	r1, r2
    65ec:	a802      	add	r0, sp, #8
    65ee:	f7fa fa9c 	bl	b2a <mul_mont_n>
    65f2:	f8cd b004 	str.w	fp, [sp, #4]
    65f6:	f8cd a000 	str.w	sl, [sp]
    65fa:	462b      	mov	r3, r5
    65fc:	aa02      	add	r2, sp, #8
    65fe:	4649      	mov	r1, r9
    6600:	4638      	mov	r0, r7
    6602:	f7fa fa92 	bl	b2a <mul_mont_n>
    6606:	f8cd b004 	str.w	fp, [sp, #4]
    660a:	f8cd a000 	str.w	sl, [sp]
    660e:	462b      	mov	r3, r5
    6610:	aa0e      	add	r2, sp, #56	; 0x38
    6612:	a902      	add	r1, sp, #8
    6614:	4608      	mov	r0, r1
    6616:	f7fa fa88 	bl	b2a <mul_mont_n>
    661a:	f8cd b004 	str.w	fp, [sp, #4]
    661e:	f8cd a000 	str.w	sl, [sp]
    6622:	462b      	mov	r3, r5
    6624:	aa02      	add	r2, sp, #8
    6626:	f109 0130 	add.w	r1, r9, #48	; 0x30
    662a:	f107 0030 	add.w	r0, r7, #48	; 0x30
    662e:	f7fa fa7c 	bl	b2a <mul_mont_n>
    6632:	f108 33ff 	add.w	r3, r8, #4294967295
    6636:	ea23 0808 	bic.w	r8, r3, r8
    663a:	ea4f 78e8 	mov.w	r8, r8, asr #31
    663e:	f605 639c 	addw	r3, r5, #3740	; 0xe9c
    6642:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    6646:	f853 1f04 	ldr.w	r1, [r3, #4]!
    664a:	f854 2f04 	ldr.w	r2, [r4, #4]!
    664e:	f1b8 0f00 	cmp.w	r8, #0
    6652:	bf08      	it	eq
    6654:	460a      	moveq	r2, r1
    6656:	f840 2f04 	str.w	r2, [r0, #4]!
    665a:	42b4      	cmp	r4, r6
    665c:	d1f3      	bne.n	6646 <POINTonE1_from_Jacobian+0x9e>
    665e:	b01b      	add	sp, #108	; 0x6c
    6660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6664:	0001ade8 	.word	0x0001ade8
    6668:	fffcfffd 	.word	0xfffcfffd

0000666c <blst_p1_from_jacobian>:
    666c:	b508      	push	{r3, lr}
    666e:	f7ff ff9b 	bl	65a8 <POINTonE1_from_Jacobian>
    6672:	bd08      	pop	{r3, pc}

00006674 <blst_p1_to_affine>:
    6674:	b5f0      	push	{r4, r5, r6, r7, lr}
    6676:	b0a5      	sub	sp, #148	; 0x94
    6678:	4604      	mov	r4, r0
    667a:	f101 025c 	add.w	r2, r1, #92	; 0x5c
    667e:	4d10      	ldr	r5, [pc, #64]	; (66c0 <blst_p1_to_affine+0x4c>)
    6680:	f101 068c 	add.w	r6, r1, #140	; 0x8c
    6684:	2300      	movs	r3, #0
    6686:	f855 0b04 	ldr.w	r0, [r5], #4
    668a:	f852 7f04 	ldr.w	r7, [r2, #4]!
    668e:	4078      	eors	r0, r7
    6690:	4303      	orrs	r3, r0
    6692:	42b2      	cmp	r2, r6
    6694:	d1f7      	bne.n	6686 <blst_p1_to_affine+0x12>
    6696:	1e5a      	subs	r2, r3, #1
    6698:	ea32 0303 	bics.w	r3, r2, r3
    669c:	d50a      	bpl.n	66b4 <blst_p1_to_affine+0x40>
    669e:	1f0b      	subs	r3, r1, #4
    66a0:	1f20      	subs	r0, r4, #4
    66a2:	315c      	adds	r1, #92	; 0x5c
    66a4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    66a8:	f840 2f04 	str.w	r2, [r0, #4]!
    66ac:	428b      	cmp	r3, r1
    66ae:	d1f9      	bne.n	66a4 <blst_p1_to_affine+0x30>
    66b0:	b025      	add	sp, #148	; 0x94
    66b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66b4:	4668      	mov	r0, sp
    66b6:	f7ff ff77 	bl	65a8 <POINTonE1_from_Jacobian>
    66ba:	4669      	mov	r1, sp
    66bc:	e7ef      	b.n	669e <blst_p1_to_affine+0x2a>
    66be:	bf00      	nop
    66c0:	0001ae48 	.word	0x0001ae48

000066c4 <POINTonE1_Serialize_BE>:
    66c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66c8:	b0a4      	sub	sp, #144	; 0x90
    66ca:	4680      	mov	r8, r0
    66cc:	f101 025c 	add.w	r2, r1, #92	; 0x5c
    66d0:	4d0c      	ldr	r5, [pc, #48]	; (6704 <POINTonE1_Serialize_BE+0x40>)
    66d2:	f101 078c 	add.w	r7, r1, #140	; 0x8c
    66d6:	2400      	movs	r4, #0
    66d8:	f855 3b04 	ldr.w	r3, [r5], #4
    66dc:	f852 6f04 	ldr.w	r6, [r2, #4]!
    66e0:	4073      	eors	r3, r6
    66e2:	431c      	orrs	r4, r3
    66e4:	42ba      	cmp	r2, r7
    66e6:	d1f7      	bne.n	66d8 <POINTonE1_Serialize_BE+0x14>
    66e8:	1e63      	subs	r3, r4, #1
    66ea:	43a3      	bics	r3, r4
    66ec:	d505      	bpl.n	66fa <POINTonE1_Serialize_BE+0x36>
    66ee:	4640      	mov	r0, r8
    66f0:	f7fc fefa 	bl	34e8 <POINTonE1_affine_Serialize_BE>
    66f4:	b024      	add	sp, #144	; 0x90
    66f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66fa:	4668      	mov	r0, sp
    66fc:	f7ff ff54 	bl	65a8 <POINTonE1_from_Jacobian>
    6700:	4669      	mov	r1, sp
    6702:	e7f4      	b.n	66ee <POINTonE1_Serialize_BE+0x2a>
    6704:	0001ae48 	.word	0x0001ae48

00006708 <blst_p1_serialize>:
    6708:	b538      	push	{r3, r4, r5, lr}
    670a:	f101 025c 	add.w	r2, r1, #92	; 0x5c
    670e:	f101 048c 	add.w	r4, r1, #140	; 0x8c
    6712:	2300      	movs	r3, #0
    6714:	f852 5f04 	ldr.w	r5, [r2, #4]!
    6718:	432b      	orrs	r3, r5
    671a:	42a2      	cmp	r2, r4
    671c:	d1fa      	bne.n	6714 <blst_p1_serialize+0xc>
    671e:	1e5a      	subs	r2, r3, #1
    6720:	ea32 0303 	bics.w	r3, r2, r3
    6724:	d50a      	bpl.n	673c <blst_p1_serialize+0x34>
    6726:	1e43      	subs	r3, r0, #1
    6728:	f100 015f 	add.w	r1, r0, #95	; 0x5f
    672c:	2200      	movs	r2, #0
    672e:	f803 2f01 	strb.w	r2, [r3, #1]!
    6732:	428b      	cmp	r3, r1
    6734:	d1fb      	bne.n	672e <blst_p1_serialize+0x26>
    6736:	2340      	movs	r3, #64	; 0x40
    6738:	7003      	strb	r3, [r0, #0]
    673a:	bd38      	pop	{r3, r4, r5, pc}
    673c:	f7ff ffc2 	bl	66c4 <POINTonE1_Serialize_BE>
    6740:	e7fb      	b.n	673a <blst_p1_serialize+0x32>

00006742 <blst_p1_compress>:
    6742:	b5f0      	push	{r4, r5, r6, r7, lr}
    6744:	b0a5      	sub	sp, #148	; 0x94
    6746:	4605      	mov	r5, r0
    6748:	f101 065c 	add.w	r6, r1, #92	; 0x5c
    674c:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    6750:	4633      	mov	r3, r6
    6752:	2200      	movs	r2, #0
    6754:	f853 4f04 	ldr.w	r4, [r3, #4]!
    6758:	4322      	orrs	r2, r4
    675a:	4283      	cmp	r3, r0
    675c:	d1fa      	bne.n	6754 <blst_p1_compress+0x12>
    675e:	1e53      	subs	r3, r2, #1
    6760:	ea23 0202 	bic.w	r2, r3, r2
    6764:	0fd2      	lsrs	r2, r2, #31
    6766:	d00b      	beq.n	6780 <blst_p1_compress+0x3e>
    6768:	1e6b      	subs	r3, r5, #1
    676a:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    676e:	2200      	movs	r2, #0
    6770:	f803 2f01 	strb.w	r2, [r3, #1]!
    6774:	428b      	cmp	r3, r1
    6776:	d1fb      	bne.n	6770 <blst_p1_compress+0x2e>
    6778:	23c0      	movs	r3, #192	; 0xc0
    677a:	702b      	strb	r3, [r5, #0]
    677c:	b025      	add	sp, #148	; 0x94
    677e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6780:	4c0e      	ldr	r4, [pc, #56]	; (67bc <blst_p1_compress+0x7a>)
    6782:	f854 3b04 	ldr.w	r3, [r4], #4
    6786:	f856 7f04 	ldr.w	r7, [r6, #4]!
    678a:	407b      	eors	r3, r7
    678c:	431a      	orrs	r2, r3
    678e:	4286      	cmp	r6, r0
    6790:	d1f7      	bne.n	6782 <blst_p1_compress+0x40>
    6792:	1e53      	subs	r3, r2, #1
    6794:	4393      	bics	r3, r2
    6796:	d50b      	bpl.n	67b0 <blst_p1_compress+0x6e>
    6798:	4628      	mov	r0, r5
    679a:	f7fd f9c3 	bl	3b24 <POINTonE1_affine_Compress_BE>
    679e:	0103      	lsls	r3, r0, #4
    67a0:	f003 0320 	and.w	r3, r3, #32
    67a4:	782a      	ldrb	r2, [r5, #0]
    67a6:	4313      	orrs	r3, r2
    67a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    67ac:	702b      	strb	r3, [r5, #0]
    67ae:	e7e5      	b.n	677c <blst_p1_compress+0x3a>
    67b0:	4668      	mov	r0, sp
    67b2:	f7ff fef9 	bl	65a8 <POINTonE1_from_Jacobian>
    67b6:	4669      	mov	r1, sp
    67b8:	e7ee      	b.n	6798 <blst_p1_compress+0x56>
    67ba:	bf00      	nop
    67bc:	0001ae48 	.word	0x0001ae48

000067c0 <reciprocal_fp2>:
    67c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    67c4:	b09b      	sub	sp, #108	; 0x6c
    67c6:	4604      	mov	r4, r0
    67c8:	460f      	mov	r7, r1
    67ca:	4d1f      	ldr	r5, [pc, #124]	; (6848 <reciprocal_fp2+0x88>)
    67cc:	260c      	movs	r6, #12
    67ce:	9601      	str	r6, [sp, #4]
    67d0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 684c <reciprocal_fp2+0x8c>
    67d4:	f8cd 8000 	str.w	r8, [sp]
    67d8:	462b      	mov	r3, r5
    67da:	460a      	mov	r2, r1
    67dc:	a80e      	add	r0, sp, #56	; 0x38
    67de:	f7fa f9a4 	bl	b2a <mul_mont_n>
    67e2:	f107 0930 	add.w	r9, r7, #48	; 0x30
    67e6:	9601      	str	r6, [sp, #4]
    67e8:	f8cd 8000 	str.w	r8, [sp]
    67ec:	462b      	mov	r3, r5
    67ee:	464a      	mov	r2, r9
    67f0:	4649      	mov	r1, r9
    67f2:	a802      	add	r0, sp, #8
    67f4:	f7fa f999 	bl	b2a <mul_mont_n>
    67f8:	9600      	str	r6, [sp, #0]
    67fa:	462b      	mov	r3, r5
    67fc:	aa02      	add	r2, sp, #8
    67fe:	a90e      	add	r1, sp, #56	; 0x38
    6800:	4608      	mov	r0, r1
    6802:	f7fa fc3b 	bl	107c <add_mod_n>
    6806:	a90e      	add	r1, sp, #56	; 0x38
    6808:	a802      	add	r0, sp, #8
    680a:	f7ff fe6b 	bl	64e4 <reciprocal_fp>
    680e:	9601      	str	r6, [sp, #4]
    6810:	f8cd 8000 	str.w	r8, [sp]
    6814:	462b      	mov	r3, r5
    6816:	aa02      	add	r2, sp, #8
    6818:	4639      	mov	r1, r7
    681a:	4620      	mov	r0, r4
    681c:	f7fa f985 	bl	b2a <mul_mont_n>
    6820:	3430      	adds	r4, #48	; 0x30
    6822:	9601      	str	r6, [sp, #4]
    6824:	f8cd 8000 	str.w	r8, [sp]
    6828:	462b      	mov	r3, r5
    682a:	aa02      	add	r2, sp, #8
    682c:	4649      	mov	r1, r9
    682e:	4620      	mov	r0, r4
    6830:	f7fa f97b 	bl	b2a <mul_mont_n>
    6834:	9600      	str	r6, [sp, #0]
    6836:	462b      	mov	r3, r5
    6838:	2201      	movs	r2, #1
    683a:	4621      	mov	r1, r4
    683c:	4620      	mov	r0, r4
    683e:	f7fc f81f 	bl	2880 <cneg_mod_n>
    6842:	b01b      	add	sp, #108	; 0x6c
    6844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6848:	0001ade8 	.word	0x0001ade8
    684c:	fffcfffd 	.word	0xfffcfffd

00006850 <blst_fp2_inverse>:
    6850:	b508      	push	{r3, lr}
    6852:	f7ff ffb5 	bl	67c0 <reciprocal_fp2>
    6856:	bd08      	pop	{r3, pc}

00006858 <blst_fp2_eucl_inverse>:
    6858:	b508      	push	{r3, lr}
    685a:	f7ff ffb1 	bl	67c0 <reciprocal_fp2>
    685e:	bd08      	pop	{r3, pc}

00006860 <blst_fp_inverse>:
    6860:	b508      	push	{r3, lr}
    6862:	f7ff fe3f 	bl	64e4 <reciprocal_fp>
    6866:	bd08      	pop	{r3, pc}

00006868 <blst_fp_eucl_inverse>:
    6868:	b508      	push	{r3, lr}
    686a:	f7ff fe3b 	bl	64e4 <reciprocal_fp>
    686e:	bd08      	pop	{r3, pc}

00006870 <POINTonE1s_accumulate>:
    6870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6874:	b08f      	sub	sp, #60	; 0x3c
    6876:	900d      	str	r0, [sp, #52]	; 0x34
    6878:	910a      	str	r1, [sp, #40]	; 0x28
    687a:	9209      	str	r2, [sp, #36]	; 0x24
    687c:	2a0f      	cmp	r2, #15
    687e:	f240 8152 	bls.w	6b26 <POINTonE1s_accumulate+0x2b6>
    6882:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 6b7c <POINTonE1s_accumulate+0x30c>
    6886:	e135      	b.n	6af4 <POINTonE1s_accumulate+0x284>
    6888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    688a:	f102 0490 	add.w	r4, r2, #144	; 0x90
    688e:	990d      	ldr	r1, [sp, #52]	; 0x34
    6890:	4608      	mov	r0, r1
    6892:	f7fb fad5 	bl	1e40 <POINTonE1_dadd_affine>
    6896:	940a      	str	r4, [sp, #40]	; 0x28
    6898:	e131      	b.n	6afe <POINTonE1s_accumulate+0x28e>
    689a:	f108 33ff 	add.w	r3, r8, #4294967295
    689e:	ea23 0308 	bic.w	r3, r3, r8
    68a2:	f106 38ff 	add.w	r8, r6, #4294967295
    68a6:	ea28 0806 	bic.w	r8, r8, r6
    68aa:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    68ae:	ea48 78d3 	orr.w	r8, r8, r3, lsr #31
    68b2:	f1c8 0800 	rsb	r8, r8, #0
    68b6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    68ba:	f854 2f04 	ldr.w	r2, [r4, #4]!
    68be:	f1b8 0f00 	cmp.w	r8, #0
    68c2:	bf08      	it	eq
    68c4:	4613      	moveq	r3, r2
    68c6:	6023      	str	r3, [r4, #0]
    68c8:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    68cc:	429c      	cmp	r4, r3
    68ce:	d1f2      	bne.n	68b6 <POINTonE1s_accumulate+0x46>
    68d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    68d2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    68d6:	f1b8 0f00 	cmp.w	r8, #0
    68da:	bf08      	it	eq
    68dc:	460a      	moveq	r2, r1
    68de:	601a      	str	r2, [r3, #0]
    68e0:	454b      	cmp	r3, r9
    68e2:	d1f5      	bne.n	68d0 <POINTonE1s_accumulate+0x60>
    68e4:	f10b 0060 	add.w	r0, fp, #96	; 0x60
    68e8:	464b      	mov	r3, r9
    68ea:	f850 2b04 	ldr.w	r2, [r0], #4
    68ee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    68f2:	f1b8 0f00 	cmp.w	r8, #0
    68f6:	bf08      	it	eq
    68f8:	460a      	moveq	r2, r1
    68fa:	f843 2f04 	str.w	r2, [r3, #4]!
    68fe:	9a03      	ldr	r2, [sp, #12]
    6900:	4293      	cmp	r3, r2
    6902:	d1f2      	bne.n	68ea <POINTonE1s_accumulate+0x7a>
    6904:	4b9b      	ldr	r3, [pc, #620]	; (6b74 <POINTonE1s_accumulate+0x304>)
    6906:	f503 723a 	add.w	r2, r3, #744	; 0x2e8
    690a:	f852 3b04 	ldr.w	r3, [r2], #4
    690e:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    6912:	f1b8 0f00 	cmp.w	r8, #0
    6916:	bf08      	it	eq
    6918:	460b      	moveq	r3, r1
    691a:	f8ca 3000 	str.w	r3, [sl]
    691e:	45ba      	cmp	sl, r7
    6920:	d1f3      	bne.n	690a <POINTonE1s_accumulate+0x9a>
    6922:	9a08      	ldr	r2, [sp, #32]
    6924:	b142      	cbz	r2, 6938 <POINTonE1s_accumulate+0xc8>
    6926:	230c      	movs	r3, #12
    6928:	9301      	str	r3, [sp, #4]
    692a:	4b93      	ldr	r3, [pc, #588]	; (6b78 <POINTonE1s_accumulate+0x308>)
    692c:	9300      	str	r3, [sp, #0]
    692e:	465b      	mov	r3, fp
    6930:	9905      	ldr	r1, [sp, #20]
    6932:	4608      	mov	r0, r1
    6934:	f7fa f8f9 	bl	b2a <mul_mont_n>
    6938:	9b06      	ldr	r3, [sp, #24]
    693a:	3b01      	subs	r3, #1
    693c:	9306      	str	r3, [sp, #24]
    693e:	f509 7990 	add.w	r9, r9, #288	; 0x120
    6942:	9a03      	ldr	r2, [sp, #12]
    6944:	f502 7290 	add.w	r2, r2, #288	; 0x120
    6948:	9203      	str	r2, [sp, #12]
    694a:	f1b3 3fff 	cmp.w	r3, #4294967295
    694e:	f000 8081 	beq.w	6a54 <POINTonE1s_accumulate+0x1e4>
    6952:	9b05      	ldr	r3, [sp, #20]
    6954:	9308      	str	r3, [sp, #32]
    6956:	f1a9 035c 	sub.w	r3, r9, #92	; 0x5c
    695a:	9304      	str	r3, [sp, #16]
    695c:	f1a9 0460 	sub.w	r4, r9, #96	; 0x60
    6960:	4623      	mov	r3, r4
    6962:	f04f 0800 	mov.w	r8, #0
    6966:	f853 2f04 	ldr.w	r2, [r3, #4]!
    696a:	ea48 0802 	orr.w	r8, r8, r2
    696e:	454b      	cmp	r3, r9
    6970:	d1f9      	bne.n	6966 <POINTonE1s_accumulate+0xf6>
    6972:	9b03      	ldr	r3, [sp, #12]
    6974:	2600      	movs	r6, #0
    6976:	f853 2f04 	ldr.w	r2, [r3, #4]!
    697a:	4316      	orrs	r6, r2
    697c:	f109 0a90 	add.w	sl, r9, #144	; 0x90
    6980:	4553      	cmp	r3, sl
    6982:	d1f8      	bne.n	6976 <POINTonE1s_accumulate+0x106>
    6984:	f109 0534 	add.w	r5, r9, #52	; 0x34
    6988:	270c      	movs	r7, #12
    698a:	9700      	str	r7, [sp, #0]
    698c:	465b      	mov	r3, fp
    698e:	9a04      	ldr	r2, [sp, #16]
    6990:	4629      	mov	r1, r5
    6992:	f109 0094 	add.w	r0, r9, #148	; 0x94
    6996:	f7f9 febe 	bl	716 <sub_mod_n>
    699a:	9700      	str	r7, [sp, #0]
    699c:	465b      	mov	r3, fp
    699e:	9a04      	ldr	r2, [sp, #16]
    69a0:	4629      	mov	r1, r5
    69a2:	4628      	mov	r0, r5
    69a4:	f7fa fb6a 	bl	107c <add_mod_n>
    69a8:	f109 0004 	add.w	r0, r9, #4
    69ac:	9005      	str	r0, [sp, #20]
    69ae:	f109 0564 	add.w	r5, r9, #100	; 0x64
    69b2:	f1a9 022c 	sub.w	r2, r9, #44	; 0x2c
    69b6:	9700      	str	r7, [sp, #0]
    69b8:	465b      	mov	r3, fp
    69ba:	9207      	str	r2, [sp, #28]
    69bc:	4629      	mov	r1, r5
    69be:	f7fa fb5d 	bl	107c <add_mod_n>
    69c2:	9700      	str	r7, [sp, #0]
    69c4:	465b      	mov	r3, fp
    69c6:	9a07      	ldr	r2, [sp, #28]
    69c8:	4629      	mov	r1, r5
    69ca:	4628      	mov	r0, r5
    69cc:	f7f9 fea3 	bl	716 <sub_mod_n>
    69d0:	4652      	mov	r2, sl
    69d2:	2300      	movs	r3, #0
    69d4:	f109 07c0 	add.w	r7, r9, #192	; 0xc0
    69d8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    69dc:	430b      	orrs	r3, r1
    69de:	42ba      	cmp	r2, r7
    69e0:	d1fa      	bne.n	69d8 <POINTonE1s_accumulate+0x168>
    69e2:	1e5a      	subs	r2, r3, #1
    69e4:	ea32 0303 	bics.w	r3, r2, r3
    69e8:	f57f af57 	bpl.w	689a <POINTonE1s_accumulate+0x2a>
    69ec:	464b      	mov	r3, r9
    69ee:	2200      	movs	r2, #0
    69f0:	9803      	ldr	r0, [sp, #12]
    69f2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    69f6:	430a      	orrs	r2, r1
    69f8:	4283      	cmp	r3, r0
    69fa:	d1fa      	bne.n	69f2 <POINTonE1s_accumulate+0x182>
    69fc:	1e51      	subs	r1, r2, #1
    69fe:	ea21 0102 	bic.w	r1, r1, r2
    6a02:	ea4f 78d1 	mov.w	r8, r1, lsr #31
    6a06:	17c9      	asrs	r1, r1, #31
    6a08:	9b03      	ldr	r3, [sp, #12]
    6a0a:	f109 0660 	add.w	r6, r9, #96	; 0x60
    6a0e:	f853 2c2c 	ldr.w	r2, [r3, #-44]
    6a12:	f853 0f04 	ldr.w	r0, [r3, #4]!
    6a16:	2900      	cmp	r1, #0
    6a18:	bf08      	it	eq
    6a1a:	4602      	moveq	r2, r0
    6a1c:	601a      	str	r2, [r3, #0]
    6a1e:	42b3      	cmp	r3, r6
    6a20:	d1f5      	bne.n	6a0e <POINTonE1s_accumulate+0x19e>
    6a22:	260c      	movs	r6, #12
    6a24:	9601      	str	r6, [sp, #4]
    6a26:	4b54      	ldr	r3, [pc, #336]	; (6b78 <POINTonE1s_accumulate+0x308>)
    6a28:	9300      	str	r3, [sp, #0]
    6a2a:	465b      	mov	r3, fp
    6a2c:	9a04      	ldr	r2, [sp, #16]
    6a2e:	4611      	mov	r1, r2
    6a30:	4628      	mov	r0, r5
    6a32:	f7fa f87a 	bl	b2a <mul_mont_n>
    6a36:	4633      	mov	r3, r6
    6a38:	465a      	mov	r2, fp
    6a3a:	4629      	mov	r1, r5
    6a3c:	4628      	mov	r0, r5
    6a3e:	f7fa ffb7 	bl	19b0 <mul_by_3_mod_n>
    6a42:	464b      	mov	r3, r9
    6a44:	9903      	ldr	r1, [sp, #12]
    6a46:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    6a4e:	428b      	cmp	r3, r1
    6a50:	d1f9      	bne.n	6a46 <POINTonE1s_accumulate+0x1d6>
    6a52:	e72e      	b.n	68b2 <POINTonE1s_accumulate+0x42>
    6a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a56:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    6a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a5c:	eb02 1943 	add.w	r9, r2, r3, lsl #5
    6a60:	f5a9 7490 	sub.w	r4, r9, #288	; 0x120
    6a64:	f1a9 05c0 	sub.w	r5, r9, #192	; 0xc0
    6a68:	4629      	mov	r1, r5
    6a6a:	4628      	mov	r0, r5
    6a6c:	f7ff fd3a 	bl	64e4 <reciprocal_fp>
    6a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a72:	2b00      	cmp	r3, #0
    6a74:	d05a      	beq.n	6b2c <POINTonE1s_accumulate+0x2bc>
    6a76:	464e      	mov	r6, r9
    6a78:	464c      	mov	r4, r9
    6a7a:	f04f 080c 	mov.w	r8, #12
    6a7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6a80:	3e90      	subs	r6, #144	; 0x90
    6a82:	f5a4 7490 	sub.w	r4, r4, #288	; 0x120
    6a86:	f1a4 05c0 	sub.w	r5, r4, #192	; 0xc0
    6a8a:	f104 0a60 	add.w	sl, r4, #96	; 0x60
    6a8e:	f8cd 8004 	str.w	r8, [sp, #4]
    6a92:	4b39      	ldr	r3, [pc, #228]	; (6b78 <POINTonE1s_accumulate+0x308>)
    6a94:	9300      	str	r3, [sp, #0]
    6a96:	465b      	mov	r3, fp
    6a98:	462a      	mov	r2, r5
    6a9a:	4651      	mov	r1, sl
    6a9c:	4628      	mov	r0, r5
    6a9e:	f7fa f844 	bl	b2a <mul_mont_n>
    6aa2:	462a      	mov	r2, r5
    6aa4:	4621      	mov	r1, r4
    6aa6:	4630      	mov	r0, r6
    6aa8:	f7fa fa6e 	bl	f88 <POINTonE1_tail>
    6aac:	f8cd 8004 	str.w	r8, [sp, #4]
    6ab0:	4b31      	ldr	r3, [pc, #196]	; (6b78 <POINTonE1s_accumulate+0x308>)
    6ab2:	9300      	str	r3, [sp, #0]
    6ab4:	465b      	mov	r3, fp
    6ab6:	f104 02f0 	add.w	r2, r4, #240	; 0xf0
    6aba:	4651      	mov	r1, sl
    6abc:	4628      	mov	r0, r5
    6abe:	f7fa f834 	bl	b2a <mul_mont_n>
    6ac2:	3f01      	subs	r7, #1
    6ac4:	d1dc      	bne.n	6a80 <POINTonE1s_accumulate+0x210>
    6ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6ac8:	ebc2 6102 	rsb	r1, r2, r2, lsl #24
    6acc:	ebc2 01c1 	rsb	r1, r2, r1, lsl #3
    6ad0:	f06f 038f 	mvn.w	r3, #143	; 0x8f
    6ad4:	fb03 9302 	mla	r3, r3, r2, r9
    6ad8:	930a      	str	r3, [sp, #40]	; 0x28
    6ada:	eb09 1241 	add.w	r2, r9, r1, lsl #5
    6ade:	3260      	adds	r2, #96	; 0x60
    6ae0:	eb09 1141 	add.w	r1, r9, r1, lsl #5
    6ae4:	4618      	mov	r0, r3
    6ae6:	f7fa fa4f 	bl	f88 <POINTonE1_tail>
    6aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6aec:	2b1f      	cmp	r3, #31
    6aee:	d918      	bls.n	6b22 <POINTonE1s_accumulate+0x2b2>
    6af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6af2:	9309      	str	r3, [sp, #36]	; 0x24
    6af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6af6:	f013 0f01 	tst.w	r3, #1
    6afa:	f47f aec5 	bne.w	6888 <POINTonE1s_accumulate+0x18>
    6afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6b00:	0853      	lsrs	r3, r2, #1
    6b02:	930b      	str	r3, [sp, #44]	; 0x2c
    6b04:	3b01      	subs	r3, #1
    6b06:	930c      	str	r3, [sp, #48]	; 0x30
    6b08:	2a01      	cmp	r2, #1
    6b0a:	d92b      	bls.n	6b64 <POINTonE1s_accumulate+0x2f4>
    6b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6b0e:	f102 095c 	add.w	r9, r2, #92	; 0x5c
    6b12:	f102 0a8c 	add.w	sl, r2, #140	; 0x8c
    6b16:	9306      	str	r3, [sp, #24]
    6b18:	2300      	movs	r3, #0
    6b1a:	9308      	str	r3, [sp, #32]
    6b1c:	f8cd a00c 	str.w	sl, [sp, #12]
    6b20:	e719      	b.n	6956 <POINTonE1s_accumulate+0xe6>
    6b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b24:	9309      	str	r3, [sp, #36]	; 0x24
    6b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b28:	b1cb      	cbz	r3, 6b5e <POINTonE1s_accumulate+0x2ee>
    6b2a:	e009      	b.n	6b40 <POINTonE1s_accumulate+0x2d0>
    6b2c:	f104 0390 	add.w	r3, r4, #144	; 0x90
    6b30:	930a      	str	r3, [sp, #40]	; 0x28
    6b32:	462a      	mov	r2, r5
    6b34:	4621      	mov	r1, r4
    6b36:	4618      	mov	r0, r3
    6b38:	f7fa fa26 	bl	f88 <POINTonE1_tail>
    6b3c:	2301      	movs	r3, #1
    6b3e:	9309      	str	r3, [sp, #36]	; 0x24
    6b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b42:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    6b46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6b48:	eb05 1404 	add.w	r4, r5, r4, lsl #4
    6b4c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6b4e:	462a      	mov	r2, r5
    6b50:	3590      	adds	r5, #144	; 0x90
    6b52:	4631      	mov	r1, r6
    6b54:	4630      	mov	r0, r6
    6b56:	f7fb f973 	bl	1e40 <POINTonE1_dadd_affine>
    6b5a:	42a5      	cmp	r5, r4
    6b5c:	d1f7      	bne.n	6b4e <POINTonE1s_accumulate+0x2de>
    6b5e:	b00f      	add	sp, #60	; 0x3c
    6b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6b66:	f1a4 00c0 	sub.w	r0, r4, #192	; 0xc0
    6b6a:	4601      	mov	r1, r0
    6b6c:	f7ff fcba 	bl	64e4 <reciprocal_fp>
    6b70:	46a1      	mov	r9, r4
    6b72:	e780      	b.n	6a76 <POINTonE1s_accumulate+0x206>
    6b74:	0001bee0 	.word	0x0001bee0
    6b78:	fffcfffd 	.word	0xfffcfffd
    6b7c:	0001ade8 	.word	0x0001ade8

00006b80 <blst_p1s_add>:
    6b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b84:	af00      	add	r7, sp, #0
    6b86:	4682      	mov	sl, r0
    6b88:	460d      	mov	r5, r1
    6b8a:	4691      	mov	r9, r2
    6b8c:	4613      	mov	r3, r2
    6b8e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    6b92:	bf28      	it	cs
    6b94:	f44f 6300 	movcs.w	r3, #2048	; 0x800
    6b98:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    6b9c:	466a      	mov	r2, sp
    6b9e:	eba2 1303 	sub.w	r3, r2, r3, lsl #4
    6ba2:	469d      	mov	sp, r3
    6ba4:	46eb      	mov	fp, sp
    6ba6:	4603      	mov	r3, r0
    6ba8:	f100 0190 	add.w	r1, r0, #144	; 0x90
    6bac:	2200      	movs	r2, #0
    6bae:	f843 2b04 	str.w	r2, [r3], #4
    6bb2:	428b      	cmp	r3, r1
    6bb4:	d1fb      	bne.n	6bae <blst_p1s_add+0x2e>
    6bb6:	f1b9 0f00 	cmp.w	r9, #0
    6bba:	d035      	beq.n	6c28 <blst_p1s_add+0xa8>
    6bbc:	2400      	movs	r4, #0
    6bbe:	f1ab 0804 	sub.w	r8, fp, #4
    6bc2:	e01f      	b.n	6c04 <blst_p1s_add+0x84>
    6bc4:	3460      	adds	r4, #96	; 0x60
    6bc6:	1f23      	subs	r3, r4, #4
    6bc8:	eb08 020c 	add.w	r2, r8, ip
    6bcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6bd0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    6bd4:	f842 1f04 	str.w	r1, [r2, #4]!
    6bd8:	4283      	cmp	r3, r0
    6bda:	d1f9      	bne.n	6bd0 <blst_p1s_add+0x50>
    6bdc:	f10e 0e01 	add.w	lr, lr, #1
    6be0:	f10c 0c90 	add.w	ip, ip, #144	; 0x90
    6be4:	4576      	cmp	r6, lr
    6be6:	d905      	bls.n	6bf4 <blst_p1s_add+0x74>
    6be8:	682b      	ldr	r3, [r5, #0]
    6bea:	2b00      	cmp	r3, #0
    6bec:	d0ea      	beq.n	6bc4 <blst_p1s_add+0x44>
    6bee:	3504      	adds	r5, #4
    6bf0:	461c      	mov	r4, r3
    6bf2:	e7e8      	b.n	6bc6 <blst_p1s_add+0x46>
    6bf4:	4632      	mov	r2, r6
    6bf6:	4659      	mov	r1, fp
    6bf8:	4650      	mov	r0, sl
    6bfa:	f7ff fe39 	bl	6870 <POINTonE1s_accumulate>
    6bfe:	ebb9 0906 	subs.w	r9, r9, r6
    6c02:	d011      	beq.n	6c28 <blst_p1s_add+0xa8>
    6c04:	464e      	mov	r6, r9
    6c06:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
    6c0a:	bf28      	it	cs
    6c0c:	f44f 6600 	movcs.w	r6, #2048	; 0x800
    6c10:	f1b9 0f00 	cmp.w	r9, #0
    6c14:	d003      	beq.n	6c1e <blst_p1s_add+0x9e>
    6c16:	f04f 0c00 	mov.w	ip, #0
    6c1a:	46e6      	mov	lr, ip
    6c1c:	e7e4      	b.n	6be8 <blst_p1s_add+0x68>
    6c1e:	4632      	mov	r2, r6
    6c20:	4659      	mov	r1, fp
    6c22:	4650      	mov	r0, sl
    6c24:	f7ff fe24 	bl	6870 <POINTonE1s_accumulate>
    6c28:	46bd      	mov	sp, r7
    6c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006c2e <POINTonE1s_mult_wbits>:
    6c2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c32:	b08d      	sub	sp, #52	; 0x34
    6c34:	af00      	add	r7, sp, #0
    6c36:	4682      	mov	sl, r0
    6c38:	60f9      	str	r1, [r7, #12]
    6c3a:	4615      	mov	r5, r2
    6c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c3e:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
    6c40:	f102 38ff 	add.w	r8, r2, #4294967295
    6c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6c46:	2b00      	cmp	r3, #0
    6c48:	d046      	beq.n	6cd8 <POINTonE1s_mult_wbits+0xaa>
    6c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    6c4e:	61fb      	str	r3, [r7, #28]
    6c50:	1df3      	adds	r3, r6, #7
    6c52:	08db      	lsrs	r3, r3, #3
    6c54:	613b      	str	r3, [r7, #16]
    6c56:	f8d7 9058 	ldr.w	r9, [r7, #88]	; 0x58
    6c5a:	f859 bb04 	ldr.w	fp, [r9], #4
    6c5e:	fbb6 f3f5 	udiv	r3, r6, r5
    6c62:	fb05 6113 	mls	r1, r5, r3, r6
    6c66:	61b9      	str	r1, [r7, #24]
    6c68:	1c4a      	adds	r2, r1, #1
    6c6a:	2301      	movs	r3, #1
    6c6c:	4093      	lsls	r3, r2
    6c6e:	3b01      	subs	r3, #1
    6c70:	627b      	str	r3, [r7, #36]	; 0x24
    6c72:	1a76      	subs	r6, r6, r1
    6c74:	1e72      	subs	r2, r6, #1
    6c76:	62ba      	str	r2, [r7, #40]	; 0x28
    6c78:	ea22 0406 	bic.w	r4, r2, r6
    6c7c:	0fe4      	lsrs	r4, r4, #31
    6c7e:	f084 0101 	eor.w	r1, r4, #1
    6c82:	194a      	adds	r2, r1, r5
    6c84:	1a71      	subs	r1, r6, r1
    6c86:	4658      	mov	r0, fp
    6c88:	f7f9 fd06 	bl	698 <get_wval_limb>
    6c8c:	40a0      	lsls	r0, r4
    6c8e:	4629      	mov	r1, r5
    6c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c92:	4018      	ands	r0, r3
    6c94:	f7f9 fd1d 	bl	6d2 <booth_encode>
    6c98:	4603      	mov	r3, r0
    6c9a:	462a      	mov	r2, r5
    6c9c:	68fc      	ldr	r4, [r7, #12]
    6c9e:	4621      	mov	r1, r4
    6ca0:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6ca2:	f7fb ffb8 	bl	2c16 <POINTonE1_gather_booth_wbits>
    6ca6:	2360      	movs	r3, #96	; 0x60
    6ca8:	fa03 f308 	lsl.w	r3, r3, r8
    6cac:	623b      	str	r3, [r7, #32]
    6cae:	eb04 0803 	add.w	r8, r4, r3
    6cb2:	4653      	mov	r3, sl
    6cb4:	f10a 0190 	add.w	r1, sl, #144	; 0x90
    6cb8:	2200      	movs	r2, #0
    6cba:	f843 2b04 	str.w	r2, [r3], #4
    6cbe:	4299      	cmp	r1, r3
    6cc0:	d1fb      	bne.n	6cba <POINTonE1s_mult_wbits+0x8c>
    6cc2:	2e00      	cmp	r6, #0
    6cc4:	d071      	beq.n	6daa <POINTonE1s_mult_wbits+0x17c>
    6cc6:	1c6b      	adds	r3, r5, #1
    6cc8:	2601      	movs	r6, #1
    6cca:	fa06 f303 	lsl.w	r3, r6, r3
    6cce:	3b01      	subs	r3, #1
    6cd0:	60bb      	str	r3, [r7, #8]
    6cd2:	607b      	str	r3, [r7, #4]
    6cd4:	69bb      	ldr	r3, [r7, #24]
    6cd6:	e05b      	b.n	6d90 <POINTonE1s_mult_wbits+0x162>
    6cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6cde:	bf28      	it	cs
    6ce0:	f44f 6300 	movcs.w	r3, #2048	; 0x800
    6ce4:	61fb      	str	r3, [r7, #28]
    6ce6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    6cea:	466a      	mov	r2, sp
    6cec:	eba2 1303 	sub.w	r3, r2, r3, lsl #4
    6cf0:	469d      	mov	sp, r3
    6cf2:	f8c7 d060 	str.w	sp, [r7, #96]	; 0x60
    6cf6:	e7ab      	b.n	6c50 <POINTonE1s_mult_wbits+0x22>
    6cf8:	4622      	mov	r2, r4
    6cfa:	4651      	mov	r1, sl
    6cfc:	6978      	ldr	r0, [r7, #20]
    6cfe:	f7ff fdb7 	bl	6870 <POINTonE1s_accumulate>
    6d02:	2400      	movs	r4, #0
    6d04:	e01e      	b.n	6d44 <POINTonE1s_mult_wbits+0x116>
    6d06:	693b      	ldr	r3, [r7, #16]
    6d08:	449b      	add	fp, r3
    6d0a:	69ba      	ldr	r2, [r7, #24]
    6d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6d0e:	4658      	mov	r0, fp
    6d10:	f7f9 fcc2 	bl	698 <get_wval_limb>
    6d14:	4629      	mov	r1, r5
    6d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d18:	4018      	ands	r0, r3
    6d1a:	f7f9 fcda 	bl	6d2 <booth_encode>
    6d1e:	4603      	mov	r3, r0
    6d20:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    6d24:	462a      	mov	r2, r5
    6d26:	4641      	mov	r1, r8
    6d28:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
    6d2c:	f7fb ff73 	bl	2c16 <POINTonE1_gather_booth_wbits>
    6d30:	3601      	adds	r6, #1
    6d32:	3401      	adds	r4, #1
    6d34:	6a3b      	ldr	r3, [r7, #32]
    6d36:	4498      	add	r8, r3
    6d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d3a:	42b3      	cmp	r3, r6
    6d3c:	d00a      	beq.n	6d54 <POINTonE1s_mult_wbits+0x126>
    6d3e:	69fb      	ldr	r3, [r7, #28]
    6d40:	42a3      	cmp	r3, r4
    6d42:	d0d9      	beq.n	6cf8 <POINTonE1s_mult_wbits+0xca>
    6d44:	f8d9 3000 	ldr.w	r3, [r9]
    6d48:	2b00      	cmp	r3, #0
    6d4a:	d0dc      	beq.n	6d06 <POINTonE1s_mult_wbits+0xd8>
    6d4c:	f109 0904 	add.w	r9, r9, #4
    6d50:	469b      	mov	fp, r3
    6d52:	e7da      	b.n	6d0a <POINTonE1s_mult_wbits+0xdc>
    6d54:	f8d7 a014 	ldr.w	sl, [r7, #20]
    6d58:	4622      	mov	r2, r4
    6d5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6d5c:	4650      	mov	r0, sl
    6d5e:	f7ff fd87 	bl	6870 <POINTonE1s_accumulate>
    6d62:	b13d      	cbz	r5, 6d74 <POINTonE1s_mult_wbits+0x146>
    6d64:	2400      	movs	r4, #0
    6d66:	4651      	mov	r1, sl
    6d68:	4650      	mov	r0, sl
    6d6a:	f7fb fc4e 	bl	260a <POINTonE1_double>
    6d6e:	3401      	adds	r4, #1
    6d70:	42a5      	cmp	r5, r4
    6d72:	d1f8      	bne.n	6d66 <POINTonE1s_mult_wbits+0x138>
    6d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6d76:	1b5b      	subs	r3, r3, r5
    6d78:	62bb      	str	r3, [r7, #40]	; 0x28
    6d7a:	2600      	movs	r6, #0
    6d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6d80:	d01b      	beq.n	6dba <POINTonE1s_mult_wbits+0x18c>
    6d82:	f8d7 800c 	ldr.w	r8, [r7, #12]
    6d86:	f8d7 9058 	ldr.w	r9, [r7, #88]	; 0x58
    6d8a:	462b      	mov	r3, r5
    6d8c:	687a      	ldr	r2, [r7, #4]
    6d8e:	627a      	str	r2, [r7, #36]	; 0x24
    6d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6d92:	42b2      	cmp	r2, r6
    6d94:	bf98      	it	ls
    6d96:	4634      	movls	r4, r6
    6d98:	d9de      	bls.n	6d58 <POINTonE1s_mult_wbits+0x12a>
    6d9a:	4634      	mov	r4, r6
    6d9c:	3301      	adds	r3, #1
    6d9e:	61bb      	str	r3, [r7, #24]
    6da0:	f8c7 a014 	str.w	sl, [r7, #20]
    6da4:	f8d7 a060 	ldr.w	sl, [r7, #96]	; 0x60
    6da8:	e7c9      	b.n	6d3e <POINTonE1s_mult_wbits+0x110>
    6daa:	f8c7 800c 	str.w	r8, [r7, #12]
    6dae:	f8c7 9058 	str.w	r9, [r7, #88]	; 0x58
    6db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6db4:	60bb      	str	r3, [r7, #8]
    6db6:	2601      	movs	r6, #1
    6db8:	e000      	b.n	6dbc <POINTonE1s_mult_wbits+0x18e>
    6dba:	2600      	movs	r6, #0
    6dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dbe:	42b3      	cmp	r3, r6
    6dc0:	d944      	bls.n	6e4c <POINTonE1s_mult_wbits+0x21e>
    6dc2:	4634      	mov	r4, r6
    6dc4:	f04f 0800 	mov.w	r8, #0
    6dc8:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
    6dcc:	f8d7 900c 	ldr.w	r9, [r7, #12]
    6dd0:	f8d7 a058 	ldr.w	sl, [r7, #88]	; 0x58
    6dd4:	e024      	b.n	6e20 <POINTonE1s_mult_wbits+0x1f2>
    6dd6:	4622      	mov	r2, r4
    6dd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6ddc:	f7ff fd48 	bl	6870 <POINTonE1s_accumulate>
    6de0:	2400      	movs	r4, #0
    6de2:	e020      	b.n	6e26 <POINTonE1s_mult_wbits+0x1f8>
    6de4:	693b      	ldr	r3, [r7, #16]
    6de6:	449b      	add	fp, r3
    6de8:	462a      	mov	r2, r5
    6dea:	4641      	mov	r1, r8
    6dec:	4658      	mov	r0, fp
    6dee:	f7f9 fc53 	bl	698 <get_wval_limb>
    6df2:	4629      	mov	r1, r5
    6df4:	68bb      	ldr	r3, [r7, #8]
    6df6:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    6dfa:	f7f9 fc6a 	bl	6d2 <booth_encode>
    6dfe:	4603      	mov	r3, r0
    6e00:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
    6e04:	462a      	mov	r2, r5
    6e06:	4649      	mov	r1, r9
    6e08:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6e0a:	eb00 100c 	add.w	r0, r0, ip, lsl #4
    6e0e:	f7fb ff02 	bl	2c16 <POINTonE1_gather_booth_wbits>
    6e12:	3601      	adds	r6, #1
    6e14:	3401      	adds	r4, #1
    6e16:	6a3b      	ldr	r3, [r7, #32]
    6e18:	4499      	add	r9, r3
    6e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6e1c:	42b3      	cmp	r3, r6
    6e1e:	d00a      	beq.n	6e36 <POINTonE1s_mult_wbits+0x208>
    6e20:	69fb      	ldr	r3, [r7, #28]
    6e22:	42a3      	cmp	r3, r4
    6e24:	d0d7      	beq.n	6dd6 <POINTonE1s_mult_wbits+0x1a8>
    6e26:	f8da 3000 	ldr.w	r3, [sl]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d0da      	beq.n	6de4 <POINTonE1s_mult_wbits+0x1b6>
    6e2e:	f10a 0a04 	add.w	sl, sl, #4
    6e32:	469b      	mov	fp, r3
    6e34:	e7d8      	b.n	6de8 <POINTonE1s_mult_wbits+0x1ba>
    6e36:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
    6e3a:	4622      	mov	r2, r4
    6e3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6e3e:	4650      	mov	r0, sl
    6e40:	f7ff fd16 	bl	6870 <POINTonE1s_accumulate>
    6e44:	3734      	adds	r7, #52	; 0x34
    6e46:	46bd      	mov	sp, r7
    6e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e4c:	4634      	mov	r4, r6
    6e4e:	e7f4      	b.n	6e3a <POINTonE1s_mult_wbits+0x20c>

00006e50 <blst_p1s_mult_wbits>:
    6e50:	b510      	push	{r4, lr}
    6e52:	b084      	sub	sp, #16
    6e54:	9c08      	ldr	r4, [sp, #32]
    6e56:	9402      	str	r4, [sp, #8]
    6e58:	9c07      	ldr	r4, [sp, #28]
    6e5a:	9401      	str	r4, [sp, #4]
    6e5c:	9c06      	ldr	r4, [sp, #24]
    6e5e:	9400      	str	r4, [sp, #0]
    6e60:	f7ff fee5 	bl	6c2e <POINTonE1s_mult_wbits>
    6e64:	b004      	add	sp, #16
    6e66:	bd10      	pop	{r4, pc}

00006e68 <blst_p1s_to_affine>:
    6e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e6c:	b0a3      	sub	sp, #140	; 0x8c
    6e6e:	9102      	str	r1, [sp, #8]
    6e70:	9203      	str	r2, [sp, #12]
    6e72:	2a00      	cmp	r2, #0
    6e74:	f000 8115 	beq.w	70a2 <blst_p1s_to_affine+0x23a>
    6e78:	4607      	mov	r7, r0
    6e7a:	2400      	movs	r4, #0
    6e7c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 70a8 <blst_p1s_to_affine+0x240>
    6e80:	f04f 0a0c 	mov.w	sl, #12
    6e84:	f8df b224 	ldr.w	fp, [pc, #548]	; 70ac <blst_p1s_to_affine+0x244>
    6e88:	e0e8      	b.n	705c <blst_p1s_to_affine+0x1f4>
    6e8a:	f104 0590 	add.w	r5, r4, #144	; 0x90
    6e8e:	e0f3      	b.n	7078 <blst_p1s_to_affine+0x210>
    6e90:	3590      	adds	r5, #144	; 0x90
    6e92:	f8cd a004 	str.w	sl, [sp, #4]
    6e96:	f8cd b000 	str.w	fp, [sp]
    6e9a:	464b      	mov	r3, r9
    6e9c:	f105 0260 	add.w	r2, r5, #96	; 0x60
    6ea0:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    6ea4:	4630      	mov	r0, r6
    6ea6:	f7f9 fe40 	bl	b2a <mul_mont_n>
    6eaa:	f108 0801 	add.w	r8, r8, #1
    6eae:	3630      	adds	r6, #48	; 0x30
    6eb0:	9b04      	ldr	r3, [sp, #16]
    6eb2:	4543      	cmp	r3, r8
    6eb4:	d919      	bls.n	6eea <blst_p1s_to_affine+0x82>
    6eb6:	9a02      	ldr	r2, [sp, #8]
    6eb8:	6813      	ldr	r3, [r2, #0]
    6eba:	2b00      	cmp	r3, #0
    6ebc:	d0e8      	beq.n	6e90 <blst_p1s_to_affine+0x28>
    6ebe:	3204      	adds	r2, #4
    6ec0:	9202      	str	r2, [sp, #8]
    6ec2:	461d      	mov	r5, r3
    6ec4:	e7e5      	b.n	6e92 <blst_p1s_to_affine+0x2a>
    6ec6:	4639      	mov	r1, r7
    6ec8:	4638      	mov	r0, r7
    6eca:	f7ff fb0b 	bl	64e4 <reciprocal_fp>
    6ece:	9b04      	ldr	r3, [sp, #16]
    6ed0:	1e5c      	subs	r4, r3, #1
    6ed2:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    6ed6:	eb07 1848 	add.w	r8, r7, r8, lsl #5
    6eda:	b90c      	cbnz	r4, 6ee0 <blst_p1s_to_affine+0x78>
    6edc:	462c      	mov	r4, r5
    6ede:	e08a      	b.n	6ff6 <blst_p1s_to_affine+0x18e>
    6ee0:	9b02      	ldr	r3, [sp, #8]
    6ee2:	3b04      	subs	r3, #4
    6ee4:	4619      	mov	r1, r3
    6ee6:	9705      	str	r7, [sp, #20]
    6ee8:	e017      	b.n	6f1a <blst_p1s_to_affine+0xb2>
    6eea:	9e04      	ldr	r6, [sp, #16]
    6eec:	4633      	mov	r3, r6
    6eee:	2e02      	cmp	r6, #2
    6ef0:	bf38      	it	cc
    6ef2:	2302      	movcc	r3, #2
    6ef4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6ef8:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    6efc:	f1a4 0360 	sub.w	r3, r4, #96	; 0x60
    6f00:	4619      	mov	r1, r3
    6f02:	9305      	str	r3, [sp, #20]
    6f04:	4618      	mov	r0, r3
    6f06:	f7ff faed 	bl	64e4 <reciprocal_fp>
    6f0a:	9b02      	ldr	r3, [sp, #8]
    6f0c:	3b04      	subs	r3, #4
    6f0e:	4619      	mov	r1, r3
    6f10:	1e74      	subs	r4, r6, #1
    6f12:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    6f16:	eb07 1848 	add.w	r8, r7, r8, lsl #5
    6f1a:	462e      	mov	r6, r5
    6f1c:	9f05      	ldr	r7, [sp, #20]
    6f1e:	2300      	movs	r3, #0
    6f20:	9306      	str	r3, [sp, #24]
    6f22:	9508      	str	r5, [sp, #32]
    6f24:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    6f28:	460d      	mov	r5, r1
    6f2a:	463a      	mov	r2, r7
    6f2c:	3f30      	subs	r7, #48	; 0x30
    6f2e:	f8cd a004 	str.w	sl, [sp, #4]
    6f32:	f8cd b000 	str.w	fp, [sp]
    6f36:	464b      	mov	r3, r9
    6f38:	9207      	str	r2, [sp, #28]
    6f3a:	4639      	mov	r1, r7
    6f3c:	4638      	mov	r0, r7
    6f3e:	f7f9 fdf4 	bl	b2a <mul_mont_n>
    6f42:	f8cd a004 	str.w	sl, [sp, #4]
    6f46:	f8cd b000 	str.w	fp, [sp]
    6f4a:	464b      	mov	r3, r9
    6f4c:	463a      	mov	r2, r7
    6f4e:	4639      	mov	r1, r7
    6f50:	a80a      	add	r0, sp, #40	; 0x28
    6f52:	f7f9 fdea 	bl	b2a <mul_mont_n>
    6f56:	f8cd a004 	str.w	sl, [sp, #4]
    6f5a:	f8cd b000 	str.w	fp, [sp]
    6f5e:	464b      	mov	r3, r9
    6f60:	463a      	mov	r2, r7
    6f62:	a90a      	add	r1, sp, #40	; 0x28
    6f64:	a816      	add	r0, sp, #88	; 0x58
    6f66:	f7f9 fde0 	bl	b2a <mul_mont_n>
    6f6a:	f8cd a004 	str.w	sl, [sp, #4]
    6f6e:	f8cd b000 	str.w	fp, [sp]
    6f72:	464b      	mov	r3, r9
    6f74:	9a07      	ldr	r2, [sp, #28]
    6f76:	f106 0160 	add.w	r1, r6, #96	; 0x60
    6f7a:	4638      	mov	r0, r7
    6f7c:	f7f9 fdd5 	bl	b2a <mul_mont_n>
    6f80:	f8cd a004 	str.w	sl, [sp, #4]
    6f84:	f8cd b000 	str.w	fp, [sp]
    6f88:	464b      	mov	r3, r9
    6f8a:	aa0a      	add	r2, sp, #40	; 0x28
    6f8c:	4631      	mov	r1, r6
    6f8e:	4640      	mov	r0, r8
    6f90:	f7f9 fdcb 	bl	b2a <mul_mont_n>
    6f94:	f8cd a004 	str.w	sl, [sp, #4]
    6f98:	f8cd b000 	str.w	fp, [sp]
    6f9c:	464b      	mov	r3, r9
    6f9e:	aa16      	add	r2, sp, #88	; 0x58
    6fa0:	f106 0130 	add.w	r1, r6, #48	; 0x30
    6fa4:	f108 0030 	add.w	r0, r8, #48	; 0x30
    6fa8:	f7f9 fdbf 	bl	b2a <mul_mont_n>
    6fac:	682b      	ldr	r3, [r5, #0]
    6fae:	42b3      	cmp	r3, r6
    6fb0:	bf06      	itte	eq
    6fb2:	f855 6c04 	ldreq.w	r6, [r5, #-4]
    6fb6:	3d04      	subeq	r5, #4
    6fb8:	3e90      	subne	r6, #144	; 0x90
    6fba:	9b06      	ldr	r3, [sp, #24]
    6fbc:	3301      	adds	r3, #1
    6fbe:	9306      	str	r3, [sp, #24]
    6fc0:	f1a8 0860 	sub.w	r8, r8, #96	; 0x60
    6fc4:	42a3      	cmp	r3, r4
    6fc6:	d3b0      	bcc.n	6f2a <blst_p1s_to_affine+0xc2>
    6fc8:	9d08      	ldr	r5, [sp, #32]
    6fca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    6fce:	eba4 0784 	sub.w	r7, r4, r4, lsl #2
    6fd2:	013f      	lsls	r7, r7, #4
    6fd4:	2c00      	cmp	r4, #0
    6fd6:	bf08      	it	eq
    6fd8:	f06f 072f 	mvneq.w	r7, #47	; 0x2f
    6fdc:	9b05      	ldr	r3, [sp, #20]
    6fde:	443b      	add	r3, r7
    6fe0:	461f      	mov	r7, r3
    6fe2:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    6fe6:	ea4f 1444 	mov.w	r4, r4, lsl #5
    6fea:	bf08      	it	eq
    6fec:	f06f 045f 	mvneq.w	r4, #95	; 0x5f
    6ff0:	44a0      	add	r8, r4
    6ff2:	462c      	mov	r4, r5
    6ff4:	4635      	mov	r5, r6
    6ff6:	f8cd a004 	str.w	sl, [sp, #4]
    6ffa:	f8cd b000 	str.w	fp, [sp]
    6ffe:	464b      	mov	r3, r9
    7000:	463a      	mov	r2, r7
    7002:	4639      	mov	r1, r7
    7004:	a80a      	add	r0, sp, #40	; 0x28
    7006:	f7f9 fd90 	bl	b2a <mul_mont_n>
    700a:	f8cd a004 	str.w	sl, [sp, #4]
    700e:	f8cd b000 	str.w	fp, [sp]
    7012:	464b      	mov	r3, r9
    7014:	463a      	mov	r2, r7
    7016:	a90a      	add	r1, sp, #40	; 0x28
    7018:	a816      	add	r0, sp, #88	; 0x58
    701a:	f7f9 fd86 	bl	b2a <mul_mont_n>
    701e:	f8cd a004 	str.w	sl, [sp, #4]
    7022:	f8cd b000 	str.w	fp, [sp]
    7026:	464b      	mov	r3, r9
    7028:	aa0a      	add	r2, sp, #40	; 0x28
    702a:	4629      	mov	r1, r5
    702c:	4640      	mov	r0, r8
    702e:	f7f9 fd7c 	bl	b2a <mul_mont_n>
    7032:	f8cd a004 	str.w	sl, [sp, #4]
    7036:	f8cd b000 	str.w	fp, [sp]
    703a:	464b      	mov	r3, r9
    703c:	aa16      	add	r2, sp, #88	; 0x58
    703e:	f105 0130 	add.w	r1, r5, #48	; 0x30
    7042:	f108 0030 	add.w	r0, r8, #48	; 0x30
    7046:	f7f9 fd70 	bl	b2a <mul_mont_n>
    704a:	9b04      	ldr	r3, [sp, #16]
    704c:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    7050:	eb08 1747 	add.w	r7, r8, r7, lsl #5
    7054:	9a03      	ldr	r2, [sp, #12]
    7056:	1ad3      	subs	r3, r2, r3
    7058:	9303      	str	r3, [sp, #12]
    705a:	d022      	beq.n	70a2 <blst_p1s_to_affine+0x23a>
    705c:	9b03      	ldr	r3, [sp, #12]
    705e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    7062:	bf28      	it	cs
    7064:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
    7068:	9304      	str	r3, [sp, #16]
    706a:	9b02      	ldr	r3, [sp, #8]
    706c:	681d      	ldr	r5, [r3, #0]
    706e:	2d00      	cmp	r5, #0
    7070:	f43f af0b 	beq.w	6e8a <blst_p1s_to_affine+0x22>
    7074:	3304      	adds	r3, #4
    7076:	9302      	str	r3, [sp, #8]
    7078:	f107 0430 	add.w	r4, r7, #48	; 0x30
    707c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    7080:	1f3a      	subs	r2, r7, #4
    7082:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    7086:	f853 0f04 	ldr.w	r0, [r3, #4]!
    708a:	f842 0f04 	str.w	r0, [r2, #4]!
    708e:	428b      	cmp	r3, r1
    7090:	d1f9      	bne.n	7086 <blst_p1s_to_affine+0x21e>
    7092:	9b03      	ldr	r3, [sp, #12]
    7094:	2b01      	cmp	r3, #1
    7096:	f67f af16 	bls.w	6ec6 <blst_p1s_to_affine+0x5e>
    709a:	4626      	mov	r6, r4
    709c:	f04f 0801 	mov.w	r8, #1
    70a0:	e709      	b.n	6eb6 <blst_p1s_to_affine+0x4e>
    70a2:	b023      	add	sp, #140	; 0x8c
    70a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70a8:	0001ade8 	.word	0x0001ade8
    70ac:	fffcfffd 	.word	0xfffcfffd

000070b0 <POINTonE1s_to_affine_row_wbits>:
    70b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70b4:	b0a5      	sub	sp, #148	; 0x94
    70b6:	9006      	str	r0, [sp, #24]
    70b8:	469b      	mov	fp, r3
    70ba:	3a01      	subs	r2, #1
    70bc:	920a      	str	r2, [sp, #40]	; 0x28
    70be:	2301      	movs	r3, #1
    70c0:	4093      	lsls	r3, r2
    70c2:	9303      	str	r3, [sp, #12]
    70c4:	fa0b f302 	lsl.w	r3, fp, r2
    70c8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    70cc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    70d0:	9104      	str	r1, [sp, #16]
    70d2:	f101 0a30 	add.w	sl, r1, #48	; 0x30
    70d6:	4a69      	ldr	r2, [pc, #420]	; (727c <POINTonE1s_to_affine_row_wbits+0x1cc>)
    70d8:	1f0b      	subs	r3, r1, #4
    70da:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    70de:	f852 1b04 	ldr.w	r1, [r2], #4
    70e2:	f843 1f04 	str.w	r1, [r3, #4]!
    70e6:	4283      	cmp	r3, r0
    70e8:	d1f9      	bne.n	70de <POINTonE1s_to_affine_row_wbits+0x2e>
    70ea:	f1bb 0f00 	cmp.w	fp, #0
    70ee:	f000 80a3 	beq.w	7238 <POINTonE1s_to_affine_row_wbits+0x188>
    70f2:	f06f 038f 	mvn.w	r3, #143	; 0x8f
    70f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    70f8:	4093      	lsls	r3, r2
    70fa:	9309      	str	r3, [sp, #36]	; 0x24
    70fc:	2330      	movs	r3, #48	; 0x30
    70fe:	4093      	lsls	r3, r2
    7100:	3b30      	subs	r3, #48	; 0x30
    7102:	9308      	str	r3, [sp, #32]
    7104:	2300      	movs	r3, #0
    7106:	9305      	str	r3, [sp, #20]
    7108:	f8df 9178 	ldr.w	r9, [pc, #376]	; 7284 <POINTonE1s_to_affine_row_wbits+0x1d4>
    710c:	f04f 080c 	mov.w	r8, #12
    7110:	4f5b      	ldr	r7, [pc, #364]	; (7280 <POINTonE1s_to_affine_row_wbits+0x1d0>)
    7112:	f8cd b01c 	str.w	fp, [sp, #28]
    7116:	f8dd b010 	ldr.w	fp, [sp, #16]
    711a:	e01a      	b.n	7152 <POINTonE1s_to_affine_row_wbits+0xa2>
    711c:	f1ab 0630 	sub.w	r6, fp, #48	; 0x30
    7120:	4654      	mov	r4, sl
    7122:	f8cd 8004 	str.w	r8, [sp, #4]
    7126:	9700      	str	r7, [sp, #0]
    7128:	464b      	mov	r3, r9
    712a:	4632      	mov	r2, r6
    712c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    7130:	4620      	mov	r0, r4
    7132:	f7f9 fcfa 	bl	b2a <mul_mont_n>
    7136:	3430      	adds	r4, #48	; 0x30
    7138:	3e90      	subs	r6, #144	; 0x90
    713a:	3d01      	subs	r5, #1
    713c:	d1f1      	bne.n	7122 <POINTonE1s_to_affine_row_wbits+0x72>
    713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7140:	449b      	add	fp, r3
    7142:	9b08      	ldr	r3, [sp, #32]
    7144:	449a      	add	sl, r3
    7146:	9b05      	ldr	r3, [sp, #20]
    7148:	3301      	adds	r3, #1
    714a:	9a07      	ldr	r2, [sp, #28]
    714c:	429a      	cmp	r2, r3
    714e:	d07a      	beq.n	7246 <POINTonE1s_to_affine_row_wbits+0x196>
    7150:	9305      	str	r3, [sp, #20]
    7152:	f1ab 0390 	sub.w	r3, fp, #144	; 0x90
    7156:	9a03      	ldr	r2, [sp, #12]
    7158:	1e55      	subs	r5, r2, #1
    715a:	bf08      	it	eq
    715c:	469b      	moveq	fp, r3
    715e:	d1dd      	bne.n	711c <POINTonE1s_to_affine_row_wbits+0x6c>
    7160:	e7f1      	b.n	7146 <POINTonE1s_to_affine_row_wbits+0x96>
    7162:	f8cd 8010 	str.w	r8, [sp, #16]
    7166:	f8cd 9018 	str.w	r9, [sp, #24]
    716a:	9a08      	ldr	r2, [sp, #32]
    716c:	1c53      	adds	r3, r2, #1
    716e:	9905      	ldr	r1, [sp, #20]
    7170:	4291      	cmp	r1, r2
    7172:	d065      	beq.n	7240 <POINTonE1s_to_affine_row_wbits+0x190>
    7174:	9308      	str	r3, [sp, #32]
    7176:	9a06      	ldr	r2, [sp, #24]
    7178:	f102 0960 	add.w	r9, r2, #96	; 0x60
    717c:	9904      	ldr	r1, [sp, #16]
    717e:	f101 0890 	add.w	r8, r1, #144	; 0x90
    7182:	1f0b      	subs	r3, r1, #4
    7184:	3a04      	subs	r2, #4
    7186:	f101 005c 	add.w	r0, r1, #92	; 0x5c
    718a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    718e:	f842 1f04 	str.w	r1, [r2, #4]!
    7192:	4283      	cmp	r3, r0
    7194:	d1f9      	bne.n	718a <POINTonE1s_to_affine_row_wbits+0xda>
    7196:	9b03      	ldr	r3, [sp, #12]
    7198:	2b01      	cmp	r3, #1
    719a:	d9e2      	bls.n	7162 <POINTonE1s_to_affine_row_wbits+0xb2>
    719c:	9c07      	ldr	r4, [sp, #28]
    719e:	f04f 0a01 	mov.w	sl, #1
    71a2:	46a3      	mov	fp, r4
    71a4:	3c30      	subs	r4, #48	; 0x30
    71a6:	9601      	str	r6, [sp, #4]
    71a8:	9500      	str	r5, [sp, #0]
    71aa:	463b      	mov	r3, r7
    71ac:	465a      	mov	r2, fp
    71ae:	4621      	mov	r1, r4
    71b0:	4620      	mov	r0, r4
    71b2:	f7f9 fcba 	bl	b2a <mul_mont_n>
    71b6:	9601      	str	r6, [sp, #4]
    71b8:	9500      	str	r5, [sp, #0]
    71ba:	463b      	mov	r3, r7
    71bc:	4622      	mov	r2, r4
    71be:	4621      	mov	r1, r4
    71c0:	a818      	add	r0, sp, #96	; 0x60
    71c2:	f7f9 fcb2 	bl	b2a <mul_mont_n>
    71c6:	9601      	str	r6, [sp, #4]
    71c8:	9500      	str	r5, [sp, #0]
    71ca:	463b      	mov	r3, r7
    71cc:	4622      	mov	r2, r4
    71ce:	a918      	add	r1, sp, #96	; 0x60
    71d0:	a80c      	add	r0, sp, #48	; 0x30
    71d2:	f7f9 fcaa 	bl	b2a <mul_mont_n>
    71d6:	9601      	str	r6, [sp, #4]
    71d8:	9500      	str	r5, [sp, #0]
    71da:	463b      	mov	r3, r7
    71dc:	465a      	mov	r2, fp
    71de:	f108 0160 	add.w	r1, r8, #96	; 0x60
    71e2:	4620      	mov	r0, r4
    71e4:	f7f9 fca1 	bl	b2a <mul_mont_n>
    71e8:	9601      	str	r6, [sp, #4]
    71ea:	9500      	str	r5, [sp, #0]
    71ec:	463b      	mov	r3, r7
    71ee:	aa18      	add	r2, sp, #96	; 0x60
    71f0:	4641      	mov	r1, r8
    71f2:	4648      	mov	r0, r9
    71f4:	f7f9 fc99 	bl	b2a <mul_mont_n>
    71f8:	9601      	str	r6, [sp, #4]
    71fa:	9500      	str	r5, [sp, #0]
    71fc:	463b      	mov	r3, r7
    71fe:	aa0c      	add	r2, sp, #48	; 0x30
    7200:	f108 0130 	add.w	r1, r8, #48	; 0x30
    7204:	f109 0030 	add.w	r0, r9, #48	; 0x30
    7208:	f7f9 fc8f 	bl	b2a <mul_mont_n>
    720c:	f10a 0a01 	add.w	sl, sl, #1
    7210:	f108 0890 	add.w	r8, r8, #144	; 0x90
    7214:	f109 0960 	add.w	r9, r9, #96	; 0x60
    7218:	9b03      	ldr	r3, [sp, #12]
    721a:	4553      	cmp	r3, sl
    721c:	d1c1      	bne.n	71a2 <POINTonE1s_to_affine_row_wbits+0xf2>
    721e:	9b07      	ldr	r3, [sp, #28]
    7220:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7222:	4413      	add	r3, r2
    7224:	9307      	str	r3, [sp, #28]
    7226:	9b04      	ldr	r3, [sp, #16]
    7228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    722a:	4413      	add	r3, r2
    722c:	9304      	str	r3, [sp, #16]
    722e:	9b06      	ldr	r3, [sp, #24]
    7230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7232:	4413      	add	r3, r2
    7234:	9306      	str	r3, [sp, #24]
    7236:	e798      	b.n	716a <POINTonE1s_to_affine_row_wbits+0xba>
    7238:	9904      	ldr	r1, [sp, #16]
    723a:	4608      	mov	r0, r1
    723c:	f7ff f952 	bl	64e4 <reciprocal_fp>
    7240:	b025      	add	sp, #148	; 0x94
    7242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7246:	f8cd b010 	str.w	fp, [sp, #16]
    724a:	f1aa 0330 	sub.w	r3, sl, #48	; 0x30
    724e:	4619      	mov	r1, r3
    7250:	9307      	str	r3, [sp, #28]
    7252:	4618      	mov	r0, r3
    7254:	f7ff f946 	bl	64e4 <reciprocal_fp>
    7258:	f06f 032f 	mvn.w	r3, #47	; 0x2f
    725c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    725e:	4093      	lsls	r3, r2
    7260:	3330      	adds	r3, #48	; 0x30
    7262:	9309      	str	r3, [sp, #36]	; 0x24
    7264:	2390      	movs	r3, #144	; 0x90
    7266:	4093      	lsls	r3, r2
    7268:	930a      	str	r3, [sp, #40]	; 0x28
    726a:	2360      	movs	r3, #96	; 0x60
    726c:	4093      	lsls	r3, r2
    726e:	930b      	str	r3, [sp, #44]	; 0x2c
    7270:	2300      	movs	r3, #0
    7272:	9308      	str	r3, [sp, #32]
    7274:	4f03      	ldr	r7, [pc, #12]	; (7284 <POINTonE1s_to_affine_row_wbits+0x1d4>)
    7276:	260c      	movs	r6, #12
    7278:	4d01      	ldr	r5, [pc, #4]	; (7280 <POINTonE1s_to_affine_row_wbits+0x1d0>)
    727a:	e77c      	b.n	7176 <POINTonE1s_to_affine_row_wbits+0xc6>
    727c:	0001ae48 	.word	0x0001ae48
    7280:	fffcfffd 	.word	0xfffcfffd
    7284:	0001ade8 	.word	0x0001ade8

00007288 <POINTonE1s_precompute_wbits>:
    7288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    728c:	b089      	sub	sp, #36	; 0x24
    728e:	af00      	add	r7, sp, #0
    7290:	60b8      	str	r0, [r7, #8]
    7292:	468a      	mov	sl, r1
    7294:	4616      	mov	r6, r2
    7296:	61bb      	str	r3, [r7, #24]
    7298:	1e4a      	subs	r2, r1, #1
    729a:	613a      	str	r2, [r7, #16]
    729c:	4093      	lsls	r3, r2
    729e:	607b      	str	r3, [r7, #4]
    72a0:	2909      	cmp	r1, #9
    72a2:	bf9d      	ittte	ls
    72a4:	f1c1 0309 	rsbls	r3, r1, #9
    72a8:	2201      	movls	r2, #1
    72aa:	fa02 f303 	lslls.w	r3, r2, r3
    72ae:	2301      	movhi	r3, #1
    72b0:	60fb      	str	r3, [r7, #12]
    72b2:	f241 5955 	movw	r9, #5461	; 0x1555
    72b6:	fa29 f901 	lsr.w	r9, r9, r1
    72ba:	f1b9 0f01 	cmp.w	r9, #1
    72be:	bf38      	it	cc
    72c0:	f04f 0901 	movcc.w	r9, #1
    72c4:	68fb      	ldr	r3, [r7, #12]
    72c6:	69ba      	ldr	r2, [r7, #24]
    72c8:	4293      	cmp	r3, r2
    72ca:	d84e      	bhi.n	736a <POINTonE1s_precompute_wbits+0xe2>
    72cc:	2390      	movs	r3, #144	; 0x90
    72ce:	693a      	ldr	r2, [r7, #16]
    72d0:	fa03 fb02 	lsl.w	fp, r3, r2
    72d4:	f04f 0800 	mov.w	r8, #0
    72d8:	f8c7 801c 	str.w	r8, [r7, #28]
    72dc:	e01c      	b.n	7318 <POINTonE1s_precompute_wbits+0x90>
    72de:	69fb      	ldr	r3, [r7, #28]
    72e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    72e4:	68ba      	ldr	r2, [r7, #8]
    72e6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    72ea:	617b      	str	r3, [r7, #20]
    72ec:	f1b9 0f00 	cmp.w	r9, #0
    72f0:	d127      	bne.n	7342 <POINTonE1s_precompute_wbits+0xba>
    72f2:	464b      	mov	r3, r9
    72f4:	4652      	mov	r2, sl
    72f6:	6979      	ldr	r1, [r7, #20]
    72f8:	4608      	mov	r0, r1
    72fa:	f7ff fed9 	bl	70b0 <POINTonE1s_to_affine_row_wbits>
    72fe:	693b      	ldr	r3, [r7, #16]
    7300:	fa09 f303 	lsl.w	r3, r9, r3
    7304:	69fa      	ldr	r2, [r7, #28]
    7306:	441a      	add	r2, r3
    7308:	61fa      	str	r2, [r7, #28]
    730a:	69bb      	ldr	r3, [r7, #24]
    730c:	eba3 0309 	sub.w	r3, r3, r9
    7310:	61bb      	str	r3, [r7, #24]
    7312:	68fa      	ldr	r2, [r7, #12]
    7314:	429a      	cmp	r2, r3
    7316:	d82c      	bhi.n	7372 <POINTonE1s_precompute_wbits+0xea>
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	69ba      	ldr	r2, [r7, #24]
    731c:	1a9a      	subs	r2, r3, r2
    731e:	fa09 f30a 	lsl.w	r3, r9, sl
    7322:	69f9      	ldr	r1, [r7, #28]
    7324:	440b      	add	r3, r1
    7326:	4293      	cmp	r3, r2
    7328:	d9d9      	bls.n	72de <POINTonE1s_precompute_wbits+0x56>
    732a:	eba2 0901 	sub.w	r9, r2, r1
    732e:	fa39 f90a 	lsrs.w	r9, r9, sl
    7332:	d01e      	beq.n	7372 <POINTonE1s_precompute_wbits+0xea>
    7334:	69fb      	ldr	r3, [r7, #28]
    7336:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    733a:	68ba      	ldr	r2, [r7, #8]
    733c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
    7340:	617b      	str	r3, [r7, #20]
    7342:	697d      	ldr	r5, [r7, #20]
    7344:	2400      	movs	r4, #0
    7346:	e00a      	b.n	735e <POINTonE1s_precompute_wbits+0xd6>
    7348:	f108 0860 	add.w	r8, r8, #96	; 0x60
    734c:	4642      	mov	r2, r8
    734e:	4651      	mov	r1, sl
    7350:	4628      	mov	r0, r5
    7352:	f7fb fa52 	bl	27fa <POINTonE1_precompute_row_wbits>
    7356:	3401      	adds	r4, #1
    7358:	445d      	add	r5, fp
    735a:	454c      	cmp	r4, r9
    735c:	d2c9      	bcs.n	72f2 <POINTonE1s_precompute_wbits+0x6a>
    735e:	6833      	ldr	r3, [r6, #0]
    7360:	2b00      	cmp	r3, #0
    7362:	d0f1      	beq.n	7348 <POINTonE1s_precompute_wbits+0xc0>
    7364:	3604      	adds	r6, #4
    7366:	4698      	mov	r8, r3
    7368:	e7f0      	b.n	734c <POINTonE1s_precompute_wbits+0xc4>
    736a:	f04f 0800 	mov.w	r8, #0
    736e:	f8c7 801c 	str.w	r8, [r7, #28]
    7372:	69ba      	ldr	r2, [r7, #24]
    7374:	4613      	mov	r3, r2
    7376:	6939      	ldr	r1, [r7, #16]
    7378:	408b      	lsls	r3, r1
    737a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    737e:	4668      	mov	r0, sp
    7380:	eba0 1383 	sub.w	r3, r0, r3, lsl #6
    7384:	469d      	mov	sp, r3
    7386:	46eb      	mov	fp, sp
    7388:	b1e2      	cbz	r2, 73c4 <POINTonE1s_precompute_wbits+0x13c>
    738a:	f04f 0990 	mov.w	r9, #144	; 0x90
    738e:	fa09 f901 	lsl.w	r9, r9, r1
    7392:	465d      	mov	r5, fp
    7394:	2400      	movs	r4, #0
    7396:	f8c7 b014 	str.w	fp, [r7, #20]
    739a:	4693      	mov	fp, r2
    739c:	e00a      	b.n	73b4 <POINTonE1s_precompute_wbits+0x12c>
    739e:	f108 0860 	add.w	r8, r8, #96	; 0x60
    73a2:	4642      	mov	r2, r8
    73a4:	4651      	mov	r1, sl
    73a6:	4628      	mov	r0, r5
    73a8:	f7fb fa27 	bl	27fa <POINTonE1_precompute_row_wbits>
    73ac:	3401      	adds	r4, #1
    73ae:	444d      	add	r5, r9
    73b0:	455c      	cmp	r4, fp
    73b2:	d005      	beq.n	73c0 <POINTonE1s_precompute_wbits+0x138>
    73b4:	6833      	ldr	r3, [r6, #0]
    73b6:	2b00      	cmp	r3, #0
    73b8:	d0f1      	beq.n	739e <POINTonE1s_precompute_wbits+0x116>
    73ba:	3604      	adds	r6, #4
    73bc:	4698      	mov	r8, r3
    73be:	e7f0      	b.n	73a2 <POINTonE1s_precompute_wbits+0x11a>
    73c0:	f8d7 b014 	ldr.w	fp, [r7, #20]
    73c4:	69fb      	ldr	r3, [r7, #28]
    73c6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    73ca:	69bb      	ldr	r3, [r7, #24]
    73cc:	4652      	mov	r2, sl
    73ce:	4659      	mov	r1, fp
    73d0:	68bc      	ldr	r4, [r7, #8]
    73d2:	eb04 1040 	add.w	r0, r4, r0, lsl #5
    73d6:	f7ff fe6b 	bl	70b0 <POINTonE1s_to_affine_row_wbits>
    73da:	3724      	adds	r7, #36	; 0x24
    73dc:	46bd      	mov	sp, r7
    73de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000073e2 <blst_p1s_mult_wbits_precompute>:
    73e2:	b508      	push	{r3, lr}
    73e4:	f7ff ff50 	bl	7288 <POINTonE1s_precompute_wbits>
    73e8:	bd08      	pop	{r3, pc}

000073ea <recip_sqrt_fp_3mod4>:
    73ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73ee:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    73f2:	9003      	str	r0, [sp, #12]
    73f4:	1f0b      	subs	r3, r1, #4
    73f6:	aa9f      	add	r2, sp, #636	; 0x27c
    73f8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    73fc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7400:	f842 1f04 	str.w	r1, [r2, #4]!
    7404:	4283      	cmp	r3, r0
    7406:	d1f9      	bne.n	73fc <recip_sqrt_fp_3mod4+0x12>
    7408:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 76f8 <recip_sqrt_fp_3mod4+0x30e>
    740c:	270c      	movs	r7, #12
    740e:	9701      	str	r7, [sp, #4]
    7410:	4eb8      	ldr	r6, [pc, #736]	; (76f4 <recip_sqrt_fp_3mod4+0x30a>)
    7412:	9600      	str	r6, [sp, #0]
    7414:	465b      	mov	r3, fp
    7416:	aaa0      	add	r2, sp, #640	; 0x280
    7418:	4611      	mov	r1, r2
    741a:	a804      	add	r0, sp, #16
    741c:	f7f9 fb85 	bl	b2a <mul_mont_n>
    7420:	ad64      	add	r5, sp, #400	; 0x190
    7422:	9701      	str	r7, [sp, #4]
    7424:	9600      	str	r6, [sp, #0]
    7426:	465b      	mov	r3, fp
    7428:	aaa0      	add	r2, sp, #640	; 0x280
    742a:	a904      	add	r1, sp, #16
    742c:	4628      	mov	r0, r5
    742e:	f7f9 fb7c 	bl	b2a <mul_mont_n>
    7432:	ac34      	add	r4, sp, #208	; 0xd0
    7434:	9701      	str	r7, [sp, #4]
    7436:	9600      	str	r6, [sp, #0]
    7438:	465b      	mov	r3, fp
    743a:	aa04      	add	r2, sp, #16
    743c:	4611      	mov	r1, r2
    743e:	4620      	mov	r0, r4
    7440:	f7f9 fb73 	bl	b2a <mul_mont_n>
    7444:	9701      	str	r7, [sp, #4]
    7446:	9600      	str	r6, [sp, #0]
    7448:	465b      	mov	r3, fp
    744a:	aa04      	add	r2, sp, #16
    744c:	4629      	mov	r1, r5
    744e:	a810      	add	r0, sp, #64	; 0x40
    7450:	f7f9 fb6b 	bl	b2a <mul_mont_n>
    7454:	9701      	str	r7, [sp, #4]
    7456:	9600      	str	r6, [sp, #0]
    7458:	465b      	mov	r3, fp
    745a:	462a      	mov	r2, r5
    745c:	4621      	mov	r1, r4
    745e:	a84c      	add	r0, sp, #304	; 0x130
    7460:	f7f9 fb63 	bl	b2a <mul_mont_n>
    7464:	9701      	str	r7, [sp, #4]
    7466:	9600      	str	r6, [sp, #0]
    7468:	465b      	mov	r3, fp
    746a:	4622      	mov	r2, r4
    746c:	a910      	add	r1, sp, #64	; 0x40
    746e:	a870      	add	r0, sp, #448	; 0x1c0
    7470:	f7f9 fb5b 	bl	b2a <mul_mont_n>
    7474:	9701      	str	r7, [sp, #4]
    7476:	9600      	str	r6, [sp, #0]
    7478:	465b      	mov	r3, fp
    747a:	4622      	mov	r2, r4
    747c:	a94c      	add	r1, sp, #304	; 0x130
    747e:	a894      	add	r0, sp, #592	; 0x250
    7480:	f7f9 fb53 	bl	b2a <mul_mont_n>
    7484:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
    7488:	9701      	str	r7, [sp, #4]
    748a:	9600      	str	r6, [sp, #0]
    748c:	465b      	mov	r3, fp
    748e:	4622      	mov	r2, r4
    7490:	a970      	add	r1, sp, #448	; 0x1c0
    7492:	4640      	mov	r0, r8
    7494:	f7f9 fb49 	bl	b2a <mul_mont_n>
    7498:	f50d 79b0 	add.w	r9, sp, #352	; 0x160
    749c:	9701      	str	r7, [sp, #4]
    749e:	9600      	str	r6, [sp, #0]
    74a0:	465b      	mov	r3, fp
    74a2:	4622      	mov	r2, r4
    74a4:	a994      	add	r1, sp, #592	; 0x250
    74a6:	4648      	mov	r0, r9
    74a8:	f7f9 fb3f 	bl	b2a <mul_mont_n>
    74ac:	9701      	str	r7, [sp, #4]
    74ae:	9600      	str	r6, [sp, #0]
    74b0:	465b      	mov	r3, fp
    74b2:	4622      	mov	r2, r4
    74b4:	4641      	mov	r1, r8
    74b6:	a8b8      	add	r0, sp, #736	; 0x2e0
    74b8:	f7f9 fb37 	bl	b2a <mul_mont_n>
    74bc:	9701      	str	r7, [sp, #4]
    74be:	9600      	str	r6, [sp, #0]
    74c0:	465b      	mov	r3, fp
    74c2:	4622      	mov	r2, r4
    74c4:	4649      	mov	r1, r9
    74c6:	a87c      	add	r0, sp, #496	; 0x1f0
    74c8:	f7f9 fb2f 	bl	b2a <mul_mont_n>
    74cc:	9701      	str	r7, [sp, #4]
    74ce:	9600      	str	r6, [sp, #0]
    74d0:	465b      	mov	r3, fp
    74d2:	4622      	mov	r2, r4
    74d4:	a9b8      	add	r1, sp, #736	; 0x2e0
    74d6:	a81c      	add	r0, sp, #112	; 0x70
    74d8:	f7f9 fb27 	bl	b2a <mul_mont_n>
    74dc:	9701      	str	r7, [sp, #4]
    74de:	9600      	str	r6, [sp, #0]
    74e0:	465b      	mov	r3, fp
    74e2:	4622      	mov	r2, r4
    74e4:	a97c      	add	r1, sp, #496	; 0x1f0
    74e6:	a888      	add	r0, sp, #544	; 0x220
    74e8:	f7f9 fb1f 	bl	b2a <mul_mont_n>
    74ec:	9701      	str	r7, [sp, #4]
    74ee:	9600      	str	r6, [sp, #0]
    74f0:	465b      	mov	r3, fp
    74f2:	4642      	mov	r2, r8
    74f4:	4641      	mov	r1, r8
    74f6:	a804      	add	r0, sp, #16
    74f8:	f7f9 fb17 	bl	b2a <mul_mont_n>
    74fc:	9701      	str	r7, [sp, #4]
    74fe:	9600      	str	r6, [sp, #0]
    7500:	465b      	mov	r3, fp
    7502:	4622      	mov	r2, r4
    7504:	a988      	add	r1, sp, #544	; 0x220
    7506:	a8ac      	add	r0, sp, #688	; 0x2b0
    7508:	f7f9 fb0f 	bl	b2a <mul_mont_n>
    750c:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
    7510:	9701      	str	r7, [sp, #4]
    7512:	9600      	str	r6, [sp, #0]
    7514:	465b      	mov	r3, fp
    7516:	462a      	mov	r2, r5
    7518:	a904      	add	r1, sp, #16
    751a:	4650      	mov	r0, sl
    751c:	f7f9 fb05 	bl	b2a <mul_mont_n>
    7520:	9701      	str	r7, [sp, #4]
    7522:	9600      	str	r6, [sp, #0]
    7524:	465b      	mov	r3, fp
    7526:	aa10      	add	r2, sp, #64	; 0x40
    7528:	a904      	add	r1, sp, #16
    752a:	4620      	mov	r0, r4
    752c:	f7f9 fafd 	bl	b2a <mul_mont_n>
    7530:	abb8      	add	r3, sp, #736	; 0x2e0
    7532:	9301      	str	r3, [sp, #4]
    7534:	9600      	str	r6, [sp, #0]
    7536:	465b      	mov	r3, fp
    7538:	463a      	mov	r2, r7
    753a:	a904      	add	r1, sp, #16
    753c:	4608      	mov	r0, r1
    753e:	f7fe fcb5 	bl	5eac <sqr_n_mul_mont_383>
    7542:	f8cd 9004 	str.w	r9, [sp, #4]
    7546:	9600      	str	r6, [sp, #0]
    7548:	465b      	mov	r3, fp
    754a:	2207      	movs	r2, #7
    754c:	a904      	add	r1, sp, #16
    754e:	4608      	mov	r0, r1
    7550:	f7fe fcac 	bl	5eac <sqr_n_mul_mont_383>
    7554:	ab10      	add	r3, sp, #64	; 0x40
    7556:	9301      	str	r3, [sp, #4]
    7558:	9600      	str	r6, [sp, #0]
    755a:	465b      	mov	r3, fp
    755c:	2204      	movs	r2, #4
    755e:	a904      	add	r1, sp, #16
    7560:	4608      	mov	r0, r1
    7562:	f7fe fca3 	bl	5eac <sqr_n_mul_mont_383>
    7566:	ab4c      	add	r3, sp, #304	; 0x130
    7568:	9301      	str	r3, [sp, #4]
    756a:	9600      	str	r6, [sp, #0]
    756c:	465b      	mov	r3, fp
    756e:	2206      	movs	r2, #6
    7570:	a904      	add	r1, sp, #16
    7572:	4608      	mov	r0, r1
    7574:	f7fe fc9a 	bl	5eac <sqr_n_mul_mont_383>
    7578:	ab88      	add	r3, sp, #544	; 0x220
    757a:	9301      	str	r3, [sp, #4]
    757c:	9600      	str	r6, [sp, #0]
    757e:	465b      	mov	r3, fp
    7580:	2207      	movs	r2, #7
    7582:	a904      	add	r1, sp, #16
    7584:	4608      	mov	r0, r1
    7586:	f7fe fc91 	bl	5eac <sqr_n_mul_mont_383>
    758a:	9401      	str	r4, [sp, #4]
    758c:	9600      	str	r6, [sp, #0]
    758e:	465b      	mov	r3, fp
    7590:	2205      	movs	r2, #5
    7592:	a904      	add	r1, sp, #16
    7594:	4608      	mov	r0, r1
    7596:	f7fe fc89 	bl	5eac <sqr_n_mul_mont_383>
    759a:	9501      	str	r5, [sp, #4]
    759c:	9600      	str	r6, [sp, #0]
    759e:	465b      	mov	r3, fp
    75a0:	2202      	movs	r2, #2
    75a2:	a904      	add	r1, sp, #16
    75a4:	4608      	mov	r0, r1
    75a6:	f7fe fc81 	bl	5eac <sqr_n_mul_mont_383>
    75aa:	f8cd 8004 	str.w	r8, [sp, #4]
    75ae:	9600      	str	r6, [sp, #0]
    75b0:	465b      	mov	r3, fp
    75b2:	2206      	movs	r2, #6
    75b4:	a904      	add	r1, sp, #16
    75b6:	4608      	mov	r0, r1
    75b8:	f7fe fc78 	bl	5eac <sqr_n_mul_mont_383>
    75bc:	f8cd 8004 	str.w	r8, [sp, #4]
    75c0:	9600      	str	r6, [sp, #0]
    75c2:	465b      	mov	r3, fp
    75c4:	2206      	movs	r2, #6
    75c6:	a904      	add	r1, sp, #16
    75c8:	4608      	mov	r0, r1
    75ca:	f7fe fc6f 	bl	5eac <sqr_n_mul_mont_383>
    75ce:	ab70      	add	r3, sp, #448	; 0x1c0
    75d0:	9301      	str	r3, [sp, #4]
    75d2:	9600      	str	r6, [sp, #0]
    75d4:	465b      	mov	r3, fp
    75d6:	2206      	movs	r2, #6
    75d8:	a904      	add	r1, sp, #16
    75da:	4608      	mov	r0, r1
    75dc:	f7fe fc66 	bl	5eac <sqr_n_mul_mont_383>
    75e0:	9501      	str	r5, [sp, #4]
    75e2:	9600      	str	r6, [sp, #0]
    75e4:	465b      	mov	r3, fp
    75e6:	2203      	movs	r2, #3
    75e8:	a904      	add	r1, sp, #16
    75ea:	4608      	mov	r0, r1
    75ec:	f7fe fc5e 	bl	5eac <sqr_n_mul_mont_383>
    75f0:	f8cd 8004 	str.w	r8, [sp, #4]
    75f4:	9600      	str	r6, [sp, #0]
    75f6:	465b      	mov	r3, fp
    75f8:	2207      	movs	r2, #7
    75fa:	a904      	add	r1, sp, #16
    75fc:	4608      	mov	r0, r1
    75fe:	f7fe fc55 	bl	5eac <sqr_n_mul_mont_383>
    7602:	f8cd 8004 	str.w	r8, [sp, #4]
    7606:	9600      	str	r6, [sp, #0]
    7608:	465b      	mov	r3, fp
    760a:	2204      	movs	r2, #4
    760c:	a904      	add	r1, sp, #16
    760e:	4608      	mov	r0, r1
    7610:	f7fe fc4c 	bl	5eac <sqr_n_mul_mont_383>
    7614:	f8cd 9004 	str.w	r9, [sp, #4]
    7618:	9600      	str	r6, [sp, #0]
    761a:	465b      	mov	r3, fp
    761c:	2206      	movs	r2, #6
    761e:	a904      	add	r1, sp, #16
    7620:	4608      	mov	r0, r1
    7622:	f7fe fc43 	bl	5eac <sqr_n_mul_mont_383>
    7626:	abac      	add	r3, sp, #688	; 0x2b0
    7628:	9301      	str	r3, [sp, #4]
    762a:	9600      	str	r6, [sp, #0]
    762c:	465b      	mov	r3, fp
    762e:	2206      	movs	r2, #6
    7630:	a904      	add	r1, sp, #16
    7632:	4608      	mov	r0, r1
    7634:	f7fe fc3a 	bl	5eac <sqr_n_mul_mont_383>
    7638:	aba0      	add	r3, sp, #640	; 0x280
    763a:	9301      	str	r3, [sp, #4]
    763c:	9600      	str	r6, [sp, #0]
    763e:	465b      	mov	r3, fp
    7640:	2203      	movs	r2, #3
    7642:	a904      	add	r1, sp, #16
    7644:	4608      	mov	r0, r1
    7646:	f7fe fc31 	bl	5eac <sqr_n_mul_mont_383>
    764a:	f8cd 8004 	str.w	r8, [sp, #4]
    764e:	9600      	str	r6, [sp, #0]
    7650:	465b      	mov	r3, fp
    7652:	2208      	movs	r2, #8
    7654:	a904      	add	r1, sp, #16
    7656:	4608      	mov	r0, r1
    7658:	f7fe fc28 	bl	5eac <sqr_n_mul_mont_383>
    765c:	ab88      	add	r3, sp, #544	; 0x220
    765e:	9301      	str	r3, [sp, #4]
    7660:	9600      	str	r6, [sp, #0]
    7662:	465b      	mov	r3, fp
    7664:	2207      	movs	r2, #7
    7666:	a904      	add	r1, sp, #16
    7668:	4608      	mov	r0, r1
    766a:	f7fe fc1f 	bl	5eac <sqr_n_mul_mont_383>
    766e:	ab94      	add	r3, sp, #592	; 0x250
    7670:	9301      	str	r3, [sp, #4]
    7672:	9600      	str	r6, [sp, #0]
    7674:	465b      	mov	r3, fp
    7676:	2205      	movs	r2, #5
    7678:	a904      	add	r1, sp, #16
    767a:	4608      	mov	r0, r1
    767c:	f7fe fc16 	bl	5eac <sqr_n_mul_mont_383>
    7680:	f8cd 8004 	str.w	r8, [sp, #4]
    7684:	9600      	str	r6, [sp, #0]
    7686:	465b      	mov	r3, fp
    7688:	2206      	movs	r2, #6
    768a:	a904      	add	r1, sp, #16
    768c:	4608      	mov	r0, r1
    768e:	f7fe fc0d 	bl	5eac <sqr_n_mul_mont_383>
    7692:	f8cd a004 	str.w	sl, [sp, #4]
    7696:	9600      	str	r6, [sp, #0]
    7698:	465b      	mov	r3, fp
    769a:	2206      	movs	r2, #6
    769c:	a904      	add	r1, sp, #16
    769e:	4608      	mov	r0, r1
    76a0:	f7fe fc04 	bl	5eac <sqr_n_mul_mont_383>
    76a4:	ab70      	add	r3, sp, #448	; 0x1c0
    76a6:	9301      	str	r3, [sp, #4]
    76a8:	9600      	str	r6, [sp, #0]
    76aa:	465b      	mov	r3, fp
    76ac:	2204      	movs	r2, #4
    76ae:	a904      	add	r1, sp, #16
    76b0:	4608      	mov	r0, r1
    76b2:	f7fe fbfb 	bl	5eac <sqr_n_mul_mont_383>
    76b6:	f8cd a004 	str.w	sl, [sp, #4]
    76ba:	9600      	str	r6, [sp, #0]
    76bc:	465b      	mov	r3, fp
    76be:	2208      	movs	r2, #8
    76c0:	a904      	add	r1, sp, #16
    76c2:	4608      	mov	r0, r1
    76c4:	f7fe fbf2 	bl	5eac <sqr_n_mul_mont_383>
    76c8:	f8cd 8004 	str.w	r8, [sp, #4]
    76cc:	9600      	str	r6, [sp, #0]
    76ce:	465b      	mov	r3, fp
    76d0:	2204      	movs	r2, #4
    76d2:	a904      	add	r1, sp, #16
    76d4:	4608      	mov	r0, r1
    76d6:	f7fe fbe9 	bl	5eac <sqr_n_mul_mont_383>
    76da:	ab88      	add	r3, sp, #544	; 0x220
    76dc:	9301      	str	r3, [sp, #4]
    76de:	9600      	str	r6, [sp, #0]
    76e0:	465b      	mov	r3, fp
    76e2:	2207      	movs	r2, #7
    76e4:	a904      	add	r1, sp, #16
    76e6:	4608      	mov	r0, r1
    76e8:	f7fe fbe0 	bl	5eac <sqr_n_mul_mont_383>
    76ec:	ab7c      	add	r3, sp, #496	; 0x1f0
    76ee:	9301      	str	r3, [sp, #4]
    76f0:	e004      	b.n	76fc <recip_sqrt_fp_3mod4+0x312>
    76f2:	bf00      	nop
    76f4:	fffcfffd 	.word	0xfffcfffd
    76f8:	0001ade8 	.word	0x0001ade8
    76fc:	9600      	str	r6, [sp, #0]
    76fe:	465b      	mov	r3, fp
    7700:	2209      	movs	r2, #9
    7702:	a904      	add	r1, sp, #16
    7704:	4608      	mov	r0, r1
    7706:	f7fe fbd1 	bl	5eac <sqr_n_mul_mont_383>
    770a:	9501      	str	r5, [sp, #4]
    770c:	9600      	str	r6, [sp, #0]
    770e:	465b      	mov	r3, fp
    7710:	2202      	movs	r2, #2
    7712:	a904      	add	r1, sp, #16
    7714:	4608      	mov	r0, r1
    7716:	f7fe fbc9 	bl	5eac <sqr_n_mul_mont_383>
    771a:	ab4c      	add	r3, sp, #304	; 0x130
    771c:	9301      	str	r3, [sp, #4]
    771e:	9600      	str	r6, [sp, #0]
    7720:	465b      	mov	r3, fp
    7722:	2205      	movs	r2, #5
    7724:	a904      	add	r1, sp, #16
    7726:	4608      	mov	r0, r1
    7728:	f7fe fbc0 	bl	5eac <sqr_n_mul_mont_383>
    772c:	ab10      	add	r3, sp, #64	; 0x40
    772e:	9301      	str	r3, [sp, #4]
    7730:	9600      	str	r6, [sp, #0]
    7732:	465b      	mov	r3, fp
    7734:	2207      	movs	r2, #7
    7736:	a904      	add	r1, sp, #16
    7738:	4608      	mov	r0, r1
    773a:	f7fe fbb7 	bl	5eac <sqr_n_mul_mont_383>
    773e:	ab70      	add	r3, sp, #448	; 0x1c0
    7740:	9301      	str	r3, [sp, #4]
    7742:	9600      	str	r6, [sp, #0]
    7744:	465b      	mov	r3, fp
    7746:	2207      	movs	r2, #7
    7748:	a904      	add	r1, sp, #16
    774a:	4608      	mov	r0, r1
    774c:	f7fe fbae 	bl	5eac <sqr_n_mul_mont_383>
    7750:	ab88      	add	r3, sp, #544	; 0x220
    7752:	9301      	str	r3, [sp, #4]
    7754:	9600      	str	r6, [sp, #0]
    7756:	465b      	mov	r3, fp
    7758:	2206      	movs	r2, #6
    775a:	a904      	add	r1, sp, #16
    775c:	4608      	mov	r0, r1
    775e:	f7fe fba5 	bl	5eac <sqr_n_mul_mont_383>
    7762:	f8cd a004 	str.w	sl, [sp, #4]
    7766:	9600      	str	r6, [sp, #0]
    7768:	465b      	mov	r3, fp
    776a:	2205      	movs	r2, #5
    776c:	a904      	add	r1, sp, #16
    776e:	4608      	mov	r0, r1
    7770:	f7fe fb9c 	bl	5eac <sqr_n_mul_mont_383>
    7774:	ab7c      	add	r3, sp, #496	; 0x1f0
    7776:	9301      	str	r3, [sp, #4]
    7778:	9600      	str	r6, [sp, #0]
    777a:	465b      	mov	r3, fp
    777c:	2205      	movs	r2, #5
    777e:	a904      	add	r1, sp, #16
    7780:	4608      	mov	r0, r1
    7782:	f7fe fb93 	bl	5eac <sqr_n_mul_mont_383>
    7786:	ab7c      	add	r3, sp, #496	; 0x1f0
    7788:	9301      	str	r3, [sp, #4]
    778a:	9600      	str	r6, [sp, #0]
    778c:	465b      	mov	r3, fp
    778e:	2205      	movs	r2, #5
    7790:	a904      	add	r1, sp, #16
    7792:	4608      	mov	r0, r1
    7794:	f7fe fb8a 	bl	5eac <sqr_n_mul_mont_383>
    7798:	f8cd 8004 	str.w	r8, [sp, #4]
    779c:	9600      	str	r6, [sp, #0]
    779e:	465b      	mov	r3, fp
    77a0:	2208      	movs	r2, #8
    77a2:	a904      	add	r1, sp, #16
    77a4:	4608      	mov	r0, r1
    77a6:	f7fe fb81 	bl	5eac <sqr_n_mul_mont_383>
    77aa:	ab1c      	add	r3, sp, #112	; 0x70
    77ac:	9301      	str	r3, [sp, #4]
    77ae:	9600      	str	r6, [sp, #0]
    77b0:	465b      	mov	r3, fp
    77b2:	2207      	movs	r2, #7
    77b4:	a904      	add	r1, sp, #16
    77b6:	4608      	mov	r0, r1
    77b8:	f7fe fb78 	bl	5eac <sqr_n_mul_mont_383>
    77bc:	f8cd 9004 	str.w	r9, [sp, #4]
    77c0:	9600      	str	r6, [sp, #0]
    77c2:	465b      	mov	r3, fp
    77c4:	2209      	movs	r2, #9
    77c6:	a904      	add	r1, sp, #16
    77c8:	4608      	mov	r0, r1
    77ca:	f7fe fb6f 	bl	5eac <sqr_n_mul_mont_383>
    77ce:	f8cd 8004 	str.w	r8, [sp, #4]
    77d2:	9600      	str	r6, [sp, #0]
    77d4:	465b      	mov	r3, fp
    77d6:	2205      	movs	r2, #5
    77d8:	a904      	add	r1, sp, #16
    77da:	4608      	mov	r0, r1
    77dc:	f7fe fb66 	bl	5eac <sqr_n_mul_mont_383>
    77e0:	9501      	str	r5, [sp, #4]
    77e2:	9600      	str	r6, [sp, #0]
    77e4:	465b      	mov	r3, fp
    77e6:	2203      	movs	r2, #3
    77e8:	a904      	add	r1, sp, #16
    77ea:	4608      	mov	r0, r1
    77ec:	f7fe fb5e 	bl	5eac <sqr_n_mul_mont_383>
    77f0:	f8cd 9004 	str.w	r9, [sp, #4]
    77f4:	9600      	str	r6, [sp, #0]
    77f6:	465b      	mov	r3, fp
    77f8:	2208      	movs	r2, #8
    77fa:	a904      	add	r1, sp, #16
    77fc:	4608      	mov	r0, r1
    77fe:	f7fe fb55 	bl	5eac <sqr_n_mul_mont_383>
    7802:	9501      	str	r5, [sp, #4]
    7804:	9600      	str	r6, [sp, #0]
    7806:	465b      	mov	r3, fp
    7808:	2203      	movs	r2, #3
    780a:	a904      	add	r1, sp, #16
    780c:	4608      	mov	r0, r1
    780e:	f7fe fb4d 	bl	5eac <sqr_n_mul_mont_383>
    7812:	ab70      	add	r3, sp, #448	; 0x1c0
    7814:	9301      	str	r3, [sp, #4]
    7816:	9600      	str	r6, [sp, #0]
    7818:	465b      	mov	r3, fp
    781a:	2207      	movs	r2, #7
    781c:	a904      	add	r1, sp, #16
    781e:	4608      	mov	r0, r1
    7820:	f7fe fb44 	bl	5eac <sqr_n_mul_mont_383>
    7824:	f8cd 9004 	str.w	r9, [sp, #4]
    7828:	9600      	str	r6, [sp, #0]
    782a:	465b      	mov	r3, fp
    782c:	2209      	movs	r2, #9
    782e:	a904      	add	r1, sp, #16
    7830:	4608      	mov	r0, r1
    7832:	f7fe fb3b 	bl	5eac <sqr_n_mul_mont_383>
    7836:	ab1c      	add	r3, sp, #112	; 0x70
    7838:	9301      	str	r3, [sp, #4]
    783a:	9600      	str	r6, [sp, #0]
    783c:	465b      	mov	r3, fp
    783e:	2206      	movs	r2, #6
    7840:	a904      	add	r1, sp, #16
    7842:	4608      	mov	r0, r1
    7844:	f7fe fb32 	bl	5eac <sqr_n_mul_mont_383>
    7848:	9401      	str	r4, [sp, #4]
    784a:	9600      	str	r6, [sp, #0]
    784c:	465b      	mov	r3, fp
    784e:	2206      	movs	r2, #6
    7850:	a904      	add	r1, sp, #16
    7852:	4608      	mov	r0, r1
    7854:	f7fe fb2a 	bl	5eac <sqr_n_mul_mont_383>
    7858:	9401      	str	r4, [sp, #4]
    785a:	9600      	str	r6, [sp, #0]
    785c:	465b      	mov	r3, fp
    785e:	2205      	movs	r2, #5
    7860:	a904      	add	r1, sp, #16
    7862:	4608      	mov	r0, r1
    7864:	f7fe fb22 	bl	5eac <sqr_n_mul_mont_383>
    7868:	9401      	str	r4, [sp, #4]
    786a:	9600      	str	r6, [sp, #0]
    786c:	465b      	mov	r3, fp
    786e:	2205      	movs	r2, #5
    7870:	a904      	add	r1, sp, #16
    7872:	4608      	mov	r0, r1
    7874:	f7fe fb1a 	bl	5eac <sqr_n_mul_mont_383>
    7878:	f8cd 8004 	str.w	r8, [sp, #4]
    787c:	9600      	str	r6, [sp, #0]
    787e:	465b      	mov	r3, fp
    7880:	2204      	movs	r2, #4
    7882:	a904      	add	r1, sp, #16
    7884:	4608      	mov	r0, r1
    7886:	f7fe fb11 	bl	5eac <sqr_n_mul_mont_383>
    788a:	9501      	str	r5, [sp, #4]
    788c:	9600      	str	r6, [sp, #0]
    788e:	465b      	mov	r3, fp
    7890:	2203      	movs	r2, #3
    7892:	a904      	add	r1, sp, #16
    7894:	4608      	mov	r0, r1
    7896:	f7fe fb09 	bl	5eac <sqr_n_mul_mont_383>
    789a:	ab1c      	add	r3, sp, #112	; 0x70
    789c:	9301      	str	r3, [sp, #4]
    789e:	9600      	str	r6, [sp, #0]
    78a0:	465b      	mov	r3, fp
    78a2:	2208      	movs	r2, #8
    78a4:	a904      	add	r1, sp, #16
    78a6:	4608      	mov	r0, r1
    78a8:	f7fe fb00 	bl	5eac <sqr_n_mul_mont_383>
    78ac:	9401      	str	r4, [sp, #4]
    78ae:	9600      	str	r6, [sp, #0]
    78b0:	465b      	mov	r3, fp
    78b2:	2207      	movs	r2, #7
    78b4:	a904      	add	r1, sp, #16
    78b6:	4608      	mov	r0, r1
    78b8:	f7fe faf8 	bl	5eac <sqr_n_mul_mont_383>
    78bc:	9401      	str	r4, [sp, #4]
    78be:	9600      	str	r6, [sp, #0]
    78c0:	465b      	mov	r3, fp
    78c2:	2205      	movs	r2, #5
    78c4:	a904      	add	r1, sp, #16
    78c6:	4608      	mov	r0, r1
    78c8:	f7fe faf0 	bl	5eac <sqr_n_mul_mont_383>
    78cc:	9401      	str	r4, [sp, #4]
    78ce:	9600      	str	r6, [sp, #0]
    78d0:	465b      	mov	r3, fp
    78d2:	2205      	movs	r2, #5
    78d4:	a904      	add	r1, sp, #16
    78d6:	4608      	mov	r0, r1
    78d8:	f7fe fae8 	bl	5eac <sqr_n_mul_mont_383>
    78dc:	f8cd 9004 	str.w	r9, [sp, #4]
    78e0:	9600      	str	r6, [sp, #0]
    78e2:	465b      	mov	r3, fp
    78e4:	2204      	movs	r2, #4
    78e6:	a904      	add	r1, sp, #16
    78e8:	4608      	mov	r0, r1
    78ea:	f7fe fadf 	bl	5eac <sqr_n_mul_mont_383>
    78ee:	ab4c      	add	r3, sp, #304	; 0x130
    78f0:	9301      	str	r3, [sp, #4]
    78f2:	9600      	str	r6, [sp, #0]
    78f4:	465b      	mov	r3, fp
    78f6:	2204      	movs	r2, #4
    78f8:	a904      	add	r1, sp, #16
    78fa:	4608      	mov	r0, r1
    78fc:	f7fe fad6 	bl	5eac <sqr_n_mul_mont_383>
    7900:	9401      	str	r4, [sp, #4]
    7902:	9600      	str	r6, [sp, #0]
    7904:	465b      	mov	r3, fp
    7906:	2207      	movs	r2, #7
    7908:	a904      	add	r1, sp, #16
    790a:	4608      	mov	r0, r1
    790c:	f7fe face 	bl	5eac <sqr_n_mul_mont_383>
    7910:	f8cd a004 	str.w	sl, [sp, #4]
    7914:	9600      	str	r6, [sp, #0]
    7916:	465b      	mov	r3, fp
    7918:	2205      	movs	r2, #5
    791a:	a904      	add	r1, sp, #16
    791c:	4608      	mov	r0, r1
    791e:	f7fe fac5 	bl	5eac <sqr_n_mul_mont_383>
    7922:	ae34      	add	r6, sp, #208	; 0xd0
    7924:	9601      	str	r6, [sp, #4]
    7926:	4d2b      	ldr	r5, [pc, #172]	; (79d4 <recip_sqrt_fp_3mod4+0x5ea>)
    7928:	9500      	str	r5, [sp, #0]
    792a:	465b      	mov	r3, fp
    792c:	2205      	movs	r2, #5
    792e:	a904      	add	r1, sp, #16
    7930:	4608      	mov	r0, r1
    7932:	f7fe fabb 	bl	5eac <sqr_n_mul_mont_383>
    7936:	9601      	str	r6, [sp, #4]
    7938:	9500      	str	r5, [sp, #0]
    793a:	465b      	mov	r3, fp
    793c:	2205      	movs	r2, #5
    793e:	a904      	add	r1, sp, #16
    7940:	4608      	mov	r0, r1
    7942:	f7fe fab3 	bl	5eac <sqr_n_mul_mont_383>
    7946:	9601      	str	r6, [sp, #4]
    7948:	9500      	str	r5, [sp, #0]
    794a:	465b      	mov	r3, fp
    794c:	2205      	movs	r2, #5
    794e:	a904      	add	r1, sp, #16
    7950:	4608      	mov	r0, r1
    7952:	f7fe faab 	bl	5eac <sqr_n_mul_mont_383>
    7956:	9601      	str	r6, [sp, #4]
    7958:	9500      	str	r5, [sp, #0]
    795a:	465b      	mov	r3, fp
    795c:	2205      	movs	r2, #5
    795e:	a904      	add	r1, sp, #16
    7960:	4608      	mov	r0, r1
    7962:	f7fe faa3 	bl	5eac <sqr_n_mul_mont_383>
    7966:	9601      	str	r6, [sp, #4]
    7968:	9500      	str	r5, [sp, #0]
    796a:	465b      	mov	r3, fp
    796c:	2205      	movs	r2, #5
    796e:	a904      	add	r1, sp, #16
    7970:	4608      	mov	r0, r1
    7972:	f7fe fa9b 	bl	5eac <sqr_n_mul_mont_383>
    7976:	9601      	str	r6, [sp, #4]
    7978:	9500      	str	r5, [sp, #0]
    797a:	465b      	mov	r3, fp
    797c:	2205      	movs	r2, #5
    797e:	a904      	add	r1, sp, #16
    7980:	4608      	mov	r0, r1
    7982:	f7fe fa93 	bl	5eac <sqr_n_mul_mont_383>
    7986:	ab28      	add	r3, sp, #160	; 0xa0
    7988:	9301      	str	r3, [sp, #4]
    798a:	9500      	str	r5, [sp, #0]
    798c:	465b      	mov	r3, fp
    798e:	2204      	movs	r2, #4
    7990:	a904      	add	r1, sp, #16
    7992:	4608      	mov	r0, r1
    7994:	f7fe fa8a 	bl	5eac <sqr_n_mul_mont_383>
    7998:	ab1c      	add	r3, sp, #112	; 0x70
    799a:	9301      	str	r3, [sp, #4]
    799c:	9500      	str	r5, [sp, #0]
    799e:	465b      	mov	r3, fp
    79a0:	2206      	movs	r2, #6
    79a2:	a904      	add	r1, sp, #16
    79a4:	4608      	mov	r0, r1
    79a6:	f7fe fa81 	bl	5eac <sqr_n_mul_mont_383>
    79aa:	ab10      	add	r3, sp, #64	; 0x40
    79ac:	9301      	str	r3, [sp, #4]
    79ae:	9500      	str	r5, [sp, #0]
    79b0:	465b      	mov	r3, fp
    79b2:	2204      	movs	r2, #4
    79b4:	a904      	add	r1, sp, #16
    79b6:	4608      	mov	r0, r1
    79b8:	f7fe fa78 	bl	5eac <sqr_n_mul_mont_383>
    79bc:	9701      	str	r7, [sp, #4]
    79be:	9500      	str	r5, [sp, #0]
    79c0:	465b      	mov	r3, fp
    79c2:	aa04      	add	r2, sp, #16
    79c4:	4611      	mov	r1, r2
    79c6:	9803      	ldr	r0, [sp, #12]
    79c8:	f7f9 f8af 	bl	b2a <mul_mont_n>
    79cc:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
    79d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79d4:	fffcfffd 	.word	0xfffcfffd

000079d8 <sqrt_fp>:
    79d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79dc:	b09a      	sub	sp, #104	; 0x68
    79de:	4607      	mov	r7, r0
    79e0:	460e      	mov	r6, r1
    79e2:	a80e      	add	r0, sp, #56	; 0x38
    79e4:	f7ff fd01 	bl	73ea <recip_sqrt_fp_3mod4>
    79e8:	4c19      	ldr	r4, [pc, #100]	; (7a50 <sqrt_fp+0x78>)
    79ea:	f04f 080c 	mov.w	r8, #12
    79ee:	f8cd 8004 	str.w	r8, [sp, #4]
    79f2:	4d18      	ldr	r5, [pc, #96]	; (7a54 <sqrt_fp+0x7c>)
    79f4:	9500      	str	r5, [sp, #0]
    79f6:	4623      	mov	r3, r4
    79f8:	4632      	mov	r2, r6
    79fa:	a90e      	add	r1, sp, #56	; 0x38
    79fc:	4608      	mov	r0, r1
    79fe:	f7f9 f894 	bl	b2a <mul_mont_n>
    7a02:	f8cd 8004 	str.w	r8, [sp, #4]
    7a06:	9500      	str	r5, [sp, #0]
    7a08:	4623      	mov	r3, r4
    7a0a:	aa0e      	add	r2, sp, #56	; 0x38
    7a0c:	4611      	mov	r1, r2
    7a0e:	a802      	add	r0, sp, #8
    7a10:	f7f9 f88b 	bl	b2a <mul_mont_n>
    7a14:	ad02      	add	r5, sp, #8
    7a16:	1f34      	subs	r4, r6, #4
    7a18:	f106 012c 	add.w	r1, r6, #44	; 0x2c
    7a1c:	2600      	movs	r6, #0
    7a1e:	f855 3b04 	ldr.w	r3, [r5], #4
    7a22:	f854 0f04 	ldr.w	r0, [r4, #4]!
    7a26:	4043      	eors	r3, r0
    7a28:	431e      	orrs	r6, r3
    7a2a:	428c      	cmp	r4, r1
    7a2c:	d1f7      	bne.n	7a1e <sqrt_fp+0x46>
    7a2e:	1e70      	subs	r0, r6, #1
    7a30:	ea20 0006 	bic.w	r0, r0, r6
    7a34:	0fc0      	lsrs	r0, r0, #31
    7a36:	aa0e      	add	r2, sp, #56	; 0x38
    7a38:	1f3b      	subs	r3, r7, #4
    7a3a:	372c      	adds	r7, #44	; 0x2c
    7a3c:	f852 1b04 	ldr.w	r1, [r2], #4
    7a40:	f843 1f04 	str.w	r1, [r3, #4]!
    7a44:	42bb      	cmp	r3, r7
    7a46:	d1f9      	bne.n	7a3c <sqrt_fp+0x64>
    7a48:	b01a      	add	sp, #104	; 0x68
    7a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a4e:	bf00      	nop
    7a50:	0001ade8 	.word	0x0001ade8
    7a54:	fffcfffd 	.word	0xfffcfffd

00007a58 <POINTonE1_Uncompress_Z>:
    7a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a5c:	b0b3      	sub	sp, #204	; 0xcc
    7a5e:	780d      	ldrb	r5, [r1, #0]
    7a60:	f991 3000 	ldrsb.w	r3, [r1]
    7a64:	2b00      	cmp	r3, #0
    7a66:	f280 80bd 	bge.w	7be4 <POINTonE1_Uncompress_Z+0x18c>
    7a6a:	4604      	mov	r4, r0
    7a6c:	f015 0640 	ands.w	r6, r5, #64	; 0x40
    7a70:	d01a      	beq.n	7aa8 <POINTonE1_Uncompress_Z+0x50>
    7a72:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    7a76:	3d01      	subs	r5, #1
    7a78:	0fed      	lsrs	r5, r5, #31
    7a7a:	460b      	mov	r3, r1
    7a7c:	312f      	adds	r1, #47	; 0x2f
    7a7e:	2200      	movs	r2, #0
    7a80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    7a84:	4302      	orrs	r2, r0
    7a86:	4299      	cmp	r1, r3
    7a88:	d1fa      	bne.n	7a80 <POINTonE1_Uncompress_Z+0x28>
    7a8a:	3a01      	subs	r2, #1
    7a8c:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
    7a90:	f000 80ad 	beq.w	7bee <POINTonE1_Uncompress_Z+0x196>
    7a94:	4623      	mov	r3, r4
    7a96:	f104 0160 	add.w	r1, r4, #96	; 0x60
    7a9a:	2200      	movs	r2, #0
    7a9c:	f843 2b04 	str.w	r2, [r3], #4
    7aa0:	428b      	cmp	r3, r1
    7aa2:	d1fb      	bne.n	7a9c <POINTonE1_Uncompress_Z+0x44>
    7aa4:	2600      	movs	r6, #0
    7aa6:	e09e      	b.n	7be6 <POINTonE1_Uncompress_Z+0x18e>
    7aa8:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    7aac:	460a      	mov	r2, r1
    7aae:	2000      	movs	r0, #0
    7ab0:	312f      	adds	r1, #47	; 0x2f
    7ab2:	1a8b      	subs	r3, r1, r2
    7ab4:	f812 7b01 	ldrb.w	r7, [r2], #1
    7ab8:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    7abc:	f023 0303 	bic.w	r3, r3, #3
    7ac0:	af32      	add	r7, sp, #200	; 0xc8
    7ac2:	443b      	add	r3, r7
    7ac4:	f843 0c60 	str.w	r0, [r3, #-96]
    7ac8:	4562      	cmp	r2, ip
    7aca:	d1f2      	bne.n	7ab2 <POINTonE1_Uncompress_Z+0x5a>
    7acc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7ace:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    7ad2:	9325      	str	r3, [sp, #148]	; 0x94
    7ad4:	4b4b      	ldr	r3, [pc, #300]	; (7c04 <POINTonE1_Uncompress_Z+0x1ac>)
    7ad6:	f10d 0868 	add.w	r8, sp, #104	; 0x68
    7ada:	220c      	movs	r2, #12
    7adc:	9200      	str	r2, [sp, #0]
    7ade:	f103 0290 	add.w	r2, r3, #144	; 0x90
    7ae2:	4641      	mov	r1, r8
    7ae4:	a802      	add	r0, sp, #8
    7ae6:	f7f9 fac9 	bl	107c <add_mod_n>
    7aea:	aa02      	add	r2, sp, #8
    7aec:	46c3      	mov	fp, r8
    7aee:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    7af2:	4641      	mov	r1, r8
    7af4:	2000      	movs	r0, #0
    7af6:	f852 3b04 	ldr.w	r3, [r2], #4
    7afa:	f851 7b04 	ldr.w	r7, [r1], #4
    7afe:	407b      	eors	r3, r7
    7b00:	4318      	orrs	r0, r3
    7b02:	4572      	cmp	r2, lr
    7b04:	d1f7      	bne.n	7af6 <POINTonE1_Uncompress_Z+0x9e>
    7b06:	1e43      	subs	r3, r0, #1
    7b08:	4383      	bics	r3, r0
    7b0a:	d572      	bpl.n	7bf2 <POINTonE1_Uncompress_Z+0x19a>
    7b0c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 7c04 <POINTonE1_Uncompress_Z+0x1ac>
    7b10:	f04f 090c 	mov.w	r9, #12
    7b14:	f8cd 9004 	str.w	r9, [sp, #4]
    7b18:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 7c0c <POINTonE1_Uncompress_Z+0x1b4>
    7b1c:	f8cd a000 	str.w	sl, [sp]
    7b20:	4643      	mov	r3, r8
    7b22:	4a39      	ldr	r2, [pc, #228]	; (7c08 <POINTonE1_Uncompress_Z+0x1b0>)
    7b24:	a91a      	add	r1, sp, #104	; 0x68
    7b26:	4608      	mov	r0, r1
    7b28:	f7f8 ffff 	bl	b2a <mul_mont_n>
    7b2c:	f8cd 9004 	str.w	r9, [sp, #4]
    7b30:	f8cd a000 	str.w	sl, [sp]
    7b34:	4643      	mov	r3, r8
    7b36:	aa1a      	add	r2, sp, #104	; 0x68
    7b38:	4611      	mov	r1, r2
    7b3a:	a826      	add	r0, sp, #152	; 0x98
    7b3c:	f7f8 fff5 	bl	b2a <mul_mont_n>
    7b40:	f8cd 9004 	str.w	r9, [sp, #4]
    7b44:	f8cd a000 	str.w	sl, [sp]
    7b48:	4643      	mov	r3, r8
    7b4a:	aa1a      	add	r2, sp, #104	; 0x68
    7b4c:	a926      	add	r1, sp, #152	; 0x98
    7b4e:	4608      	mov	r0, r1
    7b50:	f7f8 ffeb 	bl	b2a <mul_mont_n>
    7b54:	f8cd 9000 	str.w	r9, [sp]
    7b58:	4643      	mov	r3, r8
    7b5a:	f508 7228 	add.w	r2, r8, #672	; 0x2a0
    7b5e:	a926      	add	r1, sp, #152	; 0x98
    7b60:	4608      	mov	r0, r1
    7b62:	f7f9 fa8b 	bl	107c <add_mod_n>
    7b66:	a926      	add	r1, sp, #152	; 0x98
    7b68:	4608      	mov	r0, r1
    7b6a:	f7ff ff35 	bl	79d8 <sqrt_fp>
    7b6e:	2800      	cmp	r0, #0
    7b70:	d044      	beq.n	7bfc <POINTonE1_Uncompress_Z+0x1a4>
    7b72:	ab19      	add	r3, sp, #100	; 0x64
    7b74:	f1a4 0804 	sub.w	r8, r4, #4
    7b78:	f10b 075c 	add.w	r7, fp, #92	; 0x5c
    7b7c:	4642      	mov	r2, r8
    7b7e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7b82:	f842 1f04 	str.w	r1, [r2, #4]!
    7b86:	42bb      	cmp	r3, r7
    7b88:	d1f9      	bne.n	7b7e <POINTonE1_Uncompress_Z+0x126>
    7b8a:	f104 0730 	add.w	r7, r4, #48	; 0x30
    7b8e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 7c04 <POINTonE1_Uncompress_Z+0x1ac>
    7b92:	f04f 0a0c 	mov.w	sl, #12
    7b96:	f8cd a000 	str.w	sl, [sp]
    7b9a:	4b1c      	ldr	r3, [pc, #112]	; (7c0c <POINTonE1_Uncompress_Z+0x1b4>)
    7b9c:	464a      	mov	r2, r9
    7b9e:	4639      	mov	r1, r7
    7ba0:	a80e      	add	r0, sp, #56	; 0x38
    7ba2:	f7fb fb39 	bl	3218 <from_mont_n>
    7ba6:	4652      	mov	r2, sl
    7ba8:	4649      	mov	r1, r9
    7baa:	a80e      	add	r0, sp, #56	; 0x38
    7bac:	f7fb fc5e 	bl	346c <sgn0_pty_mod_n>
    7bb0:	2803      	cmp	r0, #3
    7bb2:	d820      	bhi.n	7bf6 <POINTonE1_Uncompress_Z+0x19e>
    7bb4:	f3c5 1540 	ubfx	r5, r5, #5, #1
    7bb8:	230c      	movs	r3, #12
    7bba:	9300      	str	r3, [sp, #0]
    7bbc:	4b11      	ldr	r3, [pc, #68]	; (7c04 <POINTonE1_Uncompress_Z+0x1ac>)
    7bbe:	ea85 0250 	eor.w	r2, r5, r0, lsr #1
    7bc2:	4639      	mov	r1, r7
    7bc4:	4638      	mov	r0, r7
    7bc6:	f7fa fe5b 	bl	2880 <cneg_mod_n>
    7bca:	342c      	adds	r4, #44	; 0x2c
    7bcc:	2300      	movs	r3, #0
    7bce:	f858 2f04 	ldr.w	r2, [r8, #4]!
    7bd2:	4313      	orrs	r3, r2
    7bd4:	45a0      	cmp	r8, r4
    7bd6:	d1fa      	bne.n	7bce <POINTonE1_Uncompress_Z+0x176>
    7bd8:	1e5a      	subs	r2, r3, #1
    7bda:	ea32 0303 	bics.w	r3, r2, r3
    7bde:	bf48      	it	mi
    7be0:	2603      	movmi	r6, #3
    7be2:	e000      	b.n	7be6 <POINTonE1_Uncompress_Z+0x18e>
    7be4:	2601      	movs	r6, #1
    7be6:	4630      	mov	r0, r6
    7be8:	b033      	add	sp, #204	; 0xcc
    7bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7bee:	2601      	movs	r6, #1
    7bf0:	e7f9      	b.n	7be6 <POINTonE1_Uncompress_Z+0x18e>
    7bf2:	f04f 30ff 	mov.w	r0, #4294967295
    7bf6:	4240      	negs	r0, r0
    7bf8:	b2c6      	uxtb	r6, r0
    7bfa:	e7f4      	b.n	7be6 <POINTonE1_Uncompress_Z+0x18e>
    7bfc:	f06f 0001 	mvn.w	r0, #1
    7c00:	e7f9      	b.n	7bf6 <POINTonE1_Uncompress_Z+0x19e>
    7c02:	bf00      	nop
    7c04:	0001ade8 	.word	0x0001ade8
    7c08:	0001c198 	.word	0x0001c198
    7c0c:	fffcfffd 	.word	0xfffcfffd

00007c10 <blst_p1_uncompress>:
    7c10:	b508      	push	{r3, lr}
    7c12:	f7ff ff21 	bl	7a58 <POINTonE1_Uncompress_Z>
    7c16:	bd08      	pop	{r3, pc}

00007c18 <POINTonE1_Deserialize_Z>:
    7c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c1c:	b0a6      	sub	sp, #152	; 0x98
    7c1e:	4604      	mov	r4, r0
    7c20:	780b      	ldrb	r3, [r1, #0]
    7c22:	f013 05e0 	ands.w	r5, r3, #224	; 0xe0
    7c26:	d01a      	beq.n	7c5e <POINTonE1_Deserialize_Z+0x46>
    7c28:	f013 0f80 	tst.w	r3, #128	; 0x80
    7c2c:	f040 80af 	bne.w	7d8e <POINTonE1_Deserialize_Z+0x176>
    7c30:	f013 0f40 	tst.w	r3, #64	; 0x40
    7c34:	f000 80b9 	beq.w	7daa <POINTonE1_Deserialize_Z+0x192>
    7c38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    7c3c:	3a01      	subs	r2, #1
    7c3e:	0fd2      	lsrs	r2, r2, #31
    7c40:	460b      	mov	r3, r1
    7c42:	315f      	adds	r1, #95	; 0x5f
    7c44:	2000      	movs	r0, #0
    7c46:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    7c4a:	4328      	orrs	r0, r5
    7c4c:	428b      	cmp	r3, r1
    7c4e:	d1fa      	bne.n	7c46 <POINTonE1_Deserialize_Z+0x2e>
    7c50:	3801      	subs	r0, #1
    7c52:	ea12 73d0 	ands.w	r3, r2, r0, lsr #31
    7c56:	f040 809e 	bne.w	7d96 <POINTonE1_Deserialize_Z+0x17e>
    7c5a:	2501      	movs	r5, #1
    7c5c:	e0a6      	b.n	7dac <POINTonE1_Deserialize_Z+0x194>
    7c5e:	f101 0230 	add.w	r2, r1, #48	; 0x30
    7c62:	4608      	mov	r0, r1
    7c64:	2600      	movs	r6, #0
    7c66:	468c      	mov	ip, r1
    7c68:	f101 0e2f 	add.w	lr, r1, #47	; 0x2f
    7c6c:	ebae 0300 	sub.w	r3, lr, r0
    7c70:	f810 7b01 	ldrb.w	r7, [r0], #1
    7c74:	ea47 2606 	orr.w	r6, r7, r6, lsl #8
    7c78:	f023 0303 	bic.w	r3, r3, #3
    7c7c:	af26      	add	r7, sp, #152	; 0x98
    7c7e:	443b      	add	r3, r7
    7c80:	f843 6c60 	str.w	r6, [r3, #-96]
    7c84:	4290      	cmp	r0, r2
    7c86:	d1f1      	bne.n	7c6c <POINTonE1_Deserialize_Z+0x54>
    7c88:	3160      	adds	r1, #96	; 0x60
    7c8a:	2000      	movs	r0, #0
    7c8c:	f10c 075f 	add.w	r7, ip, #95	; 0x5f
    7c90:	1abb      	subs	r3, r7, r2
    7c92:	f812 6b01 	ldrb.w	r6, [r2], #1
    7c96:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
    7c9a:	f023 0303 	bic.w	r3, r3, #3
    7c9e:	ae26      	add	r6, sp, #152	; 0x98
    7ca0:	4433      	add	r3, r6
    7ca2:	f843 0c30 	str.w	r0, [r3, #-48]
    7ca6:	428a      	cmp	r2, r1
    7ca8:	d1f2      	bne.n	7c90 <POINTonE1_Deserialize_Z+0x78>
    7caa:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7cac:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    7cb0:	9319      	str	r3, [sp, #100]	; 0x64
    7cb2:	4b40      	ldr	r3, [pc, #256]	; (7db4 <POINTonE1_Deserialize_Z+0x19c>)
    7cb4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    7cb8:	220c      	movs	r2, #12
    7cba:	9200      	str	r2, [sp, #0]
    7cbc:	f103 0290 	add.w	r2, r3, #144	; 0x90
    7cc0:	4649      	mov	r1, r9
    7cc2:	a802      	add	r0, sp, #8
    7cc4:	f7f9 f9da 	bl	107c <add_mod_n>
    7cc8:	af02      	add	r7, sp, #8
    7cca:	46c8      	mov	r8, r9
    7ccc:	ae0e      	add	r6, sp, #56	; 0x38
    7cce:	4649      	mov	r1, r9
    7cd0:	463a      	mov	r2, r7
    7cd2:	2000      	movs	r0, #0
    7cd4:	f852 3b04 	ldr.w	r3, [r2], #4
    7cd8:	f851 cb04 	ldr.w	ip, [r1], #4
    7cdc:	ea83 030c 	eor.w	r3, r3, ip
    7ce0:	4318      	orrs	r0, r3
    7ce2:	42b2      	cmp	r2, r6
    7ce4:	d1f6      	bne.n	7cd4 <POINTonE1_Deserialize_Z+0xbc>
    7ce6:	1e43      	subs	r3, r0, #1
    7ce8:	4383      	bics	r3, r0
    7cea:	d401      	bmi.n	7cf0 <POINTonE1_Deserialize_Z+0xd8>
    7cec:	2501      	movs	r5, #1
    7cee:	e05d      	b.n	7dac <POINTonE1_Deserialize_Z+0x194>
    7cf0:	4b30      	ldr	r3, [pc, #192]	; (7db4 <POINTonE1_Deserialize_Z+0x19c>)
    7cf2:	220c      	movs	r2, #12
    7cf4:	9200      	str	r2, [sp, #0]
    7cf6:	f103 0290 	add.w	r2, r3, #144	; 0x90
    7cfa:	a91a      	add	r1, sp, #104	; 0x68
    7cfc:	a802      	add	r0, sp, #8
    7cfe:	f7f9 f9bd 	bl	107c <add_mod_n>
    7d02:	a919      	add	r1, sp, #100	; 0x64
    7d04:	2200      	movs	r2, #0
    7d06:	f857 3b04 	ldr.w	r3, [r7], #4
    7d0a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    7d0e:	4043      	eors	r3, r0
    7d10:	431a      	orrs	r2, r3
    7d12:	42b7      	cmp	r7, r6
    7d14:	d1f7      	bne.n	7d06 <POINTonE1_Deserialize_Z+0xee>
    7d16:	1e53      	subs	r3, r2, #1
    7d18:	4393      	bics	r3, r2
    7d1a:	d401      	bmi.n	7d20 <POINTonE1_Deserialize_Z+0x108>
    7d1c:	2501      	movs	r5, #1
    7d1e:	e045      	b.n	7dac <POINTonE1_Deserialize_Z+0x194>
    7d20:	4f24      	ldr	r7, [pc, #144]	; (7db4 <POINTonE1_Deserialize_Z+0x19c>)
    7d22:	4e25      	ldr	r6, [pc, #148]	; (7db8 <POINTonE1_Deserialize_Z+0x1a0>)
    7d24:	f04f 0a0c 	mov.w	sl, #12
    7d28:	f8cd a004 	str.w	sl, [sp, #4]
    7d2c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7dbc <POINTonE1_Deserialize_Z+0x1a4>
    7d30:	f8cd 9000 	str.w	r9, [sp]
    7d34:	463b      	mov	r3, r7
    7d36:	4632      	mov	r2, r6
    7d38:	a90e      	add	r1, sp, #56	; 0x38
    7d3a:	4608      	mov	r0, r1
    7d3c:	f7f8 fef5 	bl	b2a <mul_mont_n>
    7d40:	f8cd a004 	str.w	sl, [sp, #4]
    7d44:	f8cd 9000 	str.w	r9, [sp]
    7d48:	463b      	mov	r3, r7
    7d4a:	4632      	mov	r2, r6
    7d4c:	a91a      	add	r1, sp, #104	; 0x68
    7d4e:	4608      	mov	r0, r1
    7d50:	f7f8 feeb 	bl	b2a <mul_mont_n>
    7d54:	a80e      	add	r0, sp, #56	; 0x38
    7d56:	f7f9 f9e7 	bl	1128 <POINTonE1_affine_on_curve>
    7d5a:	b1b0      	cbz	r0, 7d8a <POINTonE1_Deserialize_Z+0x172>
    7d5c:	aa0d      	add	r2, sp, #52	; 0x34
    7d5e:	1f23      	subs	r3, r4, #4
    7d60:	f108 085c 	add.w	r8, r8, #92	; 0x5c
    7d64:	4619      	mov	r1, r3
    7d66:	f852 0f04 	ldr.w	r0, [r2, #4]!
    7d6a:	f841 0f04 	str.w	r0, [r1, #4]!
    7d6e:	4542      	cmp	r2, r8
    7d70:	d1f9      	bne.n	7d66 <POINTonE1_Deserialize_Z+0x14e>
    7d72:	342c      	adds	r4, #44	; 0x2c
    7d74:	2200      	movs	r2, #0
    7d76:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7d7a:	430a      	orrs	r2, r1
    7d7c:	429c      	cmp	r4, r3
    7d7e:	d1fa      	bne.n	7d76 <POINTonE1_Deserialize_Z+0x15e>
    7d80:	1e53      	subs	r3, r2, #1
    7d82:	4393      	bics	r3, r2
    7d84:	bf48      	it	mi
    7d86:	2503      	movmi	r5, #3
    7d88:	e010      	b.n	7dac <POINTonE1_Deserialize_Z+0x194>
    7d8a:	2502      	movs	r5, #2
    7d8c:	e00e      	b.n	7dac <POINTonE1_Deserialize_Z+0x194>
    7d8e:	f7ff fe63 	bl	7a58 <POINTonE1_Uncompress_Z>
    7d92:	4605      	mov	r5, r0
    7d94:	e00a      	b.n	7dac <POINTonE1_Deserialize_Z+0x194>
    7d96:	4623      	mov	r3, r4
    7d98:	f104 0160 	add.w	r1, r4, #96	; 0x60
    7d9c:	2200      	movs	r2, #0
    7d9e:	f843 2b04 	str.w	r2, [r3], #4
    7da2:	428b      	cmp	r3, r1
    7da4:	d1fb      	bne.n	7d9e <POINTonE1_Deserialize_Z+0x186>
    7da6:	2500      	movs	r5, #0
    7da8:	e000      	b.n	7dac <POINTonE1_Deserialize_Z+0x194>
    7daa:	2501      	movs	r5, #1
    7dac:	4628      	mov	r0, r5
    7dae:	b026      	add	sp, #152	; 0x98
    7db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7db4:	0001ade8 	.word	0x0001ade8
    7db8:	0001c198 	.word	0x0001c198
    7dbc:	fffcfffd 	.word	0xfffcfffd

00007dc0 <blst_p1_deserialize>:
    7dc0:	b508      	push	{r3, lr}
    7dc2:	f7ff ff29 	bl	7c18 <POINTonE1_Deserialize_Z>
    7dc6:	bd08      	pop	{r3, pc}

00007dc8 <blst_aggregate_in_g1>:
    7dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dcc:	b0a4      	sub	sp, #144	; 0x90
    7dce:	4605      	mov	r5, r0
    7dd0:	460f      	mov	r7, r1
    7dd2:	4611      	mov	r1, r2
    7dd4:	4668      	mov	r0, sp
    7dd6:	f7ff ff1f 	bl	7c18 <POINTonE1_Deserialize_Z>
    7dda:	4680      	mov	r8, r0
    7ddc:	bb08      	cbnz	r0, 7e22 <blst_aggregate_in_g1+0x5a>
    7dde:	f1ad 0604 	sub.w	r6, sp, #4
    7de2:	a917      	add	r1, sp, #92	; 0x5c
    7de4:	4633      	mov	r3, r6
    7de6:	2200      	movs	r2, #0
    7de8:	f853 4f04 	ldr.w	r4, [r3, #4]!
    7dec:	4322      	orrs	r2, r4
    7dee:	428b      	cmp	r3, r1
    7df0:	d1fa      	bne.n	7de8 <blst_aggregate_in_g1+0x20>
    7df2:	1e53      	subs	r3, r2, #1
    7df4:	4393      	bics	r3, r2
    7df6:	d418      	bmi.n	7e2a <blst_aggregate_in_g1+0x62>
    7df8:	4817      	ldr	r0, [pc, #92]	; (7e58 <blst_aggregate_in_g1+0x90>)
    7dfa:	f100 0360 	add.w	r3, r0, #96	; 0x60
    7dfe:	aa17      	add	r2, sp, #92	; 0x5c
    7e00:	3090      	adds	r0, #144	; 0x90
    7e02:	f853 1b04 	ldr.w	r1, [r3], #4
    7e06:	f842 1f04 	str.w	r1, [r2, #4]!
    7e0a:	4283      	cmp	r3, r0
    7e0c:	d1f9      	bne.n	7e02 <blst_aggregate_in_g1+0x3a>
    7e0e:	4668      	mov	r0, sp
    7e10:	f7fa ff34 	bl	2c7c <POINTonE1_in_G1>
    7e14:	b1e8      	cbz	r0, 7e52 <blst_aggregate_in_g1+0x8a>
    7e16:	b19f      	cbz	r7, 7e40 <blst_aggregate_in_g1+0x78>
    7e18:	466a      	mov	r2, sp
    7e1a:	4639      	mov	r1, r7
    7e1c:	4628      	mov	r0, r5
    7e1e:	f7fa f80f 	bl	1e40 <POINTonE1_dadd_affine>
    7e22:	4640      	mov	r0, r8
    7e24:	b024      	add	sp, #144	; 0x90
    7e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e2a:	2f00      	cmp	r7, #0
    7e2c:	d1f9      	bne.n	7e22 <blst_aggregate_in_g1+0x5a>
    7e2e:	462b      	mov	r3, r5
    7e30:	f105 0190 	add.w	r1, r5, #144	; 0x90
    7e34:	2200      	movs	r2, #0
    7e36:	f843 2b04 	str.w	r2, [r3], #4
    7e3a:	4299      	cmp	r1, r3
    7e3c:	d1fb      	bne.n	7e36 <blst_aggregate_in_g1+0x6e>
    7e3e:	e7f0      	b.n	7e22 <blst_aggregate_in_g1+0x5a>
    7e40:	3d04      	subs	r5, #4
    7e42:	aa23      	add	r2, sp, #140	; 0x8c
    7e44:	f856 3f04 	ldr.w	r3, [r6, #4]!
    7e48:	f845 3f04 	str.w	r3, [r5, #4]!
    7e4c:	4296      	cmp	r6, r2
    7e4e:	d1f9      	bne.n	7e44 <blst_aggregate_in_g1+0x7c>
    7e50:	e7e7      	b.n	7e22 <blst_aggregate_in_g1+0x5a>
    7e52:	f04f 0803 	mov.w	r8, #3
    7e56:	e7e4      	b.n	7e22 <blst_aggregate_in_g1+0x5a>
    7e58:	0001ade8 	.word	0x0001ade8

00007e5c <blst_fp_sqrt>:
    7e5c:	b508      	push	{r3, lr}
    7e5e:	f7ff fdbb 	bl	79d8 <sqrt_fp>
    7e62:	bd08      	pop	{r3, pc}

00007e64 <recip_sqrt_fp>:
    7e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e68:	b09a      	sub	sp, #104	; 0x68
    7e6a:	4607      	mov	r7, r0
    7e6c:	460e      	mov	r6, r1
    7e6e:	a80e      	add	r0, sp, #56	; 0x38
    7e70:	f7ff fabb 	bl	73ea <recip_sqrt_fp_3mod4>
    7e74:	4c19      	ldr	r4, [pc, #100]	; (7edc <recip_sqrt_fp+0x78>)
    7e76:	f04f 080c 	mov.w	r8, #12
    7e7a:	f8cd 8004 	str.w	r8, [sp, #4]
    7e7e:	4d18      	ldr	r5, [pc, #96]	; (7ee0 <recip_sqrt_fp+0x7c>)
    7e80:	9500      	str	r5, [sp, #0]
    7e82:	4623      	mov	r3, r4
    7e84:	4632      	mov	r2, r6
    7e86:	a90e      	add	r1, sp, #56	; 0x38
    7e88:	a802      	add	r0, sp, #8
    7e8a:	f7f8 fe4e 	bl	b2a <mul_mont_n>
    7e8e:	f8cd 8004 	str.w	r8, [sp, #4]
    7e92:	9500      	str	r5, [sp, #0]
    7e94:	4623      	mov	r3, r4
    7e96:	aa02      	add	r2, sp, #8
    7e98:	4611      	mov	r1, r2
    7e9a:	4610      	mov	r0, r2
    7e9c:	f7f8 fe45 	bl	b2a <mul_mont_n>
    7ea0:	ad02      	add	r5, sp, #8
    7ea2:	1f34      	subs	r4, r6, #4
    7ea4:	f106 012c 	add.w	r1, r6, #44	; 0x2c
    7ea8:	2600      	movs	r6, #0
    7eaa:	f855 3b04 	ldr.w	r3, [r5], #4
    7eae:	f854 0f04 	ldr.w	r0, [r4, #4]!
    7eb2:	4043      	eors	r3, r0
    7eb4:	431e      	orrs	r6, r3
    7eb6:	428c      	cmp	r4, r1
    7eb8:	d1f7      	bne.n	7eaa <recip_sqrt_fp+0x46>
    7eba:	1e70      	subs	r0, r6, #1
    7ebc:	ea20 0006 	bic.w	r0, r0, r6
    7ec0:	0fc0      	lsrs	r0, r0, #31
    7ec2:	aa0e      	add	r2, sp, #56	; 0x38
    7ec4:	1f3b      	subs	r3, r7, #4
    7ec6:	372c      	adds	r7, #44	; 0x2c
    7ec8:	f852 1b04 	ldr.w	r1, [r2], #4
    7ecc:	f843 1f04 	str.w	r1, [r3, #4]!
    7ed0:	42bb      	cmp	r3, r7
    7ed2:	d1f9      	bne.n	7ec8 <recip_sqrt_fp+0x64>
    7ed4:	b01a      	add	sp, #104	; 0x68
    7ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7eda:	bf00      	nop
    7edc:	0001ade8 	.word	0x0001ade8
    7ee0:	fffcfffd 	.word	0xfffcfffd

00007ee4 <map_to_isogenous_E1>:
    7ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ee8:	b0d9      	sub	sp, #356	; 0x164
    7eea:	4605      	mov	r5, r0
    7eec:	460a      	mov	r2, r1
    7eee:	9103      	str	r1, [sp, #12]
    7ef0:	4c9e      	ldr	r4, [pc, #632]	; (816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>)
    7ef2:	260c      	movs	r6, #12
    7ef4:	9601      	str	r6, [sp, #4]
    7ef6:	4f9e      	ldr	r7, [pc, #632]	; (8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>)
    7ef8:	9700      	str	r7, [sp, #0]
    7efa:	4623      	mov	r3, r4
    7efc:	a84c      	add	r0, sp, #304	; 0x130
    7efe:	f7f8 fe14 	bl	b2a <mul_mont_n>
    7f02:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    7f06:	9601      	str	r6, [sp, #4]
    7f08:	9700      	str	r7, [sp, #0]
    7f0a:	4623      	mov	r3, r4
    7f0c:	aa4c      	add	r2, sp, #304	; 0x130
    7f0e:	f508 7146 	add.w	r1, r8, #792	; 0x318
    7f12:	a834      	add	r0, sp, #208	; 0xd0
    7f14:	f7f8 fe09 	bl	b2a <mul_mont_n>
    7f18:	9601      	str	r6, [sp, #4]
    7f1a:	9700      	str	r7, [sp, #0]
    7f1c:	4623      	mov	r3, r4
    7f1e:	aa34      	add	r2, sp, #208	; 0xd0
    7f20:	4611      	mov	r1, r2
    7f22:	a840      	add	r0, sp, #256	; 0x100
    7f24:	f7f8 fe01 	bl	b2a <mul_mont_n>
    7f28:	9600      	str	r6, [sp, #0]
    7f2a:	4623      	mov	r3, r4
    7f2c:	aa34      	add	r2, sp, #208	; 0xd0
    7f2e:	a940      	add	r1, sp, #256	; 0x100
    7f30:	4608      	mov	r0, r1
    7f32:	f7f9 f8a3 	bl	107c <add_mod_n>
    7f36:	9600      	str	r6, [sp, #0]
    7f38:	4623      	mov	r3, r4
    7f3a:	f104 0260 	add.w	r2, r4, #96	; 0x60
    7f3e:	a940      	add	r1, sp, #256	; 0x100
    7f40:	4628      	mov	r0, r5
    7f42:	f7f9 f89b 	bl	107c <add_mod_n>
    7f46:	9601      	str	r6, [sp, #4]
    7f48:	9700      	str	r7, [sp, #0]
    7f4a:	4623      	mov	r3, r4
    7f4c:	f508 7252 	add.w	r2, r8, #840	; 0x348
    7f50:	4629      	mov	r1, r5
    7f52:	4628      	mov	r0, r5
    7f54:	f7f8 fde9 	bl	b2a <mul_mont_n>
    7f58:	9601      	str	r6, [sp, #4]
    7f5a:	9700      	str	r7, [sp, #0]
    7f5c:	4623      	mov	r3, r4
    7f5e:	462a      	mov	r2, r5
    7f60:	a934      	add	r1, sp, #208	; 0xd0
    7f62:	4608      	mov	r0, r1
    7f64:	f7f8 fde1 	bl	b2a <mul_mont_n>
    7f68:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    7f6c:	9601      	str	r6, [sp, #4]
    7f6e:	9700      	str	r7, [sp, #0]
    7f70:	4623      	mov	r3, r4
    7f72:	aa40      	add	r2, sp, #256	; 0x100
    7f74:	f508 715e 	add.w	r1, r8, #888	; 0x378
    7f78:	4650      	mov	r0, sl
    7f7a:	f7f8 fdd6 	bl	b2a <mul_mont_n>
    7f7e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    7f82:	f105 048c 	add.w	r4, r5, #140	; 0x8c
    7f86:	461a      	mov	r2, r3
    7f88:	2100      	movs	r1, #0
    7f8a:	f852 0f04 	ldr.w	r0, [r2, #4]!
    7f8e:	4301      	orrs	r1, r0
    7f90:	42a2      	cmp	r2, r4
    7f92:	d1fa      	bne.n	7f8a <map_to_isogenous_E1+0xa6>
    7f94:	1e4a      	subs	r2, r1, #1
    7f96:	ea22 0101 	bic.w	r1, r2, r1
    7f9a:	17c9      	asrs	r1, r1, #31
    7f9c:	4875      	ldr	r0, [pc, #468]	; (8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
    7f9e:	f850 2b04 	ldr.w	r2, [r0], #4
    7fa2:	f853 6f04 	ldr.w	r6, [r3, #4]!
    7fa6:	2900      	cmp	r1, #0
    7fa8:	bf08      	it	eq
    7faa:	4632      	moveq	r2, r6
    7fac:	601a      	str	r2, [r3, #0]
    7fae:	42a3      	cmp	r3, r4
    7fb0:	d1f5      	bne.n	7f9e <map_to_isogenous_E1+0xba>
    7fb2:	4e6e      	ldr	r6, [pc, #440]	; (816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>)
    7fb4:	270c      	movs	r7, #12
    7fb6:	9701      	str	r7, [sp, #4]
    7fb8:	4c6d      	ldr	r4, [pc, #436]	; (8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>)
    7fba:	9400      	str	r4, [sp, #0]
    7fbc:	4633      	mov	r3, r6
    7fbe:	4652      	mov	r2, sl
    7fc0:	4651      	mov	r1, sl
    7fc2:	a840      	add	r0, sp, #256	; 0x100
    7fc4:	f7f8 fdb1 	bl	b2a <mul_mont_n>
    7fc8:	9701      	str	r7, [sp, #4]
    7fca:	9400      	str	r4, [sp, #0]
    7fcc:	4633      	mov	r3, r6
    7fce:	aa40      	add	r2, sp, #256	; 0x100
    7fd0:	4651      	mov	r1, sl
    7fd2:	a81c      	add	r0, sp, #112	; 0x70
    7fd4:	f7f8 fda9 	bl	b2a <mul_mont_n>
    7fd8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    7fdc:	9701      	str	r7, [sp, #4]
    7fde:	9400      	str	r4, [sp, #0]
    7fe0:	4633      	mov	r3, r6
    7fe2:	aa40      	add	r2, sp, #256	; 0x100
    7fe4:	f50b 7176 	add.w	r1, fp, #984	; 0x3d8
    7fe8:	4610      	mov	r0, r2
    7fea:	f7f8 fd9e 	bl	b2a <mul_mont_n>
    7fee:	9701      	str	r7, [sp, #4]
    7ff0:	9400      	str	r4, [sp, #0]
    7ff2:	4633      	mov	r3, r6
    7ff4:	462a      	mov	r2, r5
    7ff6:	4629      	mov	r1, r5
    7ff8:	a828      	add	r0, sp, #160	; 0xa0
    7ffa:	f7f8 fd96 	bl	b2a <mul_mont_n>
    7ffe:	9700      	str	r7, [sp, #0]
    8000:	4633      	mov	r3, r6
    8002:	aa40      	add	r2, sp, #256	; 0x100
    8004:	a928      	add	r1, sp, #160	; 0xa0
    8006:	4608      	mov	r0, r1
    8008:	f7f9 f838 	bl	107c <add_mod_n>
    800c:	9701      	str	r7, [sp, #4]
    800e:	9400      	str	r4, [sp, #0]
    8010:	4633      	mov	r3, r6
    8012:	462a      	mov	r2, r5
    8014:	a928      	add	r1, sp, #160	; 0xa0
    8016:	4608      	mov	r0, r1
    8018:	f7f8 fd87 	bl	b2a <mul_mont_n>
    801c:	9701      	str	r7, [sp, #4]
    801e:	9400      	str	r4, [sp, #0]
    8020:	4633      	mov	r3, r6
    8022:	aa1c      	add	r2, sp, #112	; 0x70
    8024:	f50b 7152 	add.w	r1, fp, #840	; 0x348
    8028:	a840      	add	r0, sp, #256	; 0x100
    802a:	f7f8 fd7e 	bl	b2a <mul_mont_n>
    802e:	9700      	str	r7, [sp, #0]
    8030:	4633      	mov	r3, r6
    8032:	aa40      	add	r2, sp, #256	; 0x100
    8034:	a928      	add	r1, sp, #160	; 0xa0
    8036:	4608      	mov	r0, r1
    8038:	f7f9 f820 	bl	107c <add_mod_n>
    803c:	f105 0830 	add.w	r8, r5, #48	; 0x30
    8040:	9701      	str	r7, [sp, #4]
    8042:	9400      	str	r4, [sp, #0]
    8044:	4633      	mov	r3, r6
    8046:	aa1c      	add	r2, sp, #112	; 0x70
    8048:	4611      	mov	r1, r2
    804a:	4640      	mov	r0, r8
    804c:	f7f8 fd6d 	bl	b2a <mul_mont_n>
    8050:	9701      	str	r7, [sp, #4]
    8052:	9400      	str	r4, [sp, #0]
    8054:	4633      	mov	r3, r6
    8056:	aa1c      	add	r2, sp, #112	; 0x70
    8058:	a928      	add	r1, sp, #160	; 0xa0
    805a:	a840      	add	r0, sp, #256	; 0x100
    805c:	f7f8 fd65 	bl	b2a <mul_mont_n>
    8060:	9701      	str	r7, [sp, #4]
    8062:	9400      	str	r4, [sp, #0]
    8064:	4633      	mov	r3, r6
    8066:	aa40      	add	r2, sp, #256	; 0x100
    8068:	4641      	mov	r1, r8
    806a:	4640      	mov	r0, r8
    806c:	f7f8 fd5d 	bl	b2a <mul_mont_n>
    8070:	4641      	mov	r1, r8
    8072:	4640      	mov	r0, r8
    8074:	f7ff fef6 	bl	7e64 <recip_sqrt_fp>
    8078:	4681      	mov	r9, r0
    807a:	9701      	str	r7, [sp, #4]
    807c:	9400      	str	r4, [sp, #0]
    807e:	4633      	mov	r3, r6
    8080:	aa40      	add	r2, sp, #256	; 0x100
    8082:	4641      	mov	r1, r8
    8084:	4640      	mov	r0, r8
    8086:	f7f8 fd50 	bl	b2a <mul_mont_n>
    808a:	9701      	str	r7, [sp, #4]
    808c:	9400      	str	r4, [sp, #0]
    808e:	4633      	mov	r3, r6
    8090:	f50b 6281 	add.w	r2, fp, #1032	; 0x408
    8094:	4641      	mov	r1, r8
    8096:	a810      	add	r0, sp, #64	; 0x40
    8098:	f7f8 fd47 	bl	b2a <mul_mont_n>
    809c:	9701      	str	r7, [sp, #4]
    809e:	9400      	str	r4, [sp, #0]
    80a0:	4633      	mov	r3, r6
    80a2:	aa4c      	add	r2, sp, #304	; 0x130
    80a4:	a910      	add	r1, sp, #64	; 0x40
    80a6:	4608      	mov	r0, r1
    80a8:	f7f8 fd3f 	bl	b2a <mul_mont_n>
    80ac:	9701      	str	r7, [sp, #4]
    80ae:	9400      	str	r4, [sp, #0]
    80b0:	4633      	mov	r3, r6
    80b2:	9a03      	ldr	r2, [sp, #12]
    80b4:	a910      	add	r1, sp, #64	; 0x40
    80b6:	4608      	mov	r0, r1
    80b8:	f7f8 fd37 	bl	b2a <mul_mont_n>
    80bc:	f1c9 0400 	rsb	r4, r9, #0
    80c0:	1f2a      	subs	r2, r5, #4
    80c2:	a834      	add	r0, sp, #208	; 0xd0
    80c4:	f105 062c 	add.w	r6, r5, #44	; 0x2c
    80c8:	f850 1b04 	ldr.w	r1, [r0], #4
    80cc:	f852 3f04 	ldr.w	r3, [r2, #4]!
    80d0:	404b      	eors	r3, r1
    80d2:	4023      	ands	r3, r4
    80d4:	404b      	eors	r3, r1
    80d6:	6013      	str	r3, [r2, #0]
    80d8:	42b2      	cmp	r2, r6
    80da:	d1f5      	bne.n	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    80dc:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    80e0:	a810      	add	r0, sp, #64	; 0x40
    80e2:	f105 065c 	add.w	r6, r5, #92	; 0x5c
    80e6:	f850 1b04 	ldr.w	r1, [r0], #4
    80ea:	f852 3f04 	ldr.w	r3, [r2, #4]!
    80ee:	404b      	eors	r3, r1
    80f0:	4023      	ands	r3, r4
    80f2:	404b      	eors	r3, r1
    80f4:	6013      	str	r3, [r2, #0]
    80f6:	42b2      	cmp	r2, r6
    80f8:	d1f5      	bne.n	80e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    80fa:	4f1d      	ldr	r7, [pc, #116]	; (8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>)
    80fc:	4c1b      	ldr	r4, [pc, #108]	; (816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>)
    80fe:	260c      	movs	r6, #12
    8100:	9600      	str	r6, [sp, #0]
    8102:	463b      	mov	r3, r7
    8104:	4622      	mov	r2, r4
    8106:	9903      	ldr	r1, [sp, #12]
    8108:	a804      	add	r0, sp, #16
    810a:	f7fb f885 	bl	3218 <from_mont_n>
    810e:	4632      	mov	r2, r6
    8110:	4621      	mov	r1, r4
    8112:	a804      	add	r0, sp, #16
    8114:	f7fb f9aa 	bl	346c <sgn0_pty_mod_n>
    8118:	4681      	mov	r9, r0
    811a:	9600      	str	r6, [sp, #0]
    811c:	463b      	mov	r3, r7
    811e:	4622      	mov	r2, r4
    8120:	4641      	mov	r1, r8
    8122:	a804      	add	r0, sp, #16
    8124:	f7fb f878 	bl	3218 <from_mont_n>
    8128:	4632      	mov	r2, r6
    812a:	4621      	mov	r1, r4
    812c:	a804      	add	r0, sp, #16
    812e:	f7fb f99d 	bl	346c <sgn0_pty_mod_n>
    8132:	ea80 0209 	eor.w	r2, r0, r9
    8136:	9600      	str	r6, [sp, #0]
    8138:	4623      	mov	r3, r4
    813a:	f002 0201 	and.w	r2, r2, #1
    813e:	4641      	mov	r1, r8
    8140:	4640      	mov	r0, r8
    8142:	f7fa fb9d 	bl	2880 <cneg_mod_n>
    8146:	9601      	str	r6, [sp, #4]
    8148:	9700      	str	r7, [sp, #0]
    814a:	4623      	mov	r3, r4
    814c:	4652      	mov	r2, sl
    814e:	4629      	mov	r1, r5
    8150:	4628      	mov	r0, r5
    8152:	f7f8 fcea 	bl	b2a <mul_mont_n>
    8156:	9601      	str	r6, [sp, #4]
    8158:	9700      	str	r7, [sp, #0]
    815a:	4623      	mov	r3, r4
    815c:	aa1c      	add	r2, sp, #112	; 0x70
    815e:	4641      	mov	r1, r8
    8160:	4640      	mov	r0, r8
    8162:	f7f8 fce2 	bl	b2a <mul_mont_n>
    8166:	b059      	add	sp, #356	; 0x164
    8168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    816c:	0001ade8 	.word	0x0001ade8
    8170:	fffcfffd 	.word	0xfffcfffd
    8174:	0001c288 	.word	0x0001c288
    8178:	0001bee0 	.word	0x0001bee0

0000817c <map_to_g1>:
    817c:	b530      	push	{r4, r5, lr}
    817e:	b0a5      	sub	sp, #148	; 0x94
    8180:	4604      	mov	r4, r0
    8182:	4615      	mov	r5, r2
    8184:	4668      	mov	r0, sp
    8186:	f7ff fead 	bl	7ee4 <map_to_isogenous_E1>
    818a:	b14d      	cbz	r5, 81a0 <map_to_g1+0x24>
    818c:	4629      	mov	r1, r5
    818e:	4620      	mov	r0, r4
    8190:	f7ff fea8 	bl	7ee4 <map_to_isogenous_E1>
    8194:	4b0a      	ldr	r3, [pc, #40]	; (81c0 <map_to_g1+0x44>)
    8196:	4622      	mov	r2, r4
    8198:	4669      	mov	r1, sp
    819a:	4668      	mov	r0, sp
    819c:	f7f9 fca3 	bl	1ae6 <POINTonE1_dadd>
    81a0:	4669      	mov	r1, sp
    81a2:	4668      	mov	r0, sp
    81a4:	f7f9 f82a 	bl	11fc <isogeny_map_to_E1>
    81a8:	4669      	mov	r1, sp
    81aa:	4620      	mov	r0, r4
    81ac:	f7fa fb06 	bl	27bc <POINTonE1_times_minus_z>
    81b0:	2300      	movs	r3, #0
    81b2:	466a      	mov	r2, sp
    81b4:	4621      	mov	r1, r4
    81b6:	4620      	mov	r0, r4
    81b8:	f7f9 fc95 	bl	1ae6 <POINTonE1_dadd>
    81bc:	b025      	add	sp, #148	; 0x94
    81be:	bd30      	pop	{r4, r5, pc}
    81c0:	0001c2b8 	.word	0x0001c2b8

000081c4 <blst_map_to_g1>:
    81c4:	b508      	push	{r3, lr}
    81c6:	f7ff ffd9 	bl	817c <map_to_g1>
    81ca:	bd08      	pop	{r3, pc}

000081cc <sqr_mont_382x>:
    81cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81d0:	b09a      	sub	sp, #104	; 0x68
    81d2:	4604      	mov	r4, r0
    81d4:	468e      	mov	lr, r1
    81d6:	4691      	mov	r9, r2
    81d8:	469a      	mov	sl, r3
    81da:	1f0e      	subs	r6, r1, #4
    81dc:	ad0e      	add	r5, sp, #56	; 0x38
    81de:	f101 072c 	add.w	r7, r1, #44	; 0x2c
    81e2:	46ac      	mov	ip, r5
    81e4:	4633      	mov	r3, r6
    81e6:	2200      	movs	r2, #0
    81e8:	f853 8f04 	ldr.w	r8, [r3, #4]!
    81ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
    81ee:	2100      	movs	r1, #0
    81f0:	eb10 0008 	adds.w	r0, r0, r8
    81f4:	f141 0100 	adc.w	r1, r1, #0
    81f8:	1880      	adds	r0, r0, r2
    81fa:	f141 0100 	adc.w	r1, r1, #0
    81fe:	f84c 0b04 	str.w	r0, [ip], #4
    8202:	460a      	mov	r2, r1
    8204:	42bb      	cmp	r3, r7
    8206:	d1ef      	bne.n	81e8 <sqr_mont_382x+0x1c>
    8208:	a802      	add	r0, sp, #8
    820a:	2200      	movs	r2, #0
    820c:	f856 3f04 	ldr.w	r3, [r6, #4]!
    8210:	1a9a      	subs	r2, r3, r2
    8212:	eb63 0303 	sbc.w	r3, r3, r3
    8216:	6b31      	ldr	r1, [r6, #48]	; 0x30
    8218:	1a52      	subs	r2, r2, r1
    821a:	f163 0300 	sbc.w	r3, r3, #0
    821e:	f840 2b04 	str.w	r2, [r0], #4
    8222:	f003 0201 	and.w	r2, r3, #1
    8226:	42be      	cmp	r6, r7
    8228:	d1f0      	bne.n	820c <sqr_mont_382x+0x40>
    822a:	4256      	negs	r6, r2
    822c:	230c      	movs	r3, #12
    822e:	9301      	str	r3, [sp, #4]
    8230:	f8cd a000 	str.w	sl, [sp]
    8234:	464b      	mov	r3, r9
    8236:	f10e 0230 	add.w	r2, lr, #48	; 0x30
    823a:	4671      	mov	r1, lr
    823c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8240:	f7fb f99a 	bl	3578 <mul_mont_nonred_n>
    8244:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    8248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    824c:	2300      	movs	r3, #0
    824e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    8252:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    8256:	6013      	str	r3, [r2, #0]
    8258:	0fcb      	lsrs	r3, r1, #31
    825a:	4282      	cmp	r2, r0
    825c:	d1f7      	bne.n	824e <sqr_mont_382x+0x82>
    825e:	230c      	movs	r3, #12
    8260:	9301      	str	r3, [sp, #4]
    8262:	f8cd a000 	str.w	sl, [sp]
    8266:	464b      	mov	r3, r9
    8268:	aa02      	add	r2, sp, #8
    826a:	a90e      	add	r1, sp, #56	; 0x38
    826c:	4620      	mov	r0, r4
    826e:	f7fb f983 	bl	3578 <mul_mont_nonred_n>
    8272:	1f21      	subs	r1, r4, #4
    8274:	342c      	adds	r4, #44	; 0x2c
    8276:	4608      	mov	r0, r1
    8278:	2300      	movs	r3, #0
    827a:	f855 7b04 	ldr.w	r7, [r5], #4
    827e:	f850 2f04 	ldr.w	r2, [r0, #4]!
    8282:	1ad2      	subs	r2, r2, r3
    8284:	eb62 0302 	sbc.w	r3, r2, r2
    8288:	4037      	ands	r7, r6
    828a:	1bd2      	subs	r2, r2, r7
    828c:	f163 0300 	sbc.w	r3, r3, #0
    8290:	6002      	str	r2, [r0, #0]
    8292:	f003 0301 	and.w	r3, r3, #1
    8296:	4284      	cmp	r4, r0
    8298:	d1ef      	bne.n	827a <sqr_mont_382x+0xae>
    829a:	425b      	negs	r3, r3
    829c:	f1a9 0904 	sub.w	r9, r9, #4
    82a0:	2600      	movs	r6, #0
    82a2:	f859 0f04 	ldr.w	r0, [r9, #4]!
    82a6:	4018      	ands	r0, r3
    82a8:	f851 2f04 	ldr.w	r2, [r1, #4]!
    82ac:	2700      	movs	r7, #0
    82ae:	18b6      	adds	r6, r6, r2
    82b0:	f147 0700 	adc.w	r7, r7, #0
    82b4:	1836      	adds	r6, r6, r0
    82b6:	f147 0700 	adc.w	r7, r7, #0
    82ba:	600e      	str	r6, [r1, #0]
    82bc:	463e      	mov	r6, r7
    82be:	42a1      	cmp	r1, r4
    82c0:	d1ef      	bne.n	82a2 <sqr_mont_382x+0xd6>
    82c2:	b01a      	add	sp, #104	; 0x68
    82c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000082c8 <ct_inverse_mod_256>:
    82c8:	b510      	push	{r4, lr}
    82ca:	b082      	sub	sp, #8
    82cc:	2408      	movs	r4, #8
    82ce:	9400      	str	r4, [sp, #0]
    82d0:	f7fc f820 	bl	4314 <ct_inverse_mod_n>
    82d4:	b002      	add	sp, #8
    82d6:	bd10      	pop	{r4, pc}

000082d8 <ct_inverse_mod_384>:
    82d8:	b510      	push	{r4, lr}
    82da:	b082      	sub	sp, #8
    82dc:	240c      	movs	r4, #12
    82de:	9400      	str	r4, [sp, #0]
    82e0:	f7fc f818 	bl	4314 <ct_inverse_mod_n>
    82e4:	b002      	add	sp, #8
    82e6:	bd10      	pop	{r4, pc}

000082e8 <ct_is_square_mod_384>:
    82e8:	b508      	push	{r3, lr}
    82ea:	220c      	movs	r2, #12
    82ec:	f7fc f976 	bl	45dc <ct_is_sqr_mod_n>
    82f0:	bd08      	pop	{r3, pc}

000082f2 <div_3_limbs>:
    82f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    82f4:	6803      	ldr	r3, [r0, #0]
    82f6:	6846      	ldr	r6, [r0, #4]
    82f8:	f04f 0c20 	mov.w	ip, #32
    82fc:	2700      	movs	r7, #0
    82fe:	eba3 0e01 	sub.w	lr, r3, r1
    8302:	1a5c      	subs	r4, r3, r1
    8304:	eb63 0503 	sbc.w	r5, r3, r3
    8308:	f005 0001 	and.w	r0, r5, #1
    830c:	1ab4      	subs	r4, r6, r2
    830e:	eb66 0506 	sbc.w	r5, r6, r6
    8312:	1a24      	subs	r4, r4, r0
    8314:	f165 0500 	sbc.w	r5, r5, #0
    8318:	ea8e 0003 	eor.w	r0, lr, r3
    831c:	4028      	ands	r0, r5
    831e:	ea80 030e 	eor.w	r3, r0, lr
    8322:	4066      	eors	r6, r4
    8324:	402e      	ands	r6, r5
    8326:	4066      	eors	r6, r4
    8328:	f085 0001 	eor.w	r0, r5, #1
    832c:	f000 0001 	and.w	r0, r0, #1
    8330:	ea40 0747 	orr.w	r7, r0, r7, lsl #1
    8334:	07d0      	lsls	r0, r2, #31
    8336:	ea40 0151 	orr.w	r1, r0, r1, lsr #1
    833a:	0852      	lsrs	r2, r2, #1
    833c:	f1bc 0c01 	subs.w	ip, ip, #1
    8340:	d1dd      	bne.n	82fe <div_3_limbs+0xc>
    8342:	1a58      	subs	r0, r3, r1
    8344:	eb63 0103 	sbc.w	r1, r3, r3
    8348:	f001 0101 	and.w	r1, r1, #1
    834c:	1ab2      	subs	r2, r6, r2
    834e:	eb66 0306 	sbc.w	r3, r6, r6
    8352:	1a52      	subs	r2, r2, r1
    8354:	f163 0300 	sbc.w	r3, r3, #0
    8358:	43d8      	mvns	r0, r3
    835a:	f000 0001 	and.w	r0, r0, #1
    835e:	007b      	lsls	r3, r7, #1
    8360:	ea43 77e7 	orr.w	r7, r3, r7, asr #31
    8364:	4338      	orrs	r0, r7
    8366:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008368 <div_by_zz>:
    8368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    836c:	f100 0418 	add.w	r4, r0, #24
    8370:	f100 0508 	add.w	r5, r0, #8
    8374:	f8df 8030 	ldr.w	r8, [pc, #48]	; 83a8 <div_by_zz+0x40>
    8378:	4f09      	ldr	r7, [pc, #36]	; (83a0 <div_by_zz+0x38>)
    837a:	4e0a      	ldr	r6, [pc, #40]	; (83a4 <div_by_zz+0x3c>)
    837c:	4642      	mov	r2, r8
    837e:	4639      	mov	r1, r7
    8380:	4620      	mov	r0, r4
    8382:	f7ff ffb6 	bl	82f2 <div_3_limbs>
    8386:	4602      	mov	r2, r0
    8388:	2304      	movs	r3, #4
    838a:	4631      	mov	r1, r6
    838c:	f1a4 000c 	sub.w	r0, r4, #12
    8390:	f7fb fa5d 	bl	384e <quot_rem_n>
    8394:	3c04      	subs	r4, #4
    8396:	42ac      	cmp	r4, r5
    8398:	d1f0      	bne.n	837c <div_by_zz+0x14>
    839a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    839e:	bf00      	nop
    83a0:	0001a402 	.word	0x0001a402
    83a4:	0001c318 	.word	0x0001c318
    83a8:	ac45a401 	.word	0xac45a401

000083ac <POINTonE1_mult_glv>:
    83ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83b0:	f5ad 5d91 	sub.w	sp, sp, #4640	; 0x1220
    83b4:	b084      	sub	sp, #16
    83b6:	4681      	mov	r9, r0
    83b8:	460d      	mov	r5, r1
    83ba:	4611      	mov	r1, r2
    83bc:	f102 0020 	add.w	r0, r2, #32
    83c0:	2200      	movs	r2, #0
    83c2:	43ce      	mvns	r6, r1
    83c4:	1833      	adds	r3, r6, r0
    83c6:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
    83ca:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
    83ce:	f023 0303 	bic.w	r3, r3, #3
    83d2:	f50d 5491 	add.w	r4, sp, #4640	; 0x1220
    83d6:	3410      	adds	r4, #16
    83d8:	4423      	add	r3, r4
    83da:	f843 2c20 	str.w	r2, [r3, #-32]
    83de:	4288      	cmp	r0, r1
    83e0:	d1f0      	bne.n	83c4 <POINTonE1_mult_glv+0x18>
    83e2:	f50d 5490 	add.w	r4, sp, #4608	; 0x1200
    83e6:	3410      	adds	r4, #16
    83e8:	4620      	mov	r0, r4
    83ea:	f7ff ffbd 	bl	8368 <div_by_zz>
    83ee:	f50d 5391 	add.w	r3, sp, #4640	; 0x1220
    83f2:	9302      	str	r3, [sp, #8]
    83f4:	9403      	str	r4, [sp, #12]
    83f6:	4629      	mov	r1, r5
    83f8:	a804      	add	r0, sp, #16
    83fa:	f7fa f9a7 	bl	274c <POINTonE1_precompute_w5>
    83fe:	ac27      	add	r4, sp, #156	; 0x9c
    8400:	f60d 189c 	addw	r8, sp, #2460	; 0x99c
    8404:	4d3b      	ldr	r5, [pc, #236]	; (84f4 <POINTonE1_mult_glv+0x148>)
    8406:	f105 0730 	add.w	r7, r5, #48	; 0x30
    840a:	4e3b      	ldr	r6, [pc, #236]	; (84f8 <POINTonE1_mult_glv+0x14c>)
    840c:	e002      	b.n	8414 <POINTonE1_mult_glv+0x68>
    840e:	3490      	adds	r4, #144	; 0x90
    8410:	4544      	cmp	r4, r8
    8412:	d021      	beq.n	8458 <POINTonE1_mult_glv+0xac>
    8414:	f04f 0a0c 	mov.w	sl, #12
    8418:	f8cd a004 	str.w	sl, [sp, #4]
    841c:	9600      	str	r6, [sp, #0]
    841e:	462b      	mov	r3, r5
    8420:	463a      	mov	r2, r7
    8422:	f1a4 018c 	sub.w	r1, r4, #140	; 0x8c
    8426:	f604 0074 	addw	r0, r4, #2164	; 0x874
    842a:	f7f8 fb7e 	bl	b2a <mul_mont_n>
    842e:	f8cd a000 	str.w	sl, [sp]
    8432:	462b      	mov	r3, r5
    8434:	2201      	movs	r2, #1
    8436:	f1a4 015c 	sub.w	r1, r4, #92	; 0x5c
    843a:	f604 00a4 	addw	r0, r4, #2212	; 0x8a4
    843e:	f7fa fa1f 	bl	2880 <cneg_mod_n>
    8442:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    8446:	f504 620d 	add.w	r2, r4, #2256	; 0x8d0
    844a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    844e:	f842 1f04 	str.w	r1, [r2, #4]!
    8452:	42a3      	cmp	r3, r4
    8454:	d1f9      	bne.n	844a <POINTonE1_mult_glv+0x9e>
    8456:	e7da      	b.n	840e <POINTonE1_mult_glv+0x62>
    8458:	ab04      	add	r3, sp, #16
    845a:	9301      	str	r3, [sp, #4]
    845c:	2280      	movs	r2, #128	; 0x80
    845e:	9200      	str	r2, [sp, #0]
    8460:	ab02      	add	r3, sp, #8
    8462:	2202      	movs	r2, #2
    8464:	2100      	movs	r1, #0
    8466:	4648      	mov	r0, r9
    8468:	f7fb fa5c 	bl	3924 <POINTonE1s_mult_w5>
    846c:	2101      	movs	r1, #1
    846e:	4648      	mov	r0, r9
    8470:	f7fa fa5e 	bl	2930 <POINTonE1_cneg>
    8474:	f109 0960 	add.w	r9, r9, #96	; 0x60
    8478:	4c1e      	ldr	r4, [pc, #120]	; (84f4 <POINTonE1_mult_glv+0x148>)
    847a:	f104 0530 	add.w	r5, r4, #48	; 0x30
    847e:	270c      	movs	r7, #12
    8480:	9701      	str	r7, [sp, #4]
    8482:	4e1d      	ldr	r6, [pc, #116]	; (84f8 <POINTonE1_mult_glv+0x14c>)
    8484:	9600      	str	r6, [sp, #0]
    8486:	4623      	mov	r3, r4
    8488:	462a      	mov	r2, r5
    848a:	4649      	mov	r1, r9
    848c:	4648      	mov	r0, r9
    848e:	f7f8 fb4c 	bl	b2a <mul_mont_n>
    8492:	9701      	str	r7, [sp, #4]
    8494:	9600      	str	r6, [sp, #0]
    8496:	4623      	mov	r3, r4
    8498:	462a      	mov	r2, r5
    849a:	4649      	mov	r1, r9
    849c:	4648      	mov	r0, r9
    849e:	f7f8 fb44 	bl	b2a <mul_mont_n>
    84a2:	2300      	movs	r3, #0
    84a4:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    84a8:	3210      	adds	r2, #16
    84aa:	6013      	str	r3, [r2, #0]
    84ac:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    84b0:	3214      	adds	r2, #20
    84b2:	6013      	str	r3, [r2, #0]
    84b4:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    84b8:	3218      	adds	r2, #24
    84ba:	6013      	str	r3, [r2, #0]
    84bc:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    84c0:	321c      	adds	r2, #28
    84c2:	6013      	str	r3, [r2, #0]
    84c4:	f50d 5291 	add.w	r2, sp, #4640	; 0x1220
    84c8:	6013      	str	r3, [r2, #0]
    84ca:	f50d 5291 	add.w	r2, sp, #4640	; 0x1220
    84ce:	3204      	adds	r2, #4
    84d0:	6013      	str	r3, [r2, #0]
    84d2:	f50d 5291 	add.w	r2, sp, #4640	; 0x1220
    84d6:	3208      	adds	r2, #8
    84d8:	6013      	str	r3, [r2, #0]
    84da:	f50d 5291 	add.w	r2, sp, #4640	; 0x1220
    84de:	320c      	adds	r2, #12
    84e0:	6013      	str	r3, [r2, #0]
    84e2:	f50d 5390 	add.w	r3, sp, #4608	; 0x1200
    84e6:	3310      	adds	r3, #16
    84e8:	f50d 5d91 	add.w	sp, sp, #4640	; 0x1220
    84ec:	b004      	add	sp, #16
    84ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84f2:	bf00      	nop
    84f4:	0001ade8 	.word	0x0001ade8
    84f8:	fffcfffd 	.word	0xfffcfffd

000084fc <POINTonE1_sign>:
    84fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8500:	b09a      	sub	sp, #104	; 0x68
    8502:	4680      	mov	r8, r0
    8504:	f7ff ff52 	bl	83ac <POINTonE1_mult_glv>
    8508:	f108 0160 	add.w	r1, r8, #96	; 0x60
    850c:	f108 045c 	add.w	r4, r8, #92	; 0x5c
    8510:	f108 078c 	add.w	r7, r8, #140	; 0x8c
    8514:	4623      	mov	r3, r4
    8516:	2600      	movs	r6, #0
    8518:	f853 2f04 	ldr.w	r2, [r3, #4]!
    851c:	4316      	orrs	r6, r2
    851e:	42bb      	cmp	r3, r7
    8520:	d1fa      	bne.n	8518 <POINTonE1_sign+0x1c>
    8522:	a80e      	add	r0, sp, #56	; 0x38
    8524:	f7fd fce6 	bl	5ef4 <flt_reciprocal_fp>
    8528:	4d20      	ldr	r5, [pc, #128]	; (85ac <POINTonE1_sign+0xb0>)
    852a:	f04f 0a0c 	mov.w	sl, #12
    852e:	f8cd a004 	str.w	sl, [sp, #4]
    8532:	f8df 907c 	ldr.w	r9, [pc, #124]	; 85b0 <POINTonE1_sign+0xb4>
    8536:	f8cd 9000 	str.w	r9, [sp]
    853a:	462b      	mov	r3, r5
    853c:	aa0e      	add	r2, sp, #56	; 0x38
    853e:	4611      	mov	r1, r2
    8540:	a802      	add	r0, sp, #8
    8542:	f7f8 faf2 	bl	b2a <mul_mont_n>
    8546:	f8cd a004 	str.w	sl, [sp, #4]
    854a:	f8cd 9000 	str.w	r9, [sp]
    854e:	462b      	mov	r3, r5
    8550:	aa02      	add	r2, sp, #8
    8552:	4641      	mov	r1, r8
    8554:	4640      	mov	r0, r8
    8556:	f7f8 fae8 	bl	b2a <mul_mont_n>
    855a:	f8cd a004 	str.w	sl, [sp, #4]
    855e:	f8cd 9000 	str.w	r9, [sp]
    8562:	462b      	mov	r3, r5
    8564:	aa0e      	add	r2, sp, #56	; 0x38
    8566:	a902      	add	r1, sp, #8
    8568:	4608      	mov	r0, r1
    856a:	f7f8 fade 	bl	b2a <mul_mont_n>
    856e:	f108 0030 	add.w	r0, r8, #48	; 0x30
    8572:	f8cd a004 	str.w	sl, [sp, #4]
    8576:	f8cd 9000 	str.w	r9, [sp]
    857a:	462b      	mov	r3, r5
    857c:	aa02      	add	r2, sp, #8
    857e:	4601      	mov	r1, r0
    8580:	f7f8 fad3 	bl	b2a <mul_mont_n>
    8584:	1e73      	subs	r3, r6, #1
    8586:	ea23 0606 	bic.w	r6, r3, r6
    858a:	17f6      	asrs	r6, r6, #31
    858c:	f605 639c 	addw	r3, r5, #3740	; 0xe9c
    8590:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8594:	f854 2f04 	ldr.w	r2, [r4, #4]!
    8598:	2e00      	cmp	r6, #0
    859a:	bf08      	it	eq
    859c:	460a      	moveq	r2, r1
    859e:	6022      	str	r2, [r4, #0]
    85a0:	42bc      	cmp	r4, r7
    85a2:	d1f5      	bne.n	8590 <POINTonE1_sign+0x94>
    85a4:	b01a      	add	sp, #104	; 0x68
    85a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85aa:	bf00      	nop
    85ac:	0001ade8 	.word	0x0001ade8
    85b0:	fffcfffd 	.word	0xfffcfffd

000085b4 <blst_sk_to_pk_in_g1>:
    85b4:	b508      	push	{r3, lr}
    85b6:	460a      	mov	r2, r1
    85b8:	4901      	ldr	r1, [pc, #4]	; (85c0 <blst_sk_to_pk_in_g1+0xc>)
    85ba:	f7ff ff9f 	bl	84fc <POINTonE1_sign>
    85be:	bd08      	pop	{r3, pc}
    85c0:	0001bc28 	.word	0x0001bc28

000085c4 <blst_sign_pk_in_g2>:
    85c4:	b508      	push	{r3, lr}
    85c6:	f7ff ff99 	bl	84fc <POINTonE1_sign>
    85ca:	bd08      	pop	{r3, pc}

000085cc <blst_sk_to_pk2_in_g1>:
    85cc:	b530      	push	{r4, r5, lr}
    85ce:	b0a5      	sub	sp, #148	; 0x94
    85d0:	4605      	mov	r5, r0
    85d2:	460c      	mov	r4, r1
    85d4:	4914      	ldr	r1, [pc, #80]	; (8628 <blst_sk_to_pk2_in_g1+0x5c>)
    85d6:	4668      	mov	r0, sp
    85d8:	f7ff ff90 	bl	84fc <POINTonE1_sign>
    85dc:	b14c      	cbz	r4, 85f2 <blst_sk_to_pk2_in_g1+0x26>
    85de:	f1ad 0304 	sub.w	r3, sp, #4
    85e2:	1f21      	subs	r1, r4, #4
    85e4:	a817      	add	r0, sp, #92	; 0x5c
    85e6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    85ea:	f841 2f04 	str.w	r2, [r1, #4]!
    85ee:	4283      	cmp	r3, r0
    85f0:	d1f9      	bne.n	85e6 <blst_sk_to_pk2_in_g1+0x1a>
    85f2:	b1bd      	cbz	r5, 8624 <blst_sk_to_pk2_in_g1+0x58>
    85f4:	4669      	mov	r1, sp
    85f6:	4628      	mov	r0, r5
    85f8:	f7fe f864 	bl	66c4 <POINTonE1_Serialize_BE>
    85fc:	0100      	lsls	r0, r0, #4
    85fe:	f000 0220 	and.w	r2, r0, #32
    8602:	7828      	ldrb	r0, [r5, #0]
    8604:	4310      	orrs	r0, r2
    8606:	ab17      	add	r3, sp, #92	; 0x5c
    8608:	ac23      	add	r4, sp, #140	; 0x8c
    860a:	2200      	movs	r2, #0
    860c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8610:	430a      	orrs	r2, r1
    8612:	42a3      	cmp	r3, r4
    8614:	d1fa      	bne.n	860c <blst_sk_to_pk2_in_g1+0x40>
    8616:	1e53      	subs	r3, r2, #1
    8618:	ea23 0202 	bic.w	r2, r3, r2
    861c:	0fd2      	lsrs	r2, r2, #31
    861e:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    8622:	702a      	strb	r2, [r5, #0]
    8624:	b025      	add	sp, #148	; 0x94
    8626:	bd30      	pop	{r4, r5, pc}
    8628:	0001bc28 	.word	0x0001bc28

0000862c <blst_sign_pk2_in_g2>:
    862c:	b530      	push	{r4, r5, lr}
    862e:	b0a5      	sub	sp, #148	; 0x94
    8630:	4605      	mov	r5, r0
    8632:	460c      	mov	r4, r1
    8634:	4611      	mov	r1, r2
    8636:	461a      	mov	r2, r3
    8638:	4668      	mov	r0, sp
    863a:	f7ff ff5f 	bl	84fc <POINTonE1_sign>
    863e:	b14c      	cbz	r4, 8654 <blst_sign_pk2_in_g2+0x28>
    8640:	f1ad 0304 	sub.w	r3, sp, #4
    8644:	1f21      	subs	r1, r4, #4
    8646:	a817      	add	r0, sp, #92	; 0x5c
    8648:	f853 2f04 	ldr.w	r2, [r3, #4]!
    864c:	f841 2f04 	str.w	r2, [r1, #4]!
    8650:	4283      	cmp	r3, r0
    8652:	d1f9      	bne.n	8648 <blst_sign_pk2_in_g2+0x1c>
    8654:	b1bd      	cbz	r5, 8686 <blst_sign_pk2_in_g2+0x5a>
    8656:	4669      	mov	r1, sp
    8658:	4628      	mov	r0, r5
    865a:	f7fe f833 	bl	66c4 <POINTonE1_Serialize_BE>
    865e:	0100      	lsls	r0, r0, #4
    8660:	f000 0220 	and.w	r2, r0, #32
    8664:	7828      	ldrb	r0, [r5, #0]
    8666:	4310      	orrs	r0, r2
    8668:	ab17      	add	r3, sp, #92	; 0x5c
    866a:	ac23      	add	r4, sp, #140	; 0x8c
    866c:	2200      	movs	r2, #0
    866e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8672:	430a      	orrs	r2, r1
    8674:	42a3      	cmp	r3, r4
    8676:	d1fa      	bne.n	866e <blst_sign_pk2_in_g2+0x42>
    8678:	1e53      	subs	r3, r2, #1
    867a:	ea23 0202 	bic.w	r2, r3, r2
    867e:	0fd2      	lsrs	r2, r2, #31
    8680:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    8684:	702a      	strb	r2, [r5, #0]
    8686:	b025      	add	sp, #148	; 0x94
    8688:	bd30      	pop	{r4, r5, pc}

0000868a <blst_p1_mult>:
    868a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    868e:	b089      	sub	sp, #36	; 0x24
    8690:	4607      	mov	r7, r0
    8692:	4688      	mov	r8, r1
    8694:	4615      	mov	r5, r2
    8696:	461e      	mov	r6, r3
    8698:	2baf      	cmp	r3, #175	; 0xaf
    869a:	d80e      	bhi.n	86ba <blst_p1_mult+0x30>
    869c:	b953      	cbnz	r3, 86b4 <blst_p1_mult+0x2a>
    869e:	4603      	mov	r3, r0
    86a0:	f100 0190 	add.w	r1, r0, #144	; 0x90
    86a4:	2200      	movs	r2, #0
    86a6:	f843 2b04 	str.w	r2, [r3], #4
    86aa:	428b      	cmp	r3, r1
    86ac:	d1fb      	bne.n	86a6 <blst_p1_mult+0x1c>
    86ae:	b009      	add	sp, #36	; 0x24
    86b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    86b4:	f7fa fa1c 	bl	2af0 <POINTonE1_mult_w4>
    86b8:	e7f9      	b.n	86ae <blst_p1_mult+0x24>
    86ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    86be:	d836      	bhi.n	872e <blst_p1_mult+0xa4>
    86c0:	1dd8      	adds	r0, r3, #7
    86c2:	08c0      	lsrs	r0, r0, #3
    86c4:	f10d 33ff 	add.w	r3, sp, #4294967295
    86c8:	46ee      	mov	lr, sp
    86ca:	f10d 0c1f 	add.w	ip, sp, #31
    86ce:	f04f 39ff 	mov.w	r9, #4294967295
    86d2:	2100      	movs	r1, #0
    86d4:	461c      	mov	r4, r3
    86d6:	5c6a      	ldrb	r2, [r5, r1]
    86d8:	ea02 0209 	and.w	r2, r2, r9
    86dc:	f803 2f01 	strb.w	r2, [r3, #1]!
    86e0:	3402      	adds	r4, #2
    86e2:	eba4 040e 	sub.w	r4, r4, lr
    86e6:	1a24      	subs	r4, r4, r0
    86e8:	ea4f 79e4 	mov.w	r9, r4, asr #31
    86ec:	eb01 71d4 	add.w	r1, r1, r4, lsr #31
    86f0:	459c      	cmp	ip, r3
    86f2:	d1ef      	bne.n	86d4 <blst_p1_mult+0x4a>
    86f4:	2208      	movs	r2, #8
    86f6:	490f      	ldr	r1, [pc, #60]	; (8734 <blst_p1_mult+0xaa>)
    86f8:	4668      	mov	r0, sp
    86fa:	f7f8 f842 	bl	782 <check_mod_n>
    86fe:	b178      	cbz	r0, 8720 <blst_p1_mult+0x96>
    8700:	466a      	mov	r2, sp
    8702:	4641      	mov	r1, r8
    8704:	4638      	mov	r0, r7
    8706:	f7ff fe51 	bl	83ac <POINTonE1_mult_glv>
    870a:	2300      	movs	r3, #0
    870c:	9300      	str	r3, [sp, #0]
    870e:	9301      	str	r3, [sp, #4]
    8710:	9302      	str	r3, [sp, #8]
    8712:	9303      	str	r3, [sp, #12]
    8714:	9304      	str	r3, [sp, #16]
    8716:	9305      	str	r3, [sp, #20]
    8718:	9306      	str	r3, [sp, #24]
    871a:	9307      	str	r3, [sp, #28]
    871c:	466b      	mov	r3, sp
    871e:	e7c6      	b.n	86ae <blst_p1_mult+0x24>
    8720:	4633      	mov	r3, r6
    8722:	462a      	mov	r2, r5
    8724:	4641      	mov	r1, r8
    8726:	4638      	mov	r0, r7
    8728:	f7fa f940 	bl	29ac <POINTonE1_mult_w5>
    872c:	e7ed      	b.n	870a <blst_p1_mult+0x80>
    872e:	f7fa f93d 	bl	29ac <POINTonE1_mult_w5>
    8732:	e7bc      	b.n	86ae <blst_p1_mult+0x24>
    8734:	0001bbe8 	.word	0x0001bbe8

00008738 <div_by_z>:
    8738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    873a:	4604      	mov	r4, r0
    873c:	4f0d      	ldr	r7, [pc, #52]	; (8774 <div_by_z+0x3c>)
    873e:	463a      	mov	r2, r7
    8740:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    8744:	3008      	adds	r0, #8
    8746:	f7ff fdd4 	bl	82f2 <div_3_limbs>
    874a:	4602      	mov	r2, r0
    874c:	1d26      	adds	r6, r4, #4
    874e:	4d0a      	ldr	r5, [pc, #40]	; (8778 <div_by_z+0x40>)
    8750:	2302      	movs	r3, #2
    8752:	4629      	mov	r1, r5
    8754:	4630      	mov	r0, r6
    8756:	f7fb f87a 	bl	384e <quot_rem_n>
    875a:	463a      	mov	r2, r7
    875c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    8760:	4630      	mov	r0, r6
    8762:	f7ff fdc6 	bl	82f2 <div_3_limbs>
    8766:	4602      	mov	r2, r0
    8768:	2302      	movs	r3, #2
    876a:	4629      	mov	r1, r5
    876c:	4620      	mov	r0, r4
    876e:	f7fb f86e 	bl	384e <quot_rem_n>
    8772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8774:	d2010000 	.word	0xd2010000
    8778:	0001c328 	.word	0x0001c328

0000877c <quot_rem_128>:
    877c:	b508      	push	{r3, lr}
    877e:	2304      	movs	r3, #4
    8780:	f7fb f865 	bl	384e <quot_rem_n>
    8784:	bd08      	pop	{r3, pc}

00008786 <quot_rem_64>:
    8786:	b508      	push	{r3, lr}
    8788:	2302      	movs	r3, #2
    878a:	f7fb f860 	bl	384e <quot_rem_n>
    878e:	bd08      	pop	{r3, pc}

00008790 <vec_prefetch>:
    8790:	4770      	bx	lr

00008792 <blst_sha256_block_data_order>:
    8792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8796:	b097      	sub	sp, #92	; 0x5c
    8798:	4603      	mov	r3, r0
    879a:	9005      	str	r0, [sp, #20]
    879c:	9103      	str	r1, [sp, #12]
    879e:	6800      	ldr	r0, [r0, #0]
    87a0:	685d      	ldr	r5, [r3, #4]
    87a2:	f8d3 b008 	ldr.w	fp, [r3, #8]
    87a6:	68de      	ldr	r6, [r3, #12]
    87a8:	691c      	ldr	r4, [r3, #16]
    87aa:	6959      	ldr	r1, [r3, #20]
    87ac:	9100      	str	r1, [sp, #0]
    87ae:	699f      	ldr	r7, [r3, #24]
    87b0:	69d9      	ldr	r1, [r3, #28]
    87b2:	1e53      	subs	r3, r2, #1
    87b4:	9304      	str	r3, [sp, #16]
    87b6:	2a00      	cmp	r2, #0
    87b8:	f000 80ed 	beq.w	8996 <blst_sha256_block_data_order+0x204>
    87bc:	f8dd 8000 	ldr.w	r8, [sp]
    87c0:	9700      	str	r7, [sp, #0]
    87c2:	46ae      	mov	lr, r5
    87c4:	465d      	mov	r5, fp
    87c6:	e0de      	b.n	8986 <blst_sha256_block_data_order+0x1f4>
    87c8:	f8cd 8000 	str.w	r8, [sp]
    87cc:	46a0      	mov	r8, r4
    87ce:	4664      	mov	r4, ip
    87d0:	4675      	mov	r5, lr
    87d2:	4686      	mov	lr, r0
    87d4:	4610      	mov	r0, r2
    87d6:	f817 3c03 	ldrb.w	r3, [r7, #-3]
    87da:	f817 2c04 	ldrb.w	r2, [r7, #-4]
    87de:	0612      	lsls	r2, r2, #24
    87e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    87e4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    87e8:	431a      	orrs	r2, r3
    87ea:	f817 3c02 	ldrb.w	r3, [r7, #-2]
    87ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    87f2:	f849 2b04 	str.w	r2, [r9], #4
    87f6:	ea4f 23f4 	mov.w	r3, r4, ror #11
    87fa:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
    87fe:	ea83 6374 	eor.w	r3, r3, r4, ror #25
    8802:	9301      	str	r3, [sp, #4]
    8804:	9b00      	ldr	r3, [sp, #0]
    8806:	ea23 0c04 	bic.w	ip, r3, r4
    880a:	ea04 0b08 	and.w	fp, r4, r8
    880e:	ea8c 0c0b 	eor.w	ip, ip, fp
    8812:	9b01      	ldr	r3, [sp, #4]
    8814:	4463      	add	r3, ip
    8816:	f85a cf04 	ldr.w	ip, [sl, #4]!
    881a:	4463      	add	r3, ip
    881c:	441a      	add	r2, r3
    881e:	4411      	add	r1, r2
    8820:	ea4f 3370 	mov.w	r3, r0, ror #13
    8824:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    8828:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    882c:	ea8e 0205 	eor.w	r2, lr, r5
    8830:	4002      	ands	r2, r0
    8832:	ea0e 0c05 	and.w	ip, lr, r5
    8836:	ea82 020c 	eor.w	r2, r2, ip
    883a:	441a      	add	r2, r3
    883c:	eb01 0c06 	add.w	ip, r1, r6
    8840:	440a      	add	r2, r1
    8842:	3704      	adds	r7, #4
    8844:	462e      	mov	r6, r5
    8846:	9900      	ldr	r1, [sp, #0]
    8848:	ab16      	add	r3, sp, #88	; 0x58
    884a:	454b      	cmp	r3, r9
    884c:	d1bc      	bne.n	87c8 <blst_sha256_block_data_order+0x36>
    884e:	4663      	mov	r3, ip
    8850:	9903      	ldr	r1, [sp, #12]
    8852:	3140      	adds	r1, #64	; 0x40
    8854:	9103      	str	r1, [sp, #12]
    8856:	4951      	ldr	r1, [pc, #324]	; (899c <blst_sha256_block_data_order+0x20a>)
    8858:	f201 4b8c 	addw	fp, r1, #1164	; 0x48c
    885c:	f8cd 8008 	str.w	r8, [sp, #8]
    8860:	9401      	str	r4, [sp, #4]
    8862:	4680      	mov	r8, r0
    8864:	f04f 0c10 	mov.w	ip, #16
    8868:	46a9      	mov	r9, r5
    886a:	f8dd a000 	ldr.w	sl, [sp]
    886e:	e006      	b.n	887e <blst_sha256_block_data_order+0xec>
    8870:	9801      	ldr	r0, [sp, #4]
    8872:	9002      	str	r0, [sp, #8]
    8874:	9301      	str	r3, [sp, #4]
    8876:	4623      	mov	r3, r4
    8878:	46c6      	mov	lr, r8
    887a:	4690      	mov	r8, r2
    887c:	460a      	mov	r2, r1
    887e:	4665      	mov	r5, ip
    8880:	f10c 0c01 	add.w	ip, ip, #1
    8884:	f00c 010f 	and.w	r1, ip, #15
    8888:	a816      	add	r0, sp, #88	; 0x58
    888a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    888e:	f851 6c40 	ldr.w	r6, [r1, #-64]
    8892:	ea4f 41b6 	mov.w	r1, r6, ror #18
    8896:	ea81 11f6 	eor.w	r1, r1, r6, ror #7
    889a:	9100      	str	r1, [sp, #0]
    889c:	f105 000e 	add.w	r0, r5, #14
    88a0:	f000 000f 	and.w	r0, r0, #15
    88a4:	a916      	add	r1, sp, #88	; 0x58
    88a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    88aa:	f850 7c40 	ldr.w	r7, [r0, #-64]
    88ae:	ea4f 40f7 	mov.w	r0, r7, ror #19
    88b2:	ea80 4077 	eor.w	r0, r0, r7, ror #17
    88b6:	f005 040f 	and.w	r4, r5, #15
    88ba:	3509      	adds	r5, #9
    88bc:	f005 050f 	and.w	r5, r5, #15
    88c0:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    88c4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    88c8:	f855 5c40 	ldr.w	r5, [r5, #-64]
    88cc:	f854 1c40 	ldr.w	r1, [r4, #-64]
    88d0:	440d      	add	r5, r1
    88d2:	9900      	ldr	r1, [sp, #0]
    88d4:	ea81 01d6 	eor.w	r1, r1, r6, lsr #3
    88d8:	440d      	add	r5, r1
    88da:	ea80 2097 	eor.w	r0, r0, r7, lsr #10
    88de:	1829      	adds	r1, r5, r0
    88e0:	f844 1c40 	str.w	r1, [r4, #-64]
    88e4:	ea4f 25f3 	mov.w	r5, r3, ror #11
    88e8:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
    88ec:	ea85 6073 	eor.w	r0, r5, r3, ror #25
    88f0:	9e02      	ldr	r6, [sp, #8]
    88f2:	ea26 0503 	bic.w	r5, r6, r3
    88f6:	9c01      	ldr	r4, [sp, #4]
    88f8:	401c      	ands	r4, r3
    88fa:	4065      	eors	r5, r4
    88fc:	4405      	add	r5, r0
    88fe:	f85b 0f04 	ldr.w	r0, [fp, #4]!
    8902:	4405      	add	r5, r0
    8904:	440d      	add	r5, r1
    8906:	44aa      	add	sl, r5
    8908:	ea4f 3172 	mov.w	r1, r2, ror #13
    890c:	ea81 01b2 	eor.w	r1, r1, r2, ror #2
    8910:	ea81 50b2 	eor.w	r0, r1, r2, ror #22
    8914:	ea88 010e 	eor.w	r1, r8, lr
    8918:	4011      	ands	r1, r2
    891a:	ea08 040e 	and.w	r4, r8, lr
    891e:	4061      	eors	r1, r4
    8920:	4401      	add	r1, r0
    8922:	eb0a 0409 	add.w	r4, sl, r9
    8926:	4451      	add	r1, sl
    8928:	46f1      	mov	r9, lr
    892a:	46b2      	mov	sl, r6
    892c:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    8930:	d19e      	bne.n	8870 <blst_sha256_block_data_order+0xde>
    8932:	4676      	mov	r6, lr
    8934:	9d05      	ldr	r5, [sp, #20]
    8936:	6828      	ldr	r0, [r5, #0]
    8938:	4408      	add	r0, r1
    893a:	6028      	str	r0, [r5, #0]
    893c:	6869      	ldr	r1, [r5, #4]
    893e:	eb02 0e01 	add.w	lr, r2, r1
    8942:	4629      	mov	r1, r5
    8944:	f8c5 e004 	str.w	lr, [r5, #4]
    8948:	68ad      	ldr	r5, [r5, #8]
    894a:	4445      	add	r5, r8
    894c:	608d      	str	r5, [r1, #8]
    894e:	68ca      	ldr	r2, [r1, #12]
    8950:	4416      	add	r6, r2
    8952:	60ce      	str	r6, [r1, #12]
    8954:	690a      	ldr	r2, [r1, #16]
    8956:	4414      	add	r4, r2
    8958:	610c      	str	r4, [r1, #16]
    895a:	694a      	ldr	r2, [r1, #20]
    895c:	eb03 0802 	add.w	r8, r3, r2
    8960:	460a      	mov	r2, r1
    8962:	f8c1 8014 	str.w	r8, [r1, #20]
    8966:	698b      	ldr	r3, [r1, #24]
    8968:	9901      	ldr	r1, [sp, #4]
    896a:	4419      	add	r1, r3
    896c:	9100      	str	r1, [sp, #0]
    896e:	6191      	str	r1, [r2, #24]
    8970:	69d1      	ldr	r1, [r2, #28]
    8972:	4653      	mov	r3, sl
    8974:	440b      	add	r3, r1
    8976:	4619      	mov	r1, r3
    8978:	61d3      	str	r3, [r2, #28]
    897a:	9b04      	ldr	r3, [sp, #16]
    897c:	3b01      	subs	r3, #1
    897e:	9304      	str	r3, [sp, #16]
    8980:	f1b3 3fff 	cmp.w	r3, #4294967295
    8984:	d007      	beq.n	8996 <blst_sha256_block_data_order+0x204>
    8986:	9b03      	ldr	r3, [sp, #12]
    8988:	1d1f      	adds	r7, r3, #4
    898a:	f10d 0918 	add.w	r9, sp, #24
    898e:	4b03      	ldr	r3, [pc, #12]	; (899c <blst_sha256_block_data_order+0x20a>)
    8990:	f203 4a4c 	addw	sl, r3, #1100	; 0x44c
    8994:	e71f      	b.n	87d6 <blst_sha256_block_data_order+0x44>
    8996:	b017      	add	sp, #92	; 0x5c
    8998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    899c:	0001bee0 	.word	0x0001bee0

000089a0 <blst_sha256_hcopy>:
    89a0:	1f0b      	subs	r3, r1, #4
    89a2:	3804      	subs	r0, #4
    89a4:	311c      	adds	r1, #28
    89a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    89aa:	f840 2f04 	str.w	r2, [r0, #4]!
    89ae:	428b      	cmp	r3, r1
    89b0:	d1f9      	bne.n	89a6 <blst_sha256_hcopy+0x6>
    89b2:	4770      	bx	lr

000089b4 <blst_sha256_emit>:
    89b4:	b410      	push	{r4}
    89b6:	1d03      	adds	r3, r0, #4
    89b8:	3904      	subs	r1, #4
    89ba:	f100 0424 	add.w	r4, r0, #36	; 0x24
    89be:	f851 2f04 	ldr.w	r2, [r1, #4]!
    89c2:	0e10      	lsrs	r0, r2, #24
    89c4:	f803 0c04 	strb.w	r0, [r3, #-4]
    89c8:	0c10      	lsrs	r0, r2, #16
    89ca:	f803 0c03 	strb.w	r0, [r3, #-3]
    89ce:	0a10      	lsrs	r0, r2, #8
    89d0:	f803 0c02 	strb.w	r0, [r3, #-2]
    89d4:	f803 2c01 	strb.w	r2, [r3, #-1]
    89d8:	3304      	adds	r3, #4
    89da:	42a3      	cmp	r3, r4
    89dc:	d1ef      	bne.n	89be <blst_sha256_emit+0xa>
    89de:	bc10      	pop	{r4}
    89e0:	4770      	bx	lr

000089e2 <sha256_final>:
    89e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89e6:	4607      	mov	r7, r0
    89e8:	460c      	mov	r4, r1
    89ea:	6a0e      	ldr	r6, [r1, #32]
    89ec:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    89ee:	00ed      	lsls	r5, r5, #3
    89f0:	ea45 7556 	orr.w	r5, r5, r6, lsr #29
    89f4:	00f6      	lsls	r6, r6, #3
    89f6:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    89f8:	18ca      	adds	r2, r1, r3
    89fa:	2180      	movs	r1, #128	; 0x80
    89fc:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    8a00:	3301      	adds	r3, #1
    8a02:	2b38      	cmp	r3, #56	; 0x38
    8a04:	d821      	bhi.n	8a4a <sha256_final+0x68>
    8a06:	0e2b      	lsrs	r3, r5, #24
    8a08:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    8a0c:	0c2b      	lsrs	r3, r5, #16
    8a0e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    8a12:	0a2b      	lsrs	r3, r5, #8
    8a14:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    8a18:	f884 5063 	strb.w	r5, [r4, #99]	; 0x63
    8a1c:	0e33      	lsrs	r3, r6, #24
    8a1e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    8a22:	0c33      	lsrs	r3, r6, #16
    8a24:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    8a28:	0a33      	lsrs	r3, r6, #8
    8a2a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    8a2e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    8a32:	2201      	movs	r2, #1
    8a34:	f104 0128 	add.w	r1, r4, #40	; 0x28
    8a38:	4620      	mov	r0, r4
    8a3a:	f7ff feaa 	bl	8792 <blst_sha256_block_data_order>
    8a3e:	4621      	mov	r1, r4
    8a40:	4638      	mov	r0, r7
    8a42:	f7ff ffb7 	bl	89b4 <blst_sha256_emit>
    8a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a4a:	f104 0828 	add.w	r8, r4, #40	; 0x28
    8a4e:	2201      	movs	r2, #1
    8a50:	4641      	mov	r1, r8
    8a52:	4620      	mov	r0, r4
    8a54:	f7ff fe9d 	bl	8792 <blst_sha256_block_data_order>
    8a58:	4643      	mov	r3, r8
    8a5a:	f104 0168 	add.w	r1, r4, #104	; 0x68
    8a5e:	2200      	movs	r2, #0
    8a60:	f843 2b04 	str.w	r2, [r3], #4
    8a64:	428b      	cmp	r3, r1
    8a66:	d1fb      	bne.n	8a60 <sha256_final+0x7e>
    8a68:	e7cd      	b.n	8a06 <sha256_final+0x24>

00008a6a <HMAC_final>:
    8a6a:	b570      	push	{r4, r5, r6, lr}
    8a6c:	4605      	mov	r5, r0
    8a6e:	460c      	mov	r4, r1
    8a70:	f101 06b0 	add.w	r6, r1, #176	; 0xb0
    8a74:	4630      	mov	r0, r6
    8a76:	f7ff ffb4 	bl	89e2 <sha256_final>
    8a7a:	f104 0190 	add.w	r1, r4, #144	; 0x90
    8a7e:	4620      	mov	r0, r4
    8a80:	f7ff ff8e 	bl	89a0 <blst_sha256_hcopy>
    8a84:	2201      	movs	r2, #1
    8a86:	4631      	mov	r1, r6
    8a88:	4620      	mov	r0, r4
    8a8a:	f7ff fe82 	bl	8792 <blst_sha256_block_data_order>
    8a8e:	4621      	mov	r1, r4
    8a90:	4628      	mov	r0, r5
    8a92:	f7ff ff8f 	bl	89b4 <blst_sha256_emit>
    8a96:	bd70      	pop	{r4, r5, r6, pc}

00008a98 <blst_sha256_bcopy>:
    8a98:	b162      	cbz	r2, 8ab4 <blst_sha256_bcopy+0x1c>
    8a9a:	b410      	push	{r4}
    8a9c:	1e4b      	subs	r3, r1, #1
    8a9e:	3801      	subs	r0, #1
    8aa0:	1e54      	subs	r4, r2, #1
    8aa2:	4421      	add	r1, r4
    8aa4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8aa8:	f800 2f01 	strb.w	r2, [r0, #1]!
    8aac:	428b      	cmp	r3, r1
    8aae:	d1f9      	bne.n	8aa4 <blst_sha256_bcopy+0xc>
    8ab0:	bc10      	pop	{r4}
    8ab2:	4770      	bx	lr
    8ab4:	4770      	bx	lr

00008ab6 <sha256_update>:
    8ab6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8aba:	4605      	mov	r5, r0
    8abc:	460e      	mov	r6, r1
    8abe:	4614      	mov	r4, r2
    8ac0:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    8ac4:	1912      	adds	r2, r2, r4
    8ac6:	f143 0300 	adc.w	r3, r3, #0
    8aca:	e9c0 2308 	strd	r2, r3, [r0, #32]
    8ace:	6e87      	ldr	r7, [r0, #104]	; 0x68
    8ad0:	b1ec      	cbz	r4, 8b0e <sha256_update+0x58>
    8ad2:	b1e7      	cbz	r7, 8b0e <sha256_update+0x58>
    8ad4:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    8ad8:	454c      	cmp	r4, r9
    8ada:	d31d      	bcc.n	8b18 <sha256_update+0x62>
    8adc:	f100 0828 	add.w	r8, r0, #40	; 0x28
    8ae0:	464a      	mov	r2, r9
    8ae2:	eb08 0007 	add.w	r0, r8, r7
    8ae6:	f7ff ffd7 	bl	8a98 <blst_sha256_bcopy>
    8aea:	444e      	add	r6, r9
    8aec:	3c40      	subs	r4, #64	; 0x40
    8aee:	443c      	add	r4, r7
    8af0:	2201      	movs	r2, #1
    8af2:	4641      	mov	r1, r8
    8af4:	4628      	mov	r0, r5
    8af6:	f7ff fe4c 	bl	8792 <blst_sha256_block_data_order>
    8afa:	4643      	mov	r3, r8
    8afc:	f105 0168 	add.w	r1, r5, #104	; 0x68
    8b00:	2200      	movs	r2, #0
    8b02:	f843 2b04 	str.w	r2, [r3], #4
    8b06:	428b      	cmp	r3, r1
    8b08:	d1fb      	bne.n	8b02 <sha256_update+0x4c>
    8b0a:	2300      	movs	r3, #0
    8b0c:	66ab      	str	r3, [r5, #104]	; 0x68
    8b0e:	2c3f      	cmp	r4, #63	; 0x3f
    8b10:	d80b      	bhi.n	8b2a <sha256_update+0x74>
    8b12:	b9a4      	cbnz	r4, 8b3e <sha256_update+0x88>
    8b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b18:	3028      	adds	r0, #40	; 0x28
    8b1a:	4622      	mov	r2, r4
    8b1c:	4438      	add	r0, r7
    8b1e:	f7ff ffbb 	bl	8a98 <blst_sha256_bcopy>
    8b22:	6eab      	ldr	r3, [r5, #104]	; 0x68
    8b24:	441c      	add	r4, r3
    8b26:	66ac      	str	r4, [r5, #104]	; 0x68
    8b28:	e7f4      	b.n	8b14 <sha256_update+0x5e>
    8b2a:	09a2      	lsrs	r2, r4, #6
    8b2c:	4631      	mov	r1, r6
    8b2e:	4628      	mov	r0, r5
    8b30:	f7ff fe2f 	bl	8792 <blst_sha256_block_data_order>
    8b34:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
    8b38:	441e      	add	r6, r3
    8b3a:	1ae4      	subs	r4, r4, r3
    8b3c:	e7e9      	b.n	8b12 <sha256_update+0x5c>
    8b3e:	66ac      	str	r4, [r5, #104]	; 0x68
    8b40:	4622      	mov	r2, r4
    8b42:	4631      	mov	r1, r6
    8b44:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8b48:	f7ff ffa6 	bl	8a98 <blst_sha256_bcopy>
    8b4c:	e7e2      	b.n	8b14 <sha256_update+0x5e>

00008b4e <expand_message_xmd>:
    8b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b52:	b0f4      	sub	sp, #464	; 0x1d0
    8b54:	4604      	mov	r4, r0
    8b56:	460d      	mov	r5, r1
    8b58:	4690      	mov	r8, r2
    8b5a:	4699      	mov	r9, r3
    8b5c:	f8dd a1f8 	ldr.w	sl, [sp, #504]	; 0x1f8
    8b60:	9f7f      	ldr	r7, [sp, #508]	; 0x1fc
    8b62:	2fff      	cmp	r7, #255	; 0xff
    8b64:	f200 80b4 	bhi.w	8cd0 <expand_message_xmd+0x182>
    8b68:	f107 066a 	add.w	r6, r7, #106	; 0x6a
    8b6c:	f026 0c3f 	bic.w	ip, r6, #63	; 0x3f
    8b70:	ab74      	add	r3, sp, #464	; 0x1d0
    8b72:	eb03 010c 	add.w	r1, r3, ip
    8b76:	f5a1 71d0 	sub.w	r1, r1, #416	; 0x1a0
    8b7a:	4608      	mov	r0, r1
    8b7c:	f101 0240 	add.w	r2, r1, #64	; 0x40
    8b80:	2300      	movs	r3, #0
    8b82:	f840 3b04 	str.w	r3, [r0], #4
    8b86:	4290      	cmp	r0, r2
    8b88:	d1fb      	bne.n	8b82 <expand_message_xmd+0x34>
    8b8a:	2f00      	cmp	r7, #0
    8b8c:	f000 80b5 	beq.w	8cfa <expand_message_xmd+0x1ac>
    8b90:	f10a 33ff 	add.w	r3, sl, #4294967295
    8b94:	aa24      	add	r2, sp, #144	; 0x90
    8b96:	1e79      	subs	r1, r7, #1
    8b98:	448a      	add	sl, r1
    8b9a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    8b9e:	f802 1f01 	strb.w	r1, [r2, #1]!
    8ba2:	4553      	cmp	r3, sl
    8ba4:	d1f9      	bne.n	8b9a <expand_message_xmd+0x4c>
    8ba6:	463b      	mov	r3, r7
    8ba8:	f10d 0291 	add.w	r2, sp, #145	; 0x91
    8bac:	54d7      	strb	r7, [r2, r3]
    8bae:	f10d 0292 	add.w	r2, sp, #146	; 0x92
    8bb2:	2180      	movs	r1, #128	; 0x80
    8bb4:	54d1      	strb	r1, [r2, r3]
    8bb6:	2200      	movs	r2, #0
    8bb8:	f10d 0193 	add.w	r1, sp, #147	; 0x93
    8bbc:	54ca      	strb	r2, [r1, r3]
    8bbe:	a925      	add	r1, sp, #148	; 0x94
    8bc0:	54ca      	strb	r2, [r1, r3]
    8bc2:	f10d 0195 	add.w	r1, sp, #149	; 0x95
    8bc6:	54ca      	strb	r2, [r1, r3]
    8bc8:	f10d 0196 	add.w	r1, sp, #150	; 0x96
    8bcc:	54ca      	strb	r2, [r1, r3]
    8bce:	f10d 0197 	add.w	r1, sp, #151	; 0x97
    8bd2:	54ca      	strb	r2, [r1, r3]
    8bd4:	a926      	add	r1, sp, #152	; 0x98
    8bd6:	54ca      	strb	r2, [r1, r3]
    8bd8:	f10d 0199 	add.w	r1, sp, #153	; 0x99
    8bdc:	54ca      	strb	r2, [r1, r3]
    8bde:	f107 0322 	add.w	r3, r7, #34	; 0x22
    8be2:	00da      	lsls	r2, r3, #3
    8be4:	a91c      	add	r1, sp, #112	; 0x70
    8be6:	448c      	add	ip, r1
    8be8:	f3c3 1357 	ubfx	r3, r3, #5, #24
    8bec:	f80c 3c02 	strb.w	r3, [ip, #-2]
    8bf0:	f80c 2c01 	strb.w	r2, [ip, #-1]
    8bf4:	4b53      	ldr	r3, [pc, #332]	; (8d44 <expand_message_xmd+0x1f6>)
    8bf6:	9300      	str	r3, [sp, #0]
    8bf8:	4b53      	ldr	r3, [pc, #332]	; (8d48 <expand_message_xmd+0x1fa>)
    8bfa:	9301      	str	r3, [sp, #4]
    8bfc:	4b53      	ldr	r3, [pc, #332]	; (8d4c <expand_message_xmd+0x1fe>)
    8bfe:	9302      	str	r3, [sp, #8]
    8c00:	f103 53ab 	add.w	r3, r3, #358612992	; 0x15600000
    8c04:	f503 2346 	add.w	r3, r3, #811008	; 0xc6000
    8c08:	f203 7331 	addw	r3, r3, #1841	; 0x731
    8c0c:	9303      	str	r3, [sp, #12]
    8c0e:	4b50      	ldr	r3, [pc, #320]	; (8d50 <expand_message_xmd+0x202>)
    8c10:	9304      	str	r3, [sp, #16]
    8c12:	f103 534f 	add.w	r3, r3, #868220928	; 0x33c00000
    8c16:	f503 1332 	add.w	r3, r3, #2916352	; 0x2c8000
    8c1a:	f603 53b2 	addw	r3, r3, #3506	; 0xdb2
    8c1e:	9305      	str	r3, [sp, #20]
    8c20:	4b4c      	ldr	r3, [pc, #304]	; (8d54 <expand_message_xmd+0x206>)
    8c22:	9306      	str	r3, [sp, #24]
    8c24:	4b4c      	ldr	r3, [pc, #304]	; (8d58 <expand_message_xmd+0x20a>)
    8c26:	9307      	str	r3, [sp, #28]
    8c28:	2240      	movs	r2, #64	; 0x40
    8c2a:	2300      	movs	r3, #0
    8c2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    8c30:	a80a      	add	r0, sp, #40	; 0x28
    8c32:	aa1a      	add	r2, sp, #104	; 0x68
    8c34:	2300      	movs	r3, #0
    8c36:	f840 3b04 	str.w	r3, [r0], #4
    8c3a:	4290      	cmp	r0, r2
    8c3c:	d1fb      	bne.n	8c36 <expand_message_xmd+0xe8>
    8c3e:	ab0a      	add	r3, sp, #40	; 0x28
    8c40:	f04f 0a00 	mov.w	sl, #0
    8c44:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
    8c48:	464a      	mov	r2, r9
    8c4a:	4641      	mov	r1, r8
    8c4c:	4668      	mov	r0, sp
    8c4e:	f7ff ff32 	bl	8ab6 <sha256_update>
    8c52:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
    8c54:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    8c56:	4668      	mov	r0, sp
    8c58:	f7ff ff2d 	bl	8ab6 <sha256_update>
    8c5c:	0a2b      	lsrs	r3, r5, #8
    8c5e:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
    8c62:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    8c66:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
    8c6a:	1d3a      	adds	r2, r7, #4
    8c6c:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
    8c70:	4668      	mov	r0, sp
    8c72:	f7ff ff20 	bl	8ab6 <sha256_update>
    8c76:	4669      	mov	r1, sp
    8c78:	a86c      	add	r0, sp, #432	; 0x1b0
    8c7a:	f7ff feb2 	bl	89e2 <sha256_final>
    8c7e:	4668      	mov	r0, sp
    8c80:	f7f7 fcc5 	bl	60e <sha256_init_h>
    8c84:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    8c86:	931c      	str	r3, [sp, #112]	; 0x70
    8c88:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
    8c8a:	931d      	str	r3, [sp, #116]	; 0x74
    8c8c:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
    8c8e:	931e      	str	r3, [sp, #120]	; 0x78
    8c90:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
    8c92:	931f      	str	r3, [sp, #124]	; 0x7c
    8c94:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
    8c96:	9320      	str	r3, [sp, #128]	; 0x80
    8c98:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
    8c9a:	9321      	str	r3, [sp, #132]	; 0x84
    8c9c:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
    8c9e:	9322      	str	r3, [sp, #136]	; 0x88
    8ca0:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
    8ca2:	9323      	str	r3, [sp, #140]	; 0x8c
    8ca4:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
    8ca8:	3301      	adds	r3, #1
    8caa:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    8cae:	09b6      	lsrs	r6, r6, #6
    8cb0:	4632      	mov	r2, r6
    8cb2:	a91c      	add	r1, sp, #112	; 0x70
    8cb4:	4668      	mov	r0, sp
    8cb6:	f7ff fd6c 	bl	8792 <blst_sha256_block_data_order>
    8cba:	4669      	mov	r1, sp
    8cbc:	4620      	mov	r0, r4
    8cbe:	f7ff fe79 	bl	89b4 <blst_sha256_emit>
    8cc2:	351f      	adds	r5, #31
    8cc4:	096d      	lsrs	r5, r5, #5
    8cc6:	3d01      	subs	r5, #1
    8cc8:	d12a      	bne.n	8d20 <expand_message_xmd+0x1d2>
    8cca:	b074      	add	sp, #464	; 0x1d0
    8ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cd0:	4668      	mov	r0, sp
    8cd2:	f7f7 fcc1 	bl	658 <sha256_init>
    8cd6:	2211      	movs	r2, #17
    8cd8:	4920      	ldr	r1, [pc, #128]	; (8d5c <expand_message_xmd+0x20e>)
    8cda:	4668      	mov	r0, sp
    8cdc:	f7ff feeb 	bl	8ab6 <sha256_update>
    8ce0:	463a      	mov	r2, r7
    8ce2:	4651      	mov	r1, sl
    8ce4:	4668      	mov	r0, sp
    8ce6:	f7ff fee6 	bl	8ab6 <sha256_update>
    8cea:	4669      	mov	r1, sp
    8cec:	a86c      	add	r0, sp, #432	; 0x1b0
    8cee:	f7ff fe78 	bl	89e2 <sha256_final>
    8cf2:	2720      	movs	r7, #32
    8cf4:	f50d 7ad8 	add.w	sl, sp, #432	; 0x1b0
    8cf8:	e736      	b.n	8b68 <expand_message_xmd+0x1a>
    8cfa:	463b      	mov	r3, r7
    8cfc:	e754      	b.n	8ba8 <expand_message_xmd+0x5a>
    8cfe:	3420      	adds	r4, #32
    8d00:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
    8d04:	3301      	adds	r3, #1
    8d06:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    8d0a:	4632      	mov	r2, r6
    8d0c:	a91c      	add	r1, sp, #112	; 0x70
    8d0e:	4668      	mov	r0, sp
    8d10:	f7ff fd3f 	bl	8792 <blst_sha256_block_data_order>
    8d14:	4669      	mov	r1, sp
    8d16:	4620      	mov	r0, r4
    8d18:	f7ff fe4c 	bl	89b4 <blst_sha256_emit>
    8d1c:	3d01      	subs	r5, #1
    8d1e:	d0d4      	beq.n	8cca <expand_message_xmd+0x17c>
    8d20:	4668      	mov	r0, sp
    8d22:	f7f7 fc74 	bl	60e <sha256_init_h>
    8d26:	a86b      	add	r0, sp, #428	; 0x1ac
    8d28:	1f22      	subs	r2, r4, #4
    8d2a:	a91b      	add	r1, sp, #108	; 0x6c
    8d2c:	f104 0c1c 	add.w	ip, r4, #28
    8d30:	f850 3f04 	ldr.w	r3, [r0, #4]!
    8d34:	f852 7f04 	ldr.w	r7, [r2, #4]!
    8d38:	407b      	eors	r3, r7
    8d3a:	f841 3f04 	str.w	r3, [r1, #4]!
    8d3e:	4594      	cmp	ip, r2
    8d40:	d1f6      	bne.n	8d30 <expand_message_xmd+0x1e2>
    8d42:	e7dc      	b.n	8cfe <expand_message_xmd+0x1b0>
    8d44:	da5698be 	.word	0xda5698be
    8d48:	17b9b469 	.word	0x17b9b469
    8d4c:	62335799 	.word	0x62335799
    8d50:	8ce5d491 	.word	0x8ce5d491
    8d54:	bafef9ea 	.word	0xbafef9ea
    8d58:	1837a9d8 	.word	0x1837a9d8
    8d5c:	0001d244 	.word	0x0001d244

00008d60 <blst_expand_message_xmd>:
    8d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d64:	b084      	sub	sp, #16
    8d66:	af04      	add	r7, sp, #16
    8d68:	f101 081f 	add.w	r8, r1, #31
    8d6c:	f028 081f 	bic.w	r8, r8, #31
    8d70:	f5b8 5fff 	cmp.w	r8, #8160	; 0x1fe0
    8d74:	d82b      	bhi.n	8dce <blst_expand_message_xmd+0x6e>
    8d76:	4604      	mov	r4, r0
    8d78:	460e      	mov	r6, r1
    8d7a:	4541      	cmp	r1, r8
    8d7c:	d02a      	beq.n	8dd4 <blst_expand_message_xmd+0x74>
    8d7e:	ebad 0d08 	sub.w	sp, sp, r8
    8d82:	ad04      	add	r5, sp, #16
    8d84:	69f9      	ldr	r1, [r7, #28]
    8d86:	9103      	str	r1, [sp, #12]
    8d88:	69b9      	ldr	r1, [r7, #24]
    8d8a:	9102      	str	r1, [sp, #8]
    8d8c:	9301      	str	r3, [sp, #4]
    8d8e:	9200      	str	r2, [sp, #0]
    8d90:	2300      	movs	r3, #0
    8d92:	461a      	mov	r2, r3
    8d94:	4631      	mov	r1, r6
    8d96:	4628      	mov	r0, r5
    8d98:	f7ff fed9 	bl	8b4e <expand_message_xmd>
    8d9c:	42ac      	cmp	r4, r5
    8d9e:	d016      	beq.n	8dce <blst_expand_message_xmd+0x6e>
    8da0:	b146      	cbz	r6, 8db4 <blst_expand_message_xmd+0x54>
    8da2:	1e60      	subs	r0, r4, #1
    8da4:	19a9      	adds	r1, r5, r6
    8da6:	462b      	mov	r3, r5
    8da8:	f813 2b01 	ldrb.w	r2, [r3], #1
    8dac:	f800 2f01 	strb.w	r2, [r0, #1]!
    8db0:	4299      	cmp	r1, r3
    8db2:	d1f9      	bne.n	8da8 <blst_expand_message_xmd+0x48>
    8db4:	ea4f 0198 	mov.w	r1, r8, lsr #2
    8db8:	f1b8 0f03 	cmp.w	r8, #3
    8dbc:	d907      	bls.n	8dce <blst_expand_message_xmd+0x6e>
    8dbe:	462a      	mov	r2, r5
    8dc0:	2300      	movs	r3, #0
    8dc2:	4618      	mov	r0, r3
    8dc4:	f842 0b04 	str.w	r0, [r2], #4
    8dc8:	3301      	adds	r3, #1
    8dca:	4299      	cmp	r1, r3
    8dcc:	d8fa      	bhi.n	8dc4 <blst_expand_message_xmd+0x64>
    8dce:	46bd      	mov	sp, r7
    8dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dd4:	69f9      	ldr	r1, [r7, #28]
    8dd6:	9103      	str	r1, [sp, #12]
    8dd8:	69b9      	ldr	r1, [r7, #24]
    8dda:	9102      	str	r1, [sp, #8]
    8ddc:	9301      	str	r3, [sp, #4]
    8dde:	9200      	str	r2, [sp, #0]
    8de0:	2300      	movs	r3, #0
    8de2:	461a      	mov	r2, r3
    8de4:	4641      	mov	r1, r8
    8de6:	f7ff feb2 	bl	8b4e <expand_message_xmd>
    8dea:	e7f0      	b.n	8dce <blst_expand_message_xmd+0x6e>

00008dec <hash_to_field>:
    8dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8df0:	b09d      	sub	sp, #116	; 0x74
    8df2:	af04      	add	r7, sp, #16
    8df4:	4605      	mov	r5, r0
    8df6:	460c      	mov	r4, r1
    8df8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
    8dfc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
    8e00:	466e      	mov	r6, sp
    8e02:	eba6 1684 	sub.w	r6, r6, r4, lsl #6
    8e06:	46b5      	mov	sp, r6
    8e08:	ae04      	add	r6, sp, #16
    8e0a:	2a00      	cmp	r2, #0
    8e0c:	bf08      	it	eq
    8e0e:	2300      	moveq	r3, #0
    8e10:	2800      	cmp	r0, #0
    8e12:	bf08      	it	eq
    8e14:	2100      	moveq	r1, #0
    8e16:	9103      	str	r1, [sp, #12]
    8e18:	9002      	str	r0, [sp, #8]
    8e1a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
    8e1e:	9101      	str	r1, [sp, #4]
    8e20:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    8e24:	9100      	str	r1, [sp, #0]
    8e26:	01a1      	lsls	r1, r4, #6
    8e28:	4630      	mov	r0, r6
    8e2a:	f7ff fe90 	bl	8b4e <expand_message_xmd>
    8e2e:	463b      	mov	r3, r7
    8e30:	f107 0060 	add.w	r0, r7, #96	; 0x60
    8e34:	2200      	movs	r2, #0
    8e36:	f843 2b04 	str.w	r2, [r3], #4
    8e3a:	4298      	cmp	r0, r3
    8e3c:	d1fb      	bne.n	8e36 <hash_to_field+0x4a>
    8e3e:	f104 38ff 	add.w	r8, r4, #4294967295
    8e42:	b3ac      	cbz	r4, 8eb0 <hash_to_field+0xc4>
    8e44:	f106 0440 	add.w	r4, r6, #64	; 0x40
    8e48:	f8df b070 	ldr.w	fp, [pc, #112]	; 8ebc <hash_to_field+0xd0>
    8e4c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8ec0 <hash_to_field+0xd4>
    8e50:	e01b      	b.n	8e8a <hash_to_field+0x9e>
    8e52:	3640      	adds	r6, #64	; 0x40
    8e54:	f04f 090c 	mov.w	r9, #12
    8e58:	f8cd 9000 	str.w	r9, [sp]
    8e5c:	465b      	mov	r3, fp
    8e5e:	4652      	mov	r2, sl
    8e60:	4639      	mov	r1, r7
    8e62:	4628      	mov	r0, r5
    8e64:	f7fa fa60 	bl	3328 <redc_mont_n>
    8e68:	f8cd 9004 	str.w	r9, [sp, #4]
    8e6c:	f8cd b000 	str.w	fp, [sp]
    8e70:	4653      	mov	r3, sl
    8e72:	4a11      	ldr	r2, [pc, #68]	; (8eb8 <hash_to_field+0xcc>)
    8e74:	4629      	mov	r1, r5
    8e76:	4628      	mov	r0, r5
    8e78:	f7f7 fe57 	bl	b2a <mul_mont_n>
    8e7c:	3530      	adds	r5, #48	; 0x30
    8e7e:	f108 38ff 	add.w	r8, r8, #4294967295
    8e82:	3440      	adds	r4, #64	; 0x40
    8e84:	f1b8 3fff 	cmp.w	r8, #4294967295
    8e88:	d012      	beq.n	8eb0 <hash_to_field+0xc4>
    8e8a:	4632      	mov	r2, r6
    8e8c:	2100      	movs	r1, #0
    8e8e:	f106 003f 	add.w	r0, r6, #63	; 0x3f
    8e92:	1a83      	subs	r3, r0, r2
    8e94:	f812 cb01 	ldrb.w	ip, [r2], #1
    8e98:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    8e9c:	f023 0303 	bic.w	r3, r3, #3
    8ea0:	f107 0c60 	add.w	ip, r7, #96	; 0x60
    8ea4:	4463      	add	r3, ip
    8ea6:	f843 1c60 	str.w	r1, [r3, #-96]
    8eaa:	42a2      	cmp	r2, r4
    8eac:	d1f1      	bne.n	8e92 <hash_to_field+0xa6>
    8eae:	e7d0      	b.n	8e52 <hash_to_field+0x66>
    8eb0:	3764      	adds	r7, #100	; 0x64
    8eb2:	46bd      	mov	sp, r7
    8eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8eb8:	0001c430 	.word	0x0001c430
    8ebc:	fffcfffd 	.word	0xfffcfffd
    8ec0:	0001ade8 	.word	0x0001ade8

00008ec4 <blst_encode_to_g1>:
    8ec4:	b510      	push	{r4, lr}
    8ec6:	b090      	sub	sp, #64	; 0x40
    8ec8:	4604      	mov	r4, r0
    8eca:	9812      	ldr	r0, [sp, #72]	; 0x48
    8ecc:	9003      	str	r0, [sp, #12]
    8ece:	9302      	str	r3, [sp, #8]
    8ed0:	9201      	str	r2, [sp, #4]
    8ed2:	9100      	str	r1, [sp, #0]
    8ed4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8ed6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8ed8:	2101      	movs	r1, #1
    8eda:	a804      	add	r0, sp, #16
    8edc:	f7ff ff86 	bl	8dec <hash_to_field>
    8ee0:	2200      	movs	r2, #0
    8ee2:	a904      	add	r1, sp, #16
    8ee4:	4620      	mov	r0, r4
    8ee6:	f7ff f949 	bl	817c <map_to_g1>
    8eea:	b010      	add	sp, #64	; 0x40
    8eec:	bd10      	pop	{r4, pc}

00008eee <blst_hash_to_g1>:
    8eee:	b510      	push	{r4, lr}
    8ef0:	b09c      	sub	sp, #112	; 0x70
    8ef2:	4604      	mov	r4, r0
    8ef4:	981e      	ldr	r0, [sp, #120]	; 0x78
    8ef6:	9003      	str	r0, [sp, #12]
    8ef8:	9302      	str	r3, [sp, #8]
    8efa:	9201      	str	r2, [sp, #4]
    8efc:	9100      	str	r1, [sp, #0]
    8efe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8f00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8f02:	2102      	movs	r1, #2
    8f04:	a804      	add	r0, sp, #16
    8f06:	f7ff ff71 	bl	8dec <hash_to_field>
    8f0a:	aa10      	add	r2, sp, #64	; 0x40
    8f0c:	a904      	add	r1, sp, #16
    8f0e:	4620      	mov	r0, r4
    8f10:	f7ff f934 	bl	817c <map_to_g1>
    8f14:	b01c      	add	sp, #112	; 0x70
    8f16:	bd10      	pop	{r4, pc}

00008f18 <HMAC_init>:
    8f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f1c:	4607      	mov	r7, r0
    8f1e:	2900      	cmp	r1, #0
    8f20:	d054      	beq.n	8fcc <HMAC_init+0xb4>
    8f22:	4614      	mov	r4, r2
    8f24:	460d      	mov	r5, r1
    8f26:	f100 09b0 	add.w	r9, r0, #176	; 0xb0
    8f2a:	464e      	mov	r6, r9
    8f2c:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
    8f30:	464b      	mov	r3, r9
    8f32:	2100      	movs	r1, #0
    8f34:	f843 1b04 	str.w	r1, [r3], #4
    8f38:	4543      	cmp	r3, r8
    8f3a:	d1fb      	bne.n	8f34 <HMAC_init+0x1c>
    8f3c:	2c40      	cmp	r4, #64	; 0x40
    8f3e:	d95a      	bls.n	8ff6 <HMAC_init+0xde>
    8f40:	4638      	mov	r0, r7
    8f42:	f7f7 fb89 	bl	658 <sha256_init>
    8f46:	4622      	mov	r2, r4
    8f48:	4629      	mov	r1, r5
    8f4a:	4638      	mov	r0, r7
    8f4c:	f7ff fdb3 	bl	8ab6 <sha256_update>
    8f50:	4639      	mov	r1, r7
    8f52:	4648      	mov	r0, r9
    8f54:	f7ff fd45 	bl	89e2 <sha256_final>
    8f58:	f107 04ac 	add.w	r4, r7, #172	; 0xac
    8f5c:	f107 05ec 	add.w	r5, r7, #236	; 0xec
    8f60:	4623      	mov	r3, r4
    8f62:	f853 2f04 	ldr.w	r2, [r3, #4]!
    8f66:	f082 3236 	eor.w	r2, r2, #909522486	; 0x36363636
    8f6a:	601a      	str	r2, [r3, #0]
    8f6c:	42ab      	cmp	r3, r5
    8f6e:	d1f8      	bne.n	8f62 <HMAC_init+0x4a>
    8f70:	4638      	mov	r0, r7
    8f72:	f7f7 fb71 	bl	658 <sha256_init>
    8f76:	2240      	movs	r2, #64	; 0x40
    8f78:	4649      	mov	r1, r9
    8f7a:	4638      	mov	r0, r7
    8f7c:	f7ff fd9b 	bl	8ab6 <sha256_update>
    8f80:	4639      	mov	r1, r7
    8f82:	f107 0070 	add.w	r0, r7, #112	; 0x70
    8f86:	f7ff fd0b 	bl	89a0 <blst_sha256_hcopy>
    8f8a:	f854 3f04 	ldr.w	r3, [r4, #4]!
    8f8e:	f083 336a 	eor.w	r3, r3, #1785358954	; 0x6a6a6a6a
    8f92:	6023      	str	r3, [r4, #0]
    8f94:	42ac      	cmp	r4, r5
    8f96:	d1f8      	bne.n	8f8a <HMAC_init+0x72>
    8f98:	f107 0490 	add.w	r4, r7, #144	; 0x90
    8f9c:	4620      	mov	r0, r4
    8f9e:	f7f7 fb36 	bl	60e <sha256_init_h>
    8fa2:	2201      	movs	r2, #1
    8fa4:	4649      	mov	r1, r9
    8fa6:	4620      	mov	r0, r4
    8fa8:	f7ff fbf3 	bl	8792 <blst_sha256_block_data_order>
    8fac:	2300      	movs	r3, #0
    8fae:	f846 3b04 	str.w	r3, [r6], #4
    8fb2:	4546      	cmp	r6, r8
    8fb4:	d1fb      	bne.n	8fae <HMAC_init+0x96>
    8fb6:	2380      	movs	r3, #128	; 0x80
    8fb8:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
    8fbc:	2303      	movs	r3, #3
    8fbe:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
    8fc2:	2300      	movs	r3, #0
    8fc4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    8fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8fcc:	f100 0170 	add.w	r1, r0, #112	; 0x70
    8fd0:	f7ff fce6 	bl	89a0 <blst_sha256_hcopy>
    8fd4:	2240      	movs	r2, #64	; 0x40
    8fd6:	2300      	movs	r3, #0
    8fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    8fdc:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8fe0:	4603      	mov	r3, r0
    8fe2:	f107 0168 	add.w	r1, r7, #104	; 0x68
    8fe6:	2200      	movs	r2, #0
    8fe8:	f843 2b04 	str.w	r2, [r3], #4
    8fec:	4299      	cmp	r1, r3
    8fee:	d1fb      	bne.n	8fe8 <HMAC_init+0xd0>
    8ff0:	2300      	movs	r3, #0
    8ff2:	66bb      	str	r3, [r7, #104]	; 0x68
    8ff4:	e7e8      	b.n	8fc8 <HMAC_init+0xb0>
    8ff6:	4622      	mov	r2, r4
    8ff8:	4629      	mov	r1, r5
    8ffa:	4648      	mov	r0, r9
    8ffc:	f7ff fd4c 	bl	8a98 <blst_sha256_bcopy>
    9000:	e7aa      	b.n	8f58 <HMAC_init+0x40>

00009002 <HKDF_Expand>:
    9002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9006:	b085      	sub	sp, #20
    9008:	af00      	add	r7, sp, #0
    900a:	4604      	mov	r4, r0
    900c:	60b9      	str	r1, [r7, #8]
    900e:	4611      	mov	r1, r2
    9010:	469a      	mov	sl, r3
    9012:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
    9016:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    9018:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
    901c:	f108 030a 	add.w	r3, r8, #10
    9020:	f023 0307 	bic.w	r3, r3, #7
    9024:	ebad 0d03 	sub.w	sp, sp, r3
    9028:	466d      	mov	r5, sp
    902a:	2220      	movs	r2, #32
    902c:	4648      	mov	r0, r9
    902e:	f7ff ff73 	bl	8f18 <HMAC_init>
    9032:	f1b8 0f00 	cmp.w	r8, #0
    9036:	d154      	bne.n	90e2 <HKDF_Expand+0xe0>
    9038:	b146      	cbz	r6, 904c <HKDF_Expand+0x4a>
    903a:	68ba      	ldr	r2, [r7, #8]
    903c:	0a13      	lsrs	r3, r2, #8
    903e:	f805 3008 	strb.w	r3, [r5, r8]
    9042:	eb05 0308 	add.w	r3, r5, r8
    9046:	705a      	strb	r2, [r3, #1]
    9048:	f108 0802 	add.w	r8, r8, #2
    904c:	2301      	movs	r3, #1
    904e:	f805 3008 	strb.w	r3, [r5, r8]
    9052:	4443      	add	r3, r8
    9054:	60fb      	str	r3, [r7, #12]
    9056:	46ca      	mov	sl, r9
    9058:	461a      	mov	r2, r3
    905a:	4629      	mov	r1, r5
    905c:	4648      	mov	r0, r9
    905e:	f7ff fd2a 	bl	8ab6 <sha256_update>
    9062:	f109 06b0 	add.w	r6, r9, #176	; 0xb0
    9066:	4649      	mov	r1, r9
    9068:	4630      	mov	r0, r6
    906a:	f7ff fcfe 	bl	8a6a <HMAC_final>
    906e:	68bb      	ldr	r3, [r7, #8]
    9070:	2b20      	cmp	r3, #32
    9072:	d93c      	bls.n	90ee <HKDF_Expand+0xec>
    9074:	3b21      	subs	r3, #33	; 0x21
    9076:	095b      	lsrs	r3, r3, #5
    9078:	607b      	str	r3, [r7, #4]
    907a:	f103 0b01 	add.w	fp, r3, #1
    907e:	eb04 1b4b 	add.w	fp, r4, fp, lsl #5
    9082:	4631      	mov	r1, r6
    9084:	4620      	mov	r0, r4
    9086:	f7ff fc8b 	bl	89a0 <blst_sha256_hcopy>
    908a:	3420      	adds	r4, #32
    908c:	f815 3008 	ldrb.w	r3, [r5, r8]
    9090:	3301      	adds	r3, #1
    9092:	f805 3008 	strb.w	r3, [r5, r8]
    9096:	2200      	movs	r2, #0
    9098:	4611      	mov	r1, r2
    909a:	4648      	mov	r0, r9
    909c:	f7ff ff3c 	bl	8f18 <HMAC_init>
    90a0:	2220      	movs	r2, #32
    90a2:	4631      	mov	r1, r6
    90a4:	4650      	mov	r0, sl
    90a6:	f7ff fd06 	bl	8ab6 <sha256_update>
    90aa:	68fa      	ldr	r2, [r7, #12]
    90ac:	4629      	mov	r1, r5
    90ae:	4650      	mov	r0, sl
    90b0:	f7ff fd01 	bl	8ab6 <sha256_update>
    90b4:	4649      	mov	r1, r9
    90b6:	4630      	mov	r0, r6
    90b8:	f7ff fcd7 	bl	8a6a <HMAC_final>
    90bc:	455c      	cmp	r4, fp
    90be:	d1e0      	bne.n	9082 <HKDF_Expand+0x80>
    90c0:	68bb      	ldr	r3, [r7, #8]
    90c2:	3b20      	subs	r3, #32
    90c4:	687a      	ldr	r2, [r7, #4]
    90c6:	ebc2 61c2 	rsb	r1, r2, r2, lsl #27
    90ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    90ce:	60bb      	str	r3, [r7, #8]
    90d0:	68ba      	ldr	r2, [r7, #8]
    90d2:	4631      	mov	r1, r6
    90d4:	4658      	mov	r0, fp
    90d6:	f7ff fcdf 	bl	8a98 <blst_sha256_bcopy>
    90da:	3714      	adds	r7, #20
    90dc:	46bd      	mov	sp, r7
    90de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e2:	4642      	mov	r2, r8
    90e4:	4651      	mov	r1, sl
    90e6:	4628      	mov	r0, r5
    90e8:	f7ff fcd6 	bl	8a98 <blst_sha256_bcopy>
    90ec:	e7a4      	b.n	9038 <HKDF_Expand+0x36>
    90ee:	46a3      	mov	fp, r4
    90f0:	e7ee      	b.n	90d0 <HKDF_Expand+0xce>

000090f2 <keygen>:
    90f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90f6:	b0f5      	sub	sp, #468	; 0x1d4
    90f8:	9009      	str	r0, [sp, #36]	; 0x24
    90fa:	9107      	str	r1, [sp, #28]
    90fc:	4616      	mov	r6, r2
    90fe:	9208      	str	r2, [sp, #32]
    9100:	9306      	str	r3, [sp, #24]
    9102:	f8dd a1fc 	ldr.w	sl, [sp, #508]	; 0x1fc
    9106:	ac0c      	add	r4, sp, #48	; 0x30
    9108:	4d5d      	ldr	r5, [pc, #372]	; (9280 <keygen+0x18e>)
    910a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    910c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    910e:	e895 0003 	ldmia.w	r5, {r0, r1}
    9112:	f844 0b04 	str.w	r0, [r4], #4
    9116:	7021      	strb	r1, [r4, #0]
    9118:	2300      	movs	r3, #0
    911a:	f8cd 3045 	str.w	r3, [sp, #69]	; 0x45
    911e:	f8cd 3049 	str.w	r3, [sp, #73]	; 0x49
    9122:	9313      	str	r3, [sp, #76]	; 0x4c
    9124:	2e1f      	cmp	r6, #31
    9126:	d90d      	bls.n	9144 <keygen+0x52>
    9128:	9b06      	ldr	r3, [sp, #24]
    912a:	2b00      	cmp	r3, #0
    912c:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
    912e:	bf08      	it	eq
    9130:	2300      	moveq	r3, #0
    9132:	937e      	str	r3, [sp, #504]	; 0x1f8
    9134:	2314      	movs	r3, #20
    9136:	9305      	str	r3, [sp, #20]
    9138:	2500      	movs	r5, #0
    913a:	ac64      	add	r4, sp, #400	; 0x190
    913c:	4b51      	ldr	r3, [pc, #324]	; (9284 <keygen+0x192>)
    913e:	f503 6b60 	add.w	fp, r3, #3584	; 0xe00
    9142:	e079      	b.n	9238 <keygen+0x146>
    9144:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9146:	4613      	mov	r3, r2
    9148:	f102 0120 	add.w	r1, r2, #32
    914c:	2200      	movs	r2, #0
    914e:	f843 2b04 	str.w	r2, [r3], #4
    9152:	4299      	cmp	r1, r3
    9154:	d1fb      	bne.n	914e <keygen+0x5c>
    9156:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9158:	e082      	b.n	9260 <keygen+0x16e>
    915a:	a814      	add	r0, sp, #80	; 0x50
    915c:	f7f7 fa7c 	bl	658 <sha256_init>
    9160:	9a05      	ldr	r2, [sp, #20]
    9162:	a90c      	add	r1, sp, #48	; 0x30
    9164:	a814      	add	r0, sp, #80	; 0x50
    9166:	f7ff fca6 	bl	8ab6 <sha256_update>
    916a:	a914      	add	r1, sp, #80	; 0x50
    916c:	a80c      	add	r0, sp, #48	; 0x30
    916e:	f7ff fc38 	bl	89e2 <sha256_final>
    9172:	2320      	movs	r3, #32
    9174:	9305      	str	r3, [sp, #20]
    9176:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    917a:	9a05      	ldr	r2, [sp, #20]
    917c:	a90c      	add	r1, sp, #48	; 0x30
    917e:	a814      	add	r0, sp, #80	; 0x50
    9180:	f7ff feca 	bl	8f18 <HMAC_init>
    9184:	9a08      	ldr	r2, [sp, #32]
    9186:	9907      	ldr	r1, [sp, #28]
    9188:	a814      	add	r0, sp, #80	; 0x50
    918a:	f7ff fc94 	bl	8ab6 <sha256_update>
    918e:	2201      	movs	r2, #1
    9190:	a90b      	add	r1, sp, #44	; 0x2c
    9192:	a814      	add	r0, sp, #80	; 0x50
    9194:	f7ff fc8f 	bl	8ab6 <sha256_update>
    9198:	a914      	add	r1, sp, #80	; 0x50
    919a:	a850      	add	r0, sp, #320	; 0x140
    919c:	f7ff fc65 	bl	8a6a <HMAC_final>
    91a0:	ab14      	add	r3, sp, #80	; 0x50
    91a2:	9302      	str	r3, [sp, #8]
    91a4:	2301      	movs	r3, #1
    91a6:	9301      	str	r3, [sp, #4]
    91a8:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
    91aa:	9300      	str	r3, [sp, #0]
    91ac:	9b06      	ldr	r3, [sp, #24]
    91ae:	aa50      	add	r2, sp, #320	; 0x140
    91b0:	2130      	movs	r1, #48	; 0x30
    91b2:	a858      	add	r0, sp, #352	; 0x160
    91b4:	f7ff ff25 	bl	9002 <HKDF_Expand>
    91b8:	f50d 78c8 	add.w	r8, sp, #400	; 0x190
    91bc:	f10d 0950 	add.w	r9, sp, #80	; 0x50
    91c0:	ae74      	add	r6, sp, #464	; 0x1d0
    91c2:	4643      	mov	r3, r8
    91c4:	f843 5b04 	str.w	r5, [r3], #4
    91c8:	42b3      	cmp	r3, r6
    91ca:	d1fb      	bne.n	91c4 <keygen+0xd2>
    91cc:	aa58      	add	r2, sp, #352	; 0x160
    91ce:	4629      	mov	r1, r5
    91d0:	f209 103f 	addw	r0, r9, #319	; 0x13f
    91d4:	1a83      	subs	r3, r0, r2
    91d6:	f812 7b01 	ldrb.w	r7, [r2], #1
    91da:	ea47 2101 	orr.w	r1, r7, r1, lsl #8
    91de:	f023 0303 	bic.w	r3, r3, #3
    91e2:	af74      	add	r7, sp, #464	; 0x1d0
    91e4:	443b      	add	r3, r7
    91e6:	f843 1c40 	str.w	r1, [r3, #-64]
    91ea:	42a2      	cmp	r2, r4
    91ec:	d1f2      	bne.n	91d4 <keygen+0xe2>
    91ee:	2708      	movs	r7, #8
    91f0:	9700      	str	r7, [sp, #0]
    91f2:	f04f 33ff 	mov.w	r3, #4294967295
    91f6:	465a      	mov	r2, fp
    91f8:	4621      	mov	r1, r4
    91fa:	4620      	mov	r0, r4
    91fc:	f7fa f894 	bl	3328 <redc_mont_n>
    9200:	9701      	str	r7, [sp, #4]
    9202:	f04f 33ff 	mov.w	r3, #4294967295
    9206:	9300      	str	r3, [sp, #0]
    9208:	465b      	mov	r3, fp
    920a:	f5ab 6260 	sub.w	r2, fp, #3584	; 0xe00
    920e:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
    9212:	4621      	mov	r1, r4
    9214:	4620      	mov	r0, r4
    9216:	f7f7 fc88 	bl	b2a <mul_mont_n>
    921a:	f1ba 0f03 	cmp.w	sl, #3
    921e:	dd0f      	ble.n	9240 <keygen+0x14e>
    9220:	f509 70b0 	add.w	r0, r9, #352	; 0x160
    9224:	4643      	mov	r3, r8
    9226:	2200      	movs	r2, #0
    9228:	f853 1b04 	ldr.w	r1, [r3], #4
    922c:	430a      	orrs	r2, r1
    922e:	4283      	cmp	r3, r0
    9230:	d1fa      	bne.n	9228 <keygen+0x136>
    9232:	1e53      	subs	r3, r2, #1
    9234:	4393      	bics	r3, r2
    9236:	d503      	bpl.n	9240 <keygen+0x14e>
    9238:	f1ba 0f03 	cmp.w	sl, #3
    923c:	dd9b      	ble.n	9176 <keygen+0x84>
    923e:	e78c      	b.n	915a <keygen+0x68>
    9240:	464f      	mov	r7, r9
    9242:	ab64      	add	r3, sp, #400	; 0x190
    9244:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9246:	429a      	cmp	r2, r3
    9248:	d004      	beq.n	9254 <keygen+0x162>
    924a:	9909      	ldr	r1, [sp, #36]	; 0x24
    924c:	3104      	adds	r1, #4
    924e:	f509 70b0 	add.w	r0, r9, #352	; 0x160
    9252:	e00b      	b.n	926c <keygen+0x17a>
    9254:	2300      	movs	r3, #0
    9256:	f847 3b04 	str.w	r3, [r7], #4
    925a:	42b7      	cmp	r7, r6
    925c:	d1fb      	bne.n	9256 <keygen+0x164>
    925e:	ab14      	add	r3, sp, #80	; 0x50
    9260:	b075      	add	sp, #468	; 0x1d4
    9262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9266:	3104      	adds	r1, #4
    9268:	4580      	cmp	r8, r0
    926a:	d0f3      	beq.n	9254 <keygen+0x162>
    926c:	1f0a      	subs	r2, r1, #4
    926e:	f858 3b04 	ldr.w	r3, [r8], #4
    9272:	f802 3b01 	strb.w	r3, [r2], #1
    9276:	0a1b      	lsrs	r3, r3, #8
    9278:	428a      	cmp	r2, r1
    927a:	d1fa      	bne.n	9272 <keygen+0x180>
    927c:	e7f3      	b.n	9266 <keygen+0x174>
    927e:	bf00      	nop
    9280:	0001c460 	.word	0x0001c460
    9284:	0001ade8 	.word	0x0001ade8

00009288 <blst_keygen>:
    9288:	b510      	push	{r4, lr}
    928a:	b082      	sub	sp, #8
    928c:	2404      	movs	r4, #4
    928e:	9401      	str	r4, [sp, #4]
    9290:	9c04      	ldr	r4, [sp, #16]
    9292:	9400      	str	r4, [sp, #0]
    9294:	f7ff ff2d 	bl	90f2 <keygen>
    9298:	b002      	add	sp, #8
    929a:	bd10      	pop	{r4, pc}

0000929c <blst_keygen_v3>:
    929c:	b510      	push	{r4, lr}
    929e:	b082      	sub	sp, #8
    92a0:	2403      	movs	r4, #3
    92a2:	9401      	str	r4, [sp, #4]
    92a4:	9c04      	ldr	r4, [sp, #16]
    92a6:	9400      	str	r4, [sp, #0]
    92a8:	f7ff ff23 	bl	90f2 <keygen>
    92ac:	b002      	add	sp, #8
    92ae:	bd10      	pop	{r4, pc}

000092b0 <blst_derive_master_eip2333>:
    92b0:	b500      	push	{lr}
    92b2:	b083      	sub	sp, #12
    92b4:	2304      	movs	r3, #4
    92b6:	9301      	str	r3, [sp, #4]
    92b8:	2300      	movs	r3, #0
    92ba:	9300      	str	r3, [sp, #0]
    92bc:	f7ff ff19 	bl	90f2 <keygen>
    92c0:	b003      	add	sp, #12
    92c2:	f85d fb04 	ldr.w	pc, [sp], #4

000092c6 <parent_SK_to_lamport_PK>:
    92c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92ca:	f5ad 5d06 	sub.w	sp, sp, #8576	; 0x2180
    92ce:	b089      	sub	sp, #36	; 0x24
    92d0:	9005      	str	r0, [sp, #20]
    92d2:	0e13      	lsrs	r3, r2, #24
    92d4:	f88d 301c 	strb.w	r3, [sp, #28]
    92d8:	0c13      	lsrs	r3, r2, #16
    92da:	f88d 301d 	strb.w	r3, [sp, #29]
    92de:	0a13      	lsrs	r3, r2, #8
    92e0:	f88d 301e 	strb.w	r3, [sp, #30]
    92e4:	f88d 201f 	strb.w	r2, [sp, #31]
    92e8:	f101 0220 	add.w	r2, r1, #32
    92ec:	ab68      	add	r3, sp, #416	; 0x1a0
    92ee:	f10d 0a20 	add.w	sl, sp, #32
    92f2:	a870      	add	r0, sp, #448	; 0x1c0
    92f4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    92f8:	f803 1b01 	strb.w	r1, [r3], #1
    92fc:	4283      	cmp	r3, r0
    92fe:	d1f9      	bne.n	92f4 <parent_SK_to_lamport_PK+0x2e>
    9300:	ac08      	add	r4, sp, #32
    9302:	2204      	movs	r2, #4
    9304:	a907      	add	r1, sp, #28
    9306:	4620      	mov	r0, r4
    9308:	f7ff fe06 	bl	8f18 <HMAC_init>
    930c:	2220      	movs	r2, #32
    930e:	a968      	add	r1, sp, #416	; 0x1a0
    9310:	4620      	mov	r0, r4
    9312:	f7ff fbd0 	bl	8ab6 <sha256_update>
    9316:	f504 75b0 	add.w	r5, r4, #352	; 0x160
    931a:	4621      	mov	r1, r4
    931c:	4628      	mov	r0, r5
    931e:	f7ff fba4 	bl	8a6a <HMAC_final>
    9322:	9402      	str	r4, [sp, #8]
    9324:	2300      	movs	r3, #0
    9326:	9301      	str	r3, [sp, #4]
    9328:	9300      	str	r3, [sp, #0]
    932a:	462a      	mov	r2, r5
    932c:	f44f 51ff 	mov.w	r1, #8160	; 0x1fe0
    9330:	a870      	add	r0, sp, #448	; 0x1c0
    9332:	f7ff fe66 	bl	9002 <HKDF_Expand>
    9336:	f104 0928 	add.w	r9, r4, #40	; 0x28
    933a:	f10a 0b68 	add.w	fp, sl, #104	; 0x68
    933e:	464b      	mov	r3, r9
    9340:	2200      	movs	r2, #0
    9342:	f843 2b04 	str.w	r2, [r3], #4
    9346:	455b      	cmp	r3, fp
    9348:	d1fb      	bne.n	9342 <parent_SK_to_lamport_PK+0x7c>
    934a:	ab12      	add	r3, sp, #72	; 0x48
    934c:	2380      	movs	r3, #128	; 0x80
    934e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    9352:	2301      	movs	r3, #1
    9354:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    9358:	2300      	movs	r3, #0
    935a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    935e:	ac70      	add	r4, sp, #448	; 0x1c0
    9360:	f50a 5606 	add.w	r6, sl, #8576	; 0x2180
    9364:	4625      	mov	r5, r4
    9366:	af12      	add	r7, sp, #72	; 0x48
    9368:	f04f 0820 	mov.w	r8, #32
    936c:	a808      	add	r0, sp, #32
    936e:	f7f7 f94e 	bl	60e <sha256_init_h>
    9372:	4642      	mov	r2, r8
    9374:	4629      	mov	r1, r5
    9376:	4638      	mov	r0, r7
    9378:	f7ff fb8e 	bl	8a98 <blst_sha256_bcopy>
    937c:	2201      	movs	r2, #1
    937e:	4639      	mov	r1, r7
    9380:	a808      	add	r0, sp, #32
    9382:	f7ff fa06 	bl	8792 <blst_sha256_block_data_order>
    9386:	a908      	add	r1, sp, #32
    9388:	4628      	mov	r0, r5
    938a:	f7ff fb13 	bl	89b4 <blst_sha256_emit>
    938e:	3520      	adds	r5, #32
    9390:	42b5      	cmp	r5, r6
    9392:	d1eb      	bne.n	936c <parent_SK_to_lamport_PK+0xa6>
    9394:	ad44      	add	r5, sp, #272	; 0x110
    9396:	4628      	mov	r0, r5
    9398:	f7f7 f95e 	bl	658 <sha256_init>
    939c:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
    93a0:	a970      	add	r1, sp, #448	; 0x1c0
    93a2:	4628      	mov	r0, r5
    93a4:	f7ff fb87 	bl	8ab6 <sha256_update>
    93a8:	f20d 139f 	addw	r3, sp, #415	; 0x19f
    93ac:	f20a 119f 	addw	r1, sl, #415	; 0x19f
    93b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    93b4:	43d2      	mvns	r2, r2
    93b6:	701a      	strb	r2, [r3, #0]
    93b8:	428b      	cmp	r3, r1
    93ba:	d1f9      	bne.n	93b0 <parent_SK_to_lamport_PK+0xea>
    93bc:	ad08      	add	r5, sp, #32
    93be:	2204      	movs	r2, #4
    93c0:	a907      	add	r1, sp, #28
    93c2:	4628      	mov	r0, r5
    93c4:	f7ff fda8 	bl	8f18 <HMAC_init>
    93c8:	2220      	movs	r2, #32
    93ca:	a968      	add	r1, sp, #416	; 0x1a0
    93cc:	4628      	mov	r0, r5
    93ce:	f7ff fb72 	bl	8ab6 <sha256_update>
    93d2:	f505 77b0 	add.w	r7, r5, #352	; 0x160
    93d6:	4629      	mov	r1, r5
    93d8:	4638      	mov	r0, r7
    93da:	f7ff fb46 	bl	8a6a <HMAC_final>
    93de:	9502      	str	r5, [sp, #8]
    93e0:	2300      	movs	r3, #0
    93e2:	9301      	str	r3, [sp, #4]
    93e4:	9300      	str	r3, [sp, #0]
    93e6:	463a      	mov	r2, r7
    93e8:	f44f 51ff 	mov.w	r1, #8160	; 0x1fe0
    93ec:	a870      	add	r0, sp, #448	; 0x1c0
    93ee:	f7ff fe08 	bl	9002 <HKDF_Expand>
    93f2:	2300      	movs	r3, #0
    93f4:	f849 3b04 	str.w	r3, [r9], #4
    93f8:	45d9      	cmp	r9, fp
    93fa:	d1fb      	bne.n	93f4 <parent_SK_to_lamport_PK+0x12e>
    93fc:	ab12      	add	r3, sp, #72	; 0x48
    93fe:	2380      	movs	r3, #128	; 0x80
    9400:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    9404:	2301      	movs	r3, #1
    9406:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    940a:	ad12      	add	r5, sp, #72	; 0x48
    940c:	2720      	movs	r7, #32
    940e:	a808      	add	r0, sp, #32
    9410:	f7f7 f8fd 	bl	60e <sha256_init_h>
    9414:	463a      	mov	r2, r7
    9416:	4621      	mov	r1, r4
    9418:	4628      	mov	r0, r5
    941a:	f7ff fb3d 	bl	8a98 <blst_sha256_bcopy>
    941e:	2201      	movs	r2, #1
    9420:	4629      	mov	r1, r5
    9422:	a808      	add	r0, sp, #32
    9424:	f7ff f9b5 	bl	8792 <blst_sha256_block_data_order>
    9428:	a908      	add	r1, sp, #32
    942a:	4620      	mov	r0, r4
    942c:	f7ff fac2 	bl	89b4 <blst_sha256_emit>
    9430:	3420      	adds	r4, #32
    9432:	42b4      	cmp	r4, r6
    9434:	d1eb      	bne.n	940e <parent_SK_to_lamport_PK+0x148>
    9436:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
    943a:	a970      	add	r1, sp, #448	; 0x1c0
    943c:	a844      	add	r0, sp, #272	; 0x110
    943e:	f7ff fb3a 	bl	8ab6 <sha256_update>
    9442:	a944      	add	r1, sp, #272	; 0x110
    9444:	9805      	ldr	r0, [sp, #20]
    9446:	f7ff facc 	bl	89e2 <sha256_final>
    944a:	2300      	movs	r3, #0
    944c:	f84a 3b04 	str.w	r3, [sl], #4
    9450:	45b2      	cmp	sl, r6
    9452:	d1fb      	bne.n	944c <parent_SK_to_lamport_PK+0x186>
    9454:	ab08      	add	r3, sp, #32
    9456:	f50d 5d06 	add.w	sp, sp, #8576	; 0x2180
    945a:	b009      	add	sp, #36	; 0x24
    945c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009460 <blst_derive_child_eip2333>:
    9460:	b510      	push	{r4, lr}
    9462:	b082      	sub	sp, #8
    9464:	4604      	mov	r4, r0
    9466:	f7ff ff2e 	bl	92c6 <parent_SK_to_lamport_PK>
    946a:	2304      	movs	r3, #4
    946c:	9301      	str	r3, [sp, #4]
    946e:	2300      	movs	r3, #0
    9470:	9300      	str	r3, [sp, #0]
    9472:	2220      	movs	r2, #32
    9474:	4621      	mov	r1, r4
    9476:	4620      	mov	r0, r4
    9478:	f7ff fe3b 	bl	90f2 <keygen>
    947c:	b002      	add	sp, #8
    947e:	bd10      	pop	{r4, pc}

00009480 <mul_by_8_mod_384>:
    9480:	b500      	push	{lr}
    9482:	b083      	sub	sp, #12
    9484:	4613      	mov	r3, r2
    9486:	220c      	movs	r2, #12
    9488:	9200      	str	r2, [sp, #0]
    948a:	2203      	movs	r2, #3
    948c:	f7f9 f85e 	bl	254c <lshift_mod_n>
    9490:	b003      	add	sp, #12
    9492:	f85d fb04 	ldr.w	pc, [sp], #4

00009496 <mul_by_3_mod_384x>:
    9496:	b570      	push	{r4, r5, r6, lr}
    9498:	4604      	mov	r4, r0
    949a:	460d      	mov	r5, r1
    949c:	4616      	mov	r6, r2
    949e:	230c      	movs	r3, #12
    94a0:	f7f8 fa86 	bl	19b0 <mul_by_3_mod_n>
    94a4:	230c      	movs	r3, #12
    94a6:	4632      	mov	r2, r6
    94a8:	f105 0130 	add.w	r1, r5, #48	; 0x30
    94ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
    94b0:	f7f8 fa7e 	bl	19b0 <mul_by_3_mod_n>
    94b4:	bd70      	pop	{r4, r5, r6, pc}

000094b6 <mul_by_8_mod_384x>:
    94b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    94b8:	b083      	sub	sp, #12
    94ba:	4605      	mov	r5, r0
    94bc:	460e      	mov	r6, r1
    94be:	4614      	mov	r4, r2
    94c0:	270c      	movs	r7, #12
    94c2:	9700      	str	r7, [sp, #0]
    94c4:	4613      	mov	r3, r2
    94c6:	2203      	movs	r2, #3
    94c8:	f7f9 f840 	bl	254c <lshift_mod_n>
    94cc:	9700      	str	r7, [sp, #0]
    94ce:	4623      	mov	r3, r4
    94d0:	2203      	movs	r2, #3
    94d2:	f106 0130 	add.w	r1, r6, #48	; 0x30
    94d6:	f105 0030 	add.w	r0, r5, #48	; 0x30
    94da:	f7f9 f837 	bl	254c <lshift_mod_n>
    94de:	b003      	add	sp, #12
    94e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000094e2 <mul_by_1_plus_i_mod_384x>:
    94e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94e6:	b08e      	sub	sp, #56	; 0x38
    94e8:	4604      	mov	r4, r0
    94ea:	460d      	mov	r5, r1
    94ec:	4616      	mov	r6, r2
    94ee:	f101 0730 	add.w	r7, r1, #48	; 0x30
    94f2:	f04f 080c 	mov.w	r8, #12
    94f6:	f8cd 8000 	str.w	r8, [sp]
    94fa:	4613      	mov	r3, r2
    94fc:	463a      	mov	r2, r7
    94fe:	a802      	add	r0, sp, #8
    9500:	f7f7 fdbc 	bl	107c <add_mod_n>
    9504:	f8cd 8000 	str.w	r8, [sp]
    9508:	4633      	mov	r3, r6
    950a:	463a      	mov	r2, r7
    950c:	4629      	mov	r1, r5
    950e:	4620      	mov	r0, r4
    9510:	f7f7 f901 	bl	716 <sub_mod_n>
    9514:	aa02      	add	r2, sp, #8
    9516:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    951a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    951e:	f852 1b04 	ldr.w	r1, [r2], #4
    9522:	f843 1f04 	str.w	r1, [r3, #4]!
    9526:	4283      	cmp	r3, r0
    9528:	d1f9      	bne.n	951e <mul_by_1_plus_i_mod_384x+0x3c>
    952a:	b00e      	add	sp, #56	; 0x38
    952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009530 <add_mod_384x>:
    9530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9534:	b082      	sub	sp, #8
    9536:	4604      	mov	r4, r0
    9538:	460d      	mov	r5, r1
    953a:	4616      	mov	r6, r2
    953c:	461f      	mov	r7, r3
    953e:	f04f 080c 	mov.w	r8, #12
    9542:	f8cd 8000 	str.w	r8, [sp]
    9546:	f7f7 fd99 	bl	107c <add_mod_n>
    954a:	f8cd 8000 	str.w	r8, [sp]
    954e:	463b      	mov	r3, r7
    9550:	f106 0230 	add.w	r2, r6, #48	; 0x30
    9554:	f105 0130 	add.w	r1, r5, #48	; 0x30
    9558:	f104 0030 	add.w	r0, r4, #48	; 0x30
    955c:	f7f7 fd8e 	bl	107c <add_mod_n>
    9560:	b002      	add	sp, #8
    9562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009566 <sub_mod_384x>:
    9566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    956a:	b082      	sub	sp, #8
    956c:	4604      	mov	r4, r0
    956e:	460d      	mov	r5, r1
    9570:	4616      	mov	r6, r2
    9572:	461f      	mov	r7, r3
    9574:	f04f 080c 	mov.w	r8, #12
    9578:	f8cd 8000 	str.w	r8, [sp]
    957c:	f7f7 f8cb 	bl	716 <sub_mod_n>
    9580:	f8cd 8000 	str.w	r8, [sp]
    9584:	463b      	mov	r3, r7
    9586:	f106 0230 	add.w	r2, r6, #48	; 0x30
    958a:	f105 0130 	add.w	r1, r5, #48	; 0x30
    958e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9592:	f7f7 f8c0 	bl	716 <sub_mod_n>
    9596:	b002      	add	sp, #8
    9598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000959c <sqr_mont_384x>:
    959c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95a0:	b09a      	sub	sp, #104	; 0x68
    95a2:	4607      	mov	r7, r0
    95a4:	460e      	mov	r6, r1
    95a6:	4614      	mov	r4, r2
    95a8:	4698      	mov	r8, r3
    95aa:	f101 0a30 	add.w	sl, r1, #48	; 0x30
    95ae:	250c      	movs	r5, #12
    95b0:	9500      	str	r5, [sp, #0]
    95b2:	4613      	mov	r3, r2
    95b4:	4652      	mov	r2, sl
    95b6:	a80e      	add	r0, sp, #56	; 0x38
    95b8:	f7f7 fd60 	bl	107c <add_mod_n>
    95bc:	9500      	str	r5, [sp, #0]
    95be:	4623      	mov	r3, r4
    95c0:	4652      	mov	r2, sl
    95c2:	4631      	mov	r1, r6
    95c4:	a802      	add	r0, sp, #8
    95c6:	f7f7 f8a6 	bl	716 <sub_mod_n>
    95ca:	f107 0930 	add.w	r9, r7, #48	; 0x30
    95ce:	9501      	str	r5, [sp, #4]
    95d0:	f8cd 8000 	str.w	r8, [sp]
    95d4:	4623      	mov	r3, r4
    95d6:	4652      	mov	r2, sl
    95d8:	4631      	mov	r1, r6
    95da:	4648      	mov	r0, r9
    95dc:	f7f7 faa5 	bl	b2a <mul_mont_n>
    95e0:	9500      	str	r5, [sp, #0]
    95e2:	4623      	mov	r3, r4
    95e4:	464a      	mov	r2, r9
    95e6:	4649      	mov	r1, r9
    95e8:	4648      	mov	r0, r9
    95ea:	f7f7 fd47 	bl	107c <add_mod_n>
    95ee:	9501      	str	r5, [sp, #4]
    95f0:	f8cd 8000 	str.w	r8, [sp]
    95f4:	4623      	mov	r3, r4
    95f6:	aa02      	add	r2, sp, #8
    95f8:	a90e      	add	r1, sp, #56	; 0x38
    95fa:	4638      	mov	r0, r7
    95fc:	f7f7 fa95 	bl	b2a <mul_mont_n>
    9600:	b01a      	add	sp, #104	; 0x68
    9602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009606 <POINTonE2_from_Jacobian>:
    9606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    960a:	b0b3      	sub	sp, #204	; 0xcc
    960c:	4604      	mov	r4, r0
    960e:	4688      	mov	r8, r1
    9610:	31c0      	adds	r1, #192	; 0xc0
    9612:	f108 06bc 	add.w	r6, r8, #188	; 0xbc
    9616:	f508 708e 	add.w	r0, r8, #284	; 0x11c
    961a:	4633      	mov	r3, r6
    961c:	2500      	movs	r5, #0
    961e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9622:	4315      	orrs	r5, r2
    9624:	4283      	cmp	r3, r0
    9626:	d1fa      	bne.n	961e <POINTonE2_from_Jacobian+0x18>
    9628:	a81a      	add	r0, sp, #104	; 0x68
    962a:	f7fd f8c9 	bl	67c0 <reciprocal_fp2>
    962e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 96a8 <POINTonE2_from_Jacobian+0xa2>
    9632:	4f1c      	ldr	r7, [pc, #112]	; (96a4 <POINTonE2_from_Jacobian+0x9e>)
    9634:	464b      	mov	r3, r9
    9636:	463a      	mov	r2, r7
    9638:	a91a      	add	r1, sp, #104	; 0x68
    963a:	a802      	add	r0, sp, #8
    963c:	f7ff ffae 	bl	959c <sqr_mont_384x>
    9640:	f8cd 9000 	str.w	r9, [sp]
    9644:	463b      	mov	r3, r7
    9646:	aa02      	add	r2, sp, #8
    9648:	4641      	mov	r1, r8
    964a:	4620      	mov	r0, r4
    964c:	f7fb fdaa 	bl	51a4 <mul_mont_384x>
    9650:	f8cd 9000 	str.w	r9, [sp]
    9654:	463b      	mov	r3, r7
    9656:	aa1a      	add	r2, sp, #104	; 0x68
    9658:	a902      	add	r1, sp, #8
    965a:	4608      	mov	r0, r1
    965c:	f7fb fda2 	bl	51a4 <mul_mont_384x>
    9660:	f8cd 9000 	str.w	r9, [sp]
    9664:	463b      	mov	r3, r7
    9666:	aa02      	add	r2, sp, #8
    9668:	f108 0160 	add.w	r1, r8, #96	; 0x60
    966c:	f104 0060 	add.w	r0, r4, #96	; 0x60
    9670:	f7fb fd98 	bl	51a4 <mul_mont_384x>
    9674:	1e6b      	subs	r3, r5, #1
    9676:	ea23 0505 	bic.w	r5, r3, r5
    967a:	17ed      	asrs	r5, r5, #31
    967c:	f507 6179 	add.w	r1, r7, #3984	; 0xf90
    9680:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    9684:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
    9688:	f851 4b04 	ldr.w	r4, [r1], #4
    968c:	f856 2f04 	ldr.w	r2, [r6, #4]!
    9690:	2d00      	cmp	r5, #0
    9692:	bf08      	it	eq
    9694:	4622      	moveq	r2, r4
    9696:	f840 2f04 	str.w	r2, [r0, #4]!
    969a:	4299      	cmp	r1, r3
    969c:	d1f4      	bne.n	9688 <POINTonE2_from_Jacobian+0x82>
    969e:	b033      	add	sp, #204	; 0xcc
    96a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    96a4:	0001ade8 	.word	0x0001ade8
    96a8:	fffcfffd 	.word	0xfffcfffd

000096ac <blst_p2_from_jacobian>:
    96ac:	b508      	push	{r3, lr}
    96ae:	f7ff ffaa 	bl	9606 <POINTonE2_from_Jacobian>
    96b2:	bd08      	pop	{r3, pc}

000096b4 <POINTonE2_to_affine>:
    96b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    96b6:	b0c9      	sub	sp, #292	; 0x124
    96b8:	4604      	mov	r4, r0
    96ba:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
    96be:	4f10      	ldr	r7, [pc, #64]	; (9700 <POINTonE2_to_affine+0x4c>)
    96c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
    96c4:	37c0      	adds	r7, #192	; 0xc0
    96c6:	2000      	movs	r0, #0
    96c8:	f852 3b04 	ldr.w	r3, [r2], #4
    96cc:	f855 6f04 	ldr.w	r6, [r5, #4]!
    96d0:	4073      	eors	r3, r6
    96d2:	4318      	orrs	r0, r3
    96d4:	42ba      	cmp	r2, r7
    96d6:	d1f7      	bne.n	96c8 <POINTonE2_to_affine+0x14>
    96d8:	1e43      	subs	r3, r0, #1
    96da:	4383      	bics	r3, r0
    96dc:	d50a      	bpl.n	96f4 <POINTonE2_to_affine+0x40>
    96de:	1f0b      	subs	r3, r1, #4
    96e0:	1f20      	subs	r0, r4, #4
    96e2:	31bc      	adds	r1, #188	; 0xbc
    96e4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    96e8:	f840 2f04 	str.w	r2, [r0, #4]!
    96ec:	428b      	cmp	r3, r1
    96ee:	d1f9      	bne.n	96e4 <POINTonE2_to_affine+0x30>
    96f0:	b049      	add	sp, #292	; 0x124
    96f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96f4:	4668      	mov	r0, sp
    96f6:	f7ff ff86 	bl	9606 <POINTonE2_from_Jacobian>
    96fa:	4669      	mov	r1, sp
    96fc:	e7ef      	b.n	96de <POINTonE2_to_affine+0x2a>
    96fe:	bf00      	nop
    9700:	0001ade8 	.word	0x0001ade8

00009704 <blst_p2_to_affine>:
    9704:	b508      	push	{r3, lr}
    9706:	f7ff ffd5 	bl	96b4 <POINTonE2_to_affine>
    970a:	bd08      	pop	{r3, pc}

0000970c <POINTonE2_Serialize_BE>:
    970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9710:	b0c8      	sub	sp, #288	; 0x120
    9712:	4680      	mov	r8, r0
    9714:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
    9718:	4f0d      	ldr	r7, [pc, #52]	; (9750 <POINTonE2_Serialize_BE+0x44>)
    971a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    971e:	37c0      	adds	r7, #192	; 0xc0
    9720:	2400      	movs	r4, #0
    9722:	f852 3b04 	ldr.w	r3, [r2], #4
    9726:	f855 6f04 	ldr.w	r6, [r5, #4]!
    972a:	4073      	eors	r3, r6
    972c:	431c      	orrs	r4, r3
    972e:	42ba      	cmp	r2, r7
    9730:	d1f7      	bne.n	9722 <POINTonE2_Serialize_BE+0x16>
    9732:	1e63      	subs	r3, r4, #1
    9734:	43a3      	bics	r3, r4
    9736:	d505      	bpl.n	9744 <POINTonE2_Serialize_BE+0x38>
    9738:	4640      	mov	r0, r8
    973a:	f7fa fc35 	bl	3fa8 <POINTonE2_affine_Serialize_BE>
    973e:	b048      	add	sp, #288	; 0x120
    9740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9744:	4668      	mov	r0, sp
    9746:	f7ff ff5e 	bl	9606 <POINTonE2_from_Jacobian>
    974a:	4669      	mov	r1, sp
    974c:	e7f4      	b.n	9738 <POINTonE2_Serialize_BE+0x2c>
    974e:	bf00      	nop
    9750:	0001ade8 	.word	0x0001ade8

00009754 <blst_p2_serialize>:
    9754:	b538      	push	{r3, r4, r5, lr}
    9756:	f101 02bc 	add.w	r2, r1, #188	; 0xbc
    975a:	f501 748e 	add.w	r4, r1, #284	; 0x11c
    975e:	2300      	movs	r3, #0
    9760:	f852 5f04 	ldr.w	r5, [r2, #4]!
    9764:	432b      	orrs	r3, r5
    9766:	42a2      	cmp	r2, r4
    9768:	d1fa      	bne.n	9760 <blst_p2_serialize+0xc>
    976a:	1e5a      	subs	r2, r3, #1
    976c:	ea32 0303 	bics.w	r3, r2, r3
    9770:	d50a      	bpl.n	9788 <blst_p2_serialize+0x34>
    9772:	1e43      	subs	r3, r0, #1
    9774:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
    9778:	2200      	movs	r2, #0
    977a:	f803 2f01 	strb.w	r2, [r3, #1]!
    977e:	428b      	cmp	r3, r1
    9780:	d1fb      	bne.n	977a <blst_p2_serialize+0x26>
    9782:	2340      	movs	r3, #64	; 0x40
    9784:	7003      	strb	r3, [r0, #0]
    9786:	bd38      	pop	{r3, r4, r5, pc}
    9788:	f7ff ffc0 	bl	970c <POINTonE2_Serialize_BE>
    978c:	e7fb      	b.n	9786 <blst_p2_serialize+0x32>

0000978e <POINTonE2_Compress_BE>:
    978e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9792:	b0c8      	sub	sp, #288	; 0x120
    9794:	4680      	mov	r8, r0
    9796:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
    979a:	4f0d      	ldr	r7, [pc, #52]	; (97d0 <POINTonE2_Compress_BE+0x42>)
    979c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    97a0:	37c0      	adds	r7, #192	; 0xc0
    97a2:	2400      	movs	r4, #0
    97a4:	f852 3b04 	ldr.w	r3, [r2], #4
    97a8:	f855 6f04 	ldr.w	r6, [r5, #4]!
    97ac:	4073      	eors	r3, r6
    97ae:	431c      	orrs	r4, r3
    97b0:	42ba      	cmp	r2, r7
    97b2:	d1f7      	bne.n	97a4 <POINTonE2_Compress_BE+0x16>
    97b4:	1e63      	subs	r3, r4, #1
    97b6:	43a3      	bics	r3, r4
    97b8:	d505      	bpl.n	97c6 <POINTonE2_Compress_BE+0x38>
    97ba:	4640      	mov	r0, r8
    97bc:	f7fa fb6a 	bl	3e94 <POINTonE2_affine_Compress_BE>
    97c0:	b048      	add	sp, #288	; 0x120
    97c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97c6:	4668      	mov	r0, sp
    97c8:	f7ff ff1d 	bl	9606 <POINTonE2_from_Jacobian>
    97cc:	4669      	mov	r1, sp
    97ce:	e7f4      	b.n	97ba <POINTonE2_Compress_BE+0x2c>
    97d0:	0001ade8 	.word	0x0001ade8

000097d4 <blst_p2_compress>:
    97d4:	b570      	push	{r4, r5, r6, lr}
    97d6:	4606      	mov	r6, r0
    97d8:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
    97dc:	f501 758e 	add.w	r5, r1, #284	; 0x11c
    97e0:	2200      	movs	r2, #0
    97e2:	f853 4f04 	ldr.w	r4, [r3, #4]!
    97e6:	4322      	orrs	r2, r4
    97e8:	42ab      	cmp	r3, r5
    97ea:	d1fa      	bne.n	97e2 <blst_p2_compress+0xe>
    97ec:	1e53      	subs	r3, r2, #1
    97ee:	4393      	bics	r3, r2
    97f0:	d50a      	bpl.n	9808 <blst_p2_compress+0x34>
    97f2:	1e73      	subs	r3, r6, #1
    97f4:	f106 015f 	add.w	r1, r6, #95	; 0x5f
    97f8:	2200      	movs	r2, #0
    97fa:	f803 2f01 	strb.w	r2, [r3, #1]!
    97fe:	428b      	cmp	r3, r1
    9800:	d1fb      	bne.n	97fa <blst_p2_compress+0x26>
    9802:	23c0      	movs	r3, #192	; 0xc0
    9804:	7033      	strb	r3, [r6, #0]
    9806:	bd70      	pop	{r4, r5, r6, pc}
    9808:	4630      	mov	r0, r6
    980a:	f7ff ffc0 	bl	978e <POINTonE2_Compress_BE>
    980e:	0103      	lsls	r3, r0, #4
    9810:	f003 0320 	and.w	r3, r3, #32
    9814:	7832      	ldrb	r2, [r6, #0]
    9816:	4313      	orrs	r3, r2
    9818:	f063 037f 	orn	r3, r3, #127	; 0x7f
    981c:	7033      	strb	r3, [r6, #0]
    981e:	e7f2      	b.n	9806 <blst_p2_compress+0x32>

00009820 <POINTonE2_affine_on_curve>:
    9820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9824:	b0b2      	sub	sp, #200	; 0xc8
    9826:	4604      	mov	r4, r0
    9828:	4e1e      	ldr	r6, [pc, #120]	; (98a4 <POINTonE2_affine_on_curve+0x84>)
    982a:	4d1f      	ldr	r5, [pc, #124]	; (98a8 <POINTonE2_affine_on_curve+0x88>)
    982c:	4633      	mov	r3, r6
    982e:	462a      	mov	r2, r5
    9830:	4601      	mov	r1, r0
    9832:	a81a      	add	r0, sp, #104	; 0x68
    9834:	f7ff feb2 	bl	959c <sqr_mont_384x>
    9838:	9600      	str	r6, [sp, #0]
    983a:	462b      	mov	r3, r5
    983c:	4622      	mov	r2, r4
    983e:	a91a      	add	r1, sp, #104	; 0x68
    9840:	4608      	mov	r0, r1
    9842:	f7fb fcaf 	bl	51a4 <mul_mont_384x>
    9846:	4f19      	ldr	r7, [pc, #100]	; (98ac <POINTonE2_affine_on_curve+0x8c>)
    9848:	f04f 080c 	mov.w	r8, #12
    984c:	f8cd 8000 	str.w	r8, [sp]
    9850:	462b      	mov	r3, r5
    9852:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
    9856:	a91a      	add	r1, sp, #104	; 0x68
    9858:	4608      	mov	r0, r1
    985a:	f7f7 fc0f 	bl	107c <add_mod_n>
    985e:	f8cd 8000 	str.w	r8, [sp]
    9862:	462b      	mov	r3, r5
    9864:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
    9868:	a926      	add	r1, sp, #152	; 0x98
    986a:	4608      	mov	r0, r1
    986c:	f7f7 fc06 	bl	107c <add_mod_n>
    9870:	4633      	mov	r3, r6
    9872:	462a      	mov	r2, r5
    9874:	f104 0160 	add.w	r1, r4, #96	; 0x60
    9878:	a802      	add	r0, sp, #8
    987a:	f7ff fe8f 	bl	959c <sqr_mont_384x>
    987e:	aa19      	add	r2, sp, #100	; 0x64
    9880:	a901      	add	r1, sp, #4
    9882:	ad31      	add	r5, sp, #196	; 0xc4
    9884:	2000      	movs	r0, #0
    9886:	f852 3f04 	ldr.w	r3, [r2, #4]!
    988a:	f851 4f04 	ldr.w	r4, [r1, #4]!
    988e:	4063      	eors	r3, r4
    9890:	4318      	orrs	r0, r3
    9892:	42aa      	cmp	r2, r5
    9894:	d1f7      	bne.n	9886 <POINTonE2_affine_on_curve+0x66>
    9896:	1e43      	subs	r3, r0, #1
    9898:	ea23 0000 	bic.w	r0, r3, r0
    989c:	0fc0      	lsrs	r0, r0, #31
    989e:	b032      	add	sp, #200	; 0xc8
    98a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98a4:	fffcfffd 	.word	0xfffcfffd
    98a8:	0001ade8 	.word	0x0001ade8
    98ac:	0001bee0 	.word	0x0001bee0

000098b0 <blst_p2_affine_on_curve>:
    98b0:	b510      	push	{r4, lr}
    98b2:	4604      	mov	r4, r0
    98b4:	f7ff ffb4 	bl	9820 <POINTonE2_affine_on_curve>
    98b8:	1f23      	subs	r3, r4, #4
    98ba:	34bc      	adds	r4, #188	; 0xbc
    98bc:	2200      	movs	r2, #0
    98be:	f853 1f04 	ldr.w	r1, [r3, #4]!
    98c2:	430a      	orrs	r2, r1
    98c4:	42a3      	cmp	r3, r4
    98c6:	d1fa      	bne.n	98be <blst_p2_affine_on_curve+0xe>
    98c8:	1e53      	subs	r3, r2, #1
    98ca:	ea23 0202 	bic.w	r2, r3, r2
    98ce:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    98d2:	bd10      	pop	{r4, pc}

000098d4 <POINTonE2_on_curve>:
    98d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98d8:	b0ca      	sub	sp, #296	; 0x128
    98da:	4606      	mov	r6, r0
    98dc:	f100 07c0 	add.w	r7, r0, #192	; 0xc0
    98e0:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
    98e4:	f500 748e 	add.w	r4, r0, #284	; 0x11c
    98e8:	2200      	movs	r2, #0
    98ea:	f853 1f04 	ldr.w	r1, [r3, #4]!
    98ee:	430a      	orrs	r2, r1
    98f0:	42a3      	cmp	r3, r4
    98f2:	d1fa      	bne.n	98ea <POINTonE2_on_curve+0x16>
    98f4:	1e55      	subs	r5, r2, #1
    98f6:	ea25 0202 	bic.w	r2, r5, r2
    98fa:	0fd5      	lsrs	r5, r2, #31
    98fc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 99d8 <POINTonE2_on_curve+0x104>
    9900:	4c34      	ldr	r4, [pc, #208]	; (99d4 <POINTonE2_on_curve+0x100>)
    9902:	4643      	mov	r3, r8
    9904:	4622      	mov	r2, r4
    9906:	4639      	mov	r1, r7
    9908:	a802      	add	r0, sp, #8
    990a:	f7ff fe47 	bl	959c <sqr_mont_384x>
    990e:	f8cd 8000 	str.w	r8, [sp]
    9912:	4623      	mov	r3, r4
    9914:	463a      	mov	r2, r7
    9916:	a902      	add	r1, sp, #8
    9918:	4608      	mov	r0, r1
    991a:	f7fb fc43 	bl	51a4 <mul_mont_384x>
    991e:	4643      	mov	r3, r8
    9920:	4622      	mov	r2, r4
    9922:	a902      	add	r1, sp, #8
    9924:	a832      	add	r0, sp, #200	; 0xc8
    9926:	f7ff fe39 	bl	959c <sqr_mont_384x>
    992a:	270c      	movs	r7, #12
    992c:	9700      	str	r7, [sp, #0]
    992e:	4623      	mov	r3, r4
    9930:	aa3e      	add	r2, sp, #248	; 0xf8
    9932:	a932      	add	r1, sp, #200	; 0xc8
    9934:	a802      	add	r0, sp, #8
    9936:	f7f6 feee 	bl	716 <sub_mod_n>
    993a:	9700      	str	r7, [sp, #0]
    993c:	4623      	mov	r3, r4
    993e:	aa3e      	add	r2, sp, #248	; 0xf8
    9940:	a932      	add	r1, sp, #200	; 0xc8
    9942:	a80e      	add	r0, sp, #56	; 0x38
    9944:	f7f7 fb9a 	bl	107c <add_mod_n>
    9948:	9700      	str	r7, [sp, #0]
    994a:	4623      	mov	r3, r4
    994c:	2202      	movs	r2, #2
    994e:	a902      	add	r1, sp, #8
    9950:	4608      	mov	r0, r1
    9952:	f7f8 fdfb 	bl	254c <lshift_mod_n>
    9956:	9700      	str	r7, [sp, #0]
    9958:	4623      	mov	r3, r4
    995a:	2202      	movs	r2, #2
    995c:	a90e      	add	r1, sp, #56	; 0x38
    995e:	4608      	mov	r0, r1
    9960:	f7f8 fdf4 	bl	254c <lshift_mod_n>
    9964:	4643      	mov	r3, r8
    9966:	4622      	mov	r2, r4
    9968:	4631      	mov	r1, r6
    996a:	a832      	add	r0, sp, #200	; 0xc8
    996c:	f7ff fe16 	bl	959c <sqr_mont_384x>
    9970:	f8cd 8000 	str.w	r8, [sp]
    9974:	4623      	mov	r3, r4
    9976:	4632      	mov	r2, r6
    9978:	a932      	add	r1, sp, #200	; 0xc8
    997a:	4608      	mov	r0, r1
    997c:	f7fb fc12 	bl	51a4 <mul_mont_384x>
    9980:	9700      	str	r7, [sp, #0]
    9982:	4623      	mov	r3, r4
    9984:	aa02      	add	r2, sp, #8
    9986:	a932      	add	r1, sp, #200	; 0xc8
    9988:	4608      	mov	r0, r1
    998a:	f7f7 fb77 	bl	107c <add_mod_n>
    998e:	9700      	str	r7, [sp, #0]
    9990:	4623      	mov	r3, r4
    9992:	aa0e      	add	r2, sp, #56	; 0x38
    9994:	a93e      	add	r1, sp, #248	; 0xf8
    9996:	4608      	mov	r0, r1
    9998:	f7f7 fb70 	bl	107c <add_mod_n>
    999c:	4643      	mov	r3, r8
    999e:	4622      	mov	r2, r4
    99a0:	f106 0160 	add.w	r1, r6, #96	; 0x60
    99a4:	a81a      	add	r0, sp, #104	; 0x68
    99a6:	f7ff fdf9 	bl	959c <sqr_mont_384x>
    99aa:	aa31      	add	r2, sp, #196	; 0xc4
    99ac:	a919      	add	r1, sp, #100	; 0x64
    99ae:	ae49      	add	r6, sp, #292	; 0x124
    99b0:	2000      	movs	r0, #0
    99b2:	f852 3f04 	ldr.w	r3, [r2, #4]!
    99b6:	f851 4f04 	ldr.w	r4, [r1, #4]!
    99ba:	4063      	eors	r3, r4
    99bc:	4318      	orrs	r0, r3
    99be:	42b2      	cmp	r2, r6
    99c0:	d1f7      	bne.n	99b2 <POINTonE2_on_curve+0xde>
    99c2:	1e43      	subs	r3, r0, #1
    99c4:	ea23 0000 	bic.w	r0, r3, r0
    99c8:	ea45 70d0 	orr.w	r0, r5, r0, lsr #31
    99cc:	b04a      	add	sp, #296	; 0x128
    99ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99d2:	bf00      	nop
    99d4:	0001ade8 	.word	0x0001ade8
    99d8:	fffcfffd 	.word	0xfffcfffd

000099dc <blst_p2_on_curve>:
    99dc:	b508      	push	{r3, lr}
    99de:	f7ff ff79 	bl	98d4 <POINTonE2_on_curve>
    99e2:	bd08      	pop	{r3, pc}

000099e4 <sqrt_align_fp2>:
    99e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99e8:	b0cd      	sub	sp, #308	; 0x134
    99ea:	9002      	str	r0, [sp, #8]
    99ec:	9103      	str	r1, [sp, #12]
    99ee:	4611      	mov	r1, r2
    99f0:	461f      	mov	r7, r3
    99f2:	4c6d      	ldr	r4, [pc, #436]	; (9ba8 <sqrt_align_fp2+0x1c4>)
    99f4:	4b6d      	ldr	r3, [pc, #436]	; (9bac <sqrt_align_fp2+0x1c8>)
    99f6:	4622      	mov	r2, r4
    99f8:	a81c      	add	r0, sp, #112	; 0x70
    99fa:	f7ff fdcf 	bl	959c <sqr_mont_384x>
    99fe:	250c      	movs	r5, #12
    9a00:	9500      	str	r5, [sp, #0]
    9a02:	4623      	mov	r3, r4
    9a04:	463a      	mov	r2, r7
    9a06:	a91c      	add	r1, sp, #112	; 0x70
    9a08:	a804      	add	r0, sp, #16
    9a0a:	f7f6 fe84 	bl	716 <sub_mod_n>
    9a0e:	f107 0930 	add.w	r9, r7, #48	; 0x30
    9a12:	9500      	str	r5, [sp, #0]
    9a14:	4623      	mov	r3, r4
    9a16:	464a      	mov	r2, r9
    9a18:	a928      	add	r1, sp, #160	; 0xa0
    9a1a:	a810      	add	r0, sp, #64	; 0x40
    9a1c:	f7f6 fe7b 	bl	716 <sub_mod_n>
    9a20:	eb0d 0605 	add.w	r6, sp, r5
    9a24:	ac1b      	add	r4, sp, #108	; 0x6c
    9a26:	4633      	mov	r3, r6
    9a28:	2200      	movs	r2, #0
    9a2a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    9a2e:	430a      	orrs	r2, r1
    9a30:	42a3      	cmp	r3, r4
    9a32:	d1fa      	bne.n	9a2a <sqrt_align_fp2+0x46>
    9a34:	f102 38ff 	add.w	r8, r2, #4294967295
    9a38:	ea28 0802 	bic.w	r8, r8, r2
    9a3c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    9a40:	4859      	ldr	r0, [pc, #356]	; (9ba8 <sqrt_align_fp2+0x1c4>)
    9a42:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    9a46:	ad33      	add	r5, sp, #204	; 0xcc
    9a48:	30bc      	adds	r0, #188	; 0xbc
    9a4a:	462a      	mov	r2, r5
    9a4c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    9a50:	f842 1f04 	str.w	r1, [r2, #4]!
    9a54:	4283      	cmp	r3, r0
    9a56:	d1f9      	bne.n	9a4c <sqrt_align_fp2+0x68>
    9a58:	f8df a14c 	ldr.w	sl, [pc, #332]	; 9ba8 <sqrt_align_fp2+0x1c4>
    9a5c:	f04f 0b0c 	mov.w	fp, #12
    9a60:	f8cd b000 	str.w	fp, [sp]
    9a64:	4653      	mov	r3, sl
    9a66:	463a      	mov	r2, r7
    9a68:	a91c      	add	r1, sp, #112	; 0x70
    9a6a:	a804      	add	r0, sp, #16
    9a6c:	f7f7 fb06 	bl	107c <add_mod_n>
    9a70:	f8cd b000 	str.w	fp, [sp]
    9a74:	4653      	mov	r3, sl
    9a76:	464a      	mov	r2, r9
    9a78:	a928      	add	r1, sp, #160	; 0xa0
    9a7a:	a810      	add	r0, sp, #64	; 0x40
    9a7c:	f7f7 fafe 	bl	107c <add_mod_n>
    9a80:	4633      	mov	r3, r6
    9a82:	2200      	movs	r2, #0
    9a84:	f853 1f04 	ldr.w	r1, [r3, #4]!
    9a88:	430a      	orrs	r2, r1
    9a8a:	42a3      	cmp	r3, r4
    9a8c:	d1fa      	bne.n	9a84 <sqrt_align_fp2+0xa0>
    9a8e:	f102 3cff 	add.w	ip, r2, #4294967295
    9a92:	ea2c 0c02 	bic.w	ip, ip, r2
    9a96:	ea4f 7adc 	mov.w	sl, ip, lsr #31
    9a9a:	ea4f 7cec 	mov.w	ip, ip, asr #31
    9a9e:	4b44      	ldr	r3, [pc, #272]	; (9bb0 <sqrt_align_fp2+0x1cc>)
    9aa0:	f203 51fc 	addw	r1, r3, #1532	; 0x5fc
    9aa4:	f203 6e5c 	addw	lr, r3, #1628	; 0x65c
    9aa8:	462a      	mov	r2, r5
    9aaa:	f852 0f04 	ldr.w	r0, [r2, #4]!
    9aae:	f851 3f04 	ldr.w	r3, [r1, #4]!
    9ab2:	f1bc 0f00 	cmp.w	ip, #0
    9ab6:	bf08      	it	eq
    9ab8:	4603      	moveq	r3, r0
    9aba:	6013      	str	r3, [r2, #0]
    9abc:	4571      	cmp	r1, lr
    9abe:	d1f4      	bne.n	9aaa <sqrt_align_fp2+0xc6>
    9ac0:	ea4a 0808 	orr.w	r8, sl, r8
    9ac4:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 9ba8 <sqrt_align_fp2+0x1c4>
    9ac8:	f04f 0b0c 	mov.w	fp, #12
    9acc:	f8cd b000 	str.w	fp, [sp]
    9ad0:	4653      	mov	r3, sl
    9ad2:	464a      	mov	r2, r9
    9ad4:	a91c      	add	r1, sp, #112	; 0x70
    9ad6:	a804      	add	r0, sp, #16
    9ad8:	f7f6 fe1d 	bl	716 <sub_mod_n>
    9adc:	f8cd b000 	str.w	fp, [sp]
    9ae0:	4653      	mov	r3, sl
    9ae2:	463a      	mov	r2, r7
    9ae4:	a928      	add	r1, sp, #160	; 0xa0
    9ae6:	a810      	add	r0, sp, #64	; 0x40
    9ae8:	f7f7 fac8 	bl	107c <add_mod_n>
    9aec:	4633      	mov	r3, r6
    9aee:	2200      	movs	r2, #0
    9af0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    9af4:	430a      	orrs	r2, r1
    9af6:	42a3      	cmp	r3, r4
    9af8:	d1fa      	bne.n	9af0 <sqrt_align_fp2+0x10c>
    9afa:	f102 3cff 	add.w	ip, r2, #4294967295
    9afe:	ea2c 0c02 	bic.w	ip, ip, r2
    9b02:	ea4f 7adc 	mov.w	sl, ip, lsr #31
    9b06:	ea4f 7cec 	mov.w	ip, ip, asr #31
    9b0a:	4b29      	ldr	r3, [pc, #164]	; (9bb0 <sqrt_align_fp2+0x1cc>)
    9b0c:	f203 615c 	addw	r1, r3, #1628	; 0x65c
    9b10:	f203 6ebc 	addw	lr, r3, #1724	; 0x6bc
    9b14:	462a      	mov	r2, r5
    9b16:	f852 0f04 	ldr.w	r0, [r2, #4]!
    9b1a:	f851 3f04 	ldr.w	r3, [r1, #4]!
    9b1e:	f1bc 0f00 	cmp.w	ip, #0
    9b22:	bf08      	it	eq
    9b24:	4603      	moveq	r3, r0
    9b26:	6013      	str	r3, [r2, #0]
    9b28:	4571      	cmp	r1, lr
    9b2a:	d1f4      	bne.n	9b16 <sqrt_align_fp2+0x132>
    9b2c:	ea48 080a 	orr.w	r8, r8, sl
    9b30:	f8df a074 	ldr.w	sl, [pc, #116]	; 9ba8 <sqrt_align_fp2+0x1c4>
    9b34:	f04f 0b0c 	mov.w	fp, #12
    9b38:	f8cd b000 	str.w	fp, [sp]
    9b3c:	4653      	mov	r3, sl
    9b3e:	464a      	mov	r2, r9
    9b40:	a91c      	add	r1, sp, #112	; 0x70
    9b42:	a804      	add	r0, sp, #16
    9b44:	f7f7 fa9a 	bl	107c <add_mod_n>
    9b48:	f8cd b000 	str.w	fp, [sp]
    9b4c:	4653      	mov	r3, sl
    9b4e:	463a      	mov	r2, r7
    9b50:	a928      	add	r1, sp, #160	; 0xa0
    9b52:	a810      	add	r0, sp, #64	; 0x40
    9b54:	f7f6 fddf 	bl	716 <sub_mod_n>
    9b58:	2300      	movs	r3, #0
    9b5a:	f856 2f04 	ldr.w	r2, [r6, #4]!
    9b5e:	4313      	orrs	r3, r2
    9b60:	42a6      	cmp	r6, r4
    9b62:	d1fa      	bne.n	9b5a <sqrt_align_fp2+0x176>
    9b64:	1e5c      	subs	r4, r3, #1
    9b66:	ea24 0303 	bic.w	r3, r4, r3
    9b6a:	0fd8      	lsrs	r0, r3, #31
    9b6c:	17dc      	asrs	r4, r3, #31
    9b6e:	4e10      	ldr	r6, [pc, #64]	; (9bb0 <sqrt_align_fp2+0x1cc>)
    9b70:	f206 62bc 	addw	r2, r6, #1724	; 0x6bc
    9b74:	f206 761c 	addw	r6, r6, #1820	; 0x71c
    9b78:	f855 1f04 	ldr.w	r1, [r5, #4]!
    9b7c:	f852 3f04 	ldr.w	r3, [r2, #4]!
    9b80:	2c00      	cmp	r4, #0
    9b82:	bf08      	it	eq
    9b84:	460b      	moveq	r3, r1
    9b86:	602b      	str	r3, [r5, #0]
    9b88:	42b2      	cmp	r2, r6
    9b8a:	d1f5      	bne.n	9b78 <sqrt_align_fp2+0x194>
    9b8c:	ea48 0800 	orr.w	r8, r8, r0
    9b90:	4b06      	ldr	r3, [pc, #24]	; (9bac <sqrt_align_fp2+0x1c8>)
    9b92:	9300      	str	r3, [sp, #0]
    9b94:	4b04      	ldr	r3, [pc, #16]	; (9ba8 <sqrt_align_fp2+0x1c4>)
    9b96:	aa34      	add	r2, sp, #208	; 0xd0
    9b98:	9903      	ldr	r1, [sp, #12]
    9b9a:	9802      	ldr	r0, [sp, #8]
    9b9c:	f7fb fb02 	bl	51a4 <mul_mont_384x>
    9ba0:	4640      	mov	r0, r8
    9ba2:	b04d      	add	sp, #308	; 0x134
    9ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ba8:	0001ade8 	.word	0x0001ade8
    9bac:	fffcfffd 	.word	0xfffcfffd
    9bb0:	0001bee0 	.word	0x0001bee0

00009bb4 <sqrt_fp2>:
    9bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9bb8:	b0b2      	sub	sp, #200	; 0xc8
    9bba:	4682      	mov	sl, r0
    9bbc:	460d      	mov	r5, r1
    9bbe:	4c3e      	ldr	r4, [pc, #248]	; (9cb8 <sqrt_fp2+0x104>)
    9bc0:	260c      	movs	r6, #12
    9bc2:	9601      	str	r6, [sp, #4]
    9bc4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 9cbc <sqrt_fp2+0x108>
    9bc8:	f8cd 9000 	str.w	r9, [sp]
    9bcc:	4623      	mov	r3, r4
    9bce:	460a      	mov	r2, r1
    9bd0:	a80e      	add	r0, sp, #56	; 0x38
    9bd2:	f7f6 ffaa 	bl	b2a <mul_mont_n>
    9bd6:	f105 0730 	add.w	r7, r5, #48	; 0x30
    9bda:	9601      	str	r6, [sp, #4]
    9bdc:	f8cd 9000 	str.w	r9, [sp]
    9be0:	4623      	mov	r3, r4
    9be2:	463a      	mov	r2, r7
    9be4:	4639      	mov	r1, r7
    9be6:	a802      	add	r0, sp, #8
    9be8:	f7f6 ff9f 	bl	b2a <mul_mont_n>
    9bec:	9600      	str	r6, [sp, #0]
    9bee:	4623      	mov	r3, r4
    9bf0:	aa02      	add	r2, sp, #8
    9bf2:	a90e      	add	r1, sp, #56	; 0x38
    9bf4:	4608      	mov	r0, r1
    9bf6:	f7f7 fa41 	bl	107c <add_mod_n>
    9bfa:	a90e      	add	r1, sp, #56	; 0x38
    9bfc:	4608      	mov	r0, r1
    9bfe:	f7fd feeb 	bl	79d8 <sqrt_fp>
    9c02:	9600      	str	r6, [sp, #0]
    9c04:	4623      	mov	r3, r4
    9c06:	aa0e      	add	r2, sp, #56	; 0x38
    9c08:	4629      	mov	r1, r5
    9c0a:	a802      	add	r0, sp, #8
    9c0c:	f7f6 fd83 	bl	716 <sub_mod_n>
    9c10:	9600      	str	r6, [sp, #0]
    9c12:	4623      	mov	r3, r4
    9c14:	aa0e      	add	r2, sp, #56	; 0x38
    9c16:	4629      	mov	r1, r5
    9c18:	4610      	mov	r0, r2
    9c1a:	f7f7 fa2f 	bl	107c <add_mod_n>
    9c1e:	ac0e      	add	r4, sp, #56	; 0x38
    9c20:	a81a      	add	r0, sp, #104	; 0x68
    9c22:	4623      	mov	r3, r4
    9c24:	2200      	movs	r2, #0
    9c26:	f853 1b04 	ldr.w	r1, [r3], #4
    9c2a:	430a      	orrs	r2, r1
    9c2c:	4283      	cmp	r3, r0
    9c2e:	d1fa      	bne.n	9c26 <sqrt_fp2+0x72>
    9c30:	1e50      	subs	r0, r2, #1
    9c32:	ea20 0202 	bic.w	r2, r0, r2
    9c36:	17d0      	asrs	r0, r2, #31
    9c38:	aa02      	add	r2, sp, #8
    9c3a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    9c3e:	f852 3b04 	ldr.w	r3, [r2], #4
    9c42:	6821      	ldr	r1, [r4, #0]
    9c44:	2800      	cmp	r0, #0
    9c46:	bf08      	it	eq
    9c48:	460b      	moveq	r3, r1
    9c4a:	f844 3b04 	str.w	r3, [r4], #4
    9c4e:	4562      	cmp	r2, ip
    9c50:	d1f5      	bne.n	9c3e <sqrt_fp2+0x8a>
    9c52:	4c19      	ldr	r4, [pc, #100]	; (9cb8 <sqrt_fp2+0x104>)
    9c54:	f04f 080c 	mov.w	r8, #12
    9c58:	f8cd 8000 	str.w	r8, [sp]
    9c5c:	4623      	mov	r3, r4
    9c5e:	2201      	movs	r2, #1
    9c60:	a90e      	add	r1, sp, #56	; 0x38
    9c62:	4608      	mov	r0, r1
    9c64:	f7f6 fdbb 	bl	7de <rshift_mod_n>
    9c68:	a90e      	add	r1, sp, #56	; 0x38
    9c6a:	a81a      	add	r0, sp, #104	; 0x68
    9c6c:	f7fe f8fa 	bl	7e64 <recip_sqrt_fp>
    9c70:	f8cd 8000 	str.w	r8, [sp]
    9c74:	4623      	mov	r3, r4
    9c76:	2201      	movs	r2, #1
    9c78:	4639      	mov	r1, r7
    9c7a:	a826      	add	r0, sp, #152	; 0x98
    9c7c:	f7f6 fdaf 	bl	7de <rshift_mod_n>
    9c80:	f8cd 8004 	str.w	r8, [sp, #4]
    9c84:	4f0d      	ldr	r7, [pc, #52]	; (9cbc <sqrt_fp2+0x108>)
    9c86:	9700      	str	r7, [sp, #0]
    9c88:	4623      	mov	r3, r4
    9c8a:	aa1a      	add	r2, sp, #104	; 0x68
    9c8c:	a926      	add	r1, sp, #152	; 0x98
    9c8e:	4608      	mov	r0, r1
    9c90:	f7f6 ff4b 	bl	b2a <mul_mont_n>
    9c94:	f8cd 8004 	str.w	r8, [sp, #4]
    9c98:	9700      	str	r7, [sp, #0]
    9c9a:	4623      	mov	r3, r4
    9c9c:	aa0e      	add	r2, sp, #56	; 0x38
    9c9e:	a91a      	add	r1, sp, #104	; 0x68
    9ca0:	4608      	mov	r0, r1
    9ca2:	f7f6 ff42 	bl	b2a <mul_mont_n>
    9ca6:	462b      	mov	r3, r5
    9ca8:	aa1a      	add	r2, sp, #104	; 0x68
    9caa:	4611      	mov	r1, r2
    9cac:	4650      	mov	r0, sl
    9cae:	f7ff fe99 	bl	99e4 <sqrt_align_fp2>
    9cb2:	b032      	add	sp, #200	; 0xc8
    9cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cb8:	0001ade8 	.word	0x0001ade8
    9cbc:	fffcfffd 	.word	0xfffcfffd

00009cc0 <blst_fp2_sqrt>:
    9cc0:	b508      	push	{r3, lr}
    9cc2:	f7ff ff77 	bl	9bb4 <sqrt_fp2>
    9cc6:	bd08      	pop	{r3, pc}

00009cc8 <POINTonE2_Uncompress_BE>:
    9cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ccc:	b0d6      	sub	sp, #344	; 0x158
    9cce:	4604      	mov	r4, r0
    9cd0:	f101 0230 	add.w	r2, r1, #48	; 0x30
    9cd4:	4608      	mov	r0, r1
    9cd6:	2500      	movs	r5, #0
    9cd8:	460f      	mov	r7, r1
    9cda:	f101 0c2f 	add.w	ip, r1, #47	; 0x2f
    9cde:	ebac 0300 	sub.w	r3, ip, r0
    9ce2:	f810 6b01 	ldrb.w	r6, [r0], #1
    9ce6:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    9cea:	f023 0303 	bic.w	r3, r3, #3
    9cee:	ae56      	add	r6, sp, #344	; 0x158
    9cf0:	4433      	add	r3, r6
    9cf2:	f843 5c90 	str.w	r5, [r3, #-144]
    9cf6:	4290      	cmp	r0, r2
    9cf8:	d1f1      	bne.n	9cde <POINTonE2_Uncompress_BE+0x16>
    9cfa:	f101 0060 	add.w	r0, r1, #96	; 0x60
    9cfe:	2100      	movs	r1, #0
    9d00:	f107 065f 	add.w	r6, r7, #95	; 0x5f
    9d04:	1ab3      	subs	r3, r6, r2
    9d06:	f812 5b01 	ldrb.w	r5, [r2], #1
    9d0a:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
    9d0e:	f023 0303 	bic.w	r3, r3, #3
    9d12:	ad56      	add	r5, sp, #344	; 0x158
    9d14:	442b      	add	r3, r5
    9d16:	f843 1cc0 	str.w	r1, [r3, #-192]
    9d1a:	4282      	cmp	r2, r0
    9d1c:	d1f2      	bne.n	9d04 <POINTonE2_Uncompress_BE+0x3c>
    9d1e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    9d20:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    9d24:	933d      	str	r3, [sp, #244]	; 0xf4
    9d26:	4b65      	ldr	r3, [pc, #404]	; (9ebc <POINTonE2_Uncompress_BE+0x1f4>)
    9d28:	220c      	movs	r2, #12
    9d2a:	9200      	str	r2, [sp, #0]
    9d2c:	f103 0290 	add.w	r2, r3, #144	; 0x90
    9d30:	a932      	add	r1, sp, #200	; 0xc8
    9d32:	a81a      	add	r0, sp, #104	; 0x68
    9d34:	f7f7 f9a2 	bl	107c <add_mod_n>
    9d38:	ad1a      	add	r5, sp, #104	; 0x68
    9d3a:	a831      	add	r0, sp, #196	; 0xc4
    9d3c:	ae26      	add	r6, sp, #152	; 0x98
    9d3e:	462a      	mov	r2, r5
    9d40:	2100      	movs	r1, #0
    9d42:	f852 3b04 	ldr.w	r3, [r2], #4
    9d46:	f850 7f04 	ldr.w	r7, [r0, #4]!
    9d4a:	407b      	eors	r3, r7
    9d4c:	4319      	orrs	r1, r3
    9d4e:	42b2      	cmp	r2, r6
    9d50:	d1f7      	bne.n	9d42 <POINTonE2_Uncompress_BE+0x7a>
    9d52:	1e4b      	subs	r3, r1, #1
    9d54:	438b      	bics	r3, r1
    9d56:	f140 80a5 	bpl.w	9ea4 <POINTonE2_Uncompress_BE+0x1dc>
    9d5a:	4b58      	ldr	r3, [pc, #352]	; (9ebc <POINTonE2_Uncompress_BE+0x1f4>)
    9d5c:	af26      	add	r7, sp, #152	; 0x98
    9d5e:	220c      	movs	r2, #12
    9d60:	9200      	str	r2, [sp, #0]
    9d62:	f103 0290 	add.w	r2, r3, #144	; 0x90
    9d66:	4639      	mov	r1, r7
    9d68:	a81a      	add	r0, sp, #104	; 0x68
    9d6a:	f7f7 f987 	bl	107c <add_mod_n>
    9d6e:	46b8      	mov	r8, r7
    9d70:	4639      	mov	r1, r7
    9d72:	2200      	movs	r2, #0
    9d74:	f855 3b04 	ldr.w	r3, [r5], #4
    9d78:	f851 0b04 	ldr.w	r0, [r1], #4
    9d7c:	4043      	eors	r3, r0
    9d7e:	431a      	orrs	r2, r3
    9d80:	42b5      	cmp	r5, r6
    9d82:	d1f7      	bne.n	9d74 <POINTonE2_Uncompress_BE+0xac>
    9d84:	1e53      	subs	r3, r2, #1
    9d86:	4393      	bics	r3, r2
    9d88:	f140 8091 	bpl.w	9eae <POINTonE2_Uncompress_BE+0x1e6>
    9d8c:	4d4b      	ldr	r5, [pc, #300]	; (9ebc <POINTonE2_Uncompress_BE+0x1f4>)
    9d8e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 9ec4 <POINTonE2_Uncompress_BE+0x1fc>
    9d92:	f509 7a2e 	add.w	sl, r9, #696	; 0x2b8
    9d96:	260c      	movs	r6, #12
    9d98:	9601      	str	r6, [sp, #4]
    9d9a:	4f49      	ldr	r7, [pc, #292]	; (9ec0 <POINTonE2_Uncompress_BE+0x1f8>)
    9d9c:	9700      	str	r7, [sp, #0]
    9d9e:	462b      	mov	r3, r5
    9da0:	4652      	mov	r2, sl
    9da2:	a926      	add	r1, sp, #152	; 0x98
    9da4:	4608      	mov	r0, r1
    9da6:	f7f6 fec0 	bl	b2a <mul_mont_n>
    9daa:	9601      	str	r6, [sp, #4]
    9dac:	9700      	str	r7, [sp, #0]
    9dae:	462b      	mov	r3, r5
    9db0:	4652      	mov	r2, sl
    9db2:	a932      	add	r1, sp, #200	; 0xc8
    9db4:	4608      	mov	r0, r1
    9db6:	f7f6 feb8 	bl	b2a <mul_mont_n>
    9dba:	463b      	mov	r3, r7
    9dbc:	462a      	mov	r2, r5
    9dbe:	a926      	add	r1, sp, #152	; 0x98
    9dc0:	a83e      	add	r0, sp, #248	; 0xf8
    9dc2:	f7ff fbeb 	bl	959c <sqr_mont_384x>
    9dc6:	9700      	str	r7, [sp, #0]
    9dc8:	462b      	mov	r3, r5
    9dca:	aa26      	add	r2, sp, #152	; 0x98
    9dcc:	a93e      	add	r1, sp, #248	; 0xf8
    9dce:	4608      	mov	r0, r1
    9dd0:	f7fb f9e8 	bl	51a4 <mul_mont_384x>
    9dd4:	9600      	str	r6, [sp, #0]
    9dd6:	462b      	mov	r3, r5
    9dd8:	f509 62b4 	add.w	r2, r9, #1440	; 0x5a0
    9ddc:	a93e      	add	r1, sp, #248	; 0xf8
    9dde:	4608      	mov	r0, r1
    9de0:	f7f7 f94c 	bl	107c <add_mod_n>
    9de4:	9600      	str	r6, [sp, #0]
    9de6:	462b      	mov	r3, r5
    9de8:	f509 62ba 	add.w	r2, r9, #1488	; 0x5d0
    9dec:	a94a      	add	r1, sp, #296	; 0x128
    9dee:	4608      	mov	r0, r1
    9df0:	f7f7 f944 	bl	107c <add_mod_n>
    9df4:	a93e      	add	r1, sp, #248	; 0xf8
    9df6:	4608      	mov	r0, r1
    9df8:	f7ff fedc 	bl	9bb4 <sqrt_fp2>
    9dfc:	2800      	cmp	r0, #0
    9dfe:	d059      	beq.n	9eb4 <POINTonE2_Uncompress_BE+0x1ec>
    9e00:	ab25      	add	r3, sp, #148	; 0x94
    9e02:	1f22      	subs	r2, r4, #4
    9e04:	f108 08bc 	add.w	r8, r8, #188	; 0xbc
    9e08:	f853 1f04 	ldr.w	r1, [r3, #4]!
    9e0c:	f842 1f04 	str.w	r1, [r2, #4]!
    9e10:	4598      	cmp	r8, r3
    9e12:	d1f9      	bne.n	9e08 <POINTonE2_Uncompress_BE+0x140>
    9e14:	4d2a      	ldr	r5, [pc, #168]	; (9ec0 <POINTonE2_Uncompress_BE+0x1f8>)
    9e16:	4e29      	ldr	r6, [pc, #164]	; (9ebc <POINTonE2_Uncompress_BE+0x1f4>)
    9e18:	270c      	movs	r7, #12
    9e1a:	9700      	str	r7, [sp, #0]
    9e1c:	462b      	mov	r3, r5
    9e1e:	4632      	mov	r2, r6
    9e20:	f104 0160 	add.w	r1, r4, #96	; 0x60
    9e24:	a802      	add	r0, sp, #8
    9e26:	f7f9 f9f7 	bl	3218 <from_mont_n>
    9e2a:	9700      	str	r7, [sp, #0]
    9e2c:	462b      	mov	r3, r5
    9e2e:	4632      	mov	r2, r6
    9e30:	f104 0190 	add.w	r1, r4, #144	; 0x90
    9e34:	a80e      	add	r0, sp, #56	; 0x38
    9e36:	f7f9 f9ef 	bl	3218 <from_mont_n>
    9e3a:	463a      	mov	r2, r7
    9e3c:	4631      	mov	r1, r6
    9e3e:	a802      	add	r0, sp, #8
    9e40:	f7f9 fb14 	bl	346c <sgn0_pty_mod_n>
    9e44:	4605      	mov	r5, r0
    9e46:	463a      	mov	r2, r7
    9e48:	4631      	mov	r1, r6
    9e4a:	a80e      	add	r0, sp, #56	; 0x38
    9e4c:	f7f9 fb0e 	bl	346c <sgn0_pty_mod_n>
    9e50:	aa0d      	add	r2, sp, #52	; 0x34
    9e52:	ab02      	add	r3, sp, #8
    9e54:	ae19      	add	r6, sp, #100	; 0x64
    9e56:	2100      	movs	r1, #0
    9e58:	f852 4f04 	ldr.w	r4, [r2, #4]!
    9e5c:	4321      	orrs	r1, r4
    9e5e:	42b2      	cmp	r2, r6
    9e60:	d1fa      	bne.n	9e58 <POINTonE2_Uncompress_BE+0x190>
    9e62:	1e4c      	subs	r4, r1, #1
    9e64:	ea24 0101 	bic.w	r1, r4, r1
    9e68:	0fcc      	lsrs	r4, r1, #31
    9e6a:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    9e6e:	3c01      	subs	r4, #1
    9e70:	4004      	ands	r4, r0
    9e72:	430c      	orrs	r4, r1
    9e74:	f103 0630 	add.w	r6, r3, #48	; 0x30
    9e78:	2200      	movs	r2, #0
    9e7a:	f853 1b04 	ldr.w	r1, [r3], #4
    9e7e:	430a      	orrs	r2, r1
    9e80:	42b3      	cmp	r3, r6
    9e82:	d1fa      	bne.n	9e7a <POINTonE2_Uncompress_BE+0x1b2>
    9e84:	1e53      	subs	r3, r2, #1
    9e86:	ea23 0202 	bic.w	r2, r3, r2
    9e8a:	0fd3      	lsrs	r3, r2, #31
    9e8c:	ea00 72e2 	and.w	r2, r0, r2, asr #31
    9e90:	3b01      	subs	r3, #1
    9e92:	ea03 0005 	and.w	r0, r3, r5
    9e96:	4310      	orrs	r0, r2
    9e98:	f000 0001 	and.w	r0, r0, #1
    9e9c:	f004 0402 	and.w	r4, r4, #2
    9ea0:	4320      	orrs	r0, r4
    9ea2:	e001      	b.n	9ea8 <POINTonE2_Uncompress_BE+0x1e0>
    9ea4:	f04f 30ff 	mov.w	r0, #4294967295
    9ea8:	b056      	add	sp, #344	; 0x158
    9eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9eae:	f04f 30ff 	mov.w	r0, #4294967295
    9eb2:	e7f9      	b.n	9ea8 <POINTonE2_Uncompress_BE+0x1e0>
    9eb4:	f06f 0001 	mvn.w	r0, #1
    9eb8:	e7f6      	b.n	9ea8 <POINTonE2_Uncompress_BE+0x1e0>
    9eba:	bf00      	nop
    9ebc:	0001ade8 	.word	0x0001ade8
    9ec0:	fffcfffd 	.word	0xfffcfffd
    9ec4:	0001bee0 	.word	0x0001bee0

00009ec8 <POINTonE2_Uncompress_Z>:
    9ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ecc:	b082      	sub	sp, #8
    9ece:	780c      	ldrb	r4, [r1, #0]
    9ed0:	f991 3000 	ldrsb.w	r3, [r1]
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	da3e      	bge.n	9f56 <POINTonE2_Uncompress_Z+0x8e>
    9ed8:	4605      	mov	r5, r0
    9eda:	f014 0640 	ands.w	r6, r4, #64	; 0x40
    9ede:	d019      	beq.n	9f14 <POINTonE2_Uncompress_Z+0x4c>
    9ee0:	f004 003f 	and.w	r0, r4, #63	; 0x3f
    9ee4:	3801      	subs	r0, #1
    9ee6:	0fc0      	lsrs	r0, r0, #31
    9ee8:	460b      	mov	r3, r1
    9eea:	315f      	adds	r1, #95	; 0x5f
    9eec:	2200      	movs	r2, #0
    9eee:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    9ef2:	4322      	orrs	r2, r4
    9ef4:	428b      	cmp	r3, r1
    9ef6:	d1fa      	bne.n	9eee <POINTonE2_Uncompress_Z+0x26>
    9ef8:	3a01      	subs	r2, #1
    9efa:	ea10 73d2 	ands.w	r3, r0, r2, lsr #31
    9efe:	d02f      	beq.n	9f60 <POINTonE2_Uncompress_Z+0x98>
    9f00:	462b      	mov	r3, r5
    9f02:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    9f06:	2200      	movs	r2, #0
    9f08:	f843 2b04 	str.w	r2, [r3], #4
    9f0c:	428b      	cmp	r3, r1
    9f0e:	d1fb      	bne.n	9f08 <POINTonE2_Uncompress_Z+0x40>
    9f10:	2600      	movs	r6, #0
    9f12:	e021      	b.n	9f58 <POINTonE2_Uncompress_Z+0x90>
    9f14:	f7ff fed8 	bl	9cc8 <POINTonE2_Uncompress_BE>
    9f18:	2803      	cmp	r0, #3
    9f1a:	d902      	bls.n	9f22 <POINTonE2_Uncompress_Z+0x5a>
    9f1c:	4240      	negs	r0, r0
    9f1e:	b2c6      	uxtb	r6, r0
    9f20:	e01a      	b.n	9f58 <POINTonE2_Uncompress_Z+0x90>
    9f22:	f3c4 1440 	ubfx	r4, r4, #5, #1
    9f26:	ea84 0450 	eor.w	r4, r4, r0, lsr #1
    9f2a:	f105 0060 	add.w	r0, r5, #96	; 0x60
    9f2e:	4f0d      	ldr	r7, [pc, #52]	; (9f64 <POINTonE2_Uncompress_Z+0x9c>)
    9f30:	f04f 080c 	mov.w	r8, #12
    9f34:	f8cd 8000 	str.w	r8, [sp]
    9f38:	463b      	mov	r3, r7
    9f3a:	4622      	mov	r2, r4
    9f3c:	4601      	mov	r1, r0
    9f3e:	f7f8 fc9f 	bl	2880 <cneg_mod_n>
    9f42:	f105 0090 	add.w	r0, r5, #144	; 0x90
    9f46:	f8cd 8000 	str.w	r8, [sp]
    9f4a:	463b      	mov	r3, r7
    9f4c:	4622      	mov	r2, r4
    9f4e:	4601      	mov	r1, r0
    9f50:	f7f8 fc96 	bl	2880 <cneg_mod_n>
    9f54:	e000      	b.n	9f58 <POINTonE2_Uncompress_Z+0x90>
    9f56:	2601      	movs	r6, #1
    9f58:	4630      	mov	r0, r6
    9f5a:	b002      	add	sp, #8
    9f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f60:	2601      	movs	r6, #1
    9f62:	e7f9      	b.n	9f58 <POINTonE2_Uncompress_Z+0x90>
    9f64:	0001ade8 	.word	0x0001ade8

00009f68 <blst_p2_uncompress>:
    9f68:	b508      	push	{r3, lr}
    9f6a:	f7ff ffad 	bl	9ec8 <POINTonE2_Uncompress_Z>
    9f6e:	bd08      	pop	{r3, pc}

00009f70 <POINTonE2_Deserialize_Z>:
    9f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f74:	b0be      	sub	sp, #248	; 0xf8
    9f76:	4604      	mov	r4, r0
    9f78:	780b      	ldrb	r3, [r1, #0]
    9f7a:	f013 05e0 	ands.w	r5, r3, #224	; 0xe0
    9f7e:	d01a      	beq.n	9fb6 <POINTonE2_Deserialize_Z+0x46>
    9f80:	f013 0f80 	tst.w	r3, #128	; 0x80
    9f84:	f040 8113 	bne.w	a1ae <POINTonE2_Deserialize_Z+0x23e>
    9f88:	f013 0f40 	tst.w	r3, #64	; 0x40
    9f8c:	f000 811d 	beq.w	a1ca <POINTonE2_Deserialize_Z+0x25a>
    9f90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    9f94:	3a01      	subs	r2, #1
    9f96:	0fd2      	lsrs	r2, r2, #31
    9f98:	460b      	mov	r3, r1
    9f9a:	31bf      	adds	r1, #191	; 0xbf
    9f9c:	2000      	movs	r0, #0
    9f9e:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    9fa2:	4328      	orrs	r0, r5
    9fa4:	428b      	cmp	r3, r1
    9fa6:	d1fa      	bne.n	9f9e <POINTonE2_Deserialize_Z+0x2e>
    9fa8:	3801      	subs	r0, #1
    9faa:	ea12 73d0 	ands.w	r3, r2, r0, lsr #31
    9fae:	f040 8102 	bne.w	a1b6 <POINTonE2_Deserialize_Z+0x246>
    9fb2:	2501      	movs	r5, #1
    9fb4:	e10a      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    9fb6:	f101 0230 	add.w	r2, r1, #48	; 0x30
    9fba:	460e      	mov	r6, r1
    9fbc:	2700      	movs	r7, #0
    9fbe:	4608      	mov	r0, r1
    9fc0:	f101 0e2f 	add.w	lr, r1, #47	; 0x2f
    9fc4:	ebae 0306 	sub.w	r3, lr, r6
    9fc8:	f816 cb01 	ldrb.w	ip, [r6], #1
    9fcc:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
    9fd0:	f023 0303 	bic.w	r3, r3, #3
    9fd4:	f10d 0cf8 	add.w	ip, sp, #248	; 0xf8
    9fd8:	4463      	add	r3, ip
    9fda:	f843 7c90 	str.w	r7, [r3, #-144]
    9fde:	4296      	cmp	r6, r2
    9fe0:	d1f0      	bne.n	9fc4 <POINTonE2_Deserialize_Z+0x54>
    9fe2:	f101 0660 	add.w	r6, r1, #96	; 0x60
    9fe6:	2700      	movs	r7, #0
    9fe8:	f100 0e5f 	add.w	lr, r0, #95	; 0x5f
    9fec:	ebae 0302 	sub.w	r3, lr, r2
    9ff0:	f812 cb01 	ldrb.w	ip, [r2], #1
    9ff4:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
    9ff8:	f023 0303 	bic.w	r3, r3, #3
    9ffc:	f10d 0cf8 	add.w	ip, sp, #248	; 0xf8
    a000:	4463      	add	r3, ip
    a002:	f843 7cc0 	str.w	r7, [r3, #-192]
    a006:	42b2      	cmp	r2, r6
    a008:	d1f0      	bne.n	9fec <POINTonE2_Deserialize_Z+0x7c>
    a00a:	f101 0290 	add.w	r2, r1, #144	; 0x90
    a00e:	2700      	movs	r7, #0
    a010:	f100 0e8f 	add.w	lr, r0, #143	; 0x8f
    a014:	ebae 0306 	sub.w	r3, lr, r6
    a018:	f816 cb01 	ldrb.w	ip, [r6], #1
    a01c:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
    a020:	f023 0303 	bic.w	r3, r3, #3
    a024:	f10d 0cf8 	add.w	ip, sp, #248	; 0xf8
    a028:	4463      	add	r3, ip
    a02a:	f843 7c30 	str.w	r7, [r3, #-48]
    a02e:	4296      	cmp	r6, r2
    a030:	d1f0      	bne.n	a014 <POINTonE2_Deserialize_Z+0xa4>
    a032:	31c0      	adds	r1, #192	; 0xc0
    a034:	2600      	movs	r6, #0
    a036:	30bf      	adds	r0, #191	; 0xbf
    a038:	1a83      	subs	r3, r0, r2
    a03a:	f812 7b01 	ldrb.w	r7, [r2], #1
    a03e:	ea47 2606 	orr.w	r6, r7, r6, lsl #8
    a042:	f023 0303 	bic.w	r3, r3, #3
    a046:	af3e      	add	r7, sp, #248	; 0xf8
    a048:	443b      	add	r3, r7
    a04a:	f843 6c60 	str.w	r6, [r3, #-96]
    a04e:	428a      	cmp	r2, r1
    a050:	d1f2      	bne.n	a038 <POINTonE2_Deserialize_Z+0xc8>
    a052:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a054:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    a058:	9325      	str	r3, [sp, #148]	; 0x94
    a05a:	4b5e      	ldr	r3, [pc, #376]	; (a1d4 <POINTonE2_Deserialize_Z+0x264>)
    a05c:	220c      	movs	r2, #12
    a05e:	9200      	str	r2, [sp, #0]
    a060:	f103 0290 	add.w	r2, r3, #144	; 0x90
    a064:	a91a      	add	r1, sp, #104	; 0x68
    a066:	a802      	add	r0, sp, #8
    a068:	f7f7 f808 	bl	107c <add_mod_n>
    a06c:	af02      	add	r7, sp, #8
    a06e:	a819      	add	r0, sp, #100	; 0x64
    a070:	ae0e      	add	r6, sp, #56	; 0x38
    a072:	463a      	mov	r2, r7
    a074:	2100      	movs	r1, #0
    a076:	f852 3b04 	ldr.w	r3, [r2], #4
    a07a:	f850 cf04 	ldr.w	ip, [r0, #4]!
    a07e:	ea83 030c 	eor.w	r3, r3, ip
    a082:	4319      	orrs	r1, r3
    a084:	42b2      	cmp	r2, r6
    a086:	d1f6      	bne.n	a076 <POINTonE2_Deserialize_Z+0x106>
    a088:	1e4b      	subs	r3, r1, #1
    a08a:	438b      	bics	r3, r1
    a08c:	d401      	bmi.n	a092 <POINTonE2_Deserialize_Z+0x122>
    a08e:	2501      	movs	r5, #1
    a090:	e09c      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a092:	4b50      	ldr	r3, [pc, #320]	; (a1d4 <POINTonE2_Deserialize_Z+0x264>)
    a094:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    a098:	220c      	movs	r2, #12
    a09a:	9200      	str	r2, [sp, #0]
    a09c:	f103 0290 	add.w	r2, r3, #144	; 0x90
    a0a0:	4649      	mov	r1, r9
    a0a2:	a802      	add	r0, sp, #8
    a0a4:	f7f6 ffea 	bl	107c <add_mod_n>
    a0a8:	46c8      	mov	r8, r9
    a0aa:	4649      	mov	r1, r9
    a0ac:	463a      	mov	r2, r7
    a0ae:	2000      	movs	r0, #0
    a0b0:	f852 3b04 	ldr.w	r3, [r2], #4
    a0b4:	f851 cb04 	ldr.w	ip, [r1], #4
    a0b8:	ea83 030c 	eor.w	r3, r3, ip
    a0bc:	4318      	orrs	r0, r3
    a0be:	42b2      	cmp	r2, r6
    a0c0:	d1f6      	bne.n	a0b0 <POINTonE2_Deserialize_Z+0x140>
    a0c2:	1e43      	subs	r3, r0, #1
    a0c4:	4383      	bics	r3, r0
    a0c6:	d401      	bmi.n	a0cc <POINTonE2_Deserialize_Z+0x15c>
    a0c8:	2501      	movs	r5, #1
    a0ca:	e07f      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a0cc:	4b41      	ldr	r3, [pc, #260]	; (a1d4 <POINTonE2_Deserialize_Z+0x264>)
    a0ce:	220c      	movs	r2, #12
    a0d0:	9200      	str	r2, [sp, #0]
    a0d2:	f103 0290 	add.w	r2, r3, #144	; 0x90
    a0d6:	a932      	add	r1, sp, #200	; 0xc8
    a0d8:	a802      	add	r0, sp, #8
    a0da:	f7f6 ffcf 	bl	107c <add_mod_n>
    a0de:	a831      	add	r0, sp, #196	; 0xc4
    a0e0:	463a      	mov	r2, r7
    a0e2:	2100      	movs	r1, #0
    a0e4:	f852 3b04 	ldr.w	r3, [r2], #4
    a0e8:	f850 cf04 	ldr.w	ip, [r0, #4]!
    a0ec:	ea83 030c 	eor.w	r3, r3, ip
    a0f0:	4319      	orrs	r1, r3
    a0f2:	42b2      	cmp	r2, r6
    a0f4:	d1f6      	bne.n	a0e4 <POINTonE2_Deserialize_Z+0x174>
    a0f6:	1e4b      	subs	r3, r1, #1
    a0f8:	438b      	bics	r3, r1
    a0fa:	d401      	bmi.n	a100 <POINTonE2_Deserialize_Z+0x190>
    a0fc:	2501      	movs	r5, #1
    a0fe:	e065      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a100:	4b34      	ldr	r3, [pc, #208]	; (a1d4 <POINTonE2_Deserialize_Z+0x264>)
    a102:	220c      	movs	r2, #12
    a104:	9200      	str	r2, [sp, #0]
    a106:	f103 0290 	add.w	r2, r3, #144	; 0x90
    a10a:	a926      	add	r1, sp, #152	; 0x98
    a10c:	a802      	add	r0, sp, #8
    a10e:	f7f6 ffb5 	bl	107c <add_mod_n>
    a112:	a925      	add	r1, sp, #148	; 0x94
    a114:	2200      	movs	r2, #0
    a116:	f857 3b04 	ldr.w	r3, [r7], #4
    a11a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    a11e:	4043      	eors	r3, r0
    a120:	431a      	orrs	r2, r3
    a122:	42b7      	cmp	r7, r6
    a124:	d1f7      	bne.n	a116 <POINTonE2_Deserialize_Z+0x1a6>
    a126:	1e53      	subs	r3, r2, #1
    a128:	4393      	bics	r3, r2
    a12a:	d401      	bmi.n	a130 <POINTonE2_Deserialize_Z+0x1c0>
    a12c:	2501      	movs	r5, #1
    a12e:	e04d      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a130:	4f28      	ldr	r7, [pc, #160]	; (a1d4 <POINTonE2_Deserialize_Z+0x264>)
    a132:	4e29      	ldr	r6, [pc, #164]	; (a1d8 <POINTonE2_Deserialize_Z+0x268>)
    a134:	f04f 0a0c 	mov.w	sl, #12
    a138:	f8cd a004 	str.w	sl, [sp, #4]
    a13c:	f8df 909c 	ldr.w	r9, [pc, #156]	; a1dc <POINTonE2_Deserialize_Z+0x26c>
    a140:	f8cd 9000 	str.w	r9, [sp]
    a144:	463b      	mov	r3, r7
    a146:	4632      	mov	r2, r6
    a148:	a90e      	add	r1, sp, #56	; 0x38
    a14a:	4608      	mov	r0, r1
    a14c:	f7f6 fced 	bl	b2a <mul_mont_n>
    a150:	f8cd a004 	str.w	sl, [sp, #4]
    a154:	f8cd 9000 	str.w	r9, [sp]
    a158:	463b      	mov	r3, r7
    a15a:	4632      	mov	r2, r6
    a15c:	a91a      	add	r1, sp, #104	; 0x68
    a15e:	4608      	mov	r0, r1
    a160:	f7f6 fce3 	bl	b2a <mul_mont_n>
    a164:	f8cd a004 	str.w	sl, [sp, #4]
    a168:	f8cd 9000 	str.w	r9, [sp]
    a16c:	463b      	mov	r3, r7
    a16e:	4632      	mov	r2, r6
    a170:	a926      	add	r1, sp, #152	; 0x98
    a172:	4608      	mov	r0, r1
    a174:	f7f6 fcd9 	bl	b2a <mul_mont_n>
    a178:	f8cd a004 	str.w	sl, [sp, #4]
    a17c:	f8cd 9000 	str.w	r9, [sp]
    a180:	463b      	mov	r3, r7
    a182:	4632      	mov	r2, r6
    a184:	a932      	add	r1, sp, #200	; 0xc8
    a186:	4608      	mov	r0, r1
    a188:	f7f6 fccf 	bl	b2a <mul_mont_n>
    a18c:	a80e      	add	r0, sp, #56	; 0x38
    a18e:	f7ff fb47 	bl	9820 <POINTonE2_affine_on_curve>
    a192:	b150      	cbz	r0, a1aa <POINTonE2_Deserialize_Z+0x23a>
    a194:	ab0d      	add	r3, sp, #52	; 0x34
    a196:	3c04      	subs	r4, #4
    a198:	f108 08bc 	add.w	r8, r8, #188	; 0xbc
    a19c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    a1a0:	f844 2f04 	str.w	r2, [r4, #4]!
    a1a4:	4543      	cmp	r3, r8
    a1a6:	d1f9      	bne.n	a19c <POINTonE2_Deserialize_Z+0x22c>
    a1a8:	e010      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a1aa:	2502      	movs	r5, #2
    a1ac:	e00e      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a1ae:	f7ff fe8b 	bl	9ec8 <POINTonE2_Uncompress_Z>
    a1b2:	4605      	mov	r5, r0
    a1b4:	e00a      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a1b6:	4623      	mov	r3, r4
    a1b8:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    a1bc:	2200      	movs	r2, #0
    a1be:	f843 2b04 	str.w	r2, [r3], #4
    a1c2:	428b      	cmp	r3, r1
    a1c4:	d1fb      	bne.n	a1be <POINTonE2_Deserialize_Z+0x24e>
    a1c6:	2500      	movs	r5, #0
    a1c8:	e000      	b.n	a1cc <POINTonE2_Deserialize_Z+0x25c>
    a1ca:	2501      	movs	r5, #1
    a1cc:	4628      	mov	r0, r5
    a1ce:	b03e      	add	sp, #248	; 0xf8
    a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a1d4:	0001ade8 	.word	0x0001ade8
    a1d8:	0001c198 	.word	0x0001c198
    a1dc:	fffcfffd 	.word	0xfffcfffd

0000a1e0 <blst_p2_deserialize>:
    a1e0:	b508      	push	{r3, lr}
    a1e2:	f7ff fec5 	bl	9f70 <POINTonE2_Deserialize_Z>
    a1e6:	bd08      	pop	{r3, pc}

0000a1e8 <POINTonE2_add>:
    a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1ec:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
    a1f0:	9003      	str	r0, [sp, #12]
    a1f2:	460e      	mov	r6, r1
    a1f4:	4615      	mov	r5, r2
    a1f6:	f101 0ac0 	add.w	sl, r1, #192	; 0xc0
    a1fa:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
    a1fe:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    a202:	2200      	movs	r2, #0
    a204:	f853 1f04 	ldr.w	r1, [r3, #4]!
    a208:	430a      	orrs	r2, r1
    a20a:	4283      	cmp	r3, r0
    a20c:	d1fa      	bne.n	a204 <POINTonE2_add+0x1c>
    a20e:	1e53      	subs	r3, r2, #1
    a210:	ea23 0202 	bic.w	r2, r3, r2
    a214:	0fd3      	lsrs	r3, r2, #31
    a216:	9302      	str	r3, [sp, #8]
    a218:	4fb5      	ldr	r7, [pc, #724]	; (a4f0 <POINTonE2_add+0x308>)
    a21a:	4cb6      	ldr	r4, [pc, #728]	; (a4f4 <POINTonE2_add+0x30c>)
    a21c:	463b      	mov	r3, r7
    a21e:	4622      	mov	r2, r4
    a220:	4651      	mov	r1, sl
    a222:	a894      	add	r0, sp, #592	; 0x250
    a224:	f7ff f9ba 	bl	959c <sqr_mont_384x>
    a228:	9700      	str	r7, [sp, #0]
    a22a:	4623      	mov	r3, r4
    a22c:	4652      	mov	r2, sl
    a22e:	a994      	add	r1, sp, #592	; 0x250
    a230:	a8dc      	add	r0, sp, #880	; 0x370
    a232:	f7fa ffb7 	bl	51a4 <mul_mont_384x>
    a236:	9700      	str	r7, [sp, #0]
    a238:	4623      	mov	r3, r4
    a23a:	f105 0260 	add.w	r2, r5, #96	; 0x60
    a23e:	a9dc      	add	r1, sp, #880	; 0x370
    a240:	4608      	mov	r0, r1
    a242:	f7fa ffaf 	bl	51a4 <mul_mont_384x>
    a246:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
    a24a:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
    a24e:	f505 718e 	add.w	r1, r5, #284	; 0x11c
    a252:	f04f 0800 	mov.w	r8, #0
    a256:	f853 2f04 	ldr.w	r2, [r3, #4]!
    a25a:	ea48 0802 	orr.w	r8, r8, r2
    a25e:	428b      	cmp	r3, r1
    a260:	d1f9      	bne.n	a256 <POINTonE2_add+0x6e>
    a262:	f8df 928c 	ldr.w	r9, [pc, #652]	; a4f0 <POINTonE2_add+0x308>
    a266:	4ca3      	ldr	r4, [pc, #652]	; (a4f4 <POINTonE2_add+0x30c>)
    a268:	464b      	mov	r3, r9
    a26a:	4622      	mov	r2, r4
    a26c:	4659      	mov	r1, fp
    a26e:	a87c      	add	r0, sp, #496	; 0x1f0
    a270:	f7ff f994 	bl	959c <sqr_mont_384x>
    a274:	f8cd 9000 	str.w	r9, [sp]
    a278:	4623      	mov	r3, r4
    a27a:	465a      	mov	r2, fp
    a27c:	a97c      	add	r1, sp, #496	; 0x1f0
    a27e:	a84c      	add	r0, sp, #304	; 0x130
    a280:	f7fa ff90 	bl	51a4 <mul_mont_384x>
    a284:	f8cd 9000 	str.w	r9, [sp]
    a288:	4623      	mov	r3, r4
    a28a:	f106 0260 	add.w	r2, r6, #96	; 0x60
    a28e:	a94c      	add	r1, sp, #304	; 0x130
    a290:	4608      	mov	r0, r1
    a292:	f7fa ff87 	bl	51a4 <mul_mont_384x>
    a296:	270c      	movs	r7, #12
    a298:	9700      	str	r7, [sp, #0]
    a29a:	4623      	mov	r3, r4
    a29c:	aa4c      	add	r2, sp, #304	; 0x130
    a29e:	a9dc      	add	r1, sp, #880	; 0x370
    a2a0:	4608      	mov	r0, r1
    a2a2:	f7f6 fa38 	bl	716 <sub_mod_n>
    a2a6:	9700      	str	r7, [sp, #0]
    a2a8:	4623      	mov	r3, r4
    a2aa:	aa58      	add	r2, sp, #352	; 0x160
    a2ac:	a9e8      	add	r1, sp, #928	; 0x3a0
    a2ae:	4608      	mov	r0, r1
    a2b0:	f7f6 fa31 	bl	716 <sub_mod_n>
    a2b4:	9700      	str	r7, [sp, #0]
    a2b6:	4623      	mov	r3, r4
    a2b8:	aadc      	add	r2, sp, #880	; 0x370
    a2ba:	4611      	mov	r1, r2
    a2bc:	4610      	mov	r0, r2
    a2be:	f7f6 fedd 	bl	107c <add_mod_n>
    a2c2:	9700      	str	r7, [sp, #0]
    a2c4:	4623      	mov	r3, r4
    a2c6:	aae8      	add	r2, sp, #928	; 0x3a0
    a2c8:	4611      	mov	r1, r2
    a2ca:	4610      	mov	r0, r2
    a2cc:	f7f6 fed6 	bl	107c <add_mod_n>
    a2d0:	f8cd 9000 	str.w	r9, [sp]
    a2d4:	4623      	mov	r3, r4
    a2d6:	aa7c      	add	r2, sp, #496	; 0x1f0
    a2d8:	4631      	mov	r1, r6
    a2da:	a864      	add	r0, sp, #400	; 0x190
    a2dc:	f7fa ff62 	bl	51a4 <mul_mont_384x>
    a2e0:	f8cd 9000 	str.w	r9, [sp]
    a2e4:	4623      	mov	r3, r4
    a2e6:	aa94      	add	r2, sp, #592	; 0x250
    a2e8:	4629      	mov	r1, r5
    a2ea:	a834      	add	r0, sp, #208	; 0xd0
    a2ec:	f7fa ff5a 	bl	51a4 <mul_mont_384x>
    a2f0:	9700      	str	r7, [sp, #0]
    a2f2:	4623      	mov	r3, r4
    a2f4:	aa64      	add	r2, sp, #400	; 0x190
    a2f6:	a934      	add	r1, sp, #208	; 0xd0
    a2f8:	4608      	mov	r0, r1
    a2fa:	f7f6 fa0c 	bl	716 <sub_mod_n>
    a2fe:	9700      	str	r7, [sp, #0]
    a300:	4623      	mov	r3, r4
    a302:	aa70      	add	r2, sp, #448	; 0x1c0
    a304:	a940      	add	r1, sp, #256	; 0x100
    a306:	4608      	mov	r0, r1
    a308:	f7f6 fa05 	bl	716 <sub_mod_n>
    a30c:	9700      	str	r7, [sp, #0]
    a30e:	4623      	mov	r3, r4
    a310:	aa34      	add	r2, sp, #208	; 0xd0
    a312:	4611      	mov	r1, r2
    a314:	a81c      	add	r0, sp, #112	; 0x70
    a316:	f7f6 feb1 	bl	107c <add_mod_n>
    a31a:	9700      	str	r7, [sp, #0]
    a31c:	4623      	mov	r3, r4
    a31e:	aa40      	add	r2, sp, #256	; 0x100
    a320:	4611      	mov	r1, r2
    a322:	a828      	add	r0, sp, #160	; 0xa0
    a324:	f7f6 feaa 	bl	107c <add_mod_n>
    a328:	464b      	mov	r3, r9
    a32a:	4622      	mov	r2, r4
    a32c:	a91c      	add	r1, sp, #112	; 0x70
    a32e:	4608      	mov	r0, r1
    a330:	f7ff f934 	bl	959c <sqr_mont_384x>
    a334:	f8cd 9000 	str.w	r9, [sp]
    a338:	4623      	mov	r3, r4
    a33a:	aa1c      	add	r2, sp, #112	; 0x70
    a33c:	a934      	add	r1, sp, #208	; 0xd0
    a33e:	a804      	add	r0, sp, #16
    a340:	f7fa ff30 	bl	51a4 <mul_mont_384x>
    a344:	f8cd 9000 	str.w	r9, [sp]
    a348:	4623      	mov	r3, r4
    a34a:	aa04      	add	r2, sp, #16
    a34c:	a94c      	add	r1, sp, #304	; 0x130
    a34e:	4608      	mov	r0, r1
    a350:	f7fa ff28 	bl	51a4 <mul_mont_384x>
    a354:	f8cd 9000 	str.w	r9, [sp]
    a358:	4623      	mov	r3, r4
    a35a:	aa1c      	add	r2, sp, #112	; 0x70
    a35c:	a964      	add	r1, sp, #400	; 0x190
    a35e:	a8c4      	add	r0, sp, #784	; 0x310
    a360:	f7fa ff20 	bl	51a4 <mul_mont_384x>
    a364:	464b      	mov	r3, r9
    a366:	4622      	mov	r2, r4
    a368:	a9dc      	add	r1, sp, #880	; 0x370
    a36a:	a8ac      	add	r0, sp, #688	; 0x2b0
    a36c:	f7ff f916 	bl	959c <sqr_mont_384x>
    a370:	9700      	str	r7, [sp, #0]
    a372:	4623      	mov	r3, r4
    a374:	aa04      	add	r2, sp, #16
    a376:	a9ac      	add	r1, sp, #688	; 0x2b0
    a378:	4608      	mov	r0, r1
    a37a:	f7f6 f9cc 	bl	716 <sub_mod_n>
    a37e:	9700      	str	r7, [sp, #0]
    a380:	4623      	mov	r3, r4
    a382:	aa10      	add	r2, sp, #64	; 0x40
    a384:	a9b8      	add	r1, sp, #736	; 0x2e0
    a386:	4608      	mov	r0, r1
    a388:	f7f6 f9c5 	bl	716 <sub_mod_n>
    a38c:	9700      	str	r7, [sp, #0]
    a38e:	4623      	mov	r3, r4
    a390:	aac4      	add	r2, sp, #784	; 0x310
    a392:	a9ac      	add	r1, sp, #688	; 0x2b0
    a394:	4608      	mov	r0, r1
    a396:	f7f6 f9be 	bl	716 <sub_mod_n>
    a39a:	9700      	str	r7, [sp, #0]
    a39c:	4623      	mov	r3, r4
    a39e:	aad0      	add	r2, sp, #832	; 0x340
    a3a0:	a9b8      	add	r1, sp, #736	; 0x2e0
    a3a2:	4608      	mov	r0, r1
    a3a4:	f7f6 f9b7 	bl	716 <sub_mod_n>
    a3a8:	9700      	str	r7, [sp, #0]
    a3aa:	4623      	mov	r3, r4
    a3ac:	aac4      	add	r2, sp, #784	; 0x310
    a3ae:	a9ac      	add	r1, sp, #688	; 0x2b0
    a3b0:	4608      	mov	r0, r1
    a3b2:	f7f6 f9b0 	bl	716 <sub_mod_n>
    a3b6:	9700      	str	r7, [sp, #0]
    a3b8:	4623      	mov	r3, r4
    a3ba:	aad0      	add	r2, sp, #832	; 0x340
    a3bc:	a9b8      	add	r1, sp, #736	; 0x2e0
    a3be:	4608      	mov	r0, r1
    a3c0:	f7f6 f9a9 	bl	716 <sub_mod_n>
    a3c4:	9700      	str	r7, [sp, #0]
    a3c6:	4623      	mov	r3, r4
    a3c8:	aaac      	add	r2, sp, #688	; 0x2b0
    a3ca:	a9c4      	add	r1, sp, #784	; 0x310
    a3cc:	4608      	mov	r0, r1
    a3ce:	f7f6 f9a2 	bl	716 <sub_mod_n>
    a3d2:	9700      	str	r7, [sp, #0]
    a3d4:	4623      	mov	r3, r4
    a3d6:	aab8      	add	r2, sp, #736	; 0x2e0
    a3d8:	a9d0      	add	r1, sp, #832	; 0x340
    a3da:	4608      	mov	r0, r1
    a3dc:	f7f6 f99b 	bl	716 <sub_mod_n>
    a3e0:	f8cd 9000 	str.w	r9, [sp]
    a3e4:	4623      	mov	r3, r4
    a3e6:	aadc      	add	r2, sp, #880	; 0x370
    a3e8:	a9c4      	add	r1, sp, #784	; 0x310
    a3ea:	4608      	mov	r0, r1
    a3ec:	f7fa feda 	bl	51a4 <mul_mont_384x>
    a3f0:	9700      	str	r7, [sp, #0]
    a3f2:	4623      	mov	r3, r4
    a3f4:	aa4c      	add	r2, sp, #304	; 0x130
    a3f6:	a9c4      	add	r1, sp, #784	; 0x310
    a3f8:	4608      	mov	r0, r1
    a3fa:	f7f6 f98c 	bl	716 <sub_mod_n>
    a3fe:	9700      	str	r7, [sp, #0]
    a400:	4623      	mov	r3, r4
    a402:	aa58      	add	r2, sp, #352	; 0x160
    a404:	a9d0      	add	r1, sp, #832	; 0x340
    a406:	4608      	mov	r0, r1
    a408:	f7f6 f985 	bl	716 <sub_mod_n>
    a40c:	9700      	str	r7, [sp, #0]
    a40e:	4623      	mov	r3, r4
    a410:	aa4c      	add	r2, sp, #304	; 0x130
    a412:	a9c4      	add	r1, sp, #784	; 0x310
    a414:	4608      	mov	r0, r1
    a416:	f7f6 f97e 	bl	716 <sub_mod_n>
    a41a:	9700      	str	r7, [sp, #0]
    a41c:	4623      	mov	r3, r4
    a41e:	aa58      	add	r2, sp, #352	; 0x160
    a420:	a9d0      	add	r1, sp, #832	; 0x340
    a422:	4608      	mov	r0, r1
    a424:	f7f6 f977 	bl	716 <sub_mod_n>
    a428:	9700      	str	r7, [sp, #0]
    a42a:	4623      	mov	r3, r4
    a42c:	465a      	mov	r2, fp
    a42e:	4651      	mov	r1, sl
    a430:	a8dc      	add	r0, sp, #880	; 0x370
    a432:	f7f6 fe23 	bl	107c <add_mod_n>
    a436:	9700      	str	r7, [sp, #0]
    a438:	4623      	mov	r3, r4
    a43a:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
    a43e:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
    a442:	a8e8      	add	r0, sp, #928	; 0x3a0
    a444:	f7f6 fe1a 	bl	107c <add_mod_n>
    a448:	464b      	mov	r3, r9
    a44a:	4622      	mov	r2, r4
    a44c:	a9dc      	add	r1, sp, #880	; 0x370
    a44e:	4608      	mov	r0, r1
    a450:	f7ff f8a4 	bl	959c <sqr_mont_384x>
    a454:	9700      	str	r7, [sp, #0]
    a456:	4623      	mov	r3, r4
    a458:	aa94      	add	r2, sp, #592	; 0x250
    a45a:	a9dc      	add	r1, sp, #880	; 0x370
    a45c:	4608      	mov	r0, r1
    a45e:	f7f6 f95a 	bl	716 <sub_mod_n>
    a462:	9700      	str	r7, [sp, #0]
    a464:	4623      	mov	r3, r4
    a466:	aaa0      	add	r2, sp, #640	; 0x280
    a468:	a9e8      	add	r1, sp, #928	; 0x3a0
    a46a:	4608      	mov	r0, r1
    a46c:	f7f6 f953 	bl	716 <sub_mod_n>
    a470:	9700      	str	r7, [sp, #0]
    a472:	4623      	mov	r3, r4
    a474:	aa7c      	add	r2, sp, #496	; 0x1f0
    a476:	a9dc      	add	r1, sp, #880	; 0x370
    a478:	4608      	mov	r0, r1
    a47a:	f7f6 f94c 	bl	716 <sub_mod_n>
    a47e:	9700      	str	r7, [sp, #0]
    a480:	4623      	mov	r3, r4
    a482:	aa88      	add	r2, sp, #544	; 0x220
    a484:	a9e8      	add	r1, sp, #928	; 0x3a0
    a486:	4608      	mov	r0, r1
    a488:	f7f6 f945 	bl	716 <sub_mod_n>
    a48c:	f8cd 9000 	str.w	r9, [sp]
    a490:	4623      	mov	r3, r4
    a492:	aa34      	add	r2, sp, #208	; 0xd0
    a494:	a9dc      	add	r1, sp, #880	; 0x370
    a496:	4608      	mov	r0, r1
    a498:	f7fa fe84 	bl	51a4 <mul_mont_384x>
    a49c:	f108 33ff 	add.w	r3, r8, #4294967295
    a4a0:	ea23 0808 	bic.w	r8, r3, r8
    a4a4:	ea4f 78e8 	mov.w	r8, r8, asr #31
    a4a8:	3e04      	subs	r6, #4
    a4aa:	acac      	add	r4, sp, #688	; 0x2b0
    a4ac:	aff4      	add	r7, sp, #976	; 0x3d0
    a4ae:	4623      	mov	r3, r4
    a4b0:	6819      	ldr	r1, [r3, #0]
    a4b2:	f856 2f04 	ldr.w	r2, [r6, #4]!
    a4b6:	f1b8 0f00 	cmp.w	r8, #0
    a4ba:	bf08      	it	eq
    a4bc:	460a      	moveq	r2, r1
    a4be:	f843 2b04 	str.w	r2, [r3], #4
    a4c2:	429f      	cmp	r7, r3
    a4c4:	d1f4      	bne.n	a4b0 <POINTonE2_add+0x2c8>
    a4c6:	9b02      	ldr	r3, [sp, #8]
    a4c8:	4259      	negs	r1, r3
    a4ca:	3d04      	subs	r5, #4
    a4cc:	9b03      	ldr	r3, [sp, #12]
    a4ce:	1f18      	subs	r0, r3, #4
    a4d0:	f854 2b04 	ldr.w	r2, [r4], #4
    a4d4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    a4d8:	2900      	cmp	r1, #0
    a4da:	bf08      	it	eq
    a4dc:	4613      	moveq	r3, r2
    a4de:	f840 3f04 	str.w	r3, [r0, #4]!
    a4e2:	42a7      	cmp	r7, r4
    a4e4:	d1f4      	bne.n	a4d0 <POINTonE2_add+0x2e8>
    a4e6:	f50d 7d75 	add.w	sp, sp, #980	; 0x3d4
    a4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4ee:	bf00      	nop
    a4f0:	fffcfffd 	.word	0xfffcfffd
    a4f4:	0001ade8 	.word	0x0001ade8

0000a4f8 <blst_p2_add>:
    a4f8:	b508      	push	{r3, lr}
    a4fa:	f7ff fe75 	bl	a1e8 <POINTonE2_add>
    a4fe:	bd08      	pop	{r3, pc}

0000a500 <POINTonE2_dadd>:
    a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a504:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
    a508:	9003      	str	r0, [sp, #12]
    a50a:	460c      	mov	r4, r1
    a50c:	4615      	mov	r5, r2
    a50e:	461e      	mov	r6, r3
    a510:	4fc9      	ldr	r7, [pc, #804]	; (a838 <POINTonE2_dadd+0x338>)
    a512:	f04f 090c 	mov.w	r9, #12
    a516:	f8cd 9000 	str.w	r9, [sp]
    a51a:	463b      	mov	r3, r7
    a51c:	460a      	mov	r2, r1
    a51e:	a834      	add	r0, sp, #208	; 0xd0
    a520:	f7f6 fdac 	bl	107c <add_mod_n>
    a524:	f104 0130 	add.w	r1, r4, #48	; 0x30
    a528:	f8cd 9000 	str.w	r9, [sp]
    a52c:	463b      	mov	r3, r7
    a52e:	460a      	mov	r2, r1
    a530:	a840      	add	r0, sp, #256	; 0x100
    a532:	f7f6 fda3 	bl	107c <add_mod_n>
    a536:	4bc1      	ldr	r3, [pc, #772]	; (a83c <POINTonE2_dadd+0x33c>)
    a538:	463a      	mov	r2, r7
    a53a:	4621      	mov	r1, r4
    a53c:	a81c      	add	r0, sp, #112	; 0x70
    a53e:	f7ff f82d 	bl	959c <sqr_mont_384x>
    a542:	464b      	mov	r3, r9
    a544:	463a      	mov	r2, r7
    a546:	a91c      	add	r1, sp, #112	; 0x70
    a548:	4608      	mov	r0, r1
    a54a:	f7f7 fa31 	bl	19b0 <mul_by_3_mod_n>
    a54e:	464b      	mov	r3, r9
    a550:	463a      	mov	r2, r7
    a552:	a928      	add	r1, sp, #160	; 0xa0
    a554:	4608      	mov	r0, r1
    a556:	f7f7 fa2b 	bl	19b0 <mul_by_3_mod_n>
    a55a:	f104 0860 	add.w	r8, r4, #96	; 0x60
    a55e:	f8cd 9000 	str.w	r9, [sp]
    a562:	463b      	mov	r3, r7
    a564:	4642      	mov	r2, r8
    a566:	4641      	mov	r1, r8
    a568:	a804      	add	r0, sp, #16
    a56a:	f7f6 fd87 	bl	107c <add_mod_n>
    a56e:	f104 0190 	add.w	r1, r4, #144	; 0x90
    a572:	f8cd 9000 	str.w	r9, [sp]
    a576:	463b      	mov	r3, r7
    a578:	460a      	mov	r2, r1
    a57a:	a810      	add	r0, sp, #64	; 0x40
    a57c:	f7f6 fd7e 	bl	107c <add_mod_n>
    a580:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
    a584:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
    a588:	f505 708e 	add.w	r0, r5, #284	; 0x11c
    a58c:	2200      	movs	r2, #0
    a58e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    a592:	430a      	orrs	r2, r1
    a594:	4283      	cmp	r3, r0
    a596:	d1fa      	bne.n	a58e <POINTonE2_dadd+0x8e>
    a598:	1e53      	subs	r3, r2, #1
    a59a:	ea23 0202 	bic.w	r2, r3, r2
    a59e:	0fd3      	lsrs	r3, r2, #31
    a5a0:	9302      	str	r3, [sp, #8]
    a5a2:	f8df b298 	ldr.w	fp, [pc, #664]	; a83c <POINTonE2_dadd+0x33c>
    a5a6:	f8df a290 	ldr.w	sl, [pc, #656]	; a838 <POINTonE2_dadd+0x338>
    a5aa:	465b      	mov	r3, fp
    a5ac:	4652      	mov	r2, sl
    a5ae:	4649      	mov	r1, r9
    a5b0:	a894      	add	r0, sp, #592	; 0x250
    a5b2:	f7fe fff3 	bl	959c <sqr_mont_384x>
    a5b6:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    a5ba:	f8cd b000 	str.w	fp, [sp]
    a5be:	4653      	mov	r3, sl
    a5c0:	464a      	mov	r2, r9
    a5c2:	4639      	mov	r1, r7
    a5c4:	a8c4      	add	r0, sp, #784	; 0x310
    a5c6:	f7fa fded 	bl	51a4 <mul_mont_384x>
    a5ca:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    a5ce:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    a5d2:	2200      	movs	r2, #0
    a5d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    a5d8:	430a      	orrs	r2, r1
    a5da:	4283      	cmp	r3, r0
    a5dc:	d1fa      	bne.n	a5d4 <POINTonE2_dadd+0xd4>
    a5de:	1e53      	subs	r3, r2, #1
    a5e0:	ea23 0202 	bic.w	r2, r3, r2
    a5e4:	ea4f 7bd2 	mov.w	fp, r2, lsr #31
    a5e8:	4b94      	ldr	r3, [pc, #592]	; (a83c <POINTonE2_dadd+0x33c>)
    a5ea:	4a93      	ldr	r2, [pc, #588]	; (a838 <POINTonE2_dadd+0x338>)
    a5ec:	4639      	mov	r1, r7
    a5ee:	a84c      	add	r0, sp, #304	; 0x130
    a5f0:	f7fe ffd4 	bl	959c <sqr_mont_384x>
    a5f4:	b1f6      	cbz	r6, a634 <POINTonE2_dadd+0x134>
    a5f6:	f8df a240 	ldr.w	sl, [pc, #576]	; a838 <POINTonE2_dadd+0x338>
    a5fa:	4b90      	ldr	r3, [pc, #576]	; (a83c <POINTonE2_dadd+0x33c>)
    a5fc:	4652      	mov	r2, sl
    a5fe:	a94c      	add	r1, sp, #304	; 0x130
    a600:	a8ac      	add	r0, sp, #688	; 0x2b0
    a602:	f7fe ffcb 	bl	959c <sqr_mont_384x>
    a606:	4b8d      	ldr	r3, [pc, #564]	; (a83c <POINTonE2_dadd+0x33c>)
    a608:	9300      	str	r3, [sp, #0]
    a60a:	4653      	mov	r3, sl
    a60c:	4632      	mov	r2, r6
    a60e:	a9ac      	add	r1, sp, #688	; 0x2b0
    a610:	4608      	mov	r0, r1
    a612:	f7fa fdc7 	bl	51a4 <mul_mont_384x>
    a616:	260c      	movs	r6, #12
    a618:	9600      	str	r6, [sp, #0]
    a61a:	4653      	mov	r3, sl
    a61c:	aaac      	add	r2, sp, #688	; 0x2b0
    a61e:	a91c      	add	r1, sp, #112	; 0x70
    a620:	4608      	mov	r0, r1
    a622:	f7f6 fd2b 	bl	107c <add_mod_n>
    a626:	9600      	str	r6, [sp, #0]
    a628:	4653      	mov	r3, sl
    a62a:	aab8      	add	r2, sp, #736	; 0x2e0
    a62c:	a928      	add	r1, sp, #160	; 0xa0
    a62e:	4608      	mov	r0, r1
    a630:	f7f6 fd24 	bl	107c <add_mod_n>
    a634:	4e80      	ldr	r6, [pc, #512]	; (a838 <POINTonE2_dadd+0x338>)
    a636:	f8df a204 	ldr.w	sl, [pc, #516]	; a83c <POINTonE2_dadd+0x33c>
    a63a:	f8cd a000 	str.w	sl, [sp]
    a63e:	4633      	mov	r3, r6
    a640:	464a      	mov	r2, r9
    a642:	4641      	mov	r1, r8
    a644:	a8ac      	add	r0, sp, #688	; 0x2b0
    a646:	f7fa fdad 	bl	51a4 <mul_mont_384x>
    a64a:	f8cd a000 	str.w	sl, [sp]
    a64e:	4633      	mov	r3, r6
    a650:	aa94      	add	r2, sp, #592	; 0x250
    a652:	a9ac      	add	r1, sp, #688	; 0x2b0
    a654:	4608      	mov	r0, r1
    a656:	f7fa fda5 	bl	51a4 <mul_mont_384x>
    a65a:	f8cd a000 	str.w	sl, [sp]
    a65e:	4633      	mov	r3, r6
    a660:	463a      	mov	r2, r7
    a662:	f105 0160 	add.w	r1, r5, #96	; 0x60
    a666:	a864      	add	r0, sp, #400	; 0x190
    a668:	f7fa fd9c 	bl	51a4 <mul_mont_384x>
    a66c:	f8cd a000 	str.w	sl, [sp]
    a670:	4633      	mov	r3, r6
    a672:	aa4c      	add	r2, sp, #304	; 0x130
    a674:	a964      	add	r1, sp, #400	; 0x190
    a676:	4608      	mov	r0, r1
    a678:	f7fa fd94 	bl	51a4 <mul_mont_384x>
    a67c:	270c      	movs	r7, #12
    a67e:	9700      	str	r7, [sp, #0]
    a680:	4633      	mov	r3, r6
    a682:	aaac      	add	r2, sp, #688	; 0x2b0
    a684:	a964      	add	r1, sp, #400	; 0x190
    a686:	4608      	mov	r0, r1
    a688:	f7f6 f845 	bl	716 <sub_mod_n>
    a68c:	9700      	str	r7, [sp, #0]
    a68e:	4633      	mov	r3, r6
    a690:	aab8      	add	r2, sp, #736	; 0x2e0
    a692:	a970      	add	r1, sp, #448	; 0x1c0
    a694:	4608      	mov	r0, r1
    a696:	f7f6 f83e 	bl	716 <sub_mod_n>
    a69a:	f8cd a000 	str.w	sl, [sp]
    a69e:	4633      	mov	r3, r6
    a6a0:	4622      	mov	r2, r4
    a6a2:	a994      	add	r1, sp, #592	; 0x250
    a6a4:	4608      	mov	r0, r1
    a6a6:	f7fa fd7d 	bl	51a4 <mul_mont_384x>
    a6aa:	f8cd a000 	str.w	sl, [sp]
    a6ae:	4633      	mov	r3, r6
    a6b0:	462a      	mov	r2, r5
    a6b2:	a94c      	add	r1, sp, #304	; 0x130
    a6b4:	4608      	mov	r0, r1
    a6b6:	f7fa fd75 	bl	51a4 <mul_mont_384x>
    a6ba:	9700      	str	r7, [sp, #0]
    a6bc:	4633      	mov	r3, r6
    a6be:	aa94      	add	r2, sp, #592	; 0x250
    a6c0:	a94c      	add	r1, sp, #304	; 0x130
    a6c2:	a87c      	add	r0, sp, #496	; 0x1f0
    a6c4:	f7f6 fcda 	bl	107c <add_mod_n>
    a6c8:	9700      	str	r7, [sp, #0]
    a6ca:	4633      	mov	r3, r6
    a6cc:	aaa0      	add	r2, sp, #640	; 0x280
    a6ce:	a958      	add	r1, sp, #352	; 0x160
    a6d0:	a888      	add	r0, sp, #544	; 0x220
    a6d2:	f7f6 fcd3 	bl	107c <add_mod_n>
    a6d6:	9700      	str	r7, [sp, #0]
    a6d8:	4633      	mov	r3, r6
    a6da:	aa94      	add	r2, sp, #592	; 0x250
    a6dc:	a94c      	add	r1, sp, #304	; 0x130
    a6de:	4608      	mov	r0, r1
    a6e0:	f7f6 f819 	bl	716 <sub_mod_n>
    a6e4:	9700      	str	r7, [sp, #0]
    a6e6:	4633      	mov	r3, r6
    a6e8:	aaa0      	add	r2, sp, #640	; 0x280
    a6ea:	a958      	add	r1, sp, #352	; 0x160
    a6ec:	4608      	mov	r0, r1
    a6ee:	f7f6 f812 	bl	716 <sub_mod_n>
    a6f2:	a94b      	add	r1, sp, #300	; 0x12c
    a6f4:	ae7b      	add	r6, sp, #492	; 0x1ec
    a6f6:	460b      	mov	r3, r1
    a6f8:	2200      	movs	r2, #0
    a6fa:	f853 0f04 	ldr.w	r0, [r3, #4]!
    a6fe:	4302      	orrs	r2, r0
    a700:	42b3      	cmp	r3, r6
    a702:	d1fa      	bne.n	a6fa <POINTonE2_dadd+0x1fa>
    a704:	1e50      	subs	r0, r2, #1
    a706:	ea20 0002 	bic.w	r0, r0, r2
    a70a:	17c0      	asrs	r0, r0, #31
    a70c:	3c04      	subs	r4, #4
    a70e:	ae94      	add	r6, sp, #592	; 0x250
    a710:	afdc      	add	r7, sp, #880	; 0x370
    a712:	4633      	mov	r3, r6
    a714:	46a6      	mov	lr, r4
    a716:	468c      	mov	ip, r1
    a718:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    a71c:	6819      	ldr	r1, [r3, #0]
    a71e:	2800      	cmp	r0, #0
    a720:	bf08      	it	eq
    a722:	460a      	moveq	r2, r1
    a724:	f843 2b04 	str.w	r2, [r3], #4
    a728:	42bb      	cmp	r3, r7
    a72a:	d1f5      	bne.n	a718 <POINTonE2_dadd+0x218>
    a72c:	4661      	mov	r1, ip
    a72e:	aa03      	add	r2, sp, #12
    a730:	f50d 7e96 	add.w	lr, sp, #300	; 0x12c
    a734:	4684      	mov	ip, r0
    a736:	f851 0f04 	ldr.w	r0, [r1, #4]!
    a73a:	f852 3f04 	ldr.w	r3, [r2, #4]!
    a73e:	f1bc 0f00 	cmp.w	ip, #0
    a742:	bf08      	it	eq
    a744:	4603      	moveq	r3, r0
    a746:	600b      	str	r3, [r1, #0]
    a748:	4572      	cmp	r2, lr
    a74a:	d1f4      	bne.n	a736 <POINTonE2_dadd+0x236>
    a74c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; a838 <POINTonE2_dadd+0x338>
    a750:	f8df 90e8 	ldr.w	r9, [pc, #232]	; a83c <POINTonE2_dadd+0x33c>
    a754:	f8cd 9000 	str.w	r9, [sp]
    a758:	4643      	mov	r3, r8
    a75a:	aa4c      	add	r2, sp, #304	; 0x130
    a75c:	a9c4      	add	r1, sp, #784	; 0x310
    a75e:	4608      	mov	r0, r1
    a760:	f7fa fd20 	bl	51a4 <mul_mont_384x>
    a764:	464b      	mov	r3, r9
    a766:	4642      	mov	r2, r8
    a768:	a94c      	add	r1, sp, #304	; 0x130
    a76a:	a804      	add	r0, sp, #16
    a76c:	f7fe ff16 	bl	959c <sqr_mont_384x>
    a770:	f8cd 9000 	str.w	r9, [sp]
    a774:	4643      	mov	r3, r8
    a776:	aa4c      	add	r2, sp, #304	; 0x130
    a778:	a904      	add	r1, sp, #16
    a77a:	a81c      	add	r0, sp, #112	; 0x70
    a77c:	f7fa fd12 	bl	51a4 <mul_mont_384x>
    a780:	f8cd 9000 	str.w	r9, [sp]
    a784:	4643      	mov	r3, r8
    a786:	aaac      	add	r2, sp, #688	; 0x2b0
    a788:	a91c      	add	r1, sp, #112	; 0x70
    a78a:	4608      	mov	r0, r1
    a78c:	f7fa fd0a 	bl	51a4 <mul_mont_384x>
    a790:	f8cd 9000 	str.w	r9, [sp]
    a794:	4643      	mov	r3, r8
    a796:	aa94      	add	r2, sp, #592	; 0x250
    a798:	a904      	add	r1, sp, #16
    a79a:	a8ac      	add	r0, sp, #688	; 0x2b0
    a79c:	f7fa fd02 	bl	51a4 <mul_mont_384x>
    a7a0:	f8cd 9000 	str.w	r9, [sp]
    a7a4:	4643      	mov	r3, r8
    a7a6:	aa7c      	add	r2, sp, #496	; 0x1f0
    a7a8:	a904      	add	r1, sp, #16
    a7aa:	4608      	mov	r0, r1
    a7ac:	f7fa fcfa 	bl	51a4 <mul_mont_384x>
    a7b0:	464b      	mov	r3, r9
    a7b2:	4642      	mov	r2, r8
    a7b4:	a964      	add	r1, sp, #400	; 0x190
    a7b6:	a894      	add	r0, sp, #592	; 0x250
    a7b8:	f7fe fef0 	bl	959c <sqr_mont_384x>
    a7bc:	f04f 0a0c 	mov.w	sl, #12
    a7c0:	f8cd a000 	str.w	sl, [sp]
    a7c4:	4643      	mov	r3, r8
    a7c6:	aa04      	add	r2, sp, #16
    a7c8:	a994      	add	r1, sp, #592	; 0x250
    a7ca:	4608      	mov	r0, r1
    a7cc:	f7f5 ffa3 	bl	716 <sub_mod_n>
    a7d0:	f8cd a000 	str.w	sl, [sp]
    a7d4:	4643      	mov	r3, r8
    a7d6:	aa10      	add	r2, sp, #64	; 0x40
    a7d8:	a9a0      	add	r1, sp, #640	; 0x280
    a7da:	4608      	mov	r0, r1
    a7dc:	f7f5 ff9b 	bl	716 <sub_mod_n>
    a7e0:	f8cd a000 	str.w	sl, [sp]
    a7e4:	4643      	mov	r3, r8
    a7e6:	aa94      	add	r2, sp, #592	; 0x250
    a7e8:	a9ac      	add	r1, sp, #688	; 0x2b0
    a7ea:	4608      	mov	r0, r1
    a7ec:	f7f5 ff93 	bl	716 <sub_mod_n>
    a7f0:	f8cd a000 	str.w	sl, [sp]
    a7f4:	4643      	mov	r3, r8
    a7f6:	aaa0      	add	r2, sp, #640	; 0x280
    a7f8:	a9b8      	add	r1, sp, #736	; 0x2e0
    a7fa:	4608      	mov	r0, r1
    a7fc:	f7f5 ff8b 	bl	716 <sub_mod_n>
    a800:	f8cd 9000 	str.w	r9, [sp]
    a804:	4643      	mov	r3, r8
    a806:	aa64      	add	r2, sp, #400	; 0x190
    a808:	a9ac      	add	r1, sp, #688	; 0x2b0
    a80a:	4608      	mov	r0, r1
    a80c:	f7fa fcca 	bl	51a4 <mul_mont_384x>
    a810:	f8cd a000 	str.w	sl, [sp]
    a814:	4643      	mov	r3, r8
    a816:	aa1c      	add	r2, sp, #112	; 0x70
    a818:	a9ac      	add	r1, sp, #688	; 0x2b0
    a81a:	4608      	mov	r0, r1
    a81c:	f7f5 ff7b 	bl	716 <sub_mod_n>
    a820:	f8cd a000 	str.w	sl, [sp]
    a824:	4643      	mov	r3, r8
    a826:	aa28      	add	r2, sp, #160	; 0xa0
    a828:	a9b8      	add	r1, sp, #736	; 0x2e0
    a82a:	4608      	mov	r0, r1
    a82c:	f7f5 ff73 	bl	716 <sub_mod_n>
    a830:	9b02      	ldr	r3, [sp, #8]
    a832:	4258      	negs	r0, r3
    a834:	4633      	mov	r3, r6
    a836:	e003      	b.n	a840 <POINTonE2_dadd+0x340>
    a838:	0001ade8 	.word	0x0001ade8
    a83c:	fffcfffd 	.word	0xfffcfffd
    a840:	6819      	ldr	r1, [r3, #0]
    a842:	f854 2f04 	ldr.w	r2, [r4, #4]!
    a846:	2800      	cmp	r0, #0
    a848:	bf08      	it	eq
    a84a:	460a      	moveq	r2, r1
    a84c:	f843 2b04 	str.w	r2, [r3], #4
    a850:	42bb      	cmp	r3, r7
    a852:	d1f5      	bne.n	a840 <POINTonE2_dadd+0x340>
    a854:	f1cb 0100 	rsb	r1, fp, #0
    a858:	3d04      	subs	r5, #4
    a85a:	9b03      	ldr	r3, [sp, #12]
    a85c:	1f18      	subs	r0, r3, #4
    a85e:	f856 2b04 	ldr.w	r2, [r6], #4
    a862:	f855 3f04 	ldr.w	r3, [r5, #4]!
    a866:	2900      	cmp	r1, #0
    a868:	bf08      	it	eq
    a86a:	4613      	moveq	r3, r2
    a86c:	f840 3f04 	str.w	r3, [r0, #4]!
    a870:	42be      	cmp	r6, r7
    a872:	d1f4      	bne.n	a85e <POINTonE2_dadd+0x35e>
    a874:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
    a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a87c <blst_p2_add_or_double>:
    a87c:	b508      	push	{r3, lr}
    a87e:	2300      	movs	r3, #0
    a880:	f7ff fe3e 	bl	a500 <POINTonE2_dadd>
    a884:	bd08      	pop	{r3, pc}

0000a886 <blst_pairing_merge>:
    a886:	b538      	push	{r3, r4, r5, lr}
    a888:	4604      	mov	r4, r0
    a88a:	460d      	mov	r5, r1
    a88c:	6802      	ldr	r2, [r0, #0]
    a88e:	f012 0f03 	tst.w	r2, #3
    a892:	d007      	beq.n	a8a4 <blst_pairing_merge+0x1e>
    a894:	680b      	ldr	r3, [r1, #0]
    a896:	f013 0f03 	tst.w	r3, #3
    a89a:	d003      	beq.n	a8a4 <blst_pairing_merge+0x1e>
    a89c:	4013      	ands	r3, r2
    a89e:	f013 0f03 	tst.w	r3, #3
    a8a2:	d079      	beq.n	a998 <blst_pairing_merge+0x112>
    a8a4:	6863      	ldr	r3, [r4, #4]
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d178      	bne.n	a99c <blst_pairing_merge+0x116>
    a8aa:	686b      	ldr	r3, [r5, #4]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d177      	bne.n	a9a0 <blst_pairing_merge+0x11a>
    a8b0:	682b      	ldr	r3, [r5, #0]
    a8b2:	f003 0303 	and.w	r3, r3, #3
    a8b6:	4313      	orrs	r3, r2
    a8b8:	6023      	str	r3, [r4, #0]
    a8ba:	f003 0203 	and.w	r2, r3, #3
    a8be:	2a01      	cmp	r2, #1
    a8c0:	d004      	beq.n	a8cc <blst_pairing_merge+0x46>
    a8c2:	2a02      	cmp	r2, #2
    a8c4:	d03d      	beq.n	a942 <blst_pairing_merge+0xbc>
    a8c6:	b312      	cbz	r2, a90e <blst_pairing_merge+0x88>
    a8c8:	2004      	movs	r0, #4
    a8ca:	bd38      	pop	{r3, r4, r5, pc}
    a8cc:	682a      	ldr	r2, [r5, #0]
    a8ce:	ea03 0102 	and.w	r1, r3, r2
    a8d2:	f011 0f10 	tst.w	r1, #16
    a8d6:	d112      	bne.n	a8fe <blst_pairing_merge+0x78>
    a8d8:	f012 0f10 	tst.w	r2, #16
    a8dc:	d017      	beq.n	a90e <blst_pairing_merge+0x88>
    a8de:	f043 0310 	orr.w	r3, r3, #16
    a8e2:	6023      	str	r3, [r4, #0]
    a8e4:	f505 7313 	add.w	r3, r5, #588	; 0x24c
    a8e8:	f504 7213 	add.w	r2, r4, #588	; 0x24c
    a8ec:	f505 7037 	add.w	r0, r5, #732	; 0x2dc
    a8f0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    a8f4:	f842 1f04 	str.w	r1, [r2, #4]!
    a8f8:	4283      	cmp	r3, r0
    a8fa:	d1f9      	bne.n	a8f0 <blst_pairing_merge+0x6a>
    a8fc:	e007      	b.n	a90e <blst_pairing_merge+0x88>
    a8fe:	f504 7014 	add.w	r0, r4, #592	; 0x250
    a902:	2300      	movs	r3, #0
    a904:	f505 7214 	add.w	r2, r5, #592	; 0x250
    a908:	4601      	mov	r1, r0
    a90a:	f7f7 f8ec 	bl	1ae6 <POINTonE1_dadd>
    a90e:	6823      	ldr	r3, [r4, #0]
    a910:	682a      	ldr	r2, [r5, #0]
    a912:	ea03 0102 	and.w	r1, r3, r2
    a916:	f011 0f20 	tst.w	r1, #32
    a91a:	d134      	bne.n	a986 <blst_pairing_merge+0x100>
    a91c:	f012 0f20 	tst.w	r2, #32
    a920:	d040      	beq.n	a9a4 <blst_pairing_merge+0x11e>
    a922:	f043 0320 	orr.w	r3, r3, #32
    a926:	f844 3b0c 	str.w	r3, [r4], #12
    a92a:	f105 030c 	add.w	r3, r5, #12
    a92e:	f505 7513 	add.w	r5, r5, #588	; 0x24c
    a932:	f853 2f04 	ldr.w	r2, [r3, #4]!
    a936:	f844 2f04 	str.w	r2, [r4, #4]!
    a93a:	42ab      	cmp	r3, r5
    a93c:	d1f9      	bne.n	a932 <blst_pairing_merge+0xac>
    a93e:	2000      	movs	r0, #0
    a940:	e7c3      	b.n	a8ca <blst_pairing_merge+0x44>
    a942:	682a      	ldr	r2, [r5, #0]
    a944:	ea03 0102 	and.w	r1, r3, r2
    a948:	f011 0f10 	tst.w	r1, #16
    a94c:	d112      	bne.n	a974 <blst_pairing_merge+0xee>
    a94e:	f012 0f10 	tst.w	r2, #16
    a952:	d0dc      	beq.n	a90e <blst_pairing_merge+0x88>
    a954:	f043 0310 	orr.w	r3, r3, #16
    a958:	6023      	str	r3, [r4, #0]
    a95a:	f505 7313 	add.w	r3, r5, #588	; 0x24c
    a95e:	f504 7213 	add.w	r2, r4, #588	; 0x24c
    a962:	f505 705b 	add.w	r0, r5, #876	; 0x36c
    a966:	f853 1f04 	ldr.w	r1, [r3, #4]!
    a96a:	f842 1f04 	str.w	r1, [r2, #4]!
    a96e:	4283      	cmp	r3, r0
    a970:	d1f9      	bne.n	a966 <blst_pairing_merge+0xe0>
    a972:	e7cc      	b.n	a90e <blst_pairing_merge+0x88>
    a974:	f504 7014 	add.w	r0, r4, #592	; 0x250
    a978:	2300      	movs	r3, #0
    a97a:	f505 7214 	add.w	r2, r5, #592	; 0x250
    a97e:	4601      	mov	r1, r0
    a980:	f7ff fdbe 	bl	a500 <POINTonE2_dadd>
    a984:	e7c3      	b.n	a90e <blst_pairing_merge+0x88>
    a986:	f104 0010 	add.w	r0, r4, #16
    a98a:	f105 0210 	add.w	r2, r5, #16
    a98e:	4601      	mov	r1, r0
    a990:	f7fa ff1a 	bl	57c8 <mul_fp12>
    a994:	2000      	movs	r0, #0
    a996:	e798      	b.n	a8ca <blst_pairing_merge+0x44>
    a998:	2004      	movs	r0, #4
    a99a:	e796      	b.n	a8ca <blst_pairing_merge+0x44>
    a99c:	2004      	movs	r0, #4
    a99e:	e794      	b.n	a8ca <blst_pairing_merge+0x44>
    a9a0:	2004      	movs	r0, #4
    a9a2:	e792      	b.n	a8ca <blst_pairing_merge+0x44>
    a9a4:	2000      	movs	r0, #0
    a9a6:	e790      	b.n	a8ca <blst_pairing_merge+0x44>

0000a9a8 <POINTonE2_add_affine>:
    a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9ac:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    a9b0:	9003      	str	r0, [sp, #12]
    a9b2:	460d      	mov	r5, r1
    a9b4:	4616      	mov	r6, r2
    a9b6:	f101 0bc0 	add.w	fp, r1, #192	; 0xc0
    a9ba:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
    a9be:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    a9c2:	2200      	movs	r2, #0
    a9c4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    a9c8:	430a      	orrs	r2, r1
    a9ca:	4283      	cmp	r3, r0
    a9cc:	d1fa      	bne.n	a9c4 <POINTonE2_add_affine+0x1c>
    a9ce:	1e57      	subs	r7, r2, #1
    a9d0:	ea27 0702 	bic.w	r7, r7, r2
    a9d4:	0fff      	lsrs	r7, r7, #31
    a9d6:	f8df 82c8 	ldr.w	r8, [pc, #712]	; aca0 <POINTonE2_add_affine+0x2f8>
    a9da:	4cb0      	ldr	r4, [pc, #704]	; (ac9c <POINTonE2_add_affine+0x2f4>)
    a9dc:	4643      	mov	r3, r8
    a9de:	4622      	mov	r2, r4
    a9e0:	4659      	mov	r1, fp
    a9e2:	a864      	add	r0, sp, #400	; 0x190
    a9e4:	f7fe fdda 	bl	959c <sqr_mont_384x>
    a9e8:	f8cd 8000 	str.w	r8, [sp]
    a9ec:	4623      	mov	r3, r4
    a9ee:	465a      	mov	r2, fp
    a9f0:	a964      	add	r1, sp, #400	; 0x190
    a9f2:	a8ac      	add	r0, sp, #688	; 0x2b0
    a9f4:	f7fa fbd6 	bl	51a4 <mul_mont_384x>
    a9f8:	f8cd 8000 	str.w	r8, [sp]
    a9fc:	4623      	mov	r3, r4
    a9fe:	f106 0260 	add.w	r2, r6, #96	; 0x60
    aa02:	a9ac      	add	r1, sp, #688	; 0x2b0
    aa04:	4608      	mov	r0, r1
    aa06:	f7fa fbcd 	bl	51a4 <mul_mont_384x>
    aa0a:	f1a6 0804 	sub.w	r8, r6, #4
    aa0e:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    aa12:	4643      	mov	r3, r8
    aa14:	2200      	movs	r2, #0
    aa16:	f853 1f04 	ldr.w	r1, [r3, #4]!
    aa1a:	430a      	orrs	r2, r1
    aa1c:	4283      	cmp	r3, r0
    aa1e:	d1fa      	bne.n	aa16 <POINTonE2_add_affine+0x6e>
    aa20:	1e53      	subs	r3, r2, #1
    aa22:	ea23 0202 	bic.w	r2, r3, r2
    aa26:	0fd3      	lsrs	r3, r2, #31
    aa28:	9302      	str	r3, [sp, #8]
    aa2a:	4c9c      	ldr	r4, [pc, #624]	; (ac9c <POINTonE2_add_affine+0x2f4>)
    aa2c:	f8df 9270 	ldr.w	r9, [pc, #624]	; aca0 <POINTonE2_add_affine+0x2f8>
    aa30:	f8cd 9000 	str.w	r9, [sp]
    aa34:	4623      	mov	r3, r4
    aa36:	aa64      	add	r2, sp, #400	; 0x190
    aa38:	4631      	mov	r1, r6
    aa3a:	a84c      	add	r0, sp, #304	; 0x130
    aa3c:	f7fa fbb2 	bl	51a4 <mul_mont_384x>
    aa40:	260c      	movs	r6, #12
    aa42:	9600      	str	r6, [sp, #0]
    aa44:	4623      	mov	r3, r4
    aa46:	462a      	mov	r2, r5
    aa48:	a94c      	add	r1, sp, #304	; 0x130
    aa4a:	4608      	mov	r0, r1
    aa4c:	f7f5 fe63 	bl	716 <sub_mod_n>
    aa50:	9600      	str	r6, [sp, #0]
    aa52:	4623      	mov	r3, r4
    aa54:	f105 0230 	add.w	r2, r5, #48	; 0x30
    aa58:	a958      	add	r1, sp, #352	; 0x160
    aa5a:	4608      	mov	r0, r1
    aa5c:	f7f5 fe5b 	bl	716 <sub_mod_n>
    aa60:	464b      	mov	r3, r9
    aa62:	4622      	mov	r2, r4
    aa64:	a94c      	add	r1, sp, #304	; 0x130
    aa66:	a834      	add	r0, sp, #208	; 0xd0
    aa68:	f7fe fd98 	bl	959c <sqr_mont_384x>
    aa6c:	9600      	str	r6, [sp, #0]
    aa6e:	4623      	mov	r3, r4
    aa70:	aa34      	add	r2, sp, #208	; 0xd0
    aa72:	4611      	mov	r1, r2
    aa74:	a81c      	add	r0, sp, #112	; 0x70
    aa76:	f7f6 fb01 	bl	107c <add_mod_n>
    aa7a:	9600      	str	r6, [sp, #0]
    aa7c:	4623      	mov	r3, r4
    aa7e:	aa40      	add	r2, sp, #256	; 0x100
    aa80:	4611      	mov	r1, r2
    aa82:	a828      	add	r0, sp, #160	; 0xa0
    aa84:	f7f6 fafa 	bl	107c <add_mod_n>
    aa88:	9600      	str	r6, [sp, #0]
    aa8a:	4623      	mov	r3, r4
    aa8c:	aa1c      	add	r2, sp, #112	; 0x70
    aa8e:	4611      	mov	r1, r2
    aa90:	4610      	mov	r0, r2
    aa92:	f7f6 faf3 	bl	107c <add_mod_n>
    aa96:	9600      	str	r6, [sp, #0]
    aa98:	4623      	mov	r3, r4
    aa9a:	aa28      	add	r2, sp, #160	; 0xa0
    aa9c:	4611      	mov	r1, r2
    aa9e:	4610      	mov	r0, r2
    aaa0:	f7f6 faec 	bl	107c <add_mod_n>
    aaa4:	f8cd 9000 	str.w	r9, [sp]
    aaa8:	4623      	mov	r3, r4
    aaaa:	aa1c      	add	r2, sp, #112	; 0x70
    aaac:	4629      	mov	r1, r5
    aaae:	a894      	add	r0, sp, #592	; 0x250
    aab0:	f7fa fb78 	bl	51a4 <mul_mont_384x>
    aab4:	f8cd 9000 	str.w	r9, [sp]
    aab8:	4623      	mov	r3, r4
    aaba:	aa1c      	add	r2, sp, #112	; 0x70
    aabc:	a94c      	add	r1, sp, #304	; 0x130
    aabe:	a804      	add	r0, sp, #16
    aac0:	f7fa fb70 	bl	51a4 <mul_mont_384x>
    aac4:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    aac8:	f8cd 9000 	str.w	r9, [sp]
    aacc:	4623      	mov	r3, r4
    aace:	4652      	mov	r2, sl
    aad0:	a904      	add	r1, sp, #16
    aad2:	a81c      	add	r0, sp, #112	; 0x70
    aad4:	f7fa fb66 	bl	51a4 <mul_mont_384x>
    aad8:	9600      	str	r6, [sp, #0]
    aada:	4623      	mov	r3, r4
    aadc:	4652      	mov	r2, sl
    aade:	a9ac      	add	r1, sp, #688	; 0x2b0
    aae0:	4608      	mov	r0, r1
    aae2:	f7f5 fe18 	bl	716 <sub_mod_n>
    aae6:	9600      	str	r6, [sp, #0]
    aae8:	4623      	mov	r3, r4
    aaea:	f105 0290 	add.w	r2, r5, #144	; 0x90
    aaee:	a9b8      	add	r1, sp, #736	; 0x2e0
    aaf0:	4608      	mov	r0, r1
    aaf2:	f7f5 fe10 	bl	716 <sub_mod_n>
    aaf6:	9600      	str	r6, [sp, #0]
    aaf8:	4623      	mov	r3, r4
    aafa:	aaac      	add	r2, sp, #688	; 0x2b0
    aafc:	4611      	mov	r1, r2
    aafe:	4610      	mov	r0, r2
    ab00:	f7f6 fabc 	bl	107c <add_mod_n>
    ab04:	9600      	str	r6, [sp, #0]
    ab06:	4623      	mov	r3, r4
    ab08:	aab8      	add	r2, sp, #736	; 0x2e0
    ab0a:	4611      	mov	r1, r2
    ab0c:	4610      	mov	r0, r2
    ab0e:	f7f6 fab5 	bl	107c <add_mod_n>
    ab12:	464b      	mov	r3, r9
    ab14:	4622      	mov	r2, r4
    ab16:	a9ac      	add	r1, sp, #688	; 0x2b0
    ab18:	a87c      	add	r0, sp, #496	; 0x1f0
    ab1a:	f7fe fd3f 	bl	959c <sqr_mont_384x>
    ab1e:	9600      	str	r6, [sp, #0]
    ab20:	4623      	mov	r3, r4
    ab22:	aa04      	add	r2, sp, #16
    ab24:	a97c      	add	r1, sp, #496	; 0x1f0
    ab26:	4608      	mov	r0, r1
    ab28:	f7f5 fdf5 	bl	716 <sub_mod_n>
    ab2c:	9600      	str	r6, [sp, #0]
    ab2e:	4623      	mov	r3, r4
    ab30:	aa10      	add	r2, sp, #64	; 0x40
    ab32:	a988      	add	r1, sp, #544	; 0x220
    ab34:	4608      	mov	r0, r1
    ab36:	f7f5 fdee 	bl	716 <sub_mod_n>
    ab3a:	9600      	str	r6, [sp, #0]
    ab3c:	4623      	mov	r3, r4
    ab3e:	aa94      	add	r2, sp, #592	; 0x250
    ab40:	a97c      	add	r1, sp, #496	; 0x1f0
    ab42:	4608      	mov	r0, r1
    ab44:	f7f5 fde7 	bl	716 <sub_mod_n>
    ab48:	9600      	str	r6, [sp, #0]
    ab4a:	4623      	mov	r3, r4
    ab4c:	aaa0      	add	r2, sp, #640	; 0x280
    ab4e:	a988      	add	r1, sp, #544	; 0x220
    ab50:	4608      	mov	r0, r1
    ab52:	f7f5 fde0 	bl	716 <sub_mod_n>
    ab56:	9600      	str	r6, [sp, #0]
    ab58:	4623      	mov	r3, r4
    ab5a:	aa94      	add	r2, sp, #592	; 0x250
    ab5c:	a97c      	add	r1, sp, #496	; 0x1f0
    ab5e:	4608      	mov	r0, r1
    ab60:	f7f5 fdd9 	bl	716 <sub_mod_n>
    ab64:	9600      	str	r6, [sp, #0]
    ab66:	4623      	mov	r3, r4
    ab68:	aaa0      	add	r2, sp, #640	; 0x280
    ab6a:	a988      	add	r1, sp, #544	; 0x220
    ab6c:	4608      	mov	r0, r1
    ab6e:	f7f5 fdd2 	bl	716 <sub_mod_n>
    ab72:	9600      	str	r6, [sp, #0]
    ab74:	4623      	mov	r3, r4
    ab76:	aa7c      	add	r2, sp, #496	; 0x1f0
    ab78:	a994      	add	r1, sp, #592	; 0x250
    ab7a:	4608      	mov	r0, r1
    ab7c:	f7f5 fdcb 	bl	716 <sub_mod_n>
    ab80:	9600      	str	r6, [sp, #0]
    ab82:	4623      	mov	r3, r4
    ab84:	aa88      	add	r2, sp, #544	; 0x220
    ab86:	a9a0      	add	r1, sp, #640	; 0x280
    ab88:	4608      	mov	r0, r1
    ab8a:	f7f5 fdc4 	bl	716 <sub_mod_n>
    ab8e:	f8cd 9000 	str.w	r9, [sp]
    ab92:	4623      	mov	r3, r4
    ab94:	aaac      	add	r2, sp, #688	; 0x2b0
    ab96:	a994      	add	r1, sp, #592	; 0x250
    ab98:	4608      	mov	r0, r1
    ab9a:	f7fa fb03 	bl	51a4 <mul_mont_384x>
    ab9e:	9600      	str	r6, [sp, #0]
    aba0:	4623      	mov	r3, r4
    aba2:	aa1c      	add	r2, sp, #112	; 0x70
    aba4:	a994      	add	r1, sp, #592	; 0x250
    aba6:	4608      	mov	r0, r1
    aba8:	f7f5 fdb5 	bl	716 <sub_mod_n>
    abac:	9600      	str	r6, [sp, #0]
    abae:	4623      	mov	r3, r4
    abb0:	aa28      	add	r2, sp, #160	; 0xa0
    abb2:	a9a0      	add	r1, sp, #640	; 0x280
    abb4:	4608      	mov	r0, r1
    abb6:	f7f5 fdae 	bl	716 <sub_mod_n>
    abba:	9600      	str	r6, [sp, #0]
    abbc:	4623      	mov	r3, r4
    abbe:	aa1c      	add	r2, sp, #112	; 0x70
    abc0:	a994      	add	r1, sp, #592	; 0x250
    abc2:	4608      	mov	r0, r1
    abc4:	f7f5 fda7 	bl	716 <sub_mod_n>
    abc8:	9600      	str	r6, [sp, #0]
    abca:	4623      	mov	r3, r4
    abcc:	aa28      	add	r2, sp, #160	; 0xa0
    abce:	a9a0      	add	r1, sp, #640	; 0x280
    abd0:	4608      	mov	r0, r1
    abd2:	f7f5 fda0 	bl	716 <sub_mod_n>
    abd6:	9600      	str	r6, [sp, #0]
    abd8:	4623      	mov	r3, r4
    abda:	aa4c      	add	r2, sp, #304	; 0x130
    abdc:	4659      	mov	r1, fp
    abde:	a8ac      	add	r0, sp, #688	; 0x2b0
    abe0:	f7f6 fa4c 	bl	107c <add_mod_n>
    abe4:	9600      	str	r6, [sp, #0]
    abe6:	4623      	mov	r3, r4
    abe8:	aa58      	add	r2, sp, #352	; 0x160
    abea:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    abee:	a8b8      	add	r0, sp, #736	; 0x2e0
    abf0:	f7f6 fa44 	bl	107c <add_mod_n>
    abf4:	464b      	mov	r3, r9
    abf6:	4622      	mov	r2, r4
    abf8:	a9ac      	add	r1, sp, #688	; 0x2b0
    abfa:	4608      	mov	r0, r1
    abfc:	f7fe fcce 	bl	959c <sqr_mont_384x>
    ac00:	9600      	str	r6, [sp, #0]
    ac02:	4623      	mov	r3, r4
    ac04:	aa64      	add	r2, sp, #400	; 0x190
    ac06:	a9ac      	add	r1, sp, #688	; 0x2b0
    ac08:	4608      	mov	r0, r1
    ac0a:	f7f5 fd84 	bl	716 <sub_mod_n>
    ac0e:	9600      	str	r6, [sp, #0]
    ac10:	4623      	mov	r3, r4
    ac12:	aa70      	add	r2, sp, #448	; 0x1c0
    ac14:	a9b8      	add	r1, sp, #736	; 0x2e0
    ac16:	4608      	mov	r0, r1
    ac18:	f7f5 fd7d 	bl	716 <sub_mod_n>
    ac1c:	9600      	str	r6, [sp, #0]
    ac1e:	4623      	mov	r3, r4
    ac20:	aa34      	add	r2, sp, #208	; 0xd0
    ac22:	a9ac      	add	r1, sp, #688	; 0x2b0
    ac24:	4608      	mov	r0, r1
    ac26:	f7f5 fd76 	bl	716 <sub_mod_n>
    ac2a:	9600      	str	r6, [sp, #0]
    ac2c:	4623      	mov	r3, r4
    ac2e:	aa40      	add	r2, sp, #256	; 0x100
    ac30:	a9b8      	add	r1, sp, #736	; 0x2e0
    ac32:	4608      	mov	r0, r1
    ac34:	f7f5 fd6f 	bl	716 <sub_mod_n>
    ac38:	427f      	negs	r7, r7
    ac3a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    ac3e:	aaab      	add	r2, sp, #684	; 0x2ac
    ac40:	34bc      	adds	r4, #188	; 0xbc
    ac42:	f852 0f04 	ldr.w	r0, [r2, #4]!
    ac46:	f851 3f04 	ldr.w	r3, [r1, #4]!
    ac4a:	2f00      	cmp	r7, #0
    ac4c:	bf08      	it	eq
    ac4e:	4603      	moveq	r3, r0
    ac50:	6013      	str	r3, [r2, #0]
    ac52:	42a1      	cmp	r1, r4
    ac54:	d1f5      	bne.n	ac42 <POINTonE2_add_affine+0x29a>
    ac56:	a97c      	add	r1, sp, #496	; 0x1f0
    ac58:	acac      	add	r4, sp, #688	; 0x2b0
    ac5a:	460b      	mov	r3, r1
    ac5c:	6818      	ldr	r0, [r3, #0]
    ac5e:	f858 2f04 	ldr.w	r2, [r8, #4]!
    ac62:	2f00      	cmp	r7, #0
    ac64:	bf08      	it	eq
    ac66:	4602      	moveq	r2, r0
    ac68:	f843 2b04 	str.w	r2, [r3], #4
    ac6c:	429c      	cmp	r4, r3
    ac6e:	d1f5      	bne.n	ac5c <POINTonE2_add_affine+0x2b4>
    ac70:	9b02      	ldr	r3, [sp, #8]
    ac72:	425c      	negs	r4, r3
    ac74:	3d04      	subs	r5, #4
    ac76:	9b03      	ldr	r3, [sp, #12]
    ac78:	1f18      	subs	r0, r3, #4
    ac7a:	f501 7690 	add.w	r6, r1, #288	; 0x120
    ac7e:	f851 2b04 	ldr.w	r2, [r1], #4
    ac82:	f855 3f04 	ldr.w	r3, [r5, #4]!
    ac86:	2c00      	cmp	r4, #0
    ac88:	bf08      	it	eq
    ac8a:	4613      	moveq	r3, r2
    ac8c:	f840 3f04 	str.w	r3, [r0, #4]!
    ac90:	42b1      	cmp	r1, r6
    ac92:	d1f4      	bne.n	ac7e <POINTonE2_add_affine+0x2d6>
    ac94:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
    ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac9c:	0001ade8 	.word	0x0001ade8
    aca0:	fffcfffd 	.word	0xfffcfffd

0000aca4 <blst_p2_add_affine>:
    aca4:	b508      	push	{r3, lr}
    aca6:	f7ff fe7f 	bl	a9a8 <POINTonE2_add_affine>
    acaa:	bd08      	pop	{r3, pc}

0000acac <POINTonE2_dadd_affine>:
    acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acb0:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
    acb4:	9005      	str	r0, [sp, #20]
    acb6:	460c      	mov	r4, r1
    acb8:	4616      	mov	r6, r2
    acba:	1f17      	subs	r7, r2, #4
    acbc:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
    acc0:	463b      	mov	r3, r7
    acc2:	2200      	movs	r2, #0
    acc4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    acc8:	430a      	orrs	r2, r1
    acca:	4283      	cmp	r3, r0
    accc:	d1fa      	bne.n	acc4 <POINTonE2_dadd_affine+0x18>
    acce:	1e53      	subs	r3, r2, #1
    acd0:	ea23 0202 	bic.w	r2, r3, r2
    acd4:	0fd3      	lsrs	r3, r2, #31
    acd6:	9304      	str	r3, [sp, #16]
    acd8:	4dc2      	ldr	r5, [pc, #776]	; (afe4 <POINTonE2_dadd_affine+0x338>)
    acda:	f04f 090c 	mov.w	r9, #12
    acde:	f8cd 9000 	str.w	r9, [sp]
    ace2:	462b      	mov	r3, r5
    ace4:	4632      	mov	r2, r6
    ace6:	4631      	mov	r1, r6
    ace8:	a836      	add	r0, sp, #216	; 0xd8
    acea:	f7f6 f9c7 	bl	107c <add_mod_n>
    acee:	f106 0130 	add.w	r1, r6, #48	; 0x30
    acf2:	f8cd 9000 	str.w	r9, [sp]
    acf6:	462b      	mov	r3, r5
    acf8:	460a      	mov	r2, r1
    acfa:	a842      	add	r0, sp, #264	; 0x108
    acfc:	f7f6 f9be 	bl	107c <add_mod_n>
    ad00:	4bb9      	ldr	r3, [pc, #740]	; (afe8 <POINTonE2_dadd_affine+0x33c>)
    ad02:	462a      	mov	r2, r5
    ad04:	4631      	mov	r1, r6
    ad06:	a81e      	add	r0, sp, #120	; 0x78
    ad08:	f7fe fc48 	bl	959c <sqr_mont_384x>
    ad0c:	464b      	mov	r3, r9
    ad0e:	462a      	mov	r2, r5
    ad10:	a91e      	add	r1, sp, #120	; 0x78
    ad12:	4608      	mov	r0, r1
    ad14:	f7f6 fe4c 	bl	19b0 <mul_by_3_mod_n>
    ad18:	464b      	mov	r3, r9
    ad1a:	462a      	mov	r2, r5
    ad1c:	a92a      	add	r1, sp, #168	; 0xa8
    ad1e:	4608      	mov	r0, r1
    ad20:	f7f6 fe46 	bl	19b0 <mul_by_3_mod_n>
    ad24:	f106 0860 	add.w	r8, r6, #96	; 0x60
    ad28:	f8cd 9000 	str.w	r9, [sp]
    ad2c:	462b      	mov	r3, r5
    ad2e:	4642      	mov	r2, r8
    ad30:	4641      	mov	r1, r8
    ad32:	a806      	add	r0, sp, #24
    ad34:	f7f6 f9a2 	bl	107c <add_mod_n>
    ad38:	f106 0190 	add.w	r1, r6, #144	; 0x90
    ad3c:	f8cd 9000 	str.w	r9, [sp]
    ad40:	462b      	mov	r3, r5
    ad42:	460a      	mov	r2, r1
    ad44:	a812      	add	r0, sp, #72	; 0x48
    ad46:	f7f6 f999 	bl	107c <add_mod_n>
    ad4a:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
    ad4e:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    ad52:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    ad56:	2200      	movs	r2, #0
    ad58:	f853 1f04 	ldr.w	r1, [r3, #4]!
    ad5c:	430a      	orrs	r2, r1
    ad5e:	4283      	cmp	r3, r0
    ad60:	d1fa      	bne.n	ad58 <POINTonE2_dadd_affine+0xac>
    ad62:	1e53      	subs	r3, r2, #1
    ad64:	ea23 0202 	bic.w	r2, r3, r2
    ad68:	0fd3      	lsrs	r3, r2, #31
    ad6a:	9303      	str	r3, [sp, #12]
    ad6c:	f8df 9278 	ldr.w	r9, [pc, #632]	; afe8 <POINTonE2_dadd_affine+0x33c>
    ad70:	4d9c      	ldr	r5, [pc, #624]	; (afe4 <POINTonE2_dadd_affine+0x338>)
    ad72:	464b      	mov	r3, r9
    ad74:	462a      	mov	r2, r5
    ad76:	4651      	mov	r1, sl
    ad78:	a84e      	add	r0, sp, #312	; 0x138
    ad7a:	f7fe fc0f 	bl	959c <sqr_mont_384x>
    ad7e:	f8cd 9000 	str.w	r9, [sp]
    ad82:	462b      	mov	r3, r5
    ad84:	4652      	mov	r2, sl
    ad86:	a94e      	add	r1, sp, #312	; 0x138
    ad88:	a866      	add	r0, sp, #408	; 0x198
    ad8a:	f7fa fa0b 	bl	51a4 <mul_mont_384x>
    ad8e:	f8cd 9000 	str.w	r9, [sp]
    ad92:	462b      	mov	r3, r5
    ad94:	4642      	mov	r2, r8
    ad96:	a966      	add	r1, sp, #408	; 0x198
    ad98:	4608      	mov	r0, r1
    ad9a:	f7fa fa03 	bl	51a4 <mul_mont_384x>
    ad9e:	f04f 080c 	mov.w	r8, #12
    ada2:	f8cd 8000 	str.w	r8, [sp]
    ada6:	462b      	mov	r3, r5
    ada8:	f104 0260 	add.w	r2, r4, #96	; 0x60
    adac:	a966      	add	r1, sp, #408	; 0x198
    adae:	4608      	mov	r0, r1
    adb0:	f7f5 fcb1 	bl	716 <sub_mod_n>
    adb4:	f8cd 8000 	str.w	r8, [sp]
    adb8:	462b      	mov	r3, r5
    adba:	f104 0290 	add.w	r2, r4, #144	; 0x90
    adbe:	a972      	add	r1, sp, #456	; 0x1c8
    adc0:	4608      	mov	r0, r1
    adc2:	f7f5 fca8 	bl	716 <sub_mod_n>
    adc6:	f8cd 9000 	str.w	r9, [sp]
    adca:	462b      	mov	r3, r5
    adcc:	4632      	mov	r2, r6
    adce:	a94e      	add	r1, sp, #312	; 0x138
    add0:	4608      	mov	r0, r1
    add2:	f7fa f9e7 	bl	51a4 <mul_mont_384x>
    add6:	f8cd 8000 	str.w	r8, [sp]
    adda:	462b      	mov	r3, r5
    addc:	4622      	mov	r2, r4
    adde:	a94e      	add	r1, sp, #312	; 0x138
    ade0:	a87e      	add	r0, sp, #504	; 0x1f8
    ade2:	f7f6 f94b 	bl	107c <add_mod_n>
    ade6:	f104 0630 	add.w	r6, r4, #48	; 0x30
    adea:	f8cd 8000 	str.w	r8, [sp]
    adee:	462b      	mov	r3, r5
    adf0:	4632      	mov	r2, r6
    adf2:	a95a      	add	r1, sp, #360	; 0x168
    adf4:	a88a      	add	r0, sp, #552	; 0x228
    adf6:	f7f6 f941 	bl	107c <add_mod_n>
    adfa:	f8cd 8000 	str.w	r8, [sp]
    adfe:	462b      	mov	r3, r5
    ae00:	4622      	mov	r2, r4
    ae02:	a94e      	add	r1, sp, #312	; 0x138
    ae04:	4608      	mov	r0, r1
    ae06:	f7f5 fc86 	bl	716 <sub_mod_n>
    ae0a:	f8cd 8000 	str.w	r8, [sp]
    ae0e:	462b      	mov	r3, r5
    ae10:	4632      	mov	r2, r6
    ae12:	a95a      	add	r1, sp, #360	; 0x168
    ae14:	4608      	mov	r0, r1
    ae16:	f7f5 fc7e 	bl	716 <sub_mod_n>
    ae1a:	f8cd 9000 	str.w	r9, [sp]
    ae1e:	462b      	mov	r3, r5
    ae20:	4652      	mov	r2, sl
    ae22:	a94e      	add	r1, sp, #312	; 0x138
    ae24:	a8c6      	add	r0, sp, #792	; 0x318
    ae26:	f7fa f9bd 	bl	51a4 <mul_mont_384x>
    ae2a:	a84d      	add	r0, sp, #308	; 0x134
    ae2c:	ad7d      	add	r5, sp, #500	; 0x1f4
    ae2e:	4603      	mov	r3, r0
    ae30:	2200      	movs	r2, #0
    ae32:	f853 1f04 	ldr.w	r1, [r3, #4]!
    ae36:	430a      	orrs	r2, r1
    ae38:	42ab      	cmp	r3, r5
    ae3a:	d1fa      	bne.n	ae32 <POINTonE2_dadd_affine+0x186>
    ae3c:	1e53      	subs	r3, r2, #1
    ae3e:	ea23 0202 	bic.w	r2, r3, r2
    ae42:	17d2      	asrs	r2, r2, #31
    ae44:	3c04      	subs	r4, #4
    ae46:	ad96      	add	r5, sp, #600	; 0x258
    ae48:	f50d 7846 	add.w	r8, sp, #792	; 0x318
    ae4c:	4629      	mov	r1, r5
    ae4e:	46a4      	mov	ip, r4
    ae50:	463e      	mov	r6, r7
    ae52:	4696      	mov	lr, r2
    ae54:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    ae58:	f856 3f04 	ldr.w	r3, [r6, #4]!
    ae5c:	f1be 0f00 	cmp.w	lr, #0
    ae60:	bf08      	it	eq
    ae62:	4613      	moveq	r3, r2
    ae64:	f841 3b04 	str.w	r3, [r1], #4
    ae68:	4541      	cmp	r1, r8
    ae6a:	d1f3      	bne.n	ae54 <POINTonE2_dadd_affine+0x1a8>
    ae6c:	4672      	mov	r2, lr
    ae6e:	a905      	add	r1, sp, #20
    ae70:	aec5      	add	r6, sp, #788	; 0x314
    ae72:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
    ae76:	46b6      	mov	lr, r6
    ae78:	468c      	mov	ip, r1
    ae7a:	4691      	mov	r9, r2
    ae7c:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    ae80:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    ae84:	f1b9 0f00 	cmp.w	r9, #0
    ae88:	bf08      	it	eq
    ae8a:	4613      	moveq	r3, r2
    ae8c:	f8ce 3000 	str.w	r3, [lr]
    ae90:	45d4      	cmp	ip, sl
    ae92:	d1f3      	bne.n	ae7c <POINTonE2_dadd_affine+0x1d0>
    ae94:	f50d 7c9a 	add.w	ip, sp, #308	; 0x134
    ae98:	46ce      	mov	lr, r9
    ae9a:	f850 2f04 	ldr.w	r2, [r0, #4]!
    ae9e:	f851 3f04 	ldr.w	r3, [r1, #4]!
    aea2:	f1be 0f00 	cmp.w	lr, #0
    aea6:	bf08      	it	eq
    aea8:	4613      	moveq	r3, r2
    aeaa:	6003      	str	r3, [r0, #0]
    aeac:	4561      	cmp	r1, ip
    aeae:	d1f4      	bne.n	ae9a <POINTonE2_dadd_affine+0x1ee>
    aeb0:	f8df a134 	ldr.w	sl, [pc, #308]	; afe8 <POINTonE2_dadd_affine+0x33c>
    aeb4:	f8df 912c 	ldr.w	r9, [pc, #300]	; afe4 <POINTonE2_dadd_affine+0x338>
    aeb8:	4653      	mov	r3, sl
    aeba:	464a      	mov	r2, r9
    aebc:	a94e      	add	r1, sp, #312	; 0x138
    aebe:	a806      	add	r0, sp, #24
    aec0:	f7fe fb6c 	bl	959c <sqr_mont_384x>
    aec4:	f8cd a000 	str.w	sl, [sp]
    aec8:	464b      	mov	r3, r9
    aeca:	aa4e      	add	r2, sp, #312	; 0x138
    aecc:	a906      	add	r1, sp, #24
    aece:	a81e      	add	r0, sp, #120	; 0x78
    aed0:	f7fa f968 	bl	51a4 <mul_mont_384x>
    aed4:	f8cd a000 	str.w	sl, [sp]
    aed8:	464b      	mov	r3, r9
    aeda:	aaae      	add	r2, sp, #696	; 0x2b8
    aedc:	a91e      	add	r1, sp, #120	; 0x78
    aede:	4608      	mov	r0, r1
    aee0:	f7fa f960 	bl	51a4 <mul_mont_384x>
    aee4:	f8cd a000 	str.w	sl, [sp]
    aee8:	464b      	mov	r3, r9
    aeea:	aa96      	add	r2, sp, #600	; 0x258
    aeec:	a906      	add	r1, sp, #24
    aeee:	a8ae      	add	r0, sp, #696	; 0x2b8
    aef0:	f7fa f958 	bl	51a4 <mul_mont_384x>
    aef4:	f8cd a000 	str.w	sl, [sp]
    aef8:	464b      	mov	r3, r9
    aefa:	aa7e      	add	r2, sp, #504	; 0x1f8
    aefc:	a906      	add	r1, sp, #24
    aefe:	4608      	mov	r0, r1
    af00:	f7fa f950 	bl	51a4 <mul_mont_384x>
    af04:	4653      	mov	r3, sl
    af06:	464a      	mov	r2, r9
    af08:	a966      	add	r1, sp, #408	; 0x198
    af0a:	a896      	add	r0, sp, #600	; 0x258
    af0c:	f7fe fb46 	bl	959c <sqr_mont_384x>
    af10:	f04f 0b0c 	mov.w	fp, #12
    af14:	f8cd b000 	str.w	fp, [sp]
    af18:	464b      	mov	r3, r9
    af1a:	aa06      	add	r2, sp, #24
    af1c:	a996      	add	r1, sp, #600	; 0x258
    af1e:	4608      	mov	r0, r1
    af20:	f7f5 fbf9 	bl	716 <sub_mod_n>
    af24:	f8cd b000 	str.w	fp, [sp]
    af28:	464b      	mov	r3, r9
    af2a:	aa12      	add	r2, sp, #72	; 0x48
    af2c:	a9a2      	add	r1, sp, #648	; 0x288
    af2e:	4608      	mov	r0, r1
    af30:	f7f5 fbf1 	bl	716 <sub_mod_n>
    af34:	f8cd b000 	str.w	fp, [sp]
    af38:	464b      	mov	r3, r9
    af3a:	aa96      	add	r2, sp, #600	; 0x258
    af3c:	a9ae      	add	r1, sp, #696	; 0x2b8
    af3e:	4608      	mov	r0, r1
    af40:	f7f5 fbe9 	bl	716 <sub_mod_n>
    af44:	f8cd b000 	str.w	fp, [sp]
    af48:	464b      	mov	r3, r9
    af4a:	aaa2      	add	r2, sp, #648	; 0x288
    af4c:	a9ba      	add	r1, sp, #744	; 0x2e8
    af4e:	4608      	mov	r0, r1
    af50:	f7f5 fbe1 	bl	716 <sub_mod_n>
    af54:	f8cd a000 	str.w	sl, [sp]
    af58:	464b      	mov	r3, r9
    af5a:	aa66      	add	r2, sp, #408	; 0x198
    af5c:	a9ae      	add	r1, sp, #696	; 0x2b8
    af5e:	4608      	mov	r0, r1
    af60:	f7fa f920 	bl	51a4 <mul_mont_384x>
    af64:	f8cd b000 	str.w	fp, [sp]
    af68:	464b      	mov	r3, r9
    af6a:	aa1e      	add	r2, sp, #120	; 0x78
    af6c:	a9ae      	add	r1, sp, #696	; 0x2b8
    af6e:	4608      	mov	r0, r1
    af70:	f7f5 fbd1 	bl	716 <sub_mod_n>
    af74:	f8cd b000 	str.w	fp, [sp]
    af78:	464b      	mov	r3, r9
    af7a:	aa2a      	add	r2, sp, #168	; 0xa8
    af7c:	a9ba      	add	r1, sp, #744	; 0x2e8
    af7e:	4608      	mov	r0, r1
    af80:	f7f5 fbc9 	bl	716 <sub_mod_n>
    af84:	9b03      	ldr	r3, [sp, #12]
    af86:	4259      	negs	r1, r3
    af88:	462b      	mov	r3, r5
    af8a:	6818      	ldr	r0, [r3, #0]
    af8c:	f857 2f04 	ldr.w	r2, [r7, #4]!
    af90:	2900      	cmp	r1, #0
    af92:	bf08      	it	eq
    af94:	4602      	moveq	r2, r0
    af96:	f843 2b04 	str.w	r2, [r3], #4
    af9a:	4543      	cmp	r3, r8
    af9c:	d1f5      	bne.n	af8a <POINTonE2_dadd_affine+0x2de>
    af9e:	4f11      	ldr	r7, [pc, #68]	; (afe4 <POINTonE2_dadd_affine+0x338>)
    afa0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
    afa4:	37bc      	adds	r7, #188	; 0xbc
    afa6:	f856 0f04 	ldr.w	r0, [r6, #4]!
    afaa:	f852 3f04 	ldr.w	r3, [r2, #4]!
    afae:	2900      	cmp	r1, #0
    afb0:	bf08      	it	eq
    afb2:	4603      	moveq	r3, r0
    afb4:	6033      	str	r3, [r6, #0]
    afb6:	42ba      	cmp	r2, r7
    afb8:	d1f5      	bne.n	afa6 <POINTonE2_dadd_affine+0x2fa>
    afba:	9b04      	ldr	r3, [sp, #16]
    afbc:	4259      	negs	r1, r3
    afbe:	9b05      	ldr	r3, [sp, #20]
    afc0:	1f18      	subs	r0, r3, #4
    afc2:	f505 7690 	add.w	r6, r5, #288	; 0x120
    afc6:	f855 2b04 	ldr.w	r2, [r5], #4
    afca:	f854 3f04 	ldr.w	r3, [r4, #4]!
    afce:	2900      	cmp	r1, #0
    afd0:	bf08      	it	eq
    afd2:	4613      	moveq	r3, r2
    afd4:	f840 3f04 	str.w	r3, [r0, #4]!
    afd8:	42b5      	cmp	r5, r6
    afda:	d1f4      	bne.n	afc6 <POINTonE2_dadd_affine+0x31a>
    afdc:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
    afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afe4:	0001ade8 	.word	0x0001ade8
    afe8:	fffcfffd 	.word	0xfffcfffd

0000afec <blst_p2_add_or_double_affine>:
    afec:	b508      	push	{r3, lr}
    afee:	f7ff fe5d 	bl	acac <POINTonE2_dadd_affine>
    aff2:	bd08      	pop	{r3, pc}

0000aff4 <POINTonE2_double>:
    aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aff8:	b0cb      	sub	sp, #300	; 0x12c
    affa:	4606      	mov	r6, r0
    affc:	460f      	mov	r7, r1
    affe:	f8df 81b4 	ldr.w	r8, [pc, #436]	; b1b4 <POINTonE2_double+0x1c0>
    b002:	4c6b      	ldr	r4, [pc, #428]	; (b1b0 <POINTonE2_double+0x1bc>)
    b004:	4643      	mov	r3, r8
    b006:	4622      	mov	r2, r4
    b008:	a832      	add	r0, sp, #200	; 0xc8
    b00a:	f7fe fac7 	bl	959c <sqr_mont_384x>
    b00e:	f107 0b60 	add.w	fp, r7, #96	; 0x60
    b012:	4643      	mov	r3, r8
    b014:	4622      	mov	r2, r4
    b016:	4659      	mov	r1, fp
    b018:	a81a      	add	r0, sp, #104	; 0x68
    b01a:	f7fe fabf 	bl	959c <sqr_mont_384x>
    b01e:	4643      	mov	r3, r8
    b020:	4622      	mov	r2, r4
    b022:	a91a      	add	r1, sp, #104	; 0x68
    b024:	a802      	add	r0, sp, #8
    b026:	f7fe fab9 	bl	959c <sqr_mont_384x>
    b02a:	250c      	movs	r5, #12
    b02c:	9500      	str	r5, [sp, #0]
    b02e:	4623      	mov	r3, r4
    b030:	463a      	mov	r2, r7
    b032:	a91a      	add	r1, sp, #104	; 0x68
    b034:	4608      	mov	r0, r1
    b036:	f7f6 f821 	bl	107c <add_mod_n>
    b03a:	9500      	str	r5, [sp, #0]
    b03c:	4623      	mov	r3, r4
    b03e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b042:	a926      	add	r1, sp, #152	; 0x98
    b044:	4608      	mov	r0, r1
    b046:	f7f6 f819 	bl	107c <add_mod_n>
    b04a:	4643      	mov	r3, r8
    b04c:	4622      	mov	r2, r4
    b04e:	a91a      	add	r1, sp, #104	; 0x68
    b050:	4608      	mov	r0, r1
    b052:	f7fe faa3 	bl	959c <sqr_mont_384x>
    b056:	9500      	str	r5, [sp, #0]
    b058:	4623      	mov	r3, r4
    b05a:	aa32      	add	r2, sp, #200	; 0xc8
    b05c:	a91a      	add	r1, sp, #104	; 0x68
    b05e:	4608      	mov	r0, r1
    b060:	f7f5 fb59 	bl	716 <sub_mod_n>
    b064:	9500      	str	r5, [sp, #0]
    b066:	4623      	mov	r3, r4
    b068:	aa3e      	add	r2, sp, #248	; 0xf8
    b06a:	a926      	add	r1, sp, #152	; 0x98
    b06c:	4608      	mov	r0, r1
    b06e:	f7f5 fb52 	bl	716 <sub_mod_n>
    b072:	9500      	str	r5, [sp, #0]
    b074:	4623      	mov	r3, r4
    b076:	aa02      	add	r2, sp, #8
    b078:	a91a      	add	r1, sp, #104	; 0x68
    b07a:	4608      	mov	r0, r1
    b07c:	f7f5 fb4b 	bl	716 <sub_mod_n>
    b080:	9500      	str	r5, [sp, #0]
    b082:	4623      	mov	r3, r4
    b084:	aa0e      	add	r2, sp, #56	; 0x38
    b086:	a926      	add	r1, sp, #152	; 0x98
    b088:	4608      	mov	r0, r1
    b08a:	f7f5 fb44 	bl	716 <sub_mod_n>
    b08e:	9500      	str	r5, [sp, #0]
    b090:	4623      	mov	r3, r4
    b092:	aa1a      	add	r2, sp, #104	; 0x68
    b094:	4611      	mov	r1, r2
    b096:	4610      	mov	r0, r2
    b098:	f7f5 fff0 	bl	107c <add_mod_n>
    b09c:	9500      	str	r5, [sp, #0]
    b09e:	4623      	mov	r3, r4
    b0a0:	aa26      	add	r2, sp, #152	; 0x98
    b0a2:	4611      	mov	r1, r2
    b0a4:	4610      	mov	r0, r2
    b0a6:	f7f5 ffe9 	bl	107c <add_mod_n>
    b0aa:	462b      	mov	r3, r5
    b0ac:	4622      	mov	r2, r4
    b0ae:	a932      	add	r1, sp, #200	; 0xc8
    b0b0:	4608      	mov	r0, r1
    b0b2:	f7f6 fc7d 	bl	19b0 <mul_by_3_mod_n>
    b0b6:	462b      	mov	r3, r5
    b0b8:	4622      	mov	r2, r4
    b0ba:	a93e      	add	r1, sp, #248	; 0xf8
    b0bc:	4608      	mov	r0, r1
    b0be:	f7f6 fc77 	bl	19b0 <mul_by_3_mod_n>
    b0c2:	4643      	mov	r3, r8
    b0c4:	4622      	mov	r2, r4
    b0c6:	a932      	add	r1, sp, #200	; 0xc8
    b0c8:	4630      	mov	r0, r6
    b0ca:	f7fe fa67 	bl	959c <sqr_mont_384x>
    b0ce:	9500      	str	r5, [sp, #0]
    b0d0:	4623      	mov	r3, r4
    b0d2:	aa1a      	add	r2, sp, #104	; 0x68
    b0d4:	4631      	mov	r1, r6
    b0d6:	4630      	mov	r0, r6
    b0d8:	f7f5 fb1d 	bl	716 <sub_mod_n>
    b0dc:	f106 0930 	add.w	r9, r6, #48	; 0x30
    b0e0:	9500      	str	r5, [sp, #0]
    b0e2:	4623      	mov	r3, r4
    b0e4:	aa26      	add	r2, sp, #152	; 0x98
    b0e6:	4649      	mov	r1, r9
    b0e8:	4648      	mov	r0, r9
    b0ea:	f7f5 fb14 	bl	716 <sub_mod_n>
    b0ee:	9500      	str	r5, [sp, #0]
    b0f0:	4623      	mov	r3, r4
    b0f2:	aa1a      	add	r2, sp, #104	; 0x68
    b0f4:	4631      	mov	r1, r6
    b0f6:	4630      	mov	r0, r6
    b0f8:	f7f5 fb0d 	bl	716 <sub_mod_n>
    b0fc:	9500      	str	r5, [sp, #0]
    b0fe:	4623      	mov	r3, r4
    b100:	aa26      	add	r2, sp, #152	; 0x98
    b102:	4649      	mov	r1, r9
    b104:	4648      	mov	r0, r9
    b106:	f7f5 fb06 	bl	716 <sub_mod_n>
    b10a:	f106 0ac0 	add.w	sl, r6, #192	; 0xc0
    b10e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    b112:	9500      	str	r5, [sp, #0]
    b114:	4623      	mov	r3, r4
    b116:	460a      	mov	r2, r1
    b118:	4650      	mov	r0, sl
    b11a:	f7f5 ffaf 	bl	107c <add_mod_n>
    b11e:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    b122:	9500      	str	r5, [sp, #0]
    b124:	4623      	mov	r3, r4
    b126:	460a      	mov	r2, r1
    b128:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
    b12c:	f7f5 ffa6 	bl	107c <add_mod_n>
    b130:	f8cd 8000 	str.w	r8, [sp]
    b134:	4623      	mov	r3, r4
    b136:	465a      	mov	r2, fp
    b138:	4651      	mov	r1, sl
    b13a:	4650      	mov	r0, sl
    b13c:	f7fa f832 	bl	51a4 <mul_mont_384x>
    b140:	9500      	str	r5, [sp, #0]
    b142:	4623      	mov	r3, r4
    b144:	2203      	movs	r2, #3
    b146:	a902      	add	r1, sp, #8
    b148:	4608      	mov	r0, r1
    b14a:	f7f7 f9ff 	bl	254c <lshift_mod_n>
    b14e:	9500      	str	r5, [sp, #0]
    b150:	4623      	mov	r3, r4
    b152:	2203      	movs	r2, #3
    b154:	a90e      	add	r1, sp, #56	; 0x38
    b156:	4608      	mov	r0, r1
    b158:	f7f7 f9f8 	bl	254c <lshift_mod_n>
    b15c:	f106 0760 	add.w	r7, r6, #96	; 0x60
    b160:	9500      	str	r5, [sp, #0]
    b162:	4623      	mov	r3, r4
    b164:	4632      	mov	r2, r6
    b166:	a91a      	add	r1, sp, #104	; 0x68
    b168:	4638      	mov	r0, r7
    b16a:	f7f5 fad4 	bl	716 <sub_mod_n>
    b16e:	3690      	adds	r6, #144	; 0x90
    b170:	9500      	str	r5, [sp, #0]
    b172:	4623      	mov	r3, r4
    b174:	464a      	mov	r2, r9
    b176:	a926      	add	r1, sp, #152	; 0x98
    b178:	4630      	mov	r0, r6
    b17a:	f7f5 facc 	bl	716 <sub_mod_n>
    b17e:	f8cd 8000 	str.w	r8, [sp]
    b182:	4623      	mov	r3, r4
    b184:	aa32      	add	r2, sp, #200	; 0xc8
    b186:	4639      	mov	r1, r7
    b188:	4638      	mov	r0, r7
    b18a:	f7fa f80b 	bl	51a4 <mul_mont_384x>
    b18e:	9500      	str	r5, [sp, #0]
    b190:	4623      	mov	r3, r4
    b192:	aa02      	add	r2, sp, #8
    b194:	4639      	mov	r1, r7
    b196:	4638      	mov	r0, r7
    b198:	f7f5 fabd 	bl	716 <sub_mod_n>
    b19c:	9500      	str	r5, [sp, #0]
    b19e:	4623      	mov	r3, r4
    b1a0:	aa0e      	add	r2, sp, #56	; 0x38
    b1a2:	4631      	mov	r1, r6
    b1a4:	4630      	mov	r0, r6
    b1a6:	f7f5 fab6 	bl	716 <sub_mod_n>
    b1aa:	b04b      	add	sp, #300	; 0x12c
    b1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1b0:	0001ade8 	.word	0x0001ade8
    b1b4:	fffcfffd 	.word	0xfffcfffd

0000b1b8 <blst_p2_double>:
    b1b8:	b508      	push	{r3, lr}
    b1ba:	f7ff ff1b 	bl	aff4 <POINTonE2_double>
    b1be:	bd08      	pop	{r3, pc}

0000b1c0 <POINTonE2_precompute_w5>:
    b1c0:	b570      	push	{r4, r5, r6, lr}
    b1c2:	4606      	mov	r6, r0
    b1c4:	1f0b      	subs	r3, r1, #4
    b1c6:	1f02      	subs	r2, r0, #4
    b1c8:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    b1cc:	f853 4f04 	ldr.w	r4, [r3, #4]!
    b1d0:	f842 4f04 	str.w	r4, [r2, #4]!
    b1d4:	4283      	cmp	r3, r0
    b1d6:	d1f9      	bne.n	b1cc <POINTonE2_precompute_w5+0xc>
    b1d8:	f506 7090 	add.w	r0, r6, #288	; 0x120
    b1dc:	f7ff ff0a 	bl	aff4 <POINTonE2_double>
    b1e0:	f506 7510 	add.w	r5, r6, #576	; 0x240
    b1e4:	4634      	mov	r4, r6
    b1e6:	f506 66fc 	add.w	r6, r6, #2016	; 0x7e0
    b1ea:	4622      	mov	r2, r4
    b1ec:	f504 7490 	add.w	r4, r4, #288	; 0x120
    b1f0:	4621      	mov	r1, r4
    b1f2:	4628      	mov	r0, r5
    b1f4:	f7fe fff8 	bl	a1e8 <POINTonE2_add>
    b1f8:	4621      	mov	r1, r4
    b1fa:	f505 7090 	add.w	r0, r5, #288	; 0x120
    b1fe:	f7ff fef9 	bl	aff4 <POINTonE2_double>
    b202:	f505 7510 	add.w	r5, r5, #576	; 0x240
    b206:	42b4      	cmp	r4, r6
    b208:	d1ef      	bne.n	b1ea <POINTonE2_precompute_w5+0x2a>
    b20a:	bd70      	pop	{r4, r5, r6, pc}

0000b20c <POINTonE2s_mult_w5>:
    b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b210:	b0cd      	sub	sp, #308	; 0x134
    b212:	af00      	add	r7, sp, #0
    b214:	4605      	mov	r5, r0
    b216:	4688      	mov	r8, r1
    b218:	607a      	str	r2, [r7, #4]
    b21a:	603b      	str	r3, [r7, #0]
    b21c:	f8d7 4158 	ldr.w	r4, [r7, #344]	; 0x158
    b220:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
    b224:	b16b      	cbz	r3, b242 <POINTonE2s_mult_w5+0x36>
    b226:	f1b8 0f00 	cmp.w	r8, #0
    b22a:	d025      	beq.n	b278 <POINTonE2s_mult_w5+0x6c>
    b22c:	687b      	ldr	r3, [r7, #4]
    b22e:	b31b      	cbz	r3, b278 <POINTonE2s_mult_w5+0x6c>
    b230:	f8d7 615c 	ldr.w	r6, [r7, #348]	; 0x15c
    b234:	eb03 0ac3 	add.w	sl, r3, r3, lsl #3
    b238:	eb06 2a4a 	add.w	sl, r6, sl, lsl #9
    b23c:	f04f 0900 	mov.w	r9, #0
    b240:	e012      	b.n	b268 <POINTonE2s_mult_w5+0x5c>
    b242:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    b246:	466a      	mov	r2, sp
    b248:	eba2 2343 	sub.w	r3, r2, r3, lsl #9
    b24c:	469d      	mov	sp, r3
    b24e:	f8c7 d15c 	str.w	sp, [r7, #348]	; 0x15c
    b252:	e7e8      	b.n	b226 <POINTonE2s_mult_w5+0x1a>
    b254:	f509 7990 	add.w	r9, r9, #288	; 0x120
    b258:	4649      	mov	r1, r9
    b25a:	4630      	mov	r0, r6
    b25c:	f7ff ffb0 	bl	b1c0 <POINTonE2_precompute_w5>
    b260:	f506 5690 	add.w	r6, r6, #4608	; 0x1200
    b264:	4556      	cmp	r6, sl
    b266:	d007      	beq.n	b278 <POINTonE2s_mult_w5+0x6c>
    b268:	f8d8 3000 	ldr.w	r3, [r8]
    b26c:	2b00      	cmp	r3, #0
    b26e:	d0f1      	beq.n	b254 <POINTonE2s_mult_w5+0x48>
    b270:	f108 0804 	add.w	r8, r8, #4
    b274:	4699      	mov	r9, r3
    b276:	e7ef      	b.n	b258 <POINTonE2s_mult_w5+0x4c>
    b278:	1de3      	adds	r3, r4, #7
    b27a:	08db      	lsrs	r3, r3, #3
    b27c:	60bb      	str	r3, [r7, #8]
    b27e:	f8d7 8000 	ldr.w	r8, [r7]
    b282:	f858 6b04 	ldr.w	r6, [r8], #4
    b286:	4b61      	ldr	r3, [pc, #388]	; (b40c <POINTonE2s_mult_w5+0x200>)
    b288:	fba3 2304 	umull	r2, r3, r3, r4
    b28c:	f023 0a03 	bic.w	sl, r3, #3
    b290:	eb0a 0393 	add.w	r3, sl, r3, lsr #2
    b294:	eba4 0a03 	sub.w	sl, r4, r3
    b298:	f10a 0201 	add.w	r2, sl, #1
    b29c:	f04f 0b01 	mov.w	fp, #1
    b2a0:	fa0b fb02 	lsl.w	fp, fp, r2
    b2a4:	f10b 3bff 	add.w	fp, fp, #4294967295
    b2a8:	ebb4 040a 	subs.w	r4, r4, sl
    b2ac:	d01b      	beq.n	b2e6 <POINTonE2s_mult_w5+0xda>
    b2ae:	f104 39ff 	add.w	r9, r4, #4294967295
    b2b2:	4649      	mov	r1, r9
    b2b4:	4630      	mov	r0, r6
    b2b6:	f7f5 f9e3 	bl	680 <get_wval>
    b2ba:	2105      	movs	r1, #5
    b2bc:	ea00 000b 	and.w	r0, r0, fp
    b2c0:	f7f5 fa07 	bl	6d2 <booth_encode>
    b2c4:	4602      	mov	r2, r0
    b2c6:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
    b2ca:	4628      	mov	r0, r5
    b2cc:	f7f8 fc7a 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b2d0:	687b      	ldr	r3, [r7, #4]
    b2d2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    b2d6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
    b2da:	eb02 2243 	add.w	r2, r2, r3, lsl #9
    b2de:	2401      	movs	r4, #1
    b2e0:	4653      	mov	r3, sl
    b2e2:	4692      	mov	sl, r2
    b2e4:	e046      	b.n	b374 <POINTonE2s_mult_w5+0x168>
    b2e6:	7830      	ldrb	r0, [r6, #0]
    b2e8:	2105      	movs	r1, #5
    b2ea:	ea0b 0040 	and.w	r0, fp, r0, lsl #1
    b2ee:	f7f5 f9f0 	bl	6d2 <booth_encode>
    b2f2:	4602      	mov	r2, r0
    b2f4:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
    b2f8:	4628      	mov	r0, r5
    b2fa:	f7f8 fc63 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b2fe:	f8c7 8000 	str.w	r8, [r7]
    b302:	2401      	movs	r4, #1
    b304:	e044      	b.n	b390 <POINTonE2s_mult_w5+0x184>
    b306:	68bb      	ldr	r3, [r7, #8]
    b308:	441e      	add	r6, r3
    b30a:	68fa      	ldr	r2, [r7, #12]
    b30c:	4649      	mov	r1, r9
    b30e:	4630      	mov	r0, r6
    b310:	f7f5 f9b6 	bl	680 <get_wval>
    b314:	2105      	movs	r1, #5
    b316:	ea00 000b 	and.w	r0, r0, fp
    b31a:	f7f5 f9da 	bl	6d2 <booth_encode>
    b31e:	4602      	mov	r2, r0
    b320:	4621      	mov	r1, r4
    b322:	f107 0010 	add.w	r0, r7, #16
    b326:	f7f8 fc4d 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b32a:	2300      	movs	r3, #0
    b32c:	f107 0210 	add.w	r2, r7, #16
    b330:	4629      	mov	r1, r5
    b332:	4628      	mov	r0, r5
    b334:	f7ff f8e4 	bl	a500 <POINTonE2_dadd>
    b338:	f504 5490 	add.w	r4, r4, #4608	; 0x1200
    b33c:	45a2      	cmp	sl, r4
    b33e:	d007      	beq.n	b350 <POINTonE2s_mult_w5+0x144>
    b340:	f8d8 3000 	ldr.w	r3, [r8]
    b344:	2b00      	cmp	r3, #0
    b346:	d0de      	beq.n	b306 <POINTonE2s_mult_w5+0xfa>
    b348:	f108 0804 	add.w	r8, r8, #4
    b34c:	461e      	mov	r6, r3
    b34e:	e7dc      	b.n	b30a <POINTonE2s_mult_w5+0xfe>
    b350:	2405      	movs	r4, #5
    b352:	4629      	mov	r1, r5
    b354:	4628      	mov	r0, r5
    b356:	f7ff fe4d 	bl	aff4 <POINTonE2_double>
    b35a:	3c01      	subs	r4, #1
    b35c:	d1f9      	bne.n	b352 <POINTonE2s_mult_w5+0x146>
    b35e:	f1a9 0205 	sub.w	r2, r9, #5
    b362:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
    b366:	2305      	movs	r3, #5
    b368:	f1b9 0f04 	cmp.w	r9, #4
    b36c:	d00e      	beq.n	b38c <POINTonE2s_mult_w5+0x180>
    b36e:	4691      	mov	r9, r2
    b370:	f8d7 8000 	ldr.w	r8, [r7]
    b374:	687a      	ldr	r2, [r7, #4]
    b376:	42a2      	cmp	r2, r4
    b378:	d9ea      	bls.n	b350 <POINTonE2s_mult_w5+0x144>
    b37a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    b37e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
    b382:	eb02 2444 	add.w	r4, r2, r4, lsl #9
    b386:	3301      	adds	r3, #1
    b388:	60fb      	str	r3, [r7, #12]
    b38a:	e7d9      	b.n	b340 <POINTonE2s_mult_w5+0x134>
    b38c:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
    b390:	687b      	ldr	r3, [r7, #4]
    b392:	42a3      	cmp	r3, r4
    b394:	d934      	bls.n	b400 <POINTonE2s_mult_w5+0x1f4>
    b396:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    b39a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
    b39e:	eb02 2444 	add.w	r4, r2, r4, lsl #9
    b3a2:	eb03 08c3 	add.w	r8, r3, r3, lsl #3
    b3a6:	eb02 2848 	add.w	r8, r2, r8, lsl #9
    b3aa:	f04f 0a05 	mov.w	sl, #5
    b3ae:	f04f 0900 	mov.w	r9, #0
    b3b2:	f8c7 800c 	str.w	r8, [r7, #12]
    b3b6:	f8d7 8000 	ldr.w	r8, [r7]
    b3ba:	e019      	b.n	b3f0 <POINTonE2s_mult_w5+0x1e4>
    b3bc:	68bb      	ldr	r3, [r7, #8]
    b3be:	441e      	add	r6, r3
    b3c0:	7830      	ldrb	r0, [r6, #0]
    b3c2:	4651      	mov	r1, sl
    b3c4:	ea0b 0040 	and.w	r0, fp, r0, lsl #1
    b3c8:	f7f5 f983 	bl	6d2 <booth_encode>
    b3cc:	4602      	mov	r2, r0
    b3ce:	4621      	mov	r1, r4
    b3d0:	f107 0010 	add.w	r0, r7, #16
    b3d4:	f7f8 fbf6 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b3d8:	464b      	mov	r3, r9
    b3da:	f107 0210 	add.w	r2, r7, #16
    b3de:	4629      	mov	r1, r5
    b3e0:	4628      	mov	r0, r5
    b3e2:	f7ff f88d 	bl	a500 <POINTonE2_dadd>
    b3e6:	f504 5490 	add.w	r4, r4, #4608	; 0x1200
    b3ea:	68fb      	ldr	r3, [r7, #12]
    b3ec:	42a3      	cmp	r3, r4
    b3ee:	d007      	beq.n	b400 <POINTonE2s_mult_w5+0x1f4>
    b3f0:	f8d8 3000 	ldr.w	r3, [r8]
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d0e1      	beq.n	b3bc <POINTonE2s_mult_w5+0x1b0>
    b3f8:	f108 0804 	add.w	r8, r8, #4
    b3fc:	461e      	mov	r6, r3
    b3fe:	e7df      	b.n	b3c0 <POINTonE2s_mult_w5+0x1b4>
    b400:	f507 779a 	add.w	r7, r7, #308	; 0x134
    b404:	46bd      	mov	sp, r7
    b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b40a:	bf00      	nop
    b40c:	cccccccd 	.word	0xcccccccd

0000b410 <POINTonE2_mult_gls>:
    b410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b414:	f5ad 4d90 	sub.w	sp, sp, #18432	; 0x4800
    b418:	b08d      	sub	sp, #52	; 0x34
    b41a:	4607      	mov	r7, r0
    b41c:	460e      	mov	r6, r1
    b41e:	f102 0420 	add.w	r4, r2, #32
    b422:	2000      	movs	r0, #0
    b424:	43d1      	mvns	r1, r2
    b426:	190b      	adds	r3, r1, r4
    b428:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
    b42c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    b430:	f023 0303 	bic.w	r3, r3, #3
    b434:	f50d 4590 	add.w	r5, sp, #18432	; 0x4800
    b438:	3530      	adds	r5, #48	; 0x30
    b43a:	442b      	add	r3, r5
    b43c:	f843 0c20 	str.w	r0, [r3, #-32]
    b440:	42a2      	cmp	r2, r4
    b442:	d1f0      	bne.n	b426 <POINTonE2_mult_gls+0x16>
    b444:	f50d 4490 	add.w	r4, sp, #18432	; 0x4800
    b448:	3410      	adds	r4, #16
    b44a:	4620      	mov	r0, r4
    b44c:	f7fc ff8c 	bl	8368 <div_by_zz>
    b450:	4620      	mov	r0, r4
    b452:	f7fd f971 	bl	8738 <div_by_z>
    b456:	f50d 4090 	add.w	r0, sp, #18432	; 0x4800
    b45a:	3020      	adds	r0, #32
    b45c:	f7fd f96c 	bl	8738 <div_by_z>
    b460:	9402      	str	r4, [sp, #8]
    b462:	2300      	movs	r3, #0
    b464:	9303      	str	r3, [sp, #12]
    b466:	4631      	mov	r1, r6
    b468:	a804      	add	r0, sp, #16
    b46a:	f7ff fea9 	bl	b1c0 <POINTonE2_precompute_w5>
    b46e:	ab0c      	add	r3, sp, #48	; 0x30
    b470:	f503 548f 	add.w	r4, r3, #4576	; 0x11e0
    b474:	ab04      	add	r3, sp, #16
    b476:	f503 5910 	add.w	r9, r3, #9216	; 0x2400
    b47a:	f04f 0801 	mov.w	r8, #1
    b47e:	f5a4 5190 	sub.w	r1, r4, #4608	; 0x1200
    b482:	4620      	mov	r0, r4
    b484:	f7f9 fedc 	bl	5240 <psi>
    b488:	f504 5690 	add.w	r6, r4, #4608	; 0x1200
    b48c:	4621      	mov	r1, r4
    b48e:	4630      	mov	r0, r6
    b490:	f7f9 fed6 	bl	5240 <psi>
    b494:	f504 5510 	add.w	r5, r4, #9216	; 0x2400
    b498:	4631      	mov	r1, r6
    b49a:	4628      	mov	r0, r5
    b49c:	f7f9 fed0 	bl	5240 <psi>
    b4a0:	4641      	mov	r1, r8
    b4a2:	4620      	mov	r0, r4
    b4a4:	f7f8 fb74 	bl	3b90 <POINTonE2_cneg>
    b4a8:	4641      	mov	r1, r8
    b4aa:	4628      	mov	r0, r5
    b4ac:	f7f8 fb70 	bl	3b90 <POINTonE2_cneg>
    b4b0:	f504 7490 	add.w	r4, r4, #288	; 0x120
    b4b4:	454c      	cmp	r4, r9
    b4b6:	d1e2      	bne.n	b47e <POINTonE2_mult_gls+0x6e>
    b4b8:	ab04      	add	r3, sp, #16
    b4ba:	9301      	str	r3, [sp, #4]
    b4bc:	2340      	movs	r3, #64	; 0x40
    b4be:	9300      	str	r3, [sp, #0]
    b4c0:	ab02      	add	r3, sp, #8
    b4c2:	2204      	movs	r2, #4
    b4c4:	2100      	movs	r1, #0
    b4c6:	4638      	mov	r0, r7
    b4c8:	f7ff fea0 	bl	b20c <POINTonE2s_mult_w5>
    b4cc:	2300      	movs	r3, #0
    b4ce:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b4d2:	3210      	adds	r2, #16
    b4d4:	6013      	str	r3, [r2, #0]
    b4d6:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b4da:	3214      	adds	r2, #20
    b4dc:	6013      	str	r3, [r2, #0]
    b4de:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b4e2:	3218      	adds	r2, #24
    b4e4:	6013      	str	r3, [r2, #0]
    b4e6:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b4ea:	321c      	adds	r2, #28
    b4ec:	6013      	str	r3, [r2, #0]
    b4ee:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b4f2:	3220      	adds	r2, #32
    b4f4:	6013      	str	r3, [r2, #0]
    b4f6:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b4fa:	3224      	adds	r2, #36	; 0x24
    b4fc:	6013      	str	r3, [r2, #0]
    b4fe:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b502:	3228      	adds	r2, #40	; 0x28
    b504:	6013      	str	r3, [r2, #0]
    b506:	f50d 4290 	add.w	r2, sp, #18432	; 0x4800
    b50a:	322c      	adds	r2, #44	; 0x2c
    b50c:	6013      	str	r3, [r2, #0]
    b50e:	f50d 4390 	add.w	r3, sp, #18432	; 0x4800
    b512:	3310      	adds	r3, #16
    b514:	f50d 4d90 	add.w	sp, sp, #18432	; 0x4800
    b518:	b00d      	add	sp, #52	; 0x34
    b51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b51e <POINTonE2_mult_w4>:
    b51e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b522:	f6ad 2d24 	subw	sp, sp, #2596	; 0xa24
    b526:	4605      	mov	r5, r0
    b528:	4690      	mov	r8, r2
    b52a:	461e      	mov	r6, r3
    b52c:	1f0c      	subs	r4, r1, #4
    b52e:	4668      	mov	r0, sp
    b530:	aa48      	add	r2, sp, #288	; 0x120
    b532:	f854 7f04 	ldr.w	r7, [r4, #4]!
    b536:	f840 7b04 	str.w	r7, [r0], #4
    b53a:	4282      	cmp	r2, r0
    b53c:	d1f9      	bne.n	b532 <POINTonE2_mult_w4+0x14>
    b53e:	a848      	add	r0, sp, #288	; 0x120
    b540:	f7ff fd58 	bl	aff4 <POINTonE2_double>
    b544:	466a      	mov	r2, sp
    b546:	a948      	add	r1, sp, #288	; 0x120
    b548:	a890      	add	r0, sp, #576	; 0x240
    b54a:	f7fe fe4d 	bl	a1e8 <POINTonE2_add>
    b54e:	a948      	add	r1, sp, #288	; 0x120
    b550:	a8d8      	add	r0, sp, #864	; 0x360
    b552:	f7ff fd4f 	bl	aff4 <POINTonE2_double>
    b556:	aa48      	add	r2, sp, #288	; 0x120
    b558:	a990      	add	r1, sp, #576	; 0x240
    b55a:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    b55e:	f7fe fe43 	bl	a1e8 <POINTonE2_add>
    b562:	a990      	add	r1, sp, #576	; 0x240
    b564:	f50d 60b4 	add.w	r0, sp, #1440	; 0x5a0
    b568:	f7ff fd44 	bl	aff4 <POINTonE2_double>
    b56c:	aa90      	add	r2, sp, #576	; 0x240
    b56e:	a9d8      	add	r1, sp, #864	; 0x360
    b570:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
    b574:	f7fe fe38 	bl	a1e8 <POINTonE2_add>
    b578:	a9d8      	add	r1, sp, #864	; 0x360
    b57a:	f50d 60fc 	add.w	r0, sp, #2016	; 0x7e0
    b57e:	f7ff fd39 	bl	aff4 <POINTonE2_double>
    b582:	f006 0303 	and.w	r3, r6, #3
    b586:	1c5c      	adds	r4, r3, #1
    b588:	1af6      	subs	r6, r6, r3
    b58a:	d035      	beq.n	b5f8 <POINTonE2_mult_w4+0xda>
    b58c:	4622      	mov	r2, r4
    b58e:	1e71      	subs	r1, r6, #1
    b590:	4640      	mov	r0, r8
    b592:	f7f5 f875 	bl	680 <get_wval>
    b596:	f04f 33ff 	mov.w	r3, #4294967295
    b59a:	40a3      	lsls	r3, r4
    b59c:	2104      	movs	r1, #4
    b59e:	ea20 0003 	bic.w	r0, r0, r3
    b5a2:	f7f5 f896 	bl	6d2 <booth_encode>
    b5a6:	4602      	mov	r2, r0
    b5a8:	4669      	mov	r1, sp
    b5aa:	4628      	mov	r0, r5
    b5ac:	f7f8 fb3a 	bl	3c24 <POINTonE2_gather_booth_w4>
    b5b0:	f04f 0905 	mov.w	r9, #5
    b5b4:	2704      	movs	r7, #4
    b5b6:	2404      	movs	r4, #4
    b5b8:	4629      	mov	r1, r5
    b5ba:	4628      	mov	r0, r5
    b5bc:	f7ff fd1a 	bl	aff4 <POINTonE2_double>
    b5c0:	3c01      	subs	r4, #1
    b5c2:	d1f9      	bne.n	b5b8 <POINTonE2_mult_w4+0x9a>
    b5c4:	1f34      	subs	r4, r6, #4
    b5c6:	d028      	beq.n	b61a <POINTonE2_mult_w4+0xfc>
    b5c8:	464a      	mov	r2, r9
    b5ca:	1f71      	subs	r1, r6, #5
    b5cc:	4640      	mov	r0, r8
    b5ce:	f7f5 f857 	bl	680 <get_wval>
    b5d2:	4639      	mov	r1, r7
    b5d4:	f000 001f 	and.w	r0, r0, #31
    b5d8:	f7f5 f87b 	bl	6d2 <booth_encode>
    b5dc:	4602      	mov	r2, r0
    b5de:	4669      	mov	r1, sp
    b5e0:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    b5e4:	f7f8 fb1e 	bl	3c24 <POINTonE2_gather_booth_w4>
    b5e8:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    b5ec:	4629      	mov	r1, r5
    b5ee:	4628      	mov	r0, r5
    b5f0:	f7fe fdfa 	bl	a1e8 <POINTonE2_add>
    b5f4:	4626      	mov	r6, r4
    b5f6:	e7de      	b.n	b5b6 <POINTonE2_mult_w4+0x98>
    b5f8:	f898 0000 	ldrb.w	r0, [r8]
    b5fc:	f04f 33ff 	mov.w	r3, #4294967295
    b600:	40a3      	lsls	r3, r4
    b602:	43db      	mvns	r3, r3
    b604:	2104      	movs	r1, #4
    b606:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    b60a:	f7f5 f862 	bl	6d2 <booth_encode>
    b60e:	4602      	mov	r2, r0
    b610:	4669      	mov	r1, sp
    b612:	4628      	mov	r0, r5
    b614:	f7f8 fb06 	bl	3c24 <POINTonE2_gather_booth_w4>
    b618:	e014      	b.n	b644 <POINTonE2_mult_w4+0x126>
    b61a:	f898 0000 	ldrb.w	r0, [r8]
    b61e:	0040      	lsls	r0, r0, #1
    b620:	2104      	movs	r1, #4
    b622:	f000 001e 	and.w	r0, r0, #30
    b626:	f7f5 f854 	bl	6d2 <booth_encode>
    b62a:	4602      	mov	r2, r0
    b62c:	4669      	mov	r1, sp
    b62e:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    b632:	f7f8 faf7 	bl	3c24 <POINTonE2_gather_booth_w4>
    b636:	2300      	movs	r3, #0
    b638:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    b63c:	4629      	mov	r1, r5
    b63e:	4628      	mov	r0, r5
    b640:	f7fe ff5e 	bl	a500 <POINTonE2_dadd>
    b644:	f60d 2d24 	addw	sp, sp, #2596	; 0xa24
    b648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b64c <blst_p2_unchecked_mult>:
    b64c:	b943      	cbnz	r3, b660 <blst_p2_unchecked_mult+0x14>
    b64e:	4603      	mov	r3, r0
    b650:	f500 7190 	add.w	r1, r0, #288	; 0x120
    b654:	2200      	movs	r2, #0
    b656:	f843 2b04 	str.w	r2, [r3], #4
    b65a:	428b      	cmp	r3, r1
    b65c:	d1fb      	bne.n	b656 <blst_p2_unchecked_mult+0xa>
    b65e:	4770      	bx	lr
    b660:	b510      	push	{r4, lr}
    b662:	f7ff ff5c 	bl	b51e <POINTonE2_mult_w4>
    b666:	bd10      	pop	{r4, pc}

0000b668 <POINTonE2_mult_w5>:
    b668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b66c:	f5ad 5d99 	sub.w	sp, sp, #4896	; 0x1320
    b670:	b081      	sub	sp, #4
    b672:	4605      	mov	r5, r0
    b674:	4617      	mov	r7, r2
    b676:	461e      	mov	r6, r3
    b678:	4668      	mov	r0, sp
    b67a:	f7ff fda1 	bl	b1c0 <POINTonE2_precompute_w5>
    b67e:	4b35      	ldr	r3, [pc, #212]	; (b754 <POINTonE2_mult_w5+0xec>)
    b680:	fba3 2306 	umull	r2, r3, r3, r6
    b684:	f023 0203 	bic.w	r2, r3, #3
    b688:	eb02 0293 	add.w	r2, r2, r3, lsr #2
    b68c:	1ab2      	subs	r2, r6, r2
    b68e:	1c54      	adds	r4, r2, #1
    b690:	1ab6      	subs	r6, r6, r2
    b692:	d036      	beq.n	b702 <POINTonE2_mult_w5+0x9a>
    b694:	4622      	mov	r2, r4
    b696:	1e71      	subs	r1, r6, #1
    b698:	4638      	mov	r0, r7
    b69a:	f7f4 fff1 	bl	680 <get_wval>
    b69e:	f04f 33ff 	mov.w	r3, #4294967295
    b6a2:	40a3      	lsls	r3, r4
    b6a4:	2105      	movs	r1, #5
    b6a6:	ea20 0003 	bic.w	r0, r0, r3
    b6aa:	f7f5 f812 	bl	6d2 <booth_encode>
    b6ae:	4602      	mov	r2, r0
    b6b0:	4669      	mov	r1, sp
    b6b2:	4628      	mov	r0, r5
    b6b4:	f7f8 fa86 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b6b8:	f04f 0906 	mov.w	r9, #6
    b6bc:	f04f 0805 	mov.w	r8, #5
    b6c0:	2405      	movs	r4, #5
    b6c2:	4629      	mov	r1, r5
    b6c4:	4628      	mov	r0, r5
    b6c6:	f7ff fc95 	bl	aff4 <POINTonE2_double>
    b6ca:	3c01      	subs	r4, #1
    b6cc:	d1f9      	bne.n	b6c2 <POINTonE2_mult_w5+0x5a>
    b6ce:	1f74      	subs	r4, r6, #5
    b6d0:	d027      	beq.n	b722 <POINTonE2_mult_w5+0xba>
    b6d2:	464a      	mov	r2, r9
    b6d4:	1fb1      	subs	r1, r6, #6
    b6d6:	4638      	mov	r0, r7
    b6d8:	f7f4 ffd2 	bl	680 <get_wval>
    b6dc:	4641      	mov	r1, r8
    b6de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b6e2:	f7f4 fff6 	bl	6d2 <booth_encode>
    b6e6:	4602      	mov	r2, r0
    b6e8:	4669      	mov	r1, sp
    b6ea:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
    b6ee:	f7f8 fa69 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b6f2:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    b6f6:	4629      	mov	r1, r5
    b6f8:	4628      	mov	r0, r5
    b6fa:	f7fe fd75 	bl	a1e8 <POINTonE2_add>
    b6fe:	4626      	mov	r6, r4
    b700:	e7de      	b.n	b6c0 <POINTonE2_mult_w5+0x58>
    b702:	7838      	ldrb	r0, [r7, #0]
    b704:	f04f 33ff 	mov.w	r3, #4294967295
    b708:	40a3      	lsls	r3, r4
    b70a:	43db      	mvns	r3, r3
    b70c:	2105      	movs	r1, #5
    b70e:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    b712:	f7f4 ffde 	bl	6d2 <booth_encode>
    b716:	4602      	mov	r2, r0
    b718:	4669      	mov	r1, sp
    b71a:	4628      	mov	r0, r5
    b71c:	f7f8 fa52 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b720:	e013      	b.n	b74a <POINTonE2_mult_w5+0xe2>
    b722:	7838      	ldrb	r0, [r7, #0]
    b724:	0040      	lsls	r0, r0, #1
    b726:	2105      	movs	r1, #5
    b728:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    b72c:	f7f4 ffd1 	bl	6d2 <booth_encode>
    b730:	4602      	mov	r2, r0
    b732:	4669      	mov	r1, sp
    b734:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
    b738:	f7f8 fa44 	bl	3bc4 <POINTonE2_gather_booth_w5>
    b73c:	2300      	movs	r3, #0
    b73e:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    b742:	4629      	mov	r1, r5
    b744:	4628      	mov	r0, r5
    b746:	f7fe fedb 	bl	a500 <POINTonE2_dadd>
    b74a:	f50d 5d99 	add.w	sp, sp, #4896	; 0x1320
    b74e:	b001      	add	sp, #4
    b750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b754:	cccccccd 	.word	0xcccccccd

0000b758 <blst_p2_mult>:
    b758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b75c:	b089      	sub	sp, #36	; 0x24
    b75e:	4607      	mov	r7, r0
    b760:	4688      	mov	r8, r1
    b762:	4615      	mov	r5, r2
    b764:	461e      	mov	r6, r3
    b766:	2b8f      	cmp	r3, #143	; 0x8f
    b768:	d80e      	bhi.n	b788 <blst_p2_mult+0x30>
    b76a:	b953      	cbnz	r3, b782 <blst_p2_mult+0x2a>
    b76c:	4603      	mov	r3, r0
    b76e:	f500 7190 	add.w	r1, r0, #288	; 0x120
    b772:	2200      	movs	r2, #0
    b774:	f843 2b04 	str.w	r2, [r3], #4
    b778:	428b      	cmp	r3, r1
    b77a:	d1fb      	bne.n	b774 <blst_p2_mult+0x1c>
    b77c:	b009      	add	sp, #36	; 0x24
    b77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b782:	f7ff fecc 	bl	b51e <POINTonE2_mult_w4>
    b786:	e7f9      	b.n	b77c <blst_p2_mult+0x24>
    b788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b78c:	d836      	bhi.n	b7fc <blst_p2_mult+0xa4>
    b78e:	1dd8      	adds	r0, r3, #7
    b790:	08c0      	lsrs	r0, r0, #3
    b792:	f10d 33ff 	add.w	r3, sp, #4294967295
    b796:	46ee      	mov	lr, sp
    b798:	f10d 0c1f 	add.w	ip, sp, #31
    b79c:	f04f 39ff 	mov.w	r9, #4294967295
    b7a0:	2100      	movs	r1, #0
    b7a2:	461c      	mov	r4, r3
    b7a4:	5c6a      	ldrb	r2, [r5, r1]
    b7a6:	ea02 0209 	and.w	r2, r2, r9
    b7aa:	f803 2f01 	strb.w	r2, [r3, #1]!
    b7ae:	3402      	adds	r4, #2
    b7b0:	eba4 040e 	sub.w	r4, r4, lr
    b7b4:	1a24      	subs	r4, r4, r0
    b7b6:	ea4f 79e4 	mov.w	r9, r4, asr #31
    b7ba:	eb01 71d4 	add.w	r1, r1, r4, lsr #31
    b7be:	459c      	cmp	ip, r3
    b7c0:	d1ef      	bne.n	b7a2 <blst_p2_mult+0x4a>
    b7c2:	2208      	movs	r2, #8
    b7c4:	490f      	ldr	r1, [pc, #60]	; (b804 <blst_p2_mult+0xac>)
    b7c6:	4668      	mov	r0, sp
    b7c8:	f7f4 ffdb 	bl	782 <check_mod_n>
    b7cc:	b178      	cbz	r0, b7ee <blst_p2_mult+0x96>
    b7ce:	466a      	mov	r2, sp
    b7d0:	4641      	mov	r1, r8
    b7d2:	4638      	mov	r0, r7
    b7d4:	f7ff fe1c 	bl	b410 <POINTonE2_mult_gls>
    b7d8:	2300      	movs	r3, #0
    b7da:	9300      	str	r3, [sp, #0]
    b7dc:	9301      	str	r3, [sp, #4]
    b7de:	9302      	str	r3, [sp, #8]
    b7e0:	9303      	str	r3, [sp, #12]
    b7e2:	9304      	str	r3, [sp, #16]
    b7e4:	9305      	str	r3, [sp, #20]
    b7e6:	9306      	str	r3, [sp, #24]
    b7e8:	9307      	str	r3, [sp, #28]
    b7ea:	466b      	mov	r3, sp
    b7ec:	e7c6      	b.n	b77c <blst_p2_mult+0x24>
    b7ee:	4633      	mov	r3, r6
    b7f0:	462a      	mov	r2, r5
    b7f2:	4641      	mov	r1, r8
    b7f4:	4638      	mov	r0, r7
    b7f6:	f7ff ff37 	bl	b668 <POINTonE2_mult_w5>
    b7fa:	e7ed      	b.n	b7d8 <blst_p2_mult+0x80>
    b7fc:	f7ff ff34 	bl	b668 <POINTonE2_mult_w5>
    b800:	e7bc      	b.n	b77c <blst_p2_mult+0x24>
    b802:	bf00      	nop
    b804:	0001bbe8 	.word	0x0001bbe8

0000b808 <POINTonE2_add_n_dbl>:
    b808:	b570      	push	{r4, r5, r6, lr}
    b80a:	4605      	mov	r5, r0
    b80c:	4616      	mov	r6, r2
    b80e:	2300      	movs	r3, #0
    b810:	460a      	mov	r2, r1
    b812:	4601      	mov	r1, r0
    b814:	f7fe fe74 	bl	a500 <POINTonE2_dadd>
    b818:	1e74      	subs	r4, r6, #1
    b81a:	b13e      	cbz	r6, b82c <POINTonE2_add_n_dbl+0x24>
    b81c:	4629      	mov	r1, r5
    b81e:	4628      	mov	r0, r5
    b820:	f7ff fbe8 	bl	aff4 <POINTonE2_double>
    b824:	3c01      	subs	r4, #1
    b826:	f1b4 3fff 	cmp.w	r4, #4294967295
    b82a:	d1f7      	bne.n	b81c <POINTonE2_add_n_dbl+0x14>
    b82c:	bd70      	pop	{r4, r5, r6, pc}

0000b82e <POINTonE2_times_minus_z>:
    b82e:	b538      	push	{r3, r4, r5, lr}
    b830:	4604      	mov	r4, r0
    b832:	460d      	mov	r5, r1
    b834:	f7ff fbde 	bl	aff4 <POINTonE2_double>
    b838:	2202      	movs	r2, #2
    b83a:	4629      	mov	r1, r5
    b83c:	4620      	mov	r0, r4
    b83e:	f7ff ffe3 	bl	b808 <POINTonE2_add_n_dbl>
    b842:	2203      	movs	r2, #3
    b844:	4629      	mov	r1, r5
    b846:	4620      	mov	r0, r4
    b848:	f7ff ffde 	bl	b808 <POINTonE2_add_n_dbl>
    b84c:	2209      	movs	r2, #9
    b84e:	4629      	mov	r1, r5
    b850:	4620      	mov	r0, r4
    b852:	f7ff ffd9 	bl	b808 <POINTonE2_add_n_dbl>
    b856:	2220      	movs	r2, #32
    b858:	4629      	mov	r1, r5
    b85a:	4620      	mov	r0, r4
    b85c:	f7ff ffd4 	bl	b808 <POINTonE2_add_n_dbl>
    b860:	2210      	movs	r2, #16
    b862:	4629      	mov	r1, r5
    b864:	4620      	mov	r0, r4
    b866:	f7ff ffcf 	bl	b808 <POINTonE2_add_n_dbl>
    b86a:	bd38      	pop	{r3, r4, r5, pc}

0000b86c <POINTonE2_precompute_row_wbits>:
    b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b870:	4607      	mov	r7, r0
    b872:	4690      	mov	r8, r2
    b874:	3901      	subs	r1, #1
    b876:	2601      	movs	r6, #1
    b878:	408e      	lsls	r6, r1
    b87a:	1f13      	subs	r3, r2, #4
    b87c:	1f02      	subs	r2, r0, #4
    b87e:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
    b882:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b886:	f842 1f04 	str.w	r1, [r2, #4]!
    b88a:	4283      	cmp	r3, r0
    b88c:	d1f9      	bne.n	b882 <POINTonE2_precompute_row_wbits+0x16>
    b88e:	4818      	ldr	r0, [pc, #96]	; (b8f0 <POINTonE2_precompute_row_wbits+0x84>)
    b890:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    b894:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
    b898:	30bc      	adds	r0, #188	; 0xbc
    b89a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b89e:	f842 1f04 	str.w	r1, [r2, #4]!
    b8a2:	4283      	cmp	r3, r0
    b8a4:	d1f9      	bne.n	b89a <POINTonE2_precompute_row_wbits+0x2e>
    b8a6:	f507 7590 	add.w	r5, r7, #288	; 0x120
    b8aa:	4639      	mov	r1, r7
    b8ac:	4628      	mov	r0, r5
    b8ae:	f7ff fba1 	bl	aff4 <POINTonE2_double>
    b8b2:	2e02      	cmp	r6, #2
    b8b4:	d91a      	bls.n	b8ec <POINTonE2_precompute_row_wbits+0x80>
    b8b6:	f507 7410 	add.w	r4, r7, #576	; 0x240
    b8ba:	3e03      	subs	r6, #3
    b8bc:	0876      	lsrs	r6, r6, #1
    b8be:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    b8c2:	f507 6690 	add.w	r6, r7, #1152	; 0x480
    b8c6:	eb06 1683 	add.w	r6, r6, r3, lsl #6
    b8ca:	4642      	mov	r2, r8
    b8cc:	f5a4 7190 	sub.w	r1, r4, #288	; 0x120
    b8d0:	4620      	mov	r0, r4
    b8d2:	f7ff f869 	bl	a9a8 <POINTonE2_add_affine>
    b8d6:	4629      	mov	r1, r5
    b8d8:	f504 7090 	add.w	r0, r4, #288	; 0x120
    b8dc:	f7ff fb8a 	bl	aff4 <POINTonE2_double>
    b8e0:	f504 7410 	add.w	r4, r4, #576	; 0x240
    b8e4:	f505 7590 	add.w	r5, r5, #288	; 0x120
    b8e8:	42b4      	cmp	r4, r6
    b8ea:	d1ee      	bne.n	b8ca <POINTonE2_precompute_row_wbits+0x5e>
    b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8f0:	0001ade8 	.word	0x0001ade8

0000b8f4 <POINTonE2_is_equal>:
    b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8f8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
    b8fc:	4607      	mov	r7, r0
    b8fe:	460e      	mov	r6, r1
    b900:	f100 08c0 	add.w	r8, r0, #192	; 0xc0
    b904:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
    b908:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    b90c:	2200      	movs	r2, #0
    b90e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b912:	430a      	orrs	r2, r1
    b914:	4283      	cmp	r3, r0
    b916:	d1fa      	bne.n	b90e <POINTonE2_is_equal+0x1a>
    b918:	1e55      	subs	r5, r2, #1
    b91a:	ea25 0502 	bic.w	r5, r5, r2
    b91e:	0fed      	lsrs	r5, r5, #31
    b920:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
    b924:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
    b928:	f506 708e 	add.w	r0, r6, #284	; 0x11c
    b92c:	2200      	movs	r2, #0
    b92e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b932:	430a      	orrs	r2, r1
    b934:	4283      	cmp	r3, r0
    b936:	d1fa      	bne.n	b92e <POINTonE2_is_equal+0x3a>
    b938:	1e54      	subs	r4, r2, #1
    b93a:	ea24 0202 	bic.w	r2, r4, r2
    b93e:	0fd4      	lsrs	r4, r2, #31
    b940:	f8df b0b0 	ldr.w	fp, [pc, #176]	; b9f4 <POINTonE2_is_equal+0x100>
    b944:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b9f8 <POINTonE2_is_equal+0x104>
    b948:	465b      	mov	r3, fp
    b94a:	4652      	mov	r2, sl
    b94c:	4641      	mov	r1, r8
    b94e:	a87a      	add	r0, sp, #488	; 0x1e8
    b950:	f7fd fe24 	bl	959c <sqr_mont_384x>
    b954:	465b      	mov	r3, fp
    b956:	4652      	mov	r2, sl
    b958:	4649      	mov	r1, r9
    b95a:	a862      	add	r0, sp, #392	; 0x188
    b95c:	f7fd fe1e 	bl	959c <sqr_mont_384x>
    b960:	f8cd b000 	str.w	fp, [sp]
    b964:	4653      	mov	r3, sl
    b966:	aa62      	add	r2, sp, #392	; 0x188
    b968:	4639      	mov	r1, r7
    b96a:	a832      	add	r0, sp, #200	; 0xc8
    b96c:	f7f9 fc1a 	bl	51a4 <mul_mont_384x>
    b970:	f8cd b000 	str.w	fp, [sp]
    b974:	4653      	mov	r3, sl
    b976:	aa7a      	add	r2, sp, #488	; 0x1e8
    b978:	4631      	mov	r1, r6
    b97a:	a802      	add	r0, sp, #8
    b97c:	f7f9 fc12 	bl	51a4 <mul_mont_384x>
    b980:	f8cd b000 	str.w	fp, [sp]
    b984:	4653      	mov	r3, sl
    b986:	464a      	mov	r2, r9
    b988:	f107 0160 	add.w	r1, r7, #96	; 0x60
    b98c:	a84a      	add	r0, sp, #296	; 0x128
    b98e:	f7f9 fc09 	bl	51a4 <mul_mont_384x>
    b992:	f8cd b000 	str.w	fp, [sp]
    b996:	4653      	mov	r3, sl
    b998:	4642      	mov	r2, r8
    b99a:	f106 0160 	add.w	r1, r6, #96	; 0x60
    b99e:	a81a      	add	r0, sp, #104	; 0x68
    b9a0:	f7f9 fc00 	bl	51a4 <mul_mont_384x>
    b9a4:	f8cd b000 	str.w	fp, [sp]
    b9a8:	4653      	mov	r3, sl
    b9aa:	aa62      	add	r2, sp, #392	; 0x188
    b9ac:	a94a      	add	r1, sp, #296	; 0x128
    b9ae:	4608      	mov	r0, r1
    b9b0:	f7f9 fbf8 	bl	51a4 <mul_mont_384x>
    b9b4:	f8cd b000 	str.w	fp, [sp]
    b9b8:	4653      	mov	r3, sl
    b9ba:	aa7a      	add	r2, sp, #488	; 0x1e8
    b9bc:	a91a      	add	r1, sp, #104	; 0x68
    b9be:	4608      	mov	r0, r1
    b9c0:	f7f9 fbf0 	bl	51a4 <mul_mont_384x>
    b9c4:	aa31      	add	r2, sp, #196	; 0xc4
    b9c6:	a901      	add	r1, sp, #4
    b9c8:	af61      	add	r7, sp, #388	; 0x184
    b9ca:	2000      	movs	r0, #0
    b9cc:	f852 3f04 	ldr.w	r3, [r2, #4]!
    b9d0:	f851 6f04 	ldr.w	r6, [r1, #4]!
    b9d4:	4073      	eors	r3, r6
    b9d6:	4318      	orrs	r0, r3
    b9d8:	42ba      	cmp	r2, r7
    b9da:	d1f7      	bne.n	b9cc <POINTonE2_is_equal+0xd8>
    b9dc:	1e43      	subs	r3, r0, #1
    b9de:	ea23 0000 	bic.w	r0, r3, r0
    b9e2:	406c      	eors	r4, r5
    b9e4:	f084 0401 	eor.w	r4, r4, #1
    b9e8:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
    b9ec:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9f4:	fffcfffd 	.word	0xfffcfffd
    b9f8:	0001ade8 	.word	0x0001ade8

0000b9fc <blst_p2_is_equal>:
    b9fc:	b508      	push	{r3, lr}
    b9fe:	f7ff ff79 	bl	b8f4 <POINTonE2_is_equal>
    ba02:	bd08      	pop	{r3, pc}

0000ba04 <POINTonE2_in_G2>:
    ba04:	b510      	push	{r4, lr}
    ba06:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    ba0a:	4604      	mov	r4, r0
    ba0c:	4601      	mov	r1, r0
    ba0e:	a848      	add	r0, sp, #288	; 0x120
    ba10:	f7f9 fc16 	bl	5240 <psi>
    ba14:	4621      	mov	r1, r4
    ba16:	4668      	mov	r0, sp
    ba18:	f7ff ff09 	bl	b82e <POINTonE2_times_minus_z>
    ba1c:	2101      	movs	r1, #1
    ba1e:	4668      	mov	r0, sp
    ba20:	f7f8 f8b6 	bl	3b90 <POINTonE2_cneg>
    ba24:	4669      	mov	r1, sp
    ba26:	a848      	add	r0, sp, #288	; 0x120
    ba28:	f7ff ff64 	bl	b8f4 <POINTonE2_is_equal>
    ba2c:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
    ba30:	bd10      	pop	{r4, pc}

0000ba32 <blst_p2_in_g2>:
    ba32:	b508      	push	{r3, lr}
    ba34:	f7ff ffe6 	bl	ba04 <POINTonE2_in_G2>
    ba38:	bd08      	pop	{r3, pc}

0000ba3a <blst_p2_affine_in_g2>:
    ba3a:	b570      	push	{r4, r5, r6, lr}
    ba3c:	b0c8      	sub	sp, #288	; 0x120
    ba3e:	1f01      	subs	r1, r0, #4
    ba40:	466b      	mov	r3, sp
    ba42:	ad30      	add	r5, sp, #192	; 0xc0
    ba44:	460a      	mov	r2, r1
    ba46:	f852 4f04 	ldr.w	r4, [r2, #4]!
    ba4a:	f843 4b04 	str.w	r4, [r3], #4
    ba4e:	42ab      	cmp	r3, r5
    ba50:	d1f9      	bne.n	ba46 <blst_p2_affine_in_g2+0xc>
    ba52:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
    ba56:	460b      	mov	r3, r1
    ba58:	2200      	movs	r2, #0
    ba5a:	f853 0f04 	ldr.w	r0, [r3, #4]!
    ba5e:	4302      	orrs	r2, r0
    ba60:	42a3      	cmp	r3, r4
    ba62:	d1fa      	bne.n	ba5a <blst_p2_affine_in_g2+0x20>
    ba64:	1e55      	subs	r5, r2, #1
    ba66:	ea25 0202 	bic.w	r2, r5, r2
    ba6a:	17d5      	asrs	r5, r2, #31
    ba6c:	4e0a      	ldr	r6, [pc, #40]	; (ba98 <blst_p2_affine_in_g2+0x5e>)
    ba6e:	f106 0260 	add.w	r2, r6, #96	; 0x60
    ba72:	a82f      	add	r0, sp, #188	; 0xbc
    ba74:	36c0      	adds	r6, #192	; 0xc0
    ba76:	f852 4b04 	ldr.w	r4, [r2], #4
    ba7a:	f851 3f04 	ldr.w	r3, [r1, #4]!
    ba7e:	2d00      	cmp	r5, #0
    ba80:	bf08      	it	eq
    ba82:	4623      	moveq	r3, r4
    ba84:	f840 3f04 	str.w	r3, [r0, #4]!
    ba88:	42b2      	cmp	r2, r6
    ba8a:	d1f4      	bne.n	ba76 <blst_p2_affine_in_g2+0x3c>
    ba8c:	4668      	mov	r0, sp
    ba8e:	f7ff ffb9 	bl	ba04 <POINTonE2_in_G2>
    ba92:	b048      	add	sp, #288	; 0x120
    ba94:	bd70      	pop	{r4, r5, r6, pc}
    ba96:	bf00      	nop
    ba98:	0001ade8 	.word	0x0001ade8

0000ba9c <blst_aggregate_in_g2>:
    ba9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baa0:	b0c8      	sub	sp, #288	; 0x120
    baa2:	4605      	mov	r5, r0
    baa4:	460f      	mov	r7, r1
    baa6:	4611      	mov	r1, r2
    baa8:	4668      	mov	r0, sp
    baaa:	f7fe fa61 	bl	9f70 <POINTonE2_Deserialize_Z>
    baae:	4680      	mov	r8, r0
    bab0:	bb08      	cbnz	r0, baf6 <blst_aggregate_in_g2+0x5a>
    bab2:	f1ad 0604 	sub.w	r6, sp, #4
    bab6:	a92f      	add	r1, sp, #188	; 0xbc
    bab8:	4633      	mov	r3, r6
    baba:	2200      	movs	r2, #0
    babc:	f853 4f04 	ldr.w	r4, [r3, #4]!
    bac0:	4322      	orrs	r2, r4
    bac2:	428b      	cmp	r3, r1
    bac4:	d1fa      	bne.n	babc <blst_aggregate_in_g2+0x20>
    bac6:	1e53      	subs	r3, r2, #1
    bac8:	4393      	bics	r3, r2
    baca:	d418      	bmi.n	bafe <blst_aggregate_in_g2+0x62>
    bacc:	4817      	ldr	r0, [pc, #92]	; (bb2c <blst_aggregate_in_g2+0x90>)
    bace:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    bad2:	aa2f      	add	r2, sp, #188	; 0xbc
    bad4:	30bc      	adds	r0, #188	; 0xbc
    bad6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    bada:	f842 1f04 	str.w	r1, [r2, #4]!
    bade:	4283      	cmp	r3, r0
    bae0:	d1f9      	bne.n	bad6 <blst_aggregate_in_g2+0x3a>
    bae2:	4668      	mov	r0, sp
    bae4:	f7ff ff8e 	bl	ba04 <POINTonE2_in_G2>
    bae8:	b1e8      	cbz	r0, bb26 <blst_aggregate_in_g2+0x8a>
    baea:	b19f      	cbz	r7, bb14 <blst_aggregate_in_g2+0x78>
    baec:	466a      	mov	r2, sp
    baee:	4639      	mov	r1, r7
    baf0:	4628      	mov	r0, r5
    baf2:	f7ff f8db 	bl	acac <POINTonE2_dadd_affine>
    baf6:	4640      	mov	r0, r8
    baf8:	b048      	add	sp, #288	; 0x120
    bafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bafe:	2f00      	cmp	r7, #0
    bb00:	d1f9      	bne.n	baf6 <blst_aggregate_in_g2+0x5a>
    bb02:	462b      	mov	r3, r5
    bb04:	f505 7190 	add.w	r1, r5, #288	; 0x120
    bb08:	2200      	movs	r2, #0
    bb0a:	f843 2b04 	str.w	r2, [r3], #4
    bb0e:	4299      	cmp	r1, r3
    bb10:	d1fb      	bne.n	bb0a <blst_aggregate_in_g2+0x6e>
    bb12:	e7f0      	b.n	baf6 <blst_aggregate_in_g2+0x5a>
    bb14:	3d04      	subs	r5, #4
    bb16:	aa47      	add	r2, sp, #284	; 0x11c
    bb18:	f856 3f04 	ldr.w	r3, [r6, #4]!
    bb1c:	f845 3f04 	str.w	r3, [r5, #4]!
    bb20:	4296      	cmp	r6, r2
    bb22:	d1f9      	bne.n	bb18 <blst_aggregate_in_g2+0x7c>
    bb24:	e7e7      	b.n	baf6 <blst_aggregate_in_g2+0x5a>
    bb26:	f04f 0803 	mov.w	r8, #3
    bb2a:	e7e4      	b.n	baf6 <blst_aggregate_in_g2+0x5a>
    bb2c:	0001ade8 	.word	0x0001ade8

0000bb30 <POINTonE2_sign>:
    bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb34:	b0cb      	sub	sp, #300	; 0x12c
    bb36:	4607      	mov	r7, r0
    bb38:	f7ff fc6a 	bl	b410 <POINTonE2_mult_gls>
    bb3c:	f107 08c0 	add.w	r8, r7, #192	; 0xc0
    bb40:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
    bb44:	f507 718e 	add.w	r1, r7, #284	; 0x11c
    bb48:	4623      	mov	r3, r4
    bb4a:	2600      	movs	r6, #0
    bb4c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    bb50:	4316      	orrs	r6, r2
    bb52:	428b      	cmp	r3, r1
    bb54:	d1fa      	bne.n	bb4c <POINTonE2_sign+0x1c>
    bb56:	4d3b      	ldr	r5, [pc, #236]	; (bc44 <POINTonE2_sign+0x114>)
    bb58:	f04f 0a0c 	mov.w	sl, #12
    bb5c:	f8cd a004 	str.w	sl, [sp, #4]
    bb60:	f8df 90e4 	ldr.w	r9, [pc, #228]	; bc48 <POINTonE2_sign+0x118>
    bb64:	f8cd 9000 	str.w	r9, [sp]
    bb68:	462b      	mov	r3, r5
    bb6a:	4642      	mov	r2, r8
    bb6c:	4641      	mov	r1, r8
    bb6e:	a802      	add	r0, sp, #8
    bb70:	f7f4 ffdb 	bl	b2a <mul_mont_n>
    bb74:	f107 0bf0 	add.w	fp, r7, #240	; 0xf0
    bb78:	f8cd a004 	str.w	sl, [sp, #4]
    bb7c:	f8cd 9000 	str.w	r9, [sp]
    bb80:	462b      	mov	r3, r5
    bb82:	465a      	mov	r2, fp
    bb84:	4659      	mov	r1, fp
    bb86:	a80e      	add	r0, sp, #56	; 0x38
    bb88:	f7f4 ffcf 	bl	b2a <mul_mont_n>
    bb8c:	f8cd a000 	str.w	sl, [sp]
    bb90:	462b      	mov	r3, r5
    bb92:	aa0e      	add	r2, sp, #56	; 0x38
    bb94:	a902      	add	r1, sp, #8
    bb96:	4608      	mov	r0, r1
    bb98:	f7f5 fa70 	bl	107c <add_mod_n>
    bb9c:	a902      	add	r1, sp, #8
    bb9e:	a80e      	add	r0, sp, #56	; 0x38
    bba0:	f7fa f9a8 	bl	5ef4 <flt_reciprocal_fp>
    bba4:	f8cd a004 	str.w	sl, [sp, #4]
    bba8:	f8cd 9000 	str.w	r9, [sp]
    bbac:	462b      	mov	r3, r5
    bbae:	aa0e      	add	r2, sp, #56	; 0x38
    bbb0:	4641      	mov	r1, r8
    bbb2:	a832      	add	r0, sp, #200	; 0xc8
    bbb4:	f7f4 ffb9 	bl	b2a <mul_mont_n>
    bbb8:	f8cd a004 	str.w	sl, [sp, #4]
    bbbc:	f8cd 9000 	str.w	r9, [sp]
    bbc0:	462b      	mov	r3, r5
    bbc2:	aa0e      	add	r2, sp, #56	; 0x38
    bbc4:	4659      	mov	r1, fp
    bbc6:	a83e      	add	r0, sp, #248	; 0xf8
    bbc8:	f7f4 ffaf 	bl	b2a <mul_mont_n>
    bbcc:	f8cd a000 	str.w	sl, [sp]
    bbd0:	462b      	mov	r3, r5
    bbd2:	2201      	movs	r2, #1
    bbd4:	a93e      	add	r1, sp, #248	; 0xf8
    bbd6:	4608      	mov	r0, r1
    bbd8:	f7f6 fe52 	bl	2880 <cneg_mod_n>
    bbdc:	464b      	mov	r3, r9
    bbde:	462a      	mov	r2, r5
    bbe0:	a932      	add	r1, sp, #200	; 0xc8
    bbe2:	a81a      	add	r0, sp, #104	; 0x68
    bbe4:	f7fd fcda 	bl	959c <sqr_mont_384x>
    bbe8:	f8cd 9000 	str.w	r9, [sp]
    bbec:	462b      	mov	r3, r5
    bbee:	aa1a      	add	r2, sp, #104	; 0x68
    bbf0:	4639      	mov	r1, r7
    bbf2:	4638      	mov	r0, r7
    bbf4:	f7f9 fad6 	bl	51a4 <mul_mont_384x>
    bbf8:	f8cd 9000 	str.w	r9, [sp]
    bbfc:	462b      	mov	r3, r5
    bbfe:	aa32      	add	r2, sp, #200	; 0xc8
    bc00:	a91a      	add	r1, sp, #104	; 0x68
    bc02:	4608      	mov	r0, r1
    bc04:	f7f9 face 	bl	51a4 <mul_mont_384x>
    bc08:	f107 0060 	add.w	r0, r7, #96	; 0x60
    bc0c:	f8cd 9000 	str.w	r9, [sp]
    bc10:	462b      	mov	r3, r5
    bc12:	aa1a      	add	r2, sp, #104	; 0x68
    bc14:	4601      	mov	r1, r0
    bc16:	f7f9 fac5 	bl	51a4 <mul_mont_384x>
    bc1a:	1e73      	subs	r3, r6, #1
    bc1c:	ea23 0606 	bic.w	r6, r3, r6
    bc20:	17f6      	asrs	r6, r6, #31
    bc22:	f505 6179 	add.w	r1, r5, #3984	; 0xf90
    bc26:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
    bc2a:	f851 3b04 	ldr.w	r3, [r1], #4
    bc2e:	f854 2f04 	ldr.w	r2, [r4, #4]!
    bc32:	2e00      	cmp	r6, #0
    bc34:	bf08      	it	eq
    bc36:	461a      	moveq	r2, r3
    bc38:	6022      	str	r2, [r4, #0]
    bc3a:	42a9      	cmp	r1, r5
    bc3c:	d1f5      	bne.n	bc2a <POINTonE2_sign+0xfa>
    bc3e:	b04b      	add	sp, #300	; 0x12c
    bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc44:	0001ade8 	.word	0x0001ade8
    bc48:	fffcfffd 	.word	0xfffcfffd

0000bc4c <blst_sk_to_pk_in_g2>:
    bc4c:	b508      	push	{r3, lr}
    bc4e:	460a      	mov	r2, r1
    bc50:	4901      	ldr	r1, [pc, #4]	; (bc58 <blst_sk_to_pk_in_g2+0xc>)
    bc52:	f7ff ff6d 	bl	bb30 <POINTonE2_sign>
    bc56:	bd08      	pop	{r3, pc}
    bc58:	0001bcb8 	.word	0x0001bcb8

0000bc5c <blst_sign_pk_in_g1>:
    bc5c:	b508      	push	{r3, lr}
    bc5e:	f7ff ff67 	bl	bb30 <POINTonE2_sign>
    bc62:	bd08      	pop	{r3, pc}

0000bc64 <blst_sk_to_pk2_in_g2>:
    bc64:	b530      	push	{r4, r5, lr}
    bc66:	b0c9      	sub	sp, #292	; 0x124
    bc68:	4605      	mov	r5, r0
    bc6a:	460c      	mov	r4, r1
    bc6c:	4914      	ldr	r1, [pc, #80]	; (bcc0 <blst_sk_to_pk2_in_g2+0x5c>)
    bc6e:	4668      	mov	r0, sp
    bc70:	f7ff ff5e 	bl	bb30 <POINTonE2_sign>
    bc74:	b14c      	cbz	r4, bc8a <blst_sk_to_pk2_in_g2+0x26>
    bc76:	f1ad 0304 	sub.w	r3, sp, #4
    bc7a:	1f21      	subs	r1, r4, #4
    bc7c:	a82f      	add	r0, sp, #188	; 0xbc
    bc7e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    bc82:	f841 2f04 	str.w	r2, [r1, #4]!
    bc86:	4283      	cmp	r3, r0
    bc88:	d1f9      	bne.n	bc7e <blst_sk_to_pk2_in_g2+0x1a>
    bc8a:	b1bd      	cbz	r5, bcbc <blst_sk_to_pk2_in_g2+0x58>
    bc8c:	4669      	mov	r1, sp
    bc8e:	4628      	mov	r0, r5
    bc90:	f7fd fd3c 	bl	970c <POINTonE2_Serialize_BE>
    bc94:	0100      	lsls	r0, r0, #4
    bc96:	f000 0220 	and.w	r2, r0, #32
    bc9a:	7828      	ldrb	r0, [r5, #0]
    bc9c:	4310      	orrs	r0, r2
    bc9e:	ab2f      	add	r3, sp, #188	; 0xbc
    bca0:	ac47      	add	r4, sp, #284	; 0x11c
    bca2:	2200      	movs	r2, #0
    bca4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    bca8:	430a      	orrs	r2, r1
    bcaa:	42a3      	cmp	r3, r4
    bcac:	d1fa      	bne.n	bca4 <blst_sk_to_pk2_in_g2+0x40>
    bcae:	1e53      	subs	r3, r2, #1
    bcb0:	ea23 0202 	bic.w	r2, r3, r2
    bcb4:	0fd2      	lsrs	r2, r2, #31
    bcb6:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    bcba:	702a      	strb	r2, [r5, #0]
    bcbc:	b049      	add	sp, #292	; 0x124
    bcbe:	bd30      	pop	{r4, r5, pc}
    bcc0:	0001bcb8 	.word	0x0001bcb8

0000bcc4 <blst_sign_pk2_in_g1>:
    bcc4:	b530      	push	{r4, r5, lr}
    bcc6:	b0c9      	sub	sp, #292	; 0x124
    bcc8:	4605      	mov	r5, r0
    bcca:	460c      	mov	r4, r1
    bccc:	4611      	mov	r1, r2
    bcce:	461a      	mov	r2, r3
    bcd0:	4668      	mov	r0, sp
    bcd2:	f7ff ff2d 	bl	bb30 <POINTonE2_sign>
    bcd6:	b14c      	cbz	r4, bcec <blst_sign_pk2_in_g1+0x28>
    bcd8:	f1ad 0304 	sub.w	r3, sp, #4
    bcdc:	1f21      	subs	r1, r4, #4
    bcde:	a82f      	add	r0, sp, #188	; 0xbc
    bce0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    bce4:	f841 2f04 	str.w	r2, [r1, #4]!
    bce8:	4283      	cmp	r3, r0
    bcea:	d1f9      	bne.n	bce0 <blst_sign_pk2_in_g1+0x1c>
    bcec:	b1bd      	cbz	r5, bd1e <blst_sign_pk2_in_g1+0x5a>
    bcee:	4669      	mov	r1, sp
    bcf0:	4628      	mov	r0, r5
    bcf2:	f7fd fd0b 	bl	970c <POINTonE2_Serialize_BE>
    bcf6:	0100      	lsls	r0, r0, #4
    bcf8:	f000 0220 	and.w	r2, r0, #32
    bcfc:	7828      	ldrb	r0, [r5, #0]
    bcfe:	4310      	orrs	r0, r2
    bd00:	ab2f      	add	r3, sp, #188	; 0xbc
    bd02:	ac47      	add	r4, sp, #284	; 0x11c
    bd04:	2200      	movs	r2, #0
    bd06:	f853 1f04 	ldr.w	r1, [r3, #4]!
    bd0a:	430a      	orrs	r2, r1
    bd0c:	42a3      	cmp	r3, r4
    bd0e:	d1fa      	bne.n	bd06 <blst_sign_pk2_in_g1+0x42>
    bd10:	1e53      	subs	r3, r2, #1
    bd12:	ea23 0202 	bic.w	r2, r3, r2
    bd16:	0fd2      	lsrs	r2, r2, #31
    bd18:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    bd1c:	702a      	strb	r2, [r5, #0]
    bd1e:	b049      	add	sp, #292	; 0x124
    bd20:	bd30      	pop	{r4, r5, pc}

0000bd22 <map_to_isogenous_E2>:
    bd22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd26:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
    bd2a:	4606      	mov	r6, r0
    bd2c:	9103      	str	r1, [sp, #12]
    bd2e:	4dc6      	ldr	r5, [pc, #792]	; (c048 <map_to_isogenous_E2+0x326>)
    bd30:	4cc6      	ldr	r4, [pc, #792]	; (c04c <map_to_isogenous_E2+0x32a>)
    bd32:	462b      	mov	r3, r5
    bd34:	4622      	mov	r2, r4
    bd36:	a8e8      	add	r0, sp, #928	; 0x3a0
    bd38:	f7fd fc30 	bl	959c <sqr_mont_384x>
    bd3c:	f8df 8310 	ldr.w	r8, [pc, #784]	; c050 <map_to_isogenous_E2+0x32e>
    bd40:	9500      	str	r5, [sp, #0]
    bd42:	4623      	mov	r3, r4
    bd44:	aae8      	add	r2, sp, #928	; 0x3a0
    bd46:	f508 61e4 	add.w	r1, r8, #1824	; 0x720
    bd4a:	a8a0      	add	r0, sp, #640	; 0x280
    bd4c:	f7f9 fa2a 	bl	51a4 <mul_mont_384x>
    bd50:	462b      	mov	r3, r5
    bd52:	4622      	mov	r2, r4
    bd54:	a9a0      	add	r1, sp, #640	; 0x280
    bd56:	a8d0      	add	r0, sp, #832	; 0x340
    bd58:	f7fd fc20 	bl	959c <sqr_mont_384x>
    bd5c:	270c      	movs	r7, #12
    bd5e:	9700      	str	r7, [sp, #0]
    bd60:	4623      	mov	r3, r4
    bd62:	aaa0      	add	r2, sp, #640	; 0x280
    bd64:	a9d0      	add	r1, sp, #832	; 0x340
    bd66:	4608      	mov	r0, r1
    bd68:	f7f5 f988 	bl	107c <add_mod_n>
    bd6c:	9700      	str	r7, [sp, #0]
    bd6e:	4623      	mov	r3, r4
    bd70:	aaac      	add	r2, sp, #688	; 0x2b0
    bd72:	a9dc      	add	r1, sp, #880	; 0x370
    bd74:	4608      	mov	r0, r1
    bd76:	f7f5 f981 	bl	107c <add_mod_n>
    bd7a:	9700      	str	r7, [sp, #0]
    bd7c:	4623      	mov	r3, r4
    bd7e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    bd82:	a9d0      	add	r1, sp, #832	; 0x340
    bd84:	4630      	mov	r0, r6
    bd86:	f7f5 f979 	bl	107c <add_mod_n>
    bd8a:	9700      	str	r7, [sp, #0]
    bd8c:	4623      	mov	r3, r4
    bd8e:	f104 0290 	add.w	r2, r4, #144	; 0x90
    bd92:	a9dc      	add	r1, sp, #880	; 0x370
    bd94:	f106 0030 	add.w	r0, r6, #48	; 0x30
    bd98:	f7f5 f970 	bl	107c <add_mod_n>
    bd9c:	9500      	str	r5, [sp, #0]
    bd9e:	4623      	mov	r3, r4
    bda0:	f508 62f0 	add.w	r2, r8, #1920	; 0x780
    bda4:	4631      	mov	r1, r6
    bda6:	4630      	mov	r0, r6
    bda8:	f7f9 f9fc 	bl	51a4 <mul_mont_384x>
    bdac:	9500      	str	r5, [sp, #0]
    bdae:	4623      	mov	r3, r4
    bdb0:	4632      	mov	r2, r6
    bdb2:	a9a0      	add	r1, sp, #640	; 0x280
    bdb4:	4608      	mov	r0, r1
    bdb6:	f7f9 f9f5 	bl	51a4 <mul_mont_384x>
    bdba:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
    bdbe:	9500      	str	r5, [sp, #0]
    bdc0:	4623      	mov	r3, r4
    bdc2:	aad0      	add	r2, sp, #832	; 0x340
    bdc4:	f508 61fc 	add.w	r1, r8, #2016	; 0x7e0
    bdc8:	4648      	mov	r0, r9
    bdca:	f7f9 f9eb 	bl	51a4 <mul_mont_384x>
    bdce:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
    bdd2:	f506 748e 	add.w	r4, r6, #284	; 0x11c
    bdd6:	4613      	mov	r3, r2
    bdd8:	2100      	movs	r1, #0
    bdda:	f853 0f04 	ldr.w	r0, [r3, #4]!
    bdde:	4301      	orrs	r1, r0
    bde0:	42a3      	cmp	r3, r4
    bde2:	d1fa      	bne.n	bdda <map_to_isogenous_E2+0xb8>
    bde4:	1e4c      	subs	r4, r1, #1
    bde6:	ea24 0101 	bic.w	r1, r4, r1
    bdea:	17cc      	asrs	r4, r1, #31
    bdec:	4d98      	ldr	r5, [pc, #608]	; (c050 <map_to_isogenous_E2+0x32e>)
    bdee:	f605 013c 	addw	r1, r5, #2108	; 0x83c
    bdf2:	f605 059c 	addw	r5, r5, #2204	; 0x89c
    bdf6:	f852 0f04 	ldr.w	r0, [r2, #4]!
    bdfa:	f851 3f04 	ldr.w	r3, [r1, #4]!
    bdfe:	2c00      	cmp	r4, #0
    be00:	bf08      	it	eq
    be02:	4603      	moveq	r3, r0
    be04:	6013      	str	r3, [r2, #0]
    be06:	42a9      	cmp	r1, r5
    be08:	d1f5      	bne.n	bdf6 <map_to_isogenous_E2+0xd4>
    be0a:	4c8f      	ldr	r4, [pc, #572]	; (c048 <map_to_isogenous_E2+0x326>)
    be0c:	4d8f      	ldr	r5, [pc, #572]	; (c04c <map_to_isogenous_E2+0x32a>)
    be0e:	4623      	mov	r3, r4
    be10:	462a      	mov	r2, r5
    be12:	4649      	mov	r1, r9
    be14:	a8d0      	add	r0, sp, #832	; 0x340
    be16:	f7fd fbc1 	bl	959c <sqr_mont_384x>
    be1a:	9400      	str	r4, [sp, #0]
    be1c:	462b      	mov	r3, r5
    be1e:	aad0      	add	r2, sp, #832	; 0x340
    be20:	4649      	mov	r1, r9
    be22:	a870      	add	r0, sp, #448	; 0x1c0
    be24:	f7f9 f9be 	bl	51a4 <mul_mont_384x>
    be28:	f8df a224 	ldr.w	sl, [pc, #548]	; c050 <map_to_isogenous_E2+0x32e>
    be2c:	9400      	str	r4, [sp, #0]
    be2e:	462b      	mov	r3, r5
    be30:	aad0      	add	r2, sp, #832	; 0x340
    be32:	f50a 610a 	add.w	r1, sl, #2208	; 0x8a0
    be36:	4610      	mov	r0, r2
    be38:	f7f9 f9b4 	bl	51a4 <mul_mont_384x>
    be3c:	4623      	mov	r3, r4
    be3e:	462a      	mov	r2, r5
    be40:	4631      	mov	r1, r6
    be42:	a888      	add	r0, sp, #544	; 0x220
    be44:	f7fd fbaa 	bl	959c <sqr_mont_384x>
    be48:	f04f 080c 	mov.w	r8, #12
    be4c:	f8cd 8000 	str.w	r8, [sp]
    be50:	462b      	mov	r3, r5
    be52:	aad0      	add	r2, sp, #832	; 0x340
    be54:	a988      	add	r1, sp, #544	; 0x220
    be56:	4608      	mov	r0, r1
    be58:	f7f5 f910 	bl	107c <add_mod_n>
    be5c:	f8cd 8000 	str.w	r8, [sp]
    be60:	462b      	mov	r3, r5
    be62:	aadc      	add	r2, sp, #880	; 0x370
    be64:	a994      	add	r1, sp, #592	; 0x250
    be66:	4608      	mov	r0, r1
    be68:	f7f5 f908 	bl	107c <add_mod_n>
    be6c:	9400      	str	r4, [sp, #0]
    be6e:	462b      	mov	r3, r5
    be70:	4632      	mov	r2, r6
    be72:	a988      	add	r1, sp, #544	; 0x220
    be74:	4608      	mov	r0, r1
    be76:	f7f9 f995 	bl	51a4 <mul_mont_384x>
    be7a:	9400      	str	r4, [sp, #0]
    be7c:	462b      	mov	r3, r5
    be7e:	aa70      	add	r2, sp, #448	; 0x1c0
    be80:	f50a 61f0 	add.w	r1, sl, #1920	; 0x780
    be84:	a8d0      	add	r0, sp, #832	; 0x340
    be86:	f7f9 f98d 	bl	51a4 <mul_mont_384x>
    be8a:	f8cd 8000 	str.w	r8, [sp]
    be8e:	462b      	mov	r3, r5
    be90:	aad0      	add	r2, sp, #832	; 0x340
    be92:	a988      	add	r1, sp, #544	; 0x220
    be94:	4608      	mov	r0, r1
    be96:	f7f5 f8f1 	bl	107c <add_mod_n>
    be9a:	f8cd 8000 	str.w	r8, [sp]
    be9e:	462b      	mov	r3, r5
    bea0:	aadc      	add	r2, sp, #880	; 0x370
    bea2:	a994      	add	r1, sp, #592	; 0x250
    bea4:	4608      	mov	r0, r1
    bea6:	f7f5 f8e9 	bl	107c <add_mod_n>
    beaa:	4623      	mov	r3, r4
    beac:	462a      	mov	r2, r5
    beae:	a970      	add	r1, sp, #448	; 0x1c0
    beb0:	a8b8      	add	r0, sp, #736	; 0x2e0
    beb2:	f7fd fb73 	bl	959c <sqr_mont_384x>
    beb6:	9400      	str	r4, [sp, #0]
    beb8:	462b      	mov	r3, r5
    beba:	aa70      	add	r2, sp, #448	; 0x1c0
    bebc:	a988      	add	r1, sp, #544	; 0x220
    bebe:	a8d0      	add	r0, sp, #832	; 0x340
    bec0:	f7f9 f970 	bl	51a4 <mul_mont_384x>
    bec4:	9400      	str	r4, [sp, #0]
    bec6:	462b      	mov	r3, r5
    bec8:	aad0      	add	r2, sp, #832	; 0x340
    beca:	a9b8      	add	r1, sp, #736	; 0x2e0
    becc:	4608      	mov	r0, r1
    bece:	f7f9 f969 	bl	51a4 <mul_mont_384x>
    bed2:	f106 0760 	add.w	r7, r6, #96	; 0x60
    bed6:	f8cd 8004 	str.w	r8, [sp, #4]
    beda:	9400      	str	r4, [sp, #0]
    bedc:	462b      	mov	r3, r5
    bede:	aab8      	add	r2, sp, #736	; 0x2e0
    bee0:	4611      	mov	r1, r2
    bee2:	a804      	add	r0, sp, #16
    bee4:	f7f4 fe21 	bl	b2a <mul_mont_n>
    bee8:	f8cd 8004 	str.w	r8, [sp, #4]
    beec:	9400      	str	r4, [sp, #0]
    beee:	462b      	mov	r3, r5
    bef0:	aac4      	add	r2, sp, #784	; 0x310
    bef2:	4611      	mov	r1, r2
    bef4:	a810      	add	r0, sp, #64	; 0x40
    bef6:	f7f4 fe18 	bl	b2a <mul_mont_n>
    befa:	f8cd 8000 	str.w	r8, [sp]
    befe:	462b      	mov	r3, r5
    bf00:	aa10      	add	r2, sp, #64	; 0x40
    bf02:	a904      	add	r1, sp, #16
    bf04:	4608      	mov	r0, r1
    bf06:	f7f5 f8b9 	bl	107c <add_mod_n>
    bf0a:	a904      	add	r1, sp, #16
    bf0c:	a81c      	add	r0, sp, #112	; 0x70
    bf0e:	f7fb ffa9 	bl	7e64 <recip_sqrt_fp>
    bf12:	4683      	mov	fp, r0
    bf14:	9400      	str	r4, [sp, #0]
    bf16:	462b      	mov	r3, r5
    bf18:	f50a 6210 	add.w	r2, sl, #2304	; 0x900
    bf1c:	a9b8      	add	r1, sp, #736	; 0x2e0
    bf1e:	a840      	add	r0, sp, #256	; 0x100
    bf20:	f7f9 f940 	bl	51a4 <mul_mont_384x>
    bf24:	f8cd 8004 	str.w	r8, [sp, #4]
    bf28:	9400      	str	r4, [sp, #0]
    bf2a:	462b      	mov	r3, r5
    bf2c:	f50a 6216 	add.w	r2, sl, #2400	; 0x960
    bf30:	a904      	add	r1, sp, #16
    bf32:	a828      	add	r0, sp, #160	; 0xa0
    bf34:	f7f4 fdf9 	bl	b2a <mul_mont_n>
    bf38:	f8cd 8004 	str.w	r8, [sp, #4]
    bf3c:	9400      	str	r4, [sp, #0]
    bf3e:	462b      	mov	r3, r5
    bf40:	f50a 6219 	add.w	r2, sl, #2448	; 0x990
    bf44:	a91c      	add	r1, sp, #112	; 0x70
    bf46:	a834      	add	r0, sp, #208	; 0xd0
    bf48:	f7f4 fdef 	bl	b2a <mul_mont_n>
    bf4c:	f1cb 0400 	rsb	r4, fp, #0
    bf50:	ad04      	add	r5, sp, #16
    bf52:	a828      	add	r0, sp, #160	; 0xa0
    bf54:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    bf58:	462a      	mov	r2, r5
    bf5a:	6813      	ldr	r3, [r2, #0]
    bf5c:	f850 1b04 	ldr.w	r1, [r0], #4
    bf60:	404b      	eors	r3, r1
    bf62:	4023      	ands	r3, r4
    bf64:	404b      	eors	r3, r1
    bf66:	f842 3b04 	str.w	r3, [r2], #4
    bf6a:	4542      	cmp	r2, r8
    bf6c:	d1f5      	bne.n	bf5a <map_to_isogenous_E2+0x238>
    bf6e:	aa1c      	add	r2, sp, #112	; 0x70
    bf70:	a934      	add	r1, sp, #208	; 0xd0
    bf72:	a828      	add	r0, sp, #160	; 0xa0
    bf74:	468c      	mov	ip, r1
    bf76:	6813      	ldr	r3, [r2, #0]
    bf78:	f85c 1b04 	ldr.w	r1, [ip], #4
    bf7c:	404b      	eors	r3, r1
    bf7e:	4023      	ands	r3, r4
    bf80:	404b      	eors	r3, r1
    bf82:	f842 3b04 	str.w	r3, [r2], #4
    bf86:	4282      	cmp	r2, r0
    bf88:	d1f5      	bne.n	bf76 <map_to_isogenous_E2+0x254>
    bf8a:	a9b7      	add	r1, sp, #732	; 0x2dc
    bf8c:	aa3f      	add	r2, sp, #252	; 0xfc
    bf8e:	a8cf      	add	r0, sp, #828	; 0x33c
    bf90:	46a4      	mov	ip, r4
    bf92:	f852 4f04 	ldr.w	r4, [r2, #4]!
    bf96:	f851 3f04 	ldr.w	r3, [r1, #4]!
    bf9a:	4063      	eors	r3, r4
    bf9c:	ea03 030c 	and.w	r3, r3, ip
    bfa0:	4063      	eors	r3, r4
    bfa2:	6013      	str	r3, [r2, #0]
    bfa4:	4281      	cmp	r1, r0
    bfa6:	d1f4      	bne.n	bf92 <map_to_isogenous_E2+0x270>
    bfa8:	4664      	mov	r4, ip
    bfaa:	f8df a0a0 	ldr.w	sl, [pc, #160]	; c04c <map_to_isogenous_E2+0x32a>
    bfae:	f04f 0b0c 	mov.w	fp, #12
    bfb2:	f8cd b004 	str.w	fp, [sp, #4]
    bfb6:	4b24      	ldr	r3, [pc, #144]	; (c048 <map_to_isogenous_E2+0x326>)
    bfb8:	9300      	str	r3, [sp, #0]
    bfba:	4653      	mov	r3, sl
    bfbc:	aa1c      	add	r2, sp, #112	; 0x70
    bfbe:	a904      	add	r1, sp, #16
    bfc0:	4608      	mov	r0, r1
    bfc2:	f7f4 fdb2 	bl	b2a <mul_mont_n>
    bfc6:	f8cd b000 	str.w	fp, [sp]
    bfca:	4653      	mov	r3, sl
    bfcc:	aa04      	add	r2, sp, #16
    bfce:	a940      	add	r1, sp, #256	; 0x100
    bfd0:	a810      	add	r0, sp, #64	; 0x40
    bfd2:	f7f4 fba0 	bl	716 <sub_mod_n>
    bfd6:	f8cd b000 	str.w	fp, [sp]
    bfda:	4653      	mov	r3, sl
    bfdc:	aa04      	add	r2, sp, #16
    bfde:	a940      	add	r1, sp, #256	; 0x100
    bfe0:	4610      	mov	r0, r2
    bfe2:	f7f5 f84b 	bl	107c <add_mod_n>
    bfe6:	462b      	mov	r3, r5
    bfe8:	2200      	movs	r2, #0
    bfea:	f853 1b04 	ldr.w	r1, [r3], #4
    bfee:	430a      	orrs	r2, r1
    bff0:	4543      	cmp	r3, r8
    bff2:	d1fa      	bne.n	bfea <map_to_isogenous_E2+0x2c8>
    bff4:	1e50      	subs	r0, r2, #1
    bff6:	ea20 0202 	bic.w	r2, r0, r2
    bffa:	17d0      	asrs	r0, r2, #31
    bffc:	aa10      	add	r2, sp, #64	; 0x40
    bffe:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    c002:	f852 3b04 	ldr.w	r3, [r2], #4
    c006:	6829      	ldr	r1, [r5, #0]
    c008:	2800      	cmp	r0, #0
    c00a:	bf08      	it	eq
    c00c:	460b      	moveq	r3, r1
    c00e:	f845 3b04 	str.w	r3, [r5], #4
    c012:	4562      	cmp	r2, ip
    c014:	d1f5      	bne.n	c002 <map_to_isogenous_E2+0x2e0>
    c016:	f8df 8034 	ldr.w	r8, [pc, #52]	; c04c <map_to_isogenous_E2+0x32a>
    c01a:	f04f 0b0c 	mov.w	fp, #12
    c01e:	f8cd b000 	str.w	fp, [sp]
    c022:	4643      	mov	r3, r8
    c024:	2201      	movs	r2, #1
    c026:	a904      	add	r1, sp, #16
    c028:	4608      	mov	r0, r1
    c02a:	f7f4 fbd8 	bl	7de <rshift_mod_n>
    c02e:	a904      	add	r1, sp, #16
    c030:	4638      	mov	r0, r7
    c032:	f7fb ff17 	bl	7e64 <recip_sqrt_fp>
    c036:	f106 0590 	add.w	r5, r6, #144	; 0x90
    c03a:	f8cd b000 	str.w	fp, [sp]
    c03e:	4643      	mov	r3, r8
    c040:	2201      	movs	r2, #1
    c042:	a94c      	add	r1, sp, #304	; 0x130
    c044:	4628      	mov	r0, r5
    c046:	e005      	b.n	c054 <map_to_isogenous_E2+0x332>
    c048:	fffcfffd 	.word	0xfffcfffd
    c04c:	0001ade8 	.word	0x0001ade8
    c050:	0001bee0 	.word	0x0001bee0
    c054:	f7f4 fbc3 	bl	7de <rshift_mod_n>
    c058:	f8cd b004 	str.w	fp, [sp, #4]
    c05c:	f8df a24c 	ldr.w	sl, [pc, #588]	; c2ac <map_to_isogenous_E2+0x58a>
    c060:	f8cd a000 	str.w	sl, [sp]
    c064:	4643      	mov	r3, r8
    c066:	463a      	mov	r2, r7
    c068:	4629      	mov	r1, r5
    c06a:	4628      	mov	r0, r5
    c06c:	f7f4 fd5d 	bl	b2a <mul_mont_n>
    c070:	f8cd b004 	str.w	fp, [sp, #4]
    c074:	f8cd a000 	str.w	sl, [sp]
    c078:	4643      	mov	r3, r8
    c07a:	aa04      	add	r2, sp, #16
    c07c:	4639      	mov	r1, r7
    c07e:	4638      	mov	r0, r7
    c080:	f7f4 fd53 	bl	b2a <mul_mont_n>
    c084:	ab40      	add	r3, sp, #256	; 0x100
    c086:	463a      	mov	r2, r7
    c088:	4639      	mov	r1, r7
    c08a:	4638      	mov	r0, r7
    c08c:	f7fd fcaa 	bl	99e4 <sqrt_align_fp2>
    c090:	f8cd b004 	str.w	fp, [sp, #4]
    c094:	f8cd a000 	str.w	sl, [sp]
    c098:	4643      	mov	r3, r8
    c09a:	aa1c      	add	r2, sp, #112	; 0x70
    c09c:	4639      	mov	r1, r7
    c09e:	4638      	mov	r0, r7
    c0a0:	f7f4 fd43 	bl	b2a <mul_mont_n>
    c0a4:	f8cd b004 	str.w	fp, [sp, #4]
    c0a8:	f8cd a000 	str.w	sl, [sp]
    c0ac:	4643      	mov	r3, r8
    c0ae:	aa1c      	add	r2, sp, #112	; 0x70
    c0b0:	4629      	mov	r1, r5
    c0b2:	4628      	mov	r0, r5
    c0b4:	f7f4 fd39 	bl	b2a <mul_mont_n>
    c0b8:	f8cd b000 	str.w	fp, [sp]
    c0bc:	4643      	mov	r3, r8
    c0be:	2201      	movs	r2, #1
    c0c0:	4629      	mov	r1, r5
    c0c2:	4628      	mov	r0, r5
    c0c4:	f7f6 fbdc 	bl	2880 <cneg_mod_n>
    c0c8:	f8cd a000 	str.w	sl, [sp]
    c0cc:	4643      	mov	r3, r8
    c0ce:	aad0      	add	r2, sp, #832	; 0x340
    c0d0:	4639      	mov	r1, r7
    c0d2:	4638      	mov	r0, r7
    c0d4:	f7f9 f866 	bl	51a4 <mul_mont_384x>
    c0d8:	f8cd a000 	str.w	sl, [sp]
    c0dc:	4643      	mov	r3, r8
    c0de:	aae8      	add	r2, sp, #928	; 0x3a0
    c0e0:	4639      	mov	r1, r7
    c0e2:	a858      	add	r0, sp, #352	; 0x160
    c0e4:	f7f9 f85e 	bl	51a4 <mul_mont_384x>
    c0e8:	f8cd a000 	str.w	sl, [sp]
    c0ec:	4643      	mov	r3, r8
    c0ee:	9a03      	ldr	r2, [sp, #12]
    c0f0:	a958      	add	r1, sp, #352	; 0x160
    c0f2:	4608      	mov	r0, r1
    c0f4:	f7f9 f856 	bl	51a4 <mul_mont_384x>
    c0f8:	1f31      	subs	r1, r6, #4
    c0fa:	aaa0      	add	r2, sp, #640	; 0x280
    c0fc:	f50d 7c38 	add.w	ip, sp, #736	; 0x2e0
    c100:	f852 0b04 	ldr.w	r0, [r2], #4
    c104:	f851 3f04 	ldr.w	r3, [r1, #4]!
    c108:	4043      	eors	r3, r0
    c10a:	4023      	ands	r3, r4
    c10c:	4043      	eors	r3, r0
    c10e:	600b      	str	r3, [r1, #0]
    c110:	4562      	cmp	r2, ip
    c112:	d1f5      	bne.n	c100 <map_to_isogenous_E2+0x3de>
    c114:	f106 015c 	add.w	r1, r6, #92	; 0x5c
    c118:	aa58      	add	r2, sp, #352	; 0x160
    c11a:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
    c11e:	f852 0b04 	ldr.w	r0, [r2], #4
    c122:	f851 3f04 	ldr.w	r3, [r1, #4]!
    c126:	4043      	eors	r3, r0
    c128:	4023      	ands	r3, r4
    c12a:	4043      	eors	r3, r0
    c12c:	600b      	str	r3, [r1, #0]
    c12e:	4562      	cmp	r2, ip
    c130:	d1f5      	bne.n	c11e <map_to_isogenous_E2+0x3fc>
    c132:	f8df 8178 	ldr.w	r8, [pc, #376]	; c2ac <map_to_isogenous_E2+0x58a>
    c136:	4c5c      	ldr	r4, [pc, #368]	; (c2a8 <map_to_isogenous_E2+0x586>)
    c138:	f04f 0a0c 	mov.w	sl, #12
    c13c:	f8cd a000 	str.w	sl, [sp]
    c140:	4643      	mov	r3, r8
    c142:	4622      	mov	r2, r4
    c144:	f8dd b00c 	ldr.w	fp, [sp, #12]
    c148:	4659      	mov	r1, fp
    c14a:	a840      	add	r0, sp, #256	; 0x100
    c14c:	f7f7 f864 	bl	3218 <from_mont_n>
    c150:	f8cd a000 	str.w	sl, [sp]
    c154:	4643      	mov	r3, r8
    c156:	4622      	mov	r2, r4
    c158:	4659      	mov	r1, fp
    c15a:	3130      	adds	r1, #48	; 0x30
    c15c:	a84c      	add	r0, sp, #304	; 0x130
    c15e:	f7f7 f85b 	bl	3218 <from_mont_n>
    c162:	4652      	mov	r2, sl
    c164:	4621      	mov	r1, r4
    c166:	a840      	add	r0, sp, #256	; 0x100
    c168:	f7f7 f980 	bl	346c <sgn0_pty_mod_n>
    c16c:	4680      	mov	r8, r0
    c16e:	4652      	mov	r2, sl
    c170:	4621      	mov	r1, r4
    c172:	a84c      	add	r0, sp, #304	; 0x130
    c174:	f7f7 f97a 	bl	346c <sgn0_pty_mod_n>
    c178:	aa4b      	add	r2, sp, #300	; 0x12c
    c17a:	ab40      	add	r3, sp, #256	; 0x100
    c17c:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
    c180:	2100      	movs	r1, #0
    c182:	f852 4f04 	ldr.w	r4, [r2, #4]!
    c186:	4321      	orrs	r1, r4
    c188:	4562      	cmp	r2, ip
    c18a:	d1fa      	bne.n	c182 <map_to_isogenous_E2+0x460>
    c18c:	f101 3cff 	add.w	ip, r1, #4294967295
    c190:	ea2c 0101 	bic.w	r1, ip, r1
    c194:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
    c198:	ea08 71e1 	and.w	r1, r8, r1, asr #31
    c19c:	f10c 3cff 	add.w	ip, ip, #4294967295
    c1a0:	ea0c 0c00 	and.w	ip, ip, r0
    c1a4:	ea4c 0c01 	orr.w	ip, ip, r1
    c1a8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    c1ac:	2200      	movs	r2, #0
    c1ae:	f853 1b04 	ldr.w	r1, [r3], #4
    c1b2:	430a      	orrs	r2, r1
    c1b4:	42a3      	cmp	r3, r4
    c1b6:	d1fa      	bne.n	c1ae <map_to_isogenous_E2+0x48c>
    c1b8:	1e54      	subs	r4, r2, #1
    c1ba:	ea24 0202 	bic.w	r2, r4, r2
    c1be:	0fd4      	lsrs	r4, r2, #31
    c1c0:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    c1c4:	3c01      	subs	r4, #1
    c1c6:	ea04 0408 	and.w	r4, r4, r8
    c1ca:	4304      	orrs	r4, r0
    c1cc:	f004 0401 	and.w	r4, r4, #1
    c1d0:	f00c 0c02 	and.w	ip, ip, #2
    c1d4:	ea44 040c 	orr.w	r4, r4, ip
    c1d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; c2ac <map_to_isogenous_E2+0x58a>
    c1dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c2a8 <map_to_isogenous_E2+0x586>
    c1e0:	f04f 0b0c 	mov.w	fp, #12
    c1e4:	f8cd b000 	str.w	fp, [sp]
    c1e8:	4643      	mov	r3, r8
    c1ea:	4652      	mov	r2, sl
    c1ec:	4639      	mov	r1, r7
    c1ee:	a840      	add	r0, sp, #256	; 0x100
    c1f0:	f7f7 f812 	bl	3218 <from_mont_n>
    c1f4:	f8cd b000 	str.w	fp, [sp]
    c1f8:	4643      	mov	r3, r8
    c1fa:	4652      	mov	r2, sl
    c1fc:	4629      	mov	r1, r5
    c1fe:	a84c      	add	r0, sp, #304	; 0x130
    c200:	f7f7 f80a 	bl	3218 <from_mont_n>
    c204:	465a      	mov	r2, fp
    c206:	4651      	mov	r1, sl
    c208:	a840      	add	r0, sp, #256	; 0x100
    c20a:	f7f7 f92f 	bl	346c <sgn0_pty_mod_n>
    c20e:	4680      	mov	r8, r0
    c210:	465a      	mov	r2, fp
    c212:	4651      	mov	r1, sl
    c214:	a84c      	add	r0, sp, #304	; 0x130
    c216:	f7f7 f929 	bl	346c <sgn0_pty_mod_n>
    c21a:	a94b      	add	r1, sp, #300	; 0x12c
    c21c:	ab40      	add	r3, sp, #256	; 0x100
    c21e:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
    c222:	f851 2f04 	ldr.w	r2, [r1, #4]!
    c226:	458c      	cmp	ip, r1
    c228:	d1fb      	bne.n	c222 <map_to_isogenous_E2+0x500>
    c22a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    c22e:	2200      	movs	r2, #0
    c230:	f853 1b04 	ldr.w	r1, [r3], #4
    c234:	430a      	orrs	r2, r1
    c236:	459c      	cmp	ip, r3
    c238:	d1fa      	bne.n	c230 <map_to_isogenous_E2+0x50e>
    c23a:	1e53      	subs	r3, r2, #1
    c23c:	ea23 0202 	bic.w	r2, r3, r2
    c240:	0fd3      	lsrs	r3, r2, #31
    c242:	ea00 72e2 	and.w	r2, r0, r2, asr #31
    c246:	1e58      	subs	r0, r3, #1
    c248:	ea00 0808 	and.w	r8, r0, r8
    c24c:	ea48 0802 	orr.w	r8, r8, r2
    c250:	ea84 0408 	eor.w	r4, r4, r8
    c254:	f004 0401 	and.w	r4, r4, #1
    c258:	f8df 804c 	ldr.w	r8, [pc, #76]	; c2a8 <map_to_isogenous_E2+0x586>
    c25c:	f04f 0a0c 	mov.w	sl, #12
    c260:	f8cd a000 	str.w	sl, [sp]
    c264:	4643      	mov	r3, r8
    c266:	4622      	mov	r2, r4
    c268:	4639      	mov	r1, r7
    c26a:	4638      	mov	r0, r7
    c26c:	f7f6 fb08 	bl	2880 <cneg_mod_n>
    c270:	f8cd a000 	str.w	sl, [sp]
    c274:	4643      	mov	r3, r8
    c276:	4622      	mov	r2, r4
    c278:	4629      	mov	r1, r5
    c27a:	4628      	mov	r0, r5
    c27c:	f7f6 fb00 	bl	2880 <cneg_mod_n>
    c280:	4c0a      	ldr	r4, [pc, #40]	; (c2ac <map_to_isogenous_E2+0x58a>)
    c282:	9400      	str	r4, [sp, #0]
    c284:	4643      	mov	r3, r8
    c286:	464a      	mov	r2, r9
    c288:	4631      	mov	r1, r6
    c28a:	4630      	mov	r0, r6
    c28c:	f7f8 ff8a 	bl	51a4 <mul_mont_384x>
    c290:	9400      	str	r4, [sp, #0]
    c292:	4643      	mov	r3, r8
    c294:	aa70      	add	r2, sp, #448	; 0x1c0
    c296:	4639      	mov	r1, r7
    c298:	4638      	mov	r0, r7
    c29a:	f7f8 ff83 	bl	51a4 <mul_mont_384x>
    c29e:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
    c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2a6:	bf00      	nop
    c2a8:	0001ade8 	.word	0x0001ade8
    c2ac:	fffcfffd 	.word	0xfffcfffd

0000c2b0 <map_to_g2>:
    c2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2b4:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
    c2b8:	4606      	mov	r6, r0
    c2ba:	4614      	mov	r4, r2
    c2bc:	a8f2      	add	r0, sp, #968	; 0x3c8
    c2be:	f7ff fd30 	bl	bd22 <map_to_isogenous_E2>
    c2c2:	b14c      	cbz	r4, c2d8 <map_to_g2+0x28>
    c2c4:	4621      	mov	r1, r4
    c2c6:	4630      	mov	r0, r6
    c2c8:	f7ff fd2b 	bl	bd22 <map_to_isogenous_E2>
    c2cc:	4b97      	ldr	r3, [pc, #604]	; (c52c <map_to_g2+0x27c>)
    c2ce:	4632      	mov	r2, r6
    c2d0:	a9f2      	add	r1, sp, #968	; 0x3c8
    c2d2:	4608      	mov	r0, r1
    c2d4:	f7fe f914 	bl	a500 <POINTonE2_dadd>
    c2d8:	4d95      	ldr	r5, [pc, #596]	; (c530 <map_to_g2+0x280>)
    c2da:	4c96      	ldr	r4, [pc, #600]	; (c534 <map_to_g2+0x284>)
    c2dc:	462b      	mov	r3, r5
    c2de:	4622      	mov	r2, r4
    c2e0:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
    c2e4:	a892      	add	r0, sp, #584	; 0x248
    c2e6:	f7fd f959 	bl	959c <sqr_mont_384x>
    c2ea:	462b      	mov	r3, r5
    c2ec:	4622      	mov	r2, r4
    c2ee:	a992      	add	r1, sp, #584	; 0x248
    c2f0:	a87a      	add	r0, sp, #488	; 0x1e8
    c2f2:	f7fd f953 	bl	959c <sqr_mont_384x>
    c2f6:	9500      	str	r5, [sp, #0]
    c2f8:	4623      	mov	r3, r4
    c2fa:	aa7a      	add	r2, sp, #488	; 0x1e8
    c2fc:	a992      	add	r1, sp, #584	; 0x248
    c2fe:	a862      	add	r0, sp, #392	; 0x188
    c300:	f7f8 ff50 	bl	51a4 <mul_mont_384x>
    c304:	f8df 8230 	ldr.w	r8, [pc, #560]	; c538 <map_to_g2+0x288>
    c308:	2303      	movs	r3, #3
    c30a:	aa62      	add	r2, sp, #392	; 0x188
    c30c:	f508 611c 	add.w	r1, r8, #2496	; 0x9c0
    c310:	a8aa      	add	r0, sp, #680	; 0x2a8
    c312:	f7f8 ffd5 	bl	52c0 <map_fp2_times_Zz>
    c316:	9500      	str	r5, [sp, #0]
    c318:	4623      	mov	r3, r4
    c31a:	f508 622e 	add.w	r2, r8, #2784	; 0xae0
    c31e:	a9f2      	add	r1, sp, #968	; 0x3c8
    c320:	a802      	add	r0, sp, #8
    c322:	f7f8 ff3f 	bl	51a4 <mul_mont_384x>
    c326:	270c      	movs	r7, #12
    c328:	9700      	str	r7, [sp, #0]
    c32a:	4623      	mov	r3, r4
    c32c:	aada      	add	r2, sp, #872	; 0x368
    c32e:	a902      	add	r1, sp, #8
    c330:	4608      	mov	r0, r1
    c332:	f7f4 fea3 	bl	107c <add_mod_n>
    c336:	9700      	str	r7, [sp, #0]
    c338:	4623      	mov	r3, r4
    c33a:	aae6      	add	r2, sp, #920	; 0x398
    c33c:	a90e      	add	r1, sp, #56	; 0x38
    c33e:	4608      	mov	r0, r1
    c340:	f7f4 fe9c 	bl	107c <add_mod_n>
    c344:	2302      	movs	r3, #2
    c346:	aaaa      	add	r2, sp, #680	; 0x2a8
    c348:	a9f2      	add	r1, sp, #968	; 0x3c8
    c34a:	a802      	add	r0, sp, #8
    c34c:	f7f9 f8a2 	bl	5494 <map_fp2>
    c350:	2302      	movs	r3, #2
    c352:	aa7a      	add	r2, sp, #488	; 0x1e8
    c354:	f508 6134 	add.w	r1, r8, #2880	; 0xb40
    c358:	a8aa      	add	r0, sp, #680	; 0x2a8
    c35a:	f7f8 ffb1 	bl	52c0 <map_fp2_times_Zz>
    c35e:	9700      	str	r7, [sp, #0]
    c360:	4623      	mov	r3, r4
    c362:	aac2      	add	r2, sp, #776	; 0x308
    c364:	a9f2      	add	r1, sp, #968	; 0x3c8
    c366:	a81a      	add	r0, sp, #104	; 0x68
    c368:	f7f4 fe88 	bl	107c <add_mod_n>
    c36c:	9700      	str	r7, [sp, #0]
    c36e:	4623      	mov	r3, r4
    c370:	aace      	add	r2, sp, #824	; 0x338
    c372:	a9fe      	add	r1, sp, #1016	; 0x3f8
    c374:	a826      	add	r0, sp, #152	; 0x98
    c376:	f7f4 fe81 	bl	107c <add_mod_n>
    c37a:	2301      	movs	r3, #1
    c37c:	aaaa      	add	r2, sp, #680	; 0x2a8
    c37e:	a9f2      	add	r1, sp, #968	; 0x3c8
    c380:	a81a      	add	r0, sp, #104	; 0x68
    c382:	f7f9 f887 	bl	5494 <map_fp2>
    c386:	9500      	str	r5, [sp, #0]
    c388:	4623      	mov	r3, r4
    c38a:	aa92      	add	r2, sp, #584	; 0x248
    c38c:	a91a      	add	r1, sp, #104	; 0x68
    c38e:	4608      	mov	r0, r1
    c390:	f7f8 ff08 	bl	51a4 <mul_mont_384x>
    c394:	2303      	movs	r3, #3
    c396:	aa62      	add	r2, sp, #392	; 0x188
    c398:	f508 6140 	add.w	r1, r8, #3072	; 0xc00
    c39c:	a8aa      	add	r0, sp, #680	; 0x2a8
    c39e:	f7f8 ff8f 	bl	52c0 <map_fp2_times_Zz>
    c3a2:	9500      	str	r5, [sp, #0]
    c3a4:	4623      	mov	r3, r4
    c3a6:	f508 6252 	add.w	r2, r8, #3360	; 0xd20
    c3aa:	a9f2      	add	r1, sp, #968	; 0x3c8
    c3ac:	a832      	add	r0, sp, #200	; 0xc8
    c3ae:	f7f8 fef9 	bl	51a4 <mul_mont_384x>
    c3b2:	9700      	str	r7, [sp, #0]
    c3b4:	4623      	mov	r3, r4
    c3b6:	aada      	add	r2, sp, #872	; 0x368
    c3b8:	a932      	add	r1, sp, #200	; 0xc8
    c3ba:	4608      	mov	r0, r1
    c3bc:	f7f4 fe5e 	bl	107c <add_mod_n>
    c3c0:	9700      	str	r7, [sp, #0]
    c3c2:	4623      	mov	r3, r4
    c3c4:	aae6      	add	r2, sp, #920	; 0x398
    c3c6:	a93e      	add	r1, sp, #248	; 0xf8
    c3c8:	4608      	mov	r0, r1
    c3ca:	f7f4 fe57 	bl	107c <add_mod_n>
    c3ce:	2302      	movs	r3, #2
    c3d0:	aaaa      	add	r2, sp, #680	; 0x2a8
    c3d2:	a9f2      	add	r1, sp, #968	; 0x3c8
    c3d4:	a832      	add	r0, sp, #200	; 0xc8
    c3d6:	f7f9 f85d 	bl	5494 <map_fp2>
    c3da:	9500      	str	r5, [sp, #0]
    c3dc:	4623      	mov	r3, r4
    c3de:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
    c3e2:	a932      	add	r1, sp, #200	; 0xc8
    c3e4:	4608      	mov	r0, r1
    c3e6:	f7f8 fedd 	bl	51a4 <mul_mont_384x>
    c3ea:	2303      	movs	r3, #3
    c3ec:	aa62      	add	r2, sp, #392	; 0x188
    c3ee:	f508 6158 	add.w	r1, r8, #3456	; 0xd80
    c3f2:	a8aa      	add	r0, sp, #680	; 0x2a8
    c3f4:	f7f8 ff64 	bl	52c0 <map_fp2_times_Zz>
    c3f8:	9700      	str	r7, [sp, #0]
    c3fa:	4623      	mov	r3, r4
    c3fc:	aada      	add	r2, sp, #872	; 0x368
    c3fe:	a9f2      	add	r1, sp, #968	; 0x3c8
    c400:	a84a      	add	r0, sp, #296	; 0x128
    c402:	f7f4 fe3b 	bl	107c <add_mod_n>
    c406:	9700      	str	r7, [sp, #0]
    c408:	4623      	mov	r3, r4
    c40a:	aae6      	add	r2, sp, #920	; 0x398
    c40c:	a9fe      	add	r1, sp, #1016	; 0x3f8
    c40e:	a856      	add	r0, sp, #344	; 0x158
    c410:	f7f4 fe34 	bl	107c <add_mod_n>
    c414:	2302      	movs	r3, #2
    c416:	aaaa      	add	r2, sp, #680	; 0x2a8
    c418:	a9f2      	add	r1, sp, #968	; 0x3c8
    c41a:	a84a      	add	r0, sp, #296	; 0x128
    c41c:	f7f9 f83a 	bl	5494 <map_fp2>
    c420:	9500      	str	r5, [sp, #0]
    c422:	4623      	mov	r3, r4
    c424:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
    c428:	a992      	add	r1, sp, #584	; 0x248
    c42a:	4608      	mov	r0, r1
    c42c:	f7f8 feba 	bl	51a4 <mul_mont_384x>
    c430:	9500      	str	r5, [sp, #0]
    c432:	4623      	mov	r3, r4
    c434:	aa92      	add	r2, sp, #584	; 0x248
    c436:	a94a      	add	r1, sp, #296	; 0x128
    c438:	4608      	mov	r0, r1
    c43a:	f7f8 feb3 	bl	51a4 <mul_mont_384x>
    c43e:	9500      	str	r5, [sp, #0]
    c440:	4623      	mov	r3, r4
    c442:	aa4a      	add	r2, sp, #296	; 0x128
    c444:	a91a      	add	r1, sp, #104	; 0x68
    c446:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
    c44a:	f7f8 feab 	bl	51a4 <mul_mont_384x>
    c44e:	9500      	str	r5, [sp, #0]
    c450:	4623      	mov	r3, r4
    c452:	aa4a      	add	r2, sp, #296	; 0x128
    c454:	a902      	add	r1, sp, #8
    c456:	a8f2      	add	r0, sp, #968	; 0x3c8
    c458:	f7f8 fea4 	bl	51a4 <mul_mont_384x>
    c45c:	9500      	str	r5, [sp, #0]
    c45e:	4623      	mov	r3, r4
    c460:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
    c464:	a9f2      	add	r1, sp, #968	; 0x3c8
    c466:	4608      	mov	r0, r1
    c468:	f7f8 fe9c 	bl	51a4 <mul_mont_384x>
    c46c:	462b      	mov	r3, r5
    c46e:	4622      	mov	r2, r4
    c470:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
    c474:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
    c478:	f7fd f890 	bl	959c <sqr_mont_384x>
    c47c:	9500      	str	r5, [sp, #0]
    c47e:	4623      	mov	r3, r4
    c480:	aa1a      	add	r2, sp, #104	; 0x68
    c482:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
    c486:	4608      	mov	r0, r1
    c488:	f7f8 fe8c 	bl	51a4 <mul_mont_384x>
    c48c:	9500      	str	r5, [sp, #0]
    c48e:	4623      	mov	r3, r4
    c490:	aa32      	add	r2, sp, #200	; 0xc8
    c492:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
    c496:	4608      	mov	r0, r1
    c498:	f7f8 fe84 	bl	51a4 <mul_mont_384x>
    c49c:	a9f2      	add	r1, sp, #968	; 0x3c8
    c49e:	4630      	mov	r0, r6
    c4a0:	f7fe fda8 	bl	aff4 <POINTonE2_double>
    c4a4:	4631      	mov	r1, r6
    c4a6:	4630      	mov	r0, r6
    c4a8:	f7f8 feca 	bl	5240 <psi>
    c4ac:	4631      	mov	r1, r6
    c4ae:	4630      	mov	r0, r6
    c4b0:	f7f8 fec6 	bl	5240 <psi>
    c4b4:	abf1      	add	r3, sp, #964	; 0x3c4
    c4b6:	aa61      	add	r2, sp, #388	; 0x184
    c4b8:	f20d 41e4 	addw	r1, sp, #1252	; 0x4e4
    c4bc:	f853 0f04 	ldr.w	r0, [r3, #4]!
    c4c0:	f842 0f04 	str.w	r0, [r2, #4]!
    c4c4:	428b      	cmp	r3, r1
    c4c6:	d1f9      	bne.n	c4bc <map_to_g2+0x20c>
    c4c8:	2101      	movs	r1, #1
    c4ca:	a862      	add	r0, sp, #392	; 0x188
    c4cc:	f7f7 fb60 	bl	3b90 <POINTonE2_cneg>
    c4d0:	a962      	add	r1, sp, #392	; 0x188
    c4d2:	a8aa      	add	r0, sp, #680	; 0x2a8
    c4d4:	f7f8 feb4 	bl	5240 <psi>
    c4d8:	2300      	movs	r3, #0
    c4da:	aa62      	add	r2, sp, #392	; 0x188
    c4dc:	4631      	mov	r1, r6
    c4de:	4630      	mov	r0, r6
    c4e0:	f7fe f80e 	bl	a500 <POINTonE2_dadd>
    c4e4:	2300      	movs	r3, #0
    c4e6:	aaaa      	add	r2, sp, #680	; 0x2a8
    c4e8:	4631      	mov	r1, r6
    c4ea:	4630      	mov	r0, r6
    c4ec:	f7fe f808 	bl	a500 <POINTonE2_dadd>
    c4f0:	a9f2      	add	r1, sp, #968	; 0x3c8
    c4f2:	a862      	add	r0, sp, #392	; 0x188
    c4f4:	f7ff f99b 	bl	b82e <POINTonE2_times_minus_z>
    c4f8:	2300      	movs	r3, #0
    c4fa:	aaf2      	add	r2, sp, #968	; 0x3c8
    c4fc:	a962      	add	r1, sp, #392	; 0x188
    c4fe:	4608      	mov	r0, r1
    c500:	f7fd fffe 	bl	a500 <POINTonE2_dadd>
    c504:	2300      	movs	r3, #0
    c506:	aaaa      	add	r2, sp, #680	; 0x2a8
    c508:	a962      	add	r1, sp, #392	; 0x188
    c50a:	4608      	mov	r0, r1
    c50c:	f7fd fff8 	bl	a500 <POINTonE2_dadd>
    c510:	a962      	add	r1, sp, #392	; 0x188
    c512:	a8aa      	add	r0, sp, #680	; 0x2a8
    c514:	f7ff f98b 	bl	b82e <POINTonE2_times_minus_z>
    c518:	2300      	movs	r3, #0
    c51a:	aaaa      	add	r2, sp, #680	; 0x2a8
    c51c:	4631      	mov	r1, r6
    c51e:	4630      	mov	r0, r6
    c520:	f7fd ffee 	bl	a500 <POINTonE2_dadd>
    c524:	f50d 6d9d 	add.w	sp, sp, #1256	; 0x4e8
    c528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c52c:	0001c780 	.word	0x0001c780
    c530:	fffcfffd 	.word	0xfffcfffd
    c534:	0001ade8 	.word	0x0001ade8
    c538:	0001bee0 	.word	0x0001bee0

0000c53c <blst_map_to_g2>:
    c53c:	b508      	push	{r3, lr}
    c53e:	f7ff feb7 	bl	c2b0 <map_to_g2>
    c542:	bd08      	pop	{r3, pc}

0000c544 <blst_encode_to_g2>:
    c544:	b510      	push	{r4, lr}
    c546:	b09c      	sub	sp, #112	; 0x70
    c548:	4604      	mov	r4, r0
    c54a:	981e      	ldr	r0, [sp, #120]	; 0x78
    c54c:	9003      	str	r0, [sp, #12]
    c54e:	9302      	str	r3, [sp, #8]
    c550:	9201      	str	r2, [sp, #4]
    c552:	9100      	str	r1, [sp, #0]
    c554:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c556:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    c558:	2102      	movs	r1, #2
    c55a:	a804      	add	r0, sp, #16
    c55c:	f7fc fc46 	bl	8dec <hash_to_field>
    c560:	2200      	movs	r2, #0
    c562:	a904      	add	r1, sp, #16
    c564:	4620      	mov	r0, r4
    c566:	f7ff fea3 	bl	c2b0 <map_to_g2>
    c56a:	b01c      	add	sp, #112	; 0x70
    c56c:	bd10      	pop	{r4, pc}

0000c56e <blst_hash_to_g2>:
    c56e:	b510      	push	{r4, lr}
    c570:	b0b4      	sub	sp, #208	; 0xd0
    c572:	4604      	mov	r4, r0
    c574:	9836      	ldr	r0, [sp, #216]	; 0xd8
    c576:	9003      	str	r0, [sp, #12]
    c578:	9302      	str	r3, [sp, #8]
    c57a:	9201      	str	r2, [sp, #4]
    c57c:	9100      	str	r1, [sp, #0]
    c57e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    c580:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    c582:	2104      	movs	r1, #4
    c584:	a804      	add	r0, sp, #16
    c586:	f7fc fc31 	bl	8dec <hash_to_field>
    c58a:	aa1c      	add	r2, sp, #112	; 0x70
    c58c:	a904      	add	r1, sp, #16
    c58e:	4620      	mov	r0, r4
    c590:	f7ff fe8e 	bl	c2b0 <map_to_g2>
    c594:	b034      	add	sp, #208	; 0xd0
    c596:	bd10      	pop	{r4, pc}

0000c598 <sqr_fp4>:
    c598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c59c:	b0be      	sub	sp, #248	; 0xf8
    c59e:	4604      	mov	r4, r0
    c5a0:	468a      	mov	sl, r1
    c5a2:	4617      	mov	r7, r2
    c5a4:	4e3a      	ldr	r6, [pc, #232]	; (c690 <sqr_fp4+0xf8>)
    c5a6:	4d3b      	ldr	r5, [pc, #236]	; (c694 <sqr_fp4+0xfc>)
    c5a8:	4633      	mov	r3, r6
    c5aa:	462a      	mov	r2, r5
    c5ac:	a826      	add	r0, sp, #152	; 0x98
    c5ae:	f7fc fff5 	bl	959c <sqr_mont_384x>
    c5b2:	4633      	mov	r3, r6
    c5b4:	462a      	mov	r2, r5
    c5b6:	4639      	mov	r1, r7
    c5b8:	a80e      	add	r0, sp, #56	; 0x38
    c5ba:	f7fc ffef 	bl	959c <sqr_mont_384x>
    c5be:	f104 0660 	add.w	r6, r4, #96	; 0x60
    c5c2:	f04f 090c 	mov.w	r9, #12
    c5c6:	f8cd 9000 	str.w	r9, [sp]
    c5ca:	462b      	mov	r3, r5
    c5cc:	463a      	mov	r2, r7
    c5ce:	4651      	mov	r1, sl
    c5d0:	4630      	mov	r0, r6
    c5d2:	f7f4 fd53 	bl	107c <add_mod_n>
    c5d6:	f104 0890 	add.w	r8, r4, #144	; 0x90
    c5da:	f8cd 9000 	str.w	r9, [sp]
    c5de:	462b      	mov	r3, r5
    c5e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c5e4:	f10a 0130 	add.w	r1, sl, #48	; 0x30
    c5e8:	4640      	mov	r0, r8
    c5ea:	f7f4 fd47 	bl	107c <add_mod_n>
    c5ee:	f8cd 9000 	str.w	r9, [sp]
    c5f2:	462b      	mov	r3, r5
    c5f4:	aa1a      	add	r2, sp, #104	; 0x68
    c5f6:	a90e      	add	r1, sp, #56	; 0x38
    c5f8:	a802      	add	r0, sp, #8
    c5fa:	f7f4 fd3f 	bl	107c <add_mod_n>
    c5fe:	f8cd 9000 	str.w	r9, [sp]
    c602:	462b      	mov	r3, r5
    c604:	aa1a      	add	r2, sp, #104	; 0x68
    c606:	a90e      	add	r1, sp, #56	; 0x38
    c608:	4620      	mov	r0, r4
    c60a:	f7f4 f884 	bl	716 <sub_mod_n>
    c60e:	ab02      	add	r3, sp, #8
    c610:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    c614:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    c618:	f853 0b04 	ldr.w	r0, [r3], #4
    c61c:	f842 0f04 	str.w	r0, [r2, #4]!
    c620:	4291      	cmp	r1, r2
    c622:	d1f9      	bne.n	c618 <sqr_fp4+0x80>
    c624:	4d1b      	ldr	r5, [pc, #108]	; (c694 <sqr_fp4+0xfc>)
    c626:	270c      	movs	r7, #12
    c628:	9700      	str	r7, [sp, #0]
    c62a:	462b      	mov	r3, r5
    c62c:	aa26      	add	r2, sp, #152	; 0x98
    c62e:	4621      	mov	r1, r4
    c630:	4620      	mov	r0, r4
    c632:	f7f4 fd23 	bl	107c <add_mod_n>
    c636:	f104 0030 	add.w	r0, r4, #48	; 0x30
    c63a:	9700      	str	r7, [sp, #0]
    c63c:	462b      	mov	r3, r5
    c63e:	aa32      	add	r2, sp, #200	; 0xc8
    c640:	4601      	mov	r1, r0
    c642:	f7f4 fd1b 	bl	107c <add_mod_n>
    c646:	4b12      	ldr	r3, [pc, #72]	; (c690 <sqr_fp4+0xf8>)
    c648:	462a      	mov	r2, r5
    c64a:	4631      	mov	r1, r6
    c64c:	4630      	mov	r0, r6
    c64e:	f7fc ffa5 	bl	959c <sqr_mont_384x>
    c652:	9700      	str	r7, [sp, #0]
    c654:	462b      	mov	r3, r5
    c656:	aa26      	add	r2, sp, #152	; 0x98
    c658:	4631      	mov	r1, r6
    c65a:	4630      	mov	r0, r6
    c65c:	f7f4 f85b 	bl	716 <sub_mod_n>
    c660:	9700      	str	r7, [sp, #0]
    c662:	462b      	mov	r3, r5
    c664:	aa32      	add	r2, sp, #200	; 0xc8
    c666:	4641      	mov	r1, r8
    c668:	4640      	mov	r0, r8
    c66a:	f7f4 f854 	bl	716 <sub_mod_n>
    c66e:	9700      	str	r7, [sp, #0]
    c670:	462b      	mov	r3, r5
    c672:	aa0e      	add	r2, sp, #56	; 0x38
    c674:	4631      	mov	r1, r6
    c676:	4630      	mov	r0, r6
    c678:	f7f4 f84d 	bl	716 <sub_mod_n>
    c67c:	9700      	str	r7, [sp, #0]
    c67e:	462b      	mov	r3, r5
    c680:	aa1a      	add	r2, sp, #104	; 0x68
    c682:	4641      	mov	r1, r8
    c684:	4640      	mov	r0, r8
    c686:	f7f4 f846 	bl	716 <sub_mod_n>
    c68a:	b03e      	add	sp, #248	; 0xf8
    c68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c690:	fffcfffd 	.word	0xfffcfffd
    c694:	0001ade8 	.word	0x0001ade8

0000c698 <cyclotomic_sqr_fp12>:
    c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c69c:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
    c6a0:	4604      	mov	r4, r0
    c6a2:	460f      	mov	r7, r1
    c6a4:	f501 7590 	add.w	r5, r1, #288	; 0x120
    c6a8:	9503      	str	r5, [sp, #12]
    c6aa:	f501 7ac0 	add.w	sl, r1, #384	; 0x180
    c6ae:	4652      	mov	r2, sl
    c6b0:	a870      	add	r0, sp, #448	; 0x1c0
    c6b2:	f7ff ff71 	bl	c598 <sqr_fp4>
    c6b6:	f107 0bc0 	add.w	fp, r7, #192	; 0xc0
    c6ba:	465a      	mov	r2, fp
    c6bc:	4629      	mov	r1, r5
    c6be:	a840      	add	r0, sp, #256	; 0x100
    c6c0:	f7ff ff6a 	bl	c598 <sqr_fp4>
    c6c4:	f107 0860 	add.w	r8, r7, #96	; 0x60
    c6c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
    c6cc:	9302      	str	r3, [sp, #8]
    c6ce:	461a      	mov	r2, r3
    c6d0:	4641      	mov	r1, r8
    c6d2:	a810      	add	r0, sp, #64	; 0x40
    c6d4:	f7ff ff60 	bl	c598 <sqr_fp4>
    c6d8:	4d9b      	ldr	r5, [pc, #620]	; (c948 <cyclotomic_sqr_fp12+0x2b0>)
    c6da:	260c      	movs	r6, #12
    c6dc:	9600      	str	r6, [sp, #0]
    c6de:	462b      	mov	r3, r5
    c6e0:	463a      	mov	r2, r7
    c6e2:	a970      	add	r1, sp, #448	; 0x1c0
    c6e4:	4620      	mov	r0, r4
    c6e6:	f7f4 f816 	bl	716 <sub_mod_n>
    c6ea:	f104 0930 	add.w	r9, r4, #48	; 0x30
    c6ee:	9600      	str	r6, [sp, #0]
    c6f0:	462b      	mov	r3, r5
    c6f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c6f6:	a97c      	add	r1, sp, #496	; 0x1f0
    c6f8:	4648      	mov	r0, r9
    c6fa:	f7f4 f80c 	bl	716 <sub_mod_n>
    c6fe:	9600      	str	r6, [sp, #0]
    c700:	462b      	mov	r3, r5
    c702:	4622      	mov	r2, r4
    c704:	4621      	mov	r1, r4
    c706:	4620      	mov	r0, r4
    c708:	f7f4 fcb8 	bl	107c <add_mod_n>
    c70c:	9600      	str	r6, [sp, #0]
    c70e:	462b      	mov	r3, r5
    c710:	464a      	mov	r2, r9
    c712:	4649      	mov	r1, r9
    c714:	4648      	mov	r0, r9
    c716:	f7f4 fcb1 	bl	107c <add_mod_n>
    c71a:	9600      	str	r6, [sp, #0]
    c71c:	462b      	mov	r3, r5
    c71e:	aa70      	add	r2, sp, #448	; 0x1c0
    c720:	4621      	mov	r1, r4
    c722:	4620      	mov	r0, r4
    c724:	f7f4 fcaa 	bl	107c <add_mod_n>
    c728:	9600      	str	r6, [sp, #0]
    c72a:	462b      	mov	r3, r5
    c72c:	aa7c      	add	r2, sp, #496	; 0x1f0
    c72e:	4649      	mov	r1, r9
    c730:	4648      	mov	r0, r9
    c732:	f7f4 fca3 	bl	107c <add_mod_n>
    c736:	f104 0960 	add.w	r9, r4, #96	; 0x60
    c73a:	9600      	str	r6, [sp, #0]
    c73c:	462b      	mov	r3, r5
    c73e:	4642      	mov	r2, r8
    c740:	a940      	add	r1, sp, #256	; 0x100
    c742:	4648      	mov	r0, r9
    c744:	f7f3 ffe7 	bl	716 <sub_mod_n>
    c748:	f104 0890 	add.w	r8, r4, #144	; 0x90
    c74c:	9600      	str	r6, [sp, #0]
    c74e:	462b      	mov	r3, r5
    c750:	f107 0290 	add.w	r2, r7, #144	; 0x90
    c754:	a94c      	add	r1, sp, #304	; 0x130
    c756:	4640      	mov	r0, r8
    c758:	f7f3 ffdd 	bl	716 <sub_mod_n>
    c75c:	9600      	str	r6, [sp, #0]
    c75e:	462b      	mov	r3, r5
    c760:	464a      	mov	r2, r9
    c762:	4649      	mov	r1, r9
    c764:	4648      	mov	r0, r9
    c766:	f7f4 fc89 	bl	107c <add_mod_n>
    c76a:	9600      	str	r6, [sp, #0]
    c76c:	462b      	mov	r3, r5
    c76e:	4642      	mov	r2, r8
    c770:	4641      	mov	r1, r8
    c772:	4640      	mov	r0, r8
    c774:	f7f4 fc82 	bl	107c <add_mod_n>
    c778:	9600      	str	r6, [sp, #0]
    c77a:	462b      	mov	r3, r5
    c77c:	aa40      	add	r2, sp, #256	; 0x100
    c77e:	4649      	mov	r1, r9
    c780:	4648      	mov	r0, r9
    c782:	f7f4 fc7b 	bl	107c <add_mod_n>
    c786:	9600      	str	r6, [sp, #0]
    c788:	462b      	mov	r3, r5
    c78a:	aa4c      	add	r2, sp, #304	; 0x130
    c78c:	4641      	mov	r1, r8
    c78e:	4640      	mov	r0, r8
    c790:	f7f4 fc74 	bl	107c <add_mod_n>
    c794:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
    c798:	9600      	str	r6, [sp, #0]
    c79a:	462b      	mov	r3, r5
    c79c:	465a      	mov	r2, fp
    c79e:	a910      	add	r1, sp, #64	; 0x40
    c7a0:	4640      	mov	r0, r8
    c7a2:	f7f3 ffb8 	bl	716 <sub_mod_n>
    c7a6:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
    c7aa:	9600      	str	r6, [sp, #0]
    c7ac:	462b      	mov	r3, r5
    c7ae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
    c7b2:	a91c      	add	r1, sp, #112	; 0x70
    c7b4:	4648      	mov	r0, r9
    c7b6:	f7f3 ffae 	bl	716 <sub_mod_n>
    c7ba:	9600      	str	r6, [sp, #0]
    c7bc:	462b      	mov	r3, r5
    c7be:	4642      	mov	r2, r8
    c7c0:	4641      	mov	r1, r8
    c7c2:	4640      	mov	r0, r8
    c7c4:	f7f4 fc5a 	bl	107c <add_mod_n>
    c7c8:	9600      	str	r6, [sp, #0]
    c7ca:	462b      	mov	r3, r5
    c7cc:	464a      	mov	r2, r9
    c7ce:	4649      	mov	r1, r9
    c7d0:	4648      	mov	r0, r9
    c7d2:	f7f4 fc53 	bl	107c <add_mod_n>
    c7d6:	9600      	str	r6, [sp, #0]
    c7d8:	462b      	mov	r3, r5
    c7da:	aa10      	add	r2, sp, #64	; 0x40
    c7dc:	4641      	mov	r1, r8
    c7de:	4640      	mov	r0, r8
    c7e0:	f7f4 fc4c 	bl	107c <add_mod_n>
    c7e4:	9600      	str	r6, [sp, #0]
    c7e6:	462b      	mov	r3, r5
    c7e8:	aa1c      	add	r2, sp, #112	; 0x70
    c7ea:	4649      	mov	r1, r9
    c7ec:	4648      	mov	r0, r9
    c7ee:	f7f4 fc45 	bl	107c <add_mod_n>
    c7f2:	9600      	str	r6, [sp, #0]
    c7f4:	462b      	mov	r3, r5
    c7f6:	aa34      	add	r2, sp, #208	; 0xd0
    c7f8:	a928      	add	r1, sp, #160	; 0xa0
    c7fa:	a804      	add	r0, sp, #16
    c7fc:	f7f4 fc3e 	bl	107c <add_mod_n>
    c800:	9600      	str	r6, [sp, #0]
    c802:	462b      	mov	r3, r5
    c804:	aa34      	add	r2, sp, #208	; 0xd0
    c806:	a928      	add	r1, sp, #160	; 0xa0
    c808:	4608      	mov	r0, r1
    c80a:	f7f3 ff84 	bl	716 <sub_mod_n>
    c80e:	ab04      	add	r3, sp, #16
    c810:	aa33      	add	r2, sp, #204	; 0xcc
    c812:	a910      	add	r1, sp, #64	; 0x40
    c814:	f853 0b04 	ldr.w	r0, [r3], #4
    c818:	f842 0f04 	str.w	r0, [r2, #4]!
    c81c:	4299      	cmp	r1, r3
    c81e:	d1f9      	bne.n	c814 <cyclotomic_sqr_fp12+0x17c>
    c820:	f504 7890 	add.w	r8, r4, #288	; 0x120
    c824:	4d48      	ldr	r5, [pc, #288]	; (c948 <cyclotomic_sqr_fp12+0x2b0>)
    c826:	260c      	movs	r6, #12
    c828:	9600      	str	r6, [sp, #0]
    c82a:	462b      	mov	r3, r5
    c82c:	9a03      	ldr	r2, [sp, #12]
    c82e:	a928      	add	r1, sp, #160	; 0xa0
    c830:	4640      	mov	r0, r8
    c832:	f7f4 fc23 	bl	107c <add_mod_n>
    c836:	f504 79a8 	add.w	r9, r4, #336	; 0x150
    c83a:	9600      	str	r6, [sp, #0]
    c83c:	462b      	mov	r3, r5
    c83e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
    c842:	a934      	add	r1, sp, #208	; 0xd0
    c844:	4648      	mov	r0, r9
    c846:	f7f4 fc19 	bl	107c <add_mod_n>
    c84a:	9600      	str	r6, [sp, #0]
    c84c:	462b      	mov	r3, r5
    c84e:	4642      	mov	r2, r8
    c850:	4641      	mov	r1, r8
    c852:	4640      	mov	r0, r8
    c854:	f7f4 fc12 	bl	107c <add_mod_n>
    c858:	9600      	str	r6, [sp, #0]
    c85a:	462b      	mov	r3, r5
    c85c:	464a      	mov	r2, r9
    c85e:	4649      	mov	r1, r9
    c860:	4648      	mov	r0, r9
    c862:	f7f4 fc0b 	bl	107c <add_mod_n>
    c866:	9600      	str	r6, [sp, #0]
    c868:	462b      	mov	r3, r5
    c86a:	aa28      	add	r2, sp, #160	; 0xa0
    c86c:	4641      	mov	r1, r8
    c86e:	4640      	mov	r0, r8
    c870:	f7f4 fc04 	bl	107c <add_mod_n>
    c874:	9600      	str	r6, [sp, #0]
    c876:	462b      	mov	r3, r5
    c878:	aa34      	add	r2, sp, #208	; 0xd0
    c87a:	4649      	mov	r1, r9
    c87c:	4648      	mov	r0, r9
    c87e:	f7f4 fbfd 	bl	107c <add_mod_n>
    c882:	f504 79c0 	add.w	r9, r4, #384	; 0x180
    c886:	9600      	str	r6, [sp, #0]
    c888:	462b      	mov	r3, r5
    c88a:	4652      	mov	r2, sl
    c88c:	a988      	add	r1, sp, #544	; 0x220
    c88e:	4648      	mov	r0, r9
    c890:	f7f4 fbf4 	bl	107c <add_mod_n>
    c894:	f504 78d8 	add.w	r8, r4, #432	; 0x1b0
    c898:	9600      	str	r6, [sp, #0]
    c89a:	462b      	mov	r3, r5
    c89c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
    c8a0:	a994      	add	r1, sp, #592	; 0x250
    c8a2:	4640      	mov	r0, r8
    c8a4:	f7f4 fbea 	bl	107c <add_mod_n>
    c8a8:	9600      	str	r6, [sp, #0]
    c8aa:	462b      	mov	r3, r5
    c8ac:	464a      	mov	r2, r9
    c8ae:	4649      	mov	r1, r9
    c8b0:	4648      	mov	r0, r9
    c8b2:	f7f4 fbe3 	bl	107c <add_mod_n>
    c8b6:	9600      	str	r6, [sp, #0]
    c8b8:	462b      	mov	r3, r5
    c8ba:	4642      	mov	r2, r8
    c8bc:	4641      	mov	r1, r8
    c8be:	4640      	mov	r0, r8
    c8c0:	f7f4 fbdc 	bl	107c <add_mod_n>
    c8c4:	9600      	str	r6, [sp, #0]
    c8c6:	462b      	mov	r3, r5
    c8c8:	aa88      	add	r2, sp, #544	; 0x220
    c8ca:	4649      	mov	r1, r9
    c8cc:	4648      	mov	r0, r9
    c8ce:	f7f4 fbd5 	bl	107c <add_mod_n>
    c8d2:	9600      	str	r6, [sp, #0]
    c8d4:	462b      	mov	r3, r5
    c8d6:	aa94      	add	r2, sp, #592	; 0x250
    c8d8:	4641      	mov	r1, r8
    c8da:	4640      	mov	r0, r8
    c8dc:	f7f4 fbce 	bl	107c <add_mod_n>
    c8e0:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
    c8e4:	9600      	str	r6, [sp, #0]
    c8e6:	462b      	mov	r3, r5
    c8e8:	9a02      	ldr	r2, [sp, #8]
    c8ea:	a958      	add	r1, sp, #352	; 0x160
    c8ec:	4640      	mov	r0, r8
    c8ee:	f7f4 fbc5 	bl	107c <add_mod_n>
    c8f2:	f504 7404 	add.w	r4, r4, #528	; 0x210
    c8f6:	9600      	str	r6, [sp, #0]
    c8f8:	462b      	mov	r3, r5
    c8fa:	f507 7204 	add.w	r2, r7, #528	; 0x210
    c8fe:	a964      	add	r1, sp, #400	; 0x190
    c900:	4620      	mov	r0, r4
    c902:	f7f4 fbbb 	bl	107c <add_mod_n>
    c906:	9600      	str	r6, [sp, #0]
    c908:	462b      	mov	r3, r5
    c90a:	4642      	mov	r2, r8
    c90c:	4641      	mov	r1, r8
    c90e:	4640      	mov	r0, r8
    c910:	f7f4 fbb4 	bl	107c <add_mod_n>
    c914:	9600      	str	r6, [sp, #0]
    c916:	462b      	mov	r3, r5
    c918:	4622      	mov	r2, r4
    c91a:	4621      	mov	r1, r4
    c91c:	4620      	mov	r0, r4
    c91e:	f7f4 fbad 	bl	107c <add_mod_n>
    c922:	9600      	str	r6, [sp, #0]
    c924:	462b      	mov	r3, r5
    c926:	aa58      	add	r2, sp, #352	; 0x160
    c928:	4641      	mov	r1, r8
    c92a:	4640      	mov	r0, r8
    c92c:	f7f4 fba6 	bl	107c <add_mod_n>
    c930:	9600      	str	r6, [sp, #0]
    c932:	462b      	mov	r3, r5
    c934:	aa64      	add	r2, sp, #400	; 0x190
    c936:	4621      	mov	r1, r4
    c938:	4620      	mov	r0, r4
    c93a:	f7f4 fb9f 	bl	107c <add_mod_n>
    c93e:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
    c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c946:	bf00      	nop
    c948:	0001ade8 	.word	0x0001ade8

0000c94c <blst_fp12_cyclotomic_sqr>:
    c94c:	b508      	push	{r3, lr}
    c94e:	f7ff fea3 	bl	c698 <cyclotomic_sqr_fp12>
    c952:	bd08      	pop	{r3, pc}

0000c954 <mul_n_sqr>:
    c954:	b570      	push	{r4, r5, r6, lr}
    c956:	4605      	mov	r5, r0
    c958:	4616      	mov	r6, r2
    c95a:	460a      	mov	r2, r1
    c95c:	4601      	mov	r1, r0
    c95e:	f7f8 ff33 	bl	57c8 <mul_fp12>
    c962:	1e74      	subs	r4, r6, #1
    c964:	b13e      	cbz	r6, c976 <mul_n_sqr+0x22>
    c966:	4629      	mov	r1, r5
    c968:	4628      	mov	r0, r5
    c96a:	f7ff fe95 	bl	c698 <cyclotomic_sqr_fp12>
    c96e:	3c01      	subs	r4, #1
    c970:	f1b4 3fff 	cmp.w	r4, #4294967295
    c974:	d1f7      	bne.n	c966 <mul_n_sqr+0x12>
    c976:	bd70      	pop	{r4, r5, r6, pc}

0000c978 <raise_to_z_div_by_2>:
    c978:	b538      	push	{r3, r4, r5, lr}
    c97a:	4604      	mov	r4, r0
    c97c:	460d      	mov	r5, r1
    c97e:	f7ff fe8b 	bl	c698 <cyclotomic_sqr_fp12>
    c982:	2202      	movs	r2, #2
    c984:	4629      	mov	r1, r5
    c986:	4620      	mov	r0, r4
    c988:	f7ff ffe4 	bl	c954 <mul_n_sqr>
    c98c:	2203      	movs	r2, #3
    c98e:	4629      	mov	r1, r5
    c990:	4620      	mov	r0, r4
    c992:	f7ff ffdf 	bl	c954 <mul_n_sqr>
    c996:	2209      	movs	r2, #9
    c998:	4629      	mov	r1, r5
    c99a:	4620      	mov	r0, r4
    c99c:	f7ff ffda 	bl	c954 <mul_n_sqr>
    c9a0:	2220      	movs	r2, #32
    c9a2:	4629      	mov	r1, r5
    c9a4:	4620      	mov	r0, r4
    c9a6:	f7ff ffd5 	bl	c954 <mul_n_sqr>
    c9aa:	220f      	movs	r2, #15
    c9ac:	4629      	mov	r1, r5
    c9ae:	4620      	mov	r0, r4
    c9b0:	f7ff ffd0 	bl	c954 <mul_n_sqr>
    c9b4:	4620      	mov	r0, r4
    c9b6:	f7f7 f9d1 	bl	3d5c <conjugate_fp12>
    c9ba:	bd38      	pop	{r3, r4, r5, pc}

0000c9bc <blst_fp12_in_group>:
    c9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9be:	f6ad 1d04 	subw	sp, sp, #2308	; 0x904
    c9c2:	4605      	mov	r5, r0
    c9c4:	1f03      	subs	r3, r0, #4
    c9c6:	f500 700f 	add.w	r0, r0, #572	; 0x23c
    c9ca:	2200      	movs	r2, #0
    c9cc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    c9d0:	430a      	orrs	r2, r1
    c9d2:	4283      	cmp	r3, r0
    c9d4:	d1fa      	bne.n	c9cc <blst_fp12_in_group+0x10>
    c9d6:	1e54      	subs	r4, r2, #1
    c9d8:	ea24 0202 	bic.w	r2, r4, r2
    c9dc:	0fd4      	lsrs	r4, r2, #31
    c9de:	d003      	beq.n	c9e8 <blst_fp12_in_group+0x2c>
    c9e0:	2000      	movs	r0, #0
    c9e2:	f60d 1d04 	addw	sp, sp, #2308	; 0x904
    c9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9e8:	2202      	movs	r2, #2
    c9ea:	4629      	mov	r1, r5
    c9ec:	4668      	mov	r0, sp
    c9ee:	f7f8 fd11 	bl	5414 <frobenius_map_fp12>
    c9f2:	2202      	movs	r2, #2
    c9f4:	4669      	mov	r1, sp
    c9f6:	a890      	add	r0, sp, #576	; 0x240
    c9f8:	f7f8 fd0c 	bl	5414 <frobenius_map_fp12>
    c9fc:	462a      	mov	r2, r5
    c9fe:	a990      	add	r1, sp, #576	; 0x240
    ca00:	4608      	mov	r0, r1
    ca02:	f7f8 fee1 	bl	57c8 <mul_fp12>
    ca06:	f1ad 0204 	sub.w	r2, sp, #4
    ca0a:	a88f      	add	r0, sp, #572	; 0x23c
    ca0c:	4607      	mov	r7, r0
    ca0e:	4621      	mov	r1, r4
    ca10:	f852 3f04 	ldr.w	r3, [r2, #4]!
    ca14:	f850 6f04 	ldr.w	r6, [r0, #4]!
    ca18:	4073      	eors	r3, r6
    ca1a:	4319      	orrs	r1, r3
    ca1c:	42ba      	cmp	r2, r7
    ca1e:	d1f7      	bne.n	ca10 <blst_fp12_in_group+0x54>
    ca20:	1e4b      	subs	r3, r1, #1
    ca22:	438b      	bics	r3, r1
    ca24:	d401      	bmi.n	ca2a <blst_fp12_in_group+0x6e>
    ca26:	2000      	movs	r0, #0
    ca28:	e7db      	b.n	c9e2 <blst_fp12_in_group+0x26>
    ca2a:	2201      	movs	r2, #1
    ca2c:	4629      	mov	r1, r5
    ca2e:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
    ca32:	f7f8 fcef 	bl	5414 <frobenius_map_fp12>
    ca36:	4629      	mov	r1, r5
    ca38:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    ca3c:	f7ff ff9c 	bl	c978 <raise_to_z_div_by_2>
    ca40:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    ca44:	4608      	mov	r0, r1
    ca46:	f7ff fe27 	bl	c698 <cyclotomic_sqr_fp12>
    ca4a:	f20d 62bc 	addw	r2, sp, #1724	; 0x6bc
    ca4e:	f20d 417c 	addw	r1, sp, #1148	; 0x47c
    ca52:	f60d 05fc 	addw	r5, sp, #2300	; 0x8fc
    ca56:	f852 3f04 	ldr.w	r3, [r2, #4]!
    ca5a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    ca5e:	4043      	eors	r3, r0
    ca60:	431c      	orrs	r4, r3
    ca62:	42aa      	cmp	r2, r5
    ca64:	d1f7      	bne.n	ca56 <blst_fp12_in_group+0x9a>
    ca66:	1e60      	subs	r0, r4, #1
    ca68:	ea20 0004 	bic.w	r0, r0, r4
    ca6c:	0fc0      	lsrs	r0, r0, #31
    ca6e:	e7b8      	b.n	c9e2 <blst_fp12_in_group+0x26>

0000ca70 <sqr_fp6>:
    ca70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca74:	b0ef      	sub	sp, #444	; 0x1bc
    ca76:	4606      	mov	r6, r0
    ca78:	4689      	mov	r9, r1
    ca7a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; cc70 <sqr_fp6+0x200>
    ca7e:	4c7b      	ldr	r4, [pc, #492]	; (cc6c <sqr_fp6+0x1fc>)
    ca80:	4653      	mov	r3, sl
    ca82:	4622      	mov	r2, r4
    ca84:	a856      	add	r0, sp, #344	; 0x158
    ca86:	f7fc fd89 	bl	959c <sqr_mont_384x>
    ca8a:	f109 0b60 	add.w	fp, r9, #96	; 0x60
    ca8e:	f8cd a000 	str.w	sl, [sp]
    ca92:	4623      	mov	r3, r4
    ca94:	465a      	mov	r2, fp
    ca96:	4649      	mov	r1, r9
    ca98:	a83e      	add	r0, sp, #248	; 0xf8
    ca9a:	f7f8 fb83 	bl	51a4 <mul_mont_384x>
    ca9e:	250c      	movs	r5, #12
    caa0:	9500      	str	r5, [sp, #0]
    caa2:	4623      	mov	r3, r4
    caa4:	aa3e      	add	r2, sp, #248	; 0xf8
    caa6:	4611      	mov	r1, r2
    caa8:	4610      	mov	r0, r2
    caaa:	f7f4 fae7 	bl	107c <add_mod_n>
    caae:	9500      	str	r5, [sp, #0]
    cab0:	4623      	mov	r3, r4
    cab2:	aa4a      	add	r2, sp, #296	; 0x128
    cab4:	4611      	mov	r1, r2
    cab6:	4610      	mov	r0, r2
    cab8:	f7f4 fae0 	bl	107c <add_mod_n>
    cabc:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
    cac0:	f8cd a000 	str.w	sl, [sp]
    cac4:	4623      	mov	r3, r4
    cac6:	4642      	mov	r2, r8
    cac8:	4659      	mov	r1, fp
    caca:	a826      	add	r0, sp, #152	; 0x98
    cacc:	f7f8 fb6a 	bl	51a4 <mul_mont_384x>
    cad0:	9500      	str	r5, [sp, #0]
    cad2:	4623      	mov	r3, r4
    cad4:	aa26      	add	r2, sp, #152	; 0x98
    cad6:	4611      	mov	r1, r2
    cad8:	4610      	mov	r0, r2
    cada:	f7f4 facf 	bl	107c <add_mod_n>
    cade:	9500      	str	r5, [sp, #0]
    cae0:	4623      	mov	r3, r4
    cae2:	aa32      	add	r2, sp, #200	; 0xc8
    cae4:	4611      	mov	r1, r2
    cae6:	4610      	mov	r0, r2
    cae8:	f7f4 fac8 	bl	107c <add_mod_n>
    caec:	4653      	mov	r3, sl
    caee:	4622      	mov	r2, r4
    caf0:	4641      	mov	r1, r8
    caf2:	a80e      	add	r0, sp, #56	; 0x38
    caf4:	f7fc fd52 	bl	959c <sqr_mont_384x>
    caf8:	f106 07c0 	add.w	r7, r6, #192	; 0xc0
    cafc:	9500      	str	r5, [sp, #0]
    cafe:	4623      	mov	r3, r4
    cb00:	465a      	mov	r2, fp
    cb02:	4641      	mov	r1, r8
    cb04:	4638      	mov	r0, r7
    cb06:	f7f4 fab9 	bl	107c <add_mod_n>
    cb0a:	f106 08f0 	add.w	r8, r6, #240	; 0xf0
    cb0e:	9500      	str	r5, [sp, #0]
    cb10:	4623      	mov	r3, r4
    cb12:	f109 0290 	add.w	r2, r9, #144	; 0x90
    cb16:	f109 01f0 	add.w	r1, r9, #240	; 0xf0
    cb1a:	4640      	mov	r0, r8
    cb1c:	f7f4 faae 	bl	107c <add_mod_n>
    cb20:	9500      	str	r5, [sp, #0]
    cb22:	4623      	mov	r3, r4
    cb24:	464a      	mov	r2, r9
    cb26:	4639      	mov	r1, r7
    cb28:	4638      	mov	r0, r7
    cb2a:	f7f4 faa7 	bl	107c <add_mod_n>
    cb2e:	9500      	str	r5, [sp, #0]
    cb30:	4623      	mov	r3, r4
    cb32:	f109 0230 	add.w	r2, r9, #48	; 0x30
    cb36:	4641      	mov	r1, r8
    cb38:	4640      	mov	r0, r8
    cb3a:	f7f4 fa9f 	bl	107c <add_mod_n>
    cb3e:	4653      	mov	r3, sl
    cb40:	4622      	mov	r2, r4
    cb42:	4639      	mov	r1, r7
    cb44:	4638      	mov	r0, r7
    cb46:	f7fc fd29 	bl	959c <sqr_mont_384x>
    cb4a:	9500      	str	r5, [sp, #0]
    cb4c:	4623      	mov	r3, r4
    cb4e:	aa56      	add	r2, sp, #344	; 0x158
    cb50:	4639      	mov	r1, r7
    cb52:	4638      	mov	r0, r7
    cb54:	f7f3 fddf 	bl	716 <sub_mod_n>
    cb58:	9500      	str	r5, [sp, #0]
    cb5a:	4623      	mov	r3, r4
    cb5c:	aa62      	add	r2, sp, #392	; 0x188
    cb5e:	4641      	mov	r1, r8
    cb60:	4640      	mov	r0, r8
    cb62:	f7f3 fdd8 	bl	716 <sub_mod_n>
    cb66:	9500      	str	r5, [sp, #0]
    cb68:	4623      	mov	r3, r4
    cb6a:	aa0e      	add	r2, sp, #56	; 0x38
    cb6c:	4639      	mov	r1, r7
    cb6e:	4638      	mov	r0, r7
    cb70:	f7f3 fdd1 	bl	716 <sub_mod_n>
    cb74:	9500      	str	r5, [sp, #0]
    cb76:	4623      	mov	r3, r4
    cb78:	aa1a      	add	r2, sp, #104	; 0x68
    cb7a:	4641      	mov	r1, r8
    cb7c:	4640      	mov	r0, r8
    cb7e:	f7f3 fdca 	bl	716 <sub_mod_n>
    cb82:	9500      	str	r5, [sp, #0]
    cb84:	4623      	mov	r3, r4
    cb86:	aa3e      	add	r2, sp, #248	; 0xf8
    cb88:	4639      	mov	r1, r7
    cb8a:	4638      	mov	r0, r7
    cb8c:	f7f3 fdc3 	bl	716 <sub_mod_n>
    cb90:	9500      	str	r5, [sp, #0]
    cb92:	4623      	mov	r3, r4
    cb94:	aa4a      	add	r2, sp, #296	; 0x128
    cb96:	4641      	mov	r1, r8
    cb98:	4640      	mov	r0, r8
    cb9a:	f7f3 fdbc 	bl	716 <sub_mod_n>
    cb9e:	9500      	str	r5, [sp, #0]
    cba0:	4623      	mov	r3, r4
    cba2:	aa26      	add	r2, sp, #152	; 0x98
    cba4:	4639      	mov	r1, r7
    cba6:	4638      	mov	r0, r7
    cba8:	f7f3 fdb5 	bl	716 <sub_mod_n>
    cbac:	9500      	str	r5, [sp, #0]
    cbae:	4623      	mov	r3, r4
    cbb0:	aa32      	add	r2, sp, #200	; 0xc8
    cbb2:	4641      	mov	r1, r8
    cbb4:	4640      	mov	r0, r8
    cbb6:	f7f3 fdae 	bl	716 <sub_mod_n>
    cbba:	9500      	str	r5, [sp, #0]
    cbbc:	4623      	mov	r3, r4
    cbbe:	aa32      	add	r2, sp, #200	; 0xc8
    cbc0:	a926      	add	r1, sp, #152	; 0x98
    cbc2:	a802      	add	r0, sp, #8
    cbc4:	f7f4 fa5a 	bl	107c <add_mod_n>
    cbc8:	9500      	str	r5, [sp, #0]
    cbca:	4623      	mov	r3, r4
    cbcc:	aa32      	add	r2, sp, #200	; 0xc8
    cbce:	a926      	add	r1, sp, #152	; 0x98
    cbd0:	4630      	mov	r0, r6
    cbd2:	f7f3 fda0 	bl	716 <sub_mod_n>
    cbd6:	ab02      	add	r3, sp, #8
    cbd8:	f106 022c 	add.w	r2, r6, #44	; 0x2c
    cbdc:	f106 015c 	add.w	r1, r6, #92	; 0x5c
    cbe0:	f853 0b04 	ldr.w	r0, [r3], #4
    cbe4:	f842 0f04 	str.w	r0, [r2, #4]!
    cbe8:	4291      	cmp	r1, r2
    cbea:	d1f9      	bne.n	cbe0 <sqr_fp6+0x170>
    cbec:	4c1f      	ldr	r4, [pc, #124]	; (cc6c <sqr_fp6+0x1fc>)
    cbee:	250c      	movs	r5, #12
    cbf0:	9500      	str	r5, [sp, #0]
    cbf2:	4623      	mov	r3, r4
    cbf4:	aa56      	add	r2, sp, #344	; 0x158
    cbf6:	4631      	mov	r1, r6
    cbf8:	4630      	mov	r0, r6
    cbfa:	f7f4 fa3f 	bl	107c <add_mod_n>
    cbfe:	f106 0030 	add.w	r0, r6, #48	; 0x30
    cc02:	9500      	str	r5, [sp, #0]
    cc04:	4623      	mov	r3, r4
    cc06:	aa62      	add	r2, sp, #392	; 0x188
    cc08:	4601      	mov	r1, r0
    cc0a:	f7f4 fa37 	bl	107c <add_mod_n>
    cc0e:	f106 0760 	add.w	r7, r6, #96	; 0x60
    cc12:	9500      	str	r5, [sp, #0]
    cc14:	4623      	mov	r3, r4
    cc16:	aa1a      	add	r2, sp, #104	; 0x68
    cc18:	a90e      	add	r1, sp, #56	; 0x38
    cc1a:	a802      	add	r0, sp, #8
    cc1c:	f7f4 fa2e 	bl	107c <add_mod_n>
    cc20:	9500      	str	r5, [sp, #0]
    cc22:	4623      	mov	r3, r4
    cc24:	aa1a      	add	r2, sp, #104	; 0x68
    cc26:	a90e      	add	r1, sp, #56	; 0x38
    cc28:	4638      	mov	r0, r7
    cc2a:	f7f3 fd74 	bl	716 <sub_mod_n>
    cc2e:	ab02      	add	r3, sp, #8
    cc30:	f106 028c 	add.w	r2, r6, #140	; 0x8c
    cc34:	f106 01bc 	add.w	r1, r6, #188	; 0xbc
    cc38:	f853 0b04 	ldr.w	r0, [r3], #4
    cc3c:	f842 0f04 	str.w	r0, [r2, #4]!
    cc40:	428a      	cmp	r2, r1
    cc42:	d1f9      	bne.n	cc38 <sqr_fp6+0x1c8>
    cc44:	4c09      	ldr	r4, [pc, #36]	; (cc6c <sqr_fp6+0x1fc>)
    cc46:	250c      	movs	r5, #12
    cc48:	9500      	str	r5, [sp, #0]
    cc4a:	4623      	mov	r3, r4
    cc4c:	aa3e      	add	r2, sp, #248	; 0xf8
    cc4e:	4639      	mov	r1, r7
    cc50:	4638      	mov	r0, r7
    cc52:	f7f4 fa13 	bl	107c <add_mod_n>
    cc56:	f106 0090 	add.w	r0, r6, #144	; 0x90
    cc5a:	9500      	str	r5, [sp, #0]
    cc5c:	4623      	mov	r3, r4
    cc5e:	aa4a      	add	r2, sp, #296	; 0x128
    cc60:	4601      	mov	r1, r0
    cc62:	f7f4 fa0b 	bl	107c <add_mod_n>
    cc66:	b06f      	add	sp, #444	; 0x1bc
    cc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc6c:	0001ade8 	.word	0x0001ade8
    cc70:	fffcfffd 	.word	0xfffcfffd

0000cc74 <inverse_fp12>:
    cc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc78:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
    cc7c:	4606      	mov	r6, r0
    cc7e:	4688      	mov	r8, r1
    cc80:	a8ce      	add	r0, sp, #824	; 0x338
    cc82:	f7ff fef5 	bl	ca70 <sqr_fp6>
    cc86:	f508 7790 	add.w	r7, r8, #288	; 0x120
    cc8a:	4639      	mov	r1, r7
    cc8c:	a886      	add	r0, sp, #536	; 0x218
    cc8e:	f7ff feef 	bl	ca70 <sqr_fp6>
    cc92:	4ca7      	ldr	r4, [pc, #668]	; (cf30 <inverse_fp12+0x2bc>)
    cc94:	250c      	movs	r5, #12
    cc96:	9500      	str	r5, [sp, #0]
    cc98:	4623      	mov	r3, r4
    cc9a:	aac2      	add	r2, sp, #776	; 0x308
    cc9c:	a9b6      	add	r1, sp, #728	; 0x2d8
    cc9e:	a86e      	add	r0, sp, #440	; 0x1b8
    cca0:	f7f4 f9ec 	bl	107c <add_mod_n>
    cca4:	9500      	str	r5, [sp, #0]
    cca6:	4623      	mov	r3, r4
    cca8:	aac2      	add	r2, sp, #776	; 0x308
    ccaa:	a9b6      	add	r1, sp, #728	; 0x2d8
    ccac:	4608      	mov	r0, r1
    ccae:	f7f3 fd32 	bl	716 <sub_mod_n>
    ccb2:	ab6e      	add	r3, sp, #440	; 0x1b8
    ccb4:	aac1      	add	r2, sp, #772	; 0x304
    ccb6:	a97a      	add	r1, sp, #488	; 0x1e8
    ccb8:	f853 0b04 	ldr.w	r0, [r3], #4
    ccbc:	f842 0f04 	str.w	r0, [r2, #4]!
    ccc0:	428b      	cmp	r3, r1
    ccc2:	d1f9      	bne.n	ccb8 <inverse_fp12+0x44>
    ccc4:	4c9a      	ldr	r4, [pc, #616]	; (cf30 <inverse_fp12+0x2bc>)
    ccc6:	250c      	movs	r5, #12
    ccc8:	9500      	str	r5, [sp, #0]
    ccca:	4623      	mov	r3, r4
    cccc:	aab6      	add	r2, sp, #728	; 0x2d8
    ccce:	a9ce      	add	r1, sp, #824	; 0x338
    ccd0:	4608      	mov	r0, r1
    ccd2:	f7f3 fd20 	bl	716 <sub_mod_n>
    ccd6:	9500      	str	r5, [sp, #0]
    ccd8:	4623      	mov	r3, r4
    ccda:	aac2      	add	r2, sp, #776	; 0x308
    ccdc:	a9da      	add	r1, sp, #872	; 0x368
    ccde:	4608      	mov	r0, r1
    cce0:	f7f3 fd19 	bl	716 <sub_mod_n>
    cce4:	9500      	str	r5, [sp, #0]
    cce6:	4623      	mov	r3, r4
    cce8:	aa86      	add	r2, sp, #536	; 0x218
    ccea:	a9e6      	add	r1, sp, #920	; 0x398
    ccec:	4608      	mov	r0, r1
    ccee:	f7f3 fd12 	bl	716 <sub_mod_n>
    ccf2:	9500      	str	r5, [sp, #0]
    ccf4:	4623      	mov	r3, r4
    ccf6:	aa92      	add	r2, sp, #584	; 0x248
    ccf8:	a9f2      	add	r1, sp, #968	; 0x3c8
    ccfa:	4608      	mov	r0, r1
    ccfc:	f7f3 fd0b 	bl	716 <sub_mod_n>
    cd00:	9500      	str	r5, [sp, #0]
    cd02:	4623      	mov	r3, r4
    cd04:	aa9e      	add	r2, sp, #632	; 0x278
    cd06:	a9fe      	add	r1, sp, #1016	; 0x3f8
    cd08:	4608      	mov	r0, r1
    cd0a:	f7f3 fd04 	bl	716 <sub_mod_n>
    cd0e:	9500      	str	r5, [sp, #0]
    cd10:	4623      	mov	r3, r4
    cd12:	aaaa      	add	r2, sp, #680	; 0x2a8
    cd14:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
    cd18:	4608      	mov	r0, r1
    cd1a:	f7f3 fcfc 	bl	716 <sub_mod_n>
    cd1e:	f8df 9214 	ldr.w	r9, [pc, #532]	; cf34 <inverse_fp12+0x2c0>
    cd22:	464b      	mov	r3, r9
    cd24:	4622      	mov	r2, r4
    cd26:	a9ce      	add	r1, sp, #824	; 0x338
    cd28:	a80e      	add	r0, sp, #56	; 0x38
    cd2a:	f7fc fc37 	bl	959c <sqr_mont_384x>
    cd2e:	f8cd 9000 	str.w	r9, [sp]
    cd32:	4623      	mov	r3, r4
    cd34:	aafe      	add	r2, sp, #1016	; 0x3f8
    cd36:	a9e6      	add	r1, sp, #920	; 0x398
    cd38:	a856      	add	r0, sp, #344	; 0x158
    cd3a:	f7f8 fa33 	bl	51a4 <mul_mont_384x>
    cd3e:	9500      	str	r5, [sp, #0]
    cd40:	4623      	mov	r3, r4
    cd42:	aa62      	add	r2, sp, #392	; 0x188
    cd44:	a956      	add	r1, sp, #344	; 0x158
    cd46:	a86e      	add	r0, sp, #440	; 0x1b8
    cd48:	f7f4 f998 	bl	107c <add_mod_n>
    cd4c:	9500      	str	r5, [sp, #0]
    cd4e:	4623      	mov	r3, r4
    cd50:	aa62      	add	r2, sp, #392	; 0x188
    cd52:	a956      	add	r1, sp, #344	; 0x158
    cd54:	4608      	mov	r0, r1
    cd56:	f7f3 fcde 	bl	716 <sub_mod_n>
    cd5a:	ab6e      	add	r3, sp, #440	; 0x1b8
    cd5c:	f50d 79c2 	add.w	r9, sp, #388	; 0x184
    cd60:	a97a      	add	r1, sp, #488	; 0x1e8
    cd62:	464a      	mov	r2, r9
    cd64:	f853 0b04 	ldr.w	r0, [r3], #4
    cd68:	f842 0f04 	str.w	r0, [r2, #4]!
    cd6c:	428b      	cmp	r3, r1
    cd6e:	d1f9      	bne.n	cd64 <inverse_fp12+0xf0>
    cd70:	4c6f      	ldr	r4, [pc, #444]	; (cf30 <inverse_fp12+0x2bc>)
    cd72:	250c      	movs	r5, #12
    cd74:	9500      	str	r5, [sp, #0]
    cd76:	4623      	mov	r3, r4
    cd78:	aa56      	add	r2, sp, #344	; 0x158
    cd7a:	a90e      	add	r1, sp, #56	; 0x38
    cd7c:	4608      	mov	r0, r1
    cd7e:	f7f3 fcca 	bl	716 <sub_mod_n>
    cd82:	9500      	str	r5, [sp, #0]
    cd84:	4623      	mov	r3, r4
    cd86:	aa62      	add	r2, sp, #392	; 0x188
    cd88:	a91a      	add	r1, sp, #104	; 0x68
    cd8a:	4608      	mov	r0, r1
    cd8c:	f7f3 fcc3 	bl	716 <sub_mod_n>
    cd90:	4b68      	ldr	r3, [pc, #416]	; (cf34 <inverse_fp12+0x2c0>)
    cd92:	4622      	mov	r2, r4
    cd94:	a9fe      	add	r1, sp, #1016	; 0x3f8
    cd96:	a826      	add	r0, sp, #152	; 0x98
    cd98:	f7fc fc00 	bl	959c <sqr_mont_384x>
    cd9c:	9500      	str	r5, [sp, #0]
    cd9e:	4623      	mov	r3, r4
    cda0:	aa32      	add	r2, sp, #200	; 0xc8
    cda2:	a926      	add	r1, sp, #152	; 0x98
    cda4:	a86e      	add	r0, sp, #440	; 0x1b8
    cda6:	f7f4 f969 	bl	107c <add_mod_n>
    cdaa:	9500      	str	r5, [sp, #0]
    cdac:	4623      	mov	r3, r4
    cdae:	aa32      	add	r2, sp, #200	; 0xc8
    cdb0:	a926      	add	r1, sp, #152	; 0x98
    cdb2:	4608      	mov	r0, r1
    cdb4:	f7f3 fcaf 	bl	716 <sub_mod_n>
    cdb8:	ab6e      	add	r3, sp, #440	; 0x1b8
    cdba:	aa31      	add	r2, sp, #196	; 0xc4
    cdbc:	a97a      	add	r1, sp, #488	; 0x1e8
    cdbe:	f853 0b04 	ldr.w	r0, [r3], #4
    cdc2:	f842 0f04 	str.w	r0, [r2, #4]!
    cdc6:	4299      	cmp	r1, r3
    cdc8:	d1f9      	bne.n	cdbe <inverse_fp12+0x14a>
    cdca:	4c59      	ldr	r4, [pc, #356]	; (cf30 <inverse_fp12+0x2bc>)
    cdcc:	f8df a164 	ldr.w	sl, [pc, #356]	; cf34 <inverse_fp12+0x2c0>
    cdd0:	f8cd a000 	str.w	sl, [sp]
    cdd4:	4623      	mov	r3, r4
    cdd6:	aae6      	add	r2, sp, #920	; 0x398
    cdd8:	a9ce      	add	r1, sp, #824	; 0x338
    cdda:	a856      	add	r0, sp, #344	; 0x158
    cddc:	f7f8 f9e2 	bl	51a4 <mul_mont_384x>
    cde0:	250c      	movs	r5, #12
    cde2:	9500      	str	r5, [sp, #0]
    cde4:	4623      	mov	r3, r4
    cde6:	aa56      	add	r2, sp, #344	; 0x158
    cde8:	a926      	add	r1, sp, #152	; 0x98
    cdea:	4608      	mov	r0, r1
    cdec:	f7f3 fc93 	bl	716 <sub_mod_n>
    cdf0:	9500      	str	r5, [sp, #0]
    cdf2:	4623      	mov	r3, r4
    cdf4:	aa62      	add	r2, sp, #392	; 0x188
    cdf6:	a932      	add	r1, sp, #200	; 0xc8
    cdf8:	4608      	mov	r0, r1
    cdfa:	f7f3 fc8c 	bl	716 <sub_mod_n>
    cdfe:	4653      	mov	r3, sl
    ce00:	4622      	mov	r2, r4
    ce02:	a9e6      	add	r1, sp, #920	; 0x398
    ce04:	a83e      	add	r0, sp, #248	; 0xf8
    ce06:	f7fc fbc9 	bl	959c <sqr_mont_384x>
    ce0a:	f8cd a000 	str.w	sl, [sp]
    ce0e:	4623      	mov	r3, r4
    ce10:	aafe      	add	r2, sp, #1016	; 0x3f8
    ce12:	a9ce      	add	r1, sp, #824	; 0x338
    ce14:	a856      	add	r0, sp, #344	; 0x158
    ce16:	f7f8 f9c5 	bl	51a4 <mul_mont_384x>
    ce1a:	9500      	str	r5, [sp, #0]
    ce1c:	4623      	mov	r3, r4
    ce1e:	aa56      	add	r2, sp, #344	; 0x158
    ce20:	a93e      	add	r1, sp, #248	; 0xf8
    ce22:	4608      	mov	r0, r1
    ce24:	f7f3 fc77 	bl	716 <sub_mod_n>
    ce28:	9500      	str	r5, [sp, #0]
    ce2a:	4623      	mov	r3, r4
    ce2c:	aa62      	add	r2, sp, #392	; 0x188
    ce2e:	a94a      	add	r1, sp, #296	; 0x128
    ce30:	4608      	mov	r0, r1
    ce32:	f7f3 fc70 	bl	716 <sub_mod_n>
    ce36:	f8cd a000 	str.w	sl, [sp]
    ce3a:	4623      	mov	r3, r4
    ce3c:	aafe      	add	r2, sp, #1016	; 0x3f8
    ce3e:	a926      	add	r1, sp, #152	; 0x98
    ce40:	a856      	add	r0, sp, #344	; 0x158
    ce42:	f7f8 f9af 	bl	51a4 <mul_mont_384x>
    ce46:	f8cd a000 	str.w	sl, [sp]
    ce4a:	4623      	mov	r3, r4
    ce4c:	aae6      	add	r2, sp, #920	; 0x398
    ce4e:	a93e      	add	r1, sp, #248	; 0xf8
    ce50:	a86e      	add	r0, sp, #440	; 0x1b8
    ce52:	f7f8 f9a7 	bl	51a4 <mul_mont_384x>
    ce56:	9500      	str	r5, [sp, #0]
    ce58:	4623      	mov	r3, r4
    ce5a:	aa6e      	add	r2, sp, #440	; 0x1b8
    ce5c:	a956      	add	r1, sp, #344	; 0x158
    ce5e:	4608      	mov	r0, r1
    ce60:	f7f4 f90c 	bl	107c <add_mod_n>
    ce64:	9500      	str	r5, [sp, #0]
    ce66:	4623      	mov	r3, r4
    ce68:	aa7a      	add	r2, sp, #488	; 0x1e8
    ce6a:	a962      	add	r1, sp, #392	; 0x188
    ce6c:	4608      	mov	r0, r1
    ce6e:	f7f4 f905 	bl	107c <add_mod_n>
    ce72:	9500      	str	r5, [sp, #0]
    ce74:	4623      	mov	r3, r4
    ce76:	aa62      	add	r2, sp, #392	; 0x188
    ce78:	a956      	add	r1, sp, #344	; 0x158
    ce7a:	a802      	add	r0, sp, #8
    ce7c:	f7f4 f8fe 	bl	107c <add_mod_n>
    ce80:	9500      	str	r5, [sp, #0]
    ce82:	4623      	mov	r3, r4
    ce84:	aa62      	add	r2, sp, #392	; 0x188
    ce86:	a956      	add	r1, sp, #344	; 0x158
    ce88:	4608      	mov	r0, r1
    ce8a:	f7f3 fc44 	bl	716 <sub_mod_n>
    ce8e:	ab02      	add	r3, sp, #8
    ce90:	aa0e      	add	r2, sp, #56	; 0x38
    ce92:	f853 1b04 	ldr.w	r1, [r3], #4
    ce96:	f849 1f04 	str.w	r1, [r9, #4]!
    ce9a:	429a      	cmp	r2, r3
    ce9c:	d1f9      	bne.n	ce92 <inverse_fp12+0x21e>
    ce9e:	4c24      	ldr	r4, [pc, #144]	; (cf30 <inverse_fp12+0x2bc>)
    cea0:	4d24      	ldr	r5, [pc, #144]	; (cf34 <inverse_fp12+0x2c0>)
    cea2:	9500      	str	r5, [sp, #0]
    cea4:	4623      	mov	r3, r4
    cea6:	aace      	add	r2, sp, #824	; 0x338
    cea8:	a90e      	add	r1, sp, #56	; 0x38
    ceaa:	a86e      	add	r0, sp, #440	; 0x1b8
    ceac:	f7f8 f97a 	bl	51a4 <mul_mont_384x>
    ceb0:	f04f 090c 	mov.w	r9, #12
    ceb4:	f8cd 9000 	str.w	r9, [sp]
    ceb8:	4623      	mov	r3, r4
    ceba:	aa6e      	add	r2, sp, #440	; 0x1b8
    cebc:	a956      	add	r1, sp, #344	; 0x158
    cebe:	4608      	mov	r0, r1
    cec0:	f7f4 f8dc 	bl	107c <add_mod_n>
    cec4:	f8cd 9000 	str.w	r9, [sp]
    cec8:	4623      	mov	r3, r4
    ceca:	aa7a      	add	r2, sp, #488	; 0x1e8
    cecc:	a962      	add	r1, sp, #392	; 0x188
    cece:	4608      	mov	r0, r1
    ced0:	f7f4 f8d4 	bl	107c <add_mod_n>
    ced4:	a956      	add	r1, sp, #344	; 0x158
    ced6:	a86e      	add	r0, sp, #440	; 0x1b8
    ced8:	f7f9 fc72 	bl	67c0 <reciprocal_fp2>
    cedc:	9500      	str	r5, [sp, #0]
    cede:	4623      	mov	r3, r4
    cee0:	aa6e      	add	r2, sp, #440	; 0x1b8
    cee2:	a90e      	add	r1, sp, #56	; 0x38
    cee4:	a886      	add	r0, sp, #536	; 0x218
    cee6:	f7f8 f95d 	bl	51a4 <mul_mont_384x>
    ceea:	9500      	str	r5, [sp, #0]
    ceec:	4623      	mov	r3, r4
    ceee:	aa6e      	add	r2, sp, #440	; 0x1b8
    cef0:	a926      	add	r1, sp, #152	; 0x98
    cef2:	a89e      	add	r0, sp, #632	; 0x278
    cef4:	f7f8 f956 	bl	51a4 <mul_mont_384x>
    cef8:	9500      	str	r5, [sp, #0]
    cefa:	4623      	mov	r3, r4
    cefc:	aa6e      	add	r2, sp, #440	; 0x1b8
    cefe:	a93e      	add	r1, sp, #248	; 0xf8
    cf00:	a8b6      	add	r0, sp, #728	; 0x2d8
    cf02:	f7f8 f94f 	bl	51a4 <mul_mont_384x>
    cf06:	aa86      	add	r2, sp, #536	; 0x218
    cf08:	4641      	mov	r1, r8
    cf0a:	4630      	mov	r0, r6
    cf0c:	f7f8 faf6 	bl	54fc <mul_fp6>
    cf10:	f506 7690 	add.w	r6, r6, #288	; 0x120
    cf14:	aa86      	add	r2, sp, #536	; 0x218
    cf16:	4639      	mov	r1, r7
    cf18:	4630      	mov	r0, r6
    cf1a:	f7f8 faef 	bl	54fc <mul_fp6>
    cf1e:	4631      	mov	r1, r6
    cf20:	4630      	mov	r0, r6
    cf22:	f7f6 fedf 	bl	3ce4 <neg_fp6>
    cf26:	f50d 6d8b 	add.w	sp, sp, #1112	; 0x458
    cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf2e:	bf00      	nop
    cf30:	0001ade8 	.word	0x0001ade8
    cf34:	fffcfffd 	.word	0xfffcfffd

0000cf38 <blst_fp12_inverse>:
    cf38:	b508      	push	{r3, lr}
    cf3a:	f7ff fe9b 	bl	cc74 <inverse_fp12>
    cf3e:	bd08      	pop	{r3, pc}

0000cf40 <final_exp>:
    cf40:	b570      	push	{r4, r5, r6, lr}
    cf42:	f5ad 6d10 	sub.w	sp, sp, #2304	; 0x900
    cf46:	4605      	mov	r5, r0
    cf48:	460e      	mov	r6, r1
    cf4a:	1f0a      	subs	r2, r1, #4
    cf4c:	f50d 6390 	add.w	r3, sp, #1152	; 0x480
    cf50:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
    cf54:	f852 4f04 	ldr.w	r4, [r2, #4]!
    cf58:	f843 4b04 	str.w	r4, [r3], #4
    cf5c:	4283      	cmp	r3, r0
    cf5e:	d1f9      	bne.n	cf54 <final_exp+0x14>
    cf60:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    cf64:	f7f6 fefa 	bl	3d5c <conjugate_fp12>
    cf68:	4631      	mov	r1, r6
    cf6a:	a890      	add	r0, sp, #576	; 0x240
    cf6c:	f7ff fe82 	bl	cc74 <inverse_fp12>
    cf70:	aa90      	add	r2, sp, #576	; 0x240
    cf72:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    cf76:	4628      	mov	r0, r5
    cf78:	f7f8 fc26 	bl	57c8 <mul_fp12>
    cf7c:	2202      	movs	r2, #2
    cf7e:	4629      	mov	r1, r5
    cf80:	a890      	add	r0, sp, #576	; 0x240
    cf82:	f7f8 fa47 	bl	5414 <frobenius_map_fp12>
    cf86:	aa90      	add	r2, sp, #576	; 0x240
    cf88:	4629      	mov	r1, r5
    cf8a:	4628      	mov	r0, r5
    cf8c:	f7f8 fc1c 	bl	57c8 <mul_fp12>
    cf90:	4629      	mov	r1, r5
    cf92:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
    cf96:	f7ff fb7f 	bl	c698 <cyclotomic_sqr_fp12>
    cf9a:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
    cf9e:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    cfa2:	f7ff fce9 	bl	c978 <raise_to_z_div_by_2>
    cfa6:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    cfaa:	4608      	mov	r0, r1
    cfac:	f7ff fb74 	bl	c698 <cyclotomic_sqr_fp12>
    cfb0:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    cfb4:	a890      	add	r0, sp, #576	; 0x240
    cfb6:	f7ff fcdf 	bl	c978 <raise_to_z_div_by_2>
    cfba:	1f2a      	subs	r2, r5, #4
    cfbc:	466b      	mov	r3, sp
    cfbe:	a890      	add	r0, sp, #576	; 0x240
    cfc0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    cfc4:	f843 1b04 	str.w	r1, [r3], #4
    cfc8:	4283      	cmp	r3, r0
    cfca:	d1f9      	bne.n	cfc0 <final_exp+0x80>
    cfcc:	4668      	mov	r0, sp
    cfce:	f7f6 fec5 	bl	3d5c <conjugate_fp12>
    cfd2:	466a      	mov	r2, sp
    cfd4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    cfd8:	4608      	mov	r0, r1
    cfda:	f7f8 fbf5 	bl	57c8 <mul_fp12>
    cfde:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    cfe2:	f7f6 febb 	bl	3d5c <conjugate_fp12>
    cfe6:	aa90      	add	r2, sp, #576	; 0x240
    cfe8:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    cfec:	4608      	mov	r0, r1
    cfee:	f7f8 fbeb 	bl	57c8 <mul_fp12>
    cff2:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    cff6:	a890      	add	r0, sp, #576	; 0x240
    cff8:	f7ff fcbe 	bl	c978 <raise_to_z_div_by_2>
    cffc:	a990      	add	r1, sp, #576	; 0x240
    cffe:	4608      	mov	r0, r1
    d000:	f7ff fb4a 	bl	c698 <cyclotomic_sqr_fp12>
    d004:	a990      	add	r1, sp, #576	; 0x240
    d006:	4668      	mov	r0, sp
    d008:	f7ff fcb6 	bl	c978 <raise_to_z_div_by_2>
    d00c:	4669      	mov	r1, sp
    d00e:	4668      	mov	r0, sp
    d010:	f7ff fb42 	bl	c698 <cyclotomic_sqr_fp12>
    d014:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    d018:	f7f6 fea0 	bl	3d5c <conjugate_fp12>
    d01c:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    d020:	4669      	mov	r1, sp
    d022:	4668      	mov	r0, sp
    d024:	f7f8 fbd0 	bl	57c8 <mul_fp12>
    d028:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    d02c:	f7f6 fe96 	bl	3d5c <conjugate_fp12>
    d030:	2203      	movs	r2, #3
    d032:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    d036:	4608      	mov	r0, r1
    d038:	f7f8 f9ec 	bl	5414 <frobenius_map_fp12>
    d03c:	2202      	movs	r2, #2
    d03e:	a990      	add	r1, sp, #576	; 0x240
    d040:	4608      	mov	r0, r1
    d042:	f7f8 f9e7 	bl	5414 <frobenius_map_fp12>
    d046:	aa90      	add	r2, sp, #576	; 0x240
    d048:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    d04c:	4608      	mov	r0, r1
    d04e:	f7f8 fbbb 	bl	57c8 <mul_fp12>
    d052:	4669      	mov	r1, sp
    d054:	a890      	add	r0, sp, #576	; 0x240
    d056:	f7ff fc8f 	bl	c978 <raise_to_z_div_by_2>
    d05a:	a990      	add	r1, sp, #576	; 0x240
    d05c:	4608      	mov	r0, r1
    d05e:	f7ff fb1b 	bl	c698 <cyclotomic_sqr_fp12>
    d062:	f50d 62d8 	add.w	r2, sp, #1728	; 0x6c0
    d066:	a990      	add	r1, sp, #576	; 0x240
    d068:	4608      	mov	r0, r1
    d06a:	f7f8 fbad 	bl	57c8 <mul_fp12>
    d06e:	462a      	mov	r2, r5
    d070:	a990      	add	r1, sp, #576	; 0x240
    d072:	4608      	mov	r0, r1
    d074:	f7f8 fba8 	bl	57c8 <mul_fp12>
    d078:	aa90      	add	r2, sp, #576	; 0x240
    d07a:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    d07e:	4608      	mov	r0, r1
    d080:	f7f8 fba2 	bl	57c8 <mul_fp12>
    d084:	2201      	movs	r2, #1
    d086:	4669      	mov	r1, sp
    d088:	a890      	add	r0, sp, #576	; 0x240
    d08a:	f7f8 f9c3 	bl	5414 <frobenius_map_fp12>
    d08e:	aa90      	add	r2, sp, #576	; 0x240
    d090:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    d094:	4628      	mov	r0, r5
    d096:	f7f8 fb97 	bl	57c8 <mul_fp12>
    d09a:	f50d 6d10 	add.w	sp, sp, #2304	; 0x900
    d09e:	bd70      	pop	{r4, r5, r6, pc}

0000d0a0 <blst_final_exp>:
    d0a0:	b508      	push	{r3, lr}
    d0a2:	f7ff ff4d 	bl	cf40 <final_exp>
    d0a6:	bd08      	pop	{r3, pc}

0000d0a8 <blst_fp12_finalverify>:
    d0a8:	b530      	push	{r4, r5, lr}
    d0aa:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    d0ae:	460d      	mov	r5, r1
    d0b0:	3804      	subs	r0, #4
    d0b2:	ac90      	add	r4, sp, #576	; 0x240
    d0b4:	466b      	mov	r3, sp
    d0b6:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d0ba:	f843 2b04 	str.w	r2, [r3], #4
    d0be:	42a3      	cmp	r3, r4
    d0c0:	d1f9      	bne.n	d0b6 <blst_fp12_finalverify+0xe>
    d0c2:	4668      	mov	r0, sp
    d0c4:	f7f6 fe4a 	bl	3d5c <conjugate_fp12>
    d0c8:	462a      	mov	r2, r5
    d0ca:	4669      	mov	r1, sp
    d0cc:	4668      	mov	r0, sp
    d0ce:	f7f8 fb7b 	bl	57c8 <mul_fp12>
    d0d2:	4669      	mov	r1, sp
    d0d4:	4668      	mov	r0, sp
    d0d6:	f7ff ff33 	bl	cf40 <final_exp>
    d0da:	f1ad 0204 	sub.w	r2, sp, #4
    d0de:	490f      	ldr	r1, [pc, #60]	; (d11c <blst_fp12_finalverify+0x74>)
    d0e0:	ad17      	add	r5, sp, #92	; 0x5c
    d0e2:	2000      	movs	r0, #0
    d0e4:	f852 3f04 	ldr.w	r3, [r2, #4]!
    d0e8:	f851 4f04 	ldr.w	r4, [r1, #4]!
    d0ec:	4063      	eors	r3, r4
    d0ee:	4318      	orrs	r0, r3
    d0f0:	42aa      	cmp	r2, r5
    d0f2:	d1f7      	bne.n	d0e4 <blst_fp12_finalverify+0x3c>
    d0f4:	1e43      	subs	r3, r0, #1
    d0f6:	ea23 0000 	bic.w	r0, r3, r0
    d0fa:	0fc0      	lsrs	r0, r0, #31
    d0fc:	ab17      	add	r3, sp, #92	; 0x5c
    d0fe:	ac8f      	add	r4, sp, #572	; 0x23c
    d100:	2200      	movs	r2, #0
    d102:	f853 1f04 	ldr.w	r1, [r3, #4]!
    d106:	430a      	orrs	r2, r1
    d108:	42a3      	cmp	r3, r4
    d10a:	d1fa      	bne.n	d102 <blst_fp12_finalverify+0x5a>
    d10c:	1e53      	subs	r3, r2, #1
    d10e:	ea23 0202 	bic.w	r2, r3, r2
    d112:	ea00 70d2 	and.w	r0, r0, r2, lsr #31
    d116:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
    d11a:	bd30      	pop	{r4, r5, pc}
    d11c:	0001ae44 	.word	0x0001ae44

0000d120 <line_dbl>:
    d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d124:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
    d128:	4606      	mov	r6, r0
    d12a:	4689      	mov	r9, r1
    d12c:	4617      	mov	r7, r2
    d12e:	f8df a2e4 	ldr.w	sl, [pc, #740]	; d414 <line_dbl+0x2f4>
    d132:	4cb7      	ldr	r4, [pc, #732]	; (d410 <line_dbl+0x2f0>)
    d134:	4653      	mov	r3, sl
    d136:	4622      	mov	r2, r4
    d138:	4639      	mov	r1, r7
    d13a:	a87e      	add	r0, sp, #504	; 0x1f8
    d13c:	f7fc fa2e 	bl	959c <sqr_mont_384x>
    d140:	f107 0b60 	add.w	fp, r7, #96	; 0x60
    d144:	4653      	mov	r3, sl
    d146:	4622      	mov	r2, r4
    d148:	4659      	mov	r1, fp
    d14a:	a866      	add	r0, sp, #408	; 0x198
    d14c:	f7fc fa26 	bl	959c <sqr_mont_384x>
    d150:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    d154:	4619      	mov	r1, r3
    d156:	4653      	mov	r3, sl
    d158:	4622      	mov	r2, r4
    d15a:	9103      	str	r1, [sp, #12]
    d15c:	a896      	add	r0, sp, #600	; 0x258
    d15e:	f7fc fa1d 	bl	959c <sqr_mont_384x>
    d162:	4653      	mov	r3, sl
    d164:	4622      	mov	r2, r4
    d166:	a866      	add	r0, sp, #408	; 0x198
    d168:	4601      	mov	r1, r0
    d16a:	a84e      	add	r0, sp, #312	; 0x138
    d16c:	f7fc fa16 	bl	959c <sqr_mont_384x>
    d170:	250c      	movs	r5, #12
    d172:	9500      	str	r5, [sp, #0]
    d174:	4623      	mov	r3, r4
    d176:	aa66      	add	r2, sp, #408	; 0x198
    d178:	4639      	mov	r1, r7
    d17a:	a836      	add	r0, sp, #216	; 0xd8
    d17c:	f7f3 ff7e 	bl	107c <add_mod_n>
    d180:	f107 0830 	add.w	r8, r7, #48	; 0x30
    d184:	9500      	str	r5, [sp, #0]
    d186:	4623      	mov	r3, r4
    d188:	aa72      	add	r2, sp, #456	; 0x1c8
    d18a:	4641      	mov	r1, r8
    d18c:	a842      	add	r0, sp, #264	; 0x108
    d18e:	f7f3 ff75 	bl	107c <add_mod_n>
    d192:	4653      	mov	r3, sl
    d194:	4622      	mov	r2, r4
    d196:	a836      	add	r0, sp, #216	; 0xd8
    d198:	4601      	mov	r1, r0
    d19a:	f7fc f9ff 	bl	959c <sqr_mont_384x>
    d19e:	9500      	str	r5, [sp, #0]
    d1a0:	4623      	mov	r3, r4
    d1a2:	aa7e      	add	r2, sp, #504	; 0x1f8
    d1a4:	a836      	add	r0, sp, #216	; 0xd8
    d1a6:	4601      	mov	r1, r0
    d1a8:	f7f3 fab5 	bl	716 <sub_mod_n>
    d1ac:	9500      	str	r5, [sp, #0]
    d1ae:	4623      	mov	r3, r4
    d1b0:	aa8a      	add	r2, sp, #552	; 0x228
    d1b2:	a842      	add	r0, sp, #264	; 0x108
    d1b4:	4601      	mov	r1, r0
    d1b6:	f7f3 faae 	bl	716 <sub_mod_n>
    d1ba:	9500      	str	r5, [sp, #0]
    d1bc:	4623      	mov	r3, r4
    d1be:	aa4e      	add	r2, sp, #312	; 0x138
    d1c0:	a836      	add	r0, sp, #216	; 0xd8
    d1c2:	4601      	mov	r1, r0
    d1c4:	f7f3 faa7 	bl	716 <sub_mod_n>
    d1c8:	9500      	str	r5, [sp, #0]
    d1ca:	4623      	mov	r3, r4
    d1cc:	aa5a      	add	r2, sp, #360	; 0x168
    d1ce:	a842      	add	r0, sp, #264	; 0x108
    d1d0:	4601      	mov	r1, r0
    d1d2:	f7f3 faa0 	bl	716 <sub_mod_n>
    d1d6:	9500      	str	r5, [sp, #0]
    d1d8:	4623      	mov	r3, r4
    d1da:	aa36      	add	r2, sp, #216	; 0xd8
    d1dc:	4610      	mov	r0, r2
    d1de:	4611      	mov	r1, r2
    d1e0:	f7f3 ff4c 	bl	107c <add_mod_n>
    d1e4:	9500      	str	r5, [sp, #0]
    d1e6:	4623      	mov	r3, r4
    d1e8:	aa42      	add	r2, sp, #264	; 0x108
    d1ea:	4610      	mov	r0, r2
    d1ec:	4611      	mov	r1, r2
    d1ee:	f7f3 ff45 	bl	107c <add_mod_n>
    d1f2:	462b      	mov	r3, r5
    d1f4:	4622      	mov	r2, r4
    d1f6:	a87e      	add	r0, sp, #504	; 0x1f8
    d1f8:	4601      	mov	r1, r0
    d1fa:	a81e      	add	r0, sp, #120	; 0x78
    d1fc:	f7f4 fbd8 	bl	19b0 <mul_by_3_mod_n>
    d200:	462b      	mov	r3, r5
    d202:	4622      	mov	r2, r4
    d204:	a88a      	add	r0, sp, #552	; 0x228
    d206:	4601      	mov	r1, r0
    d208:	a82a      	add	r0, sp, #168	; 0xa8
    d20a:	f7f4 fbd1 	bl	19b0 <mul_by_3_mod_n>
    d20e:	4653      	mov	r3, sl
    d210:	4622      	mov	r2, r4
    d212:	a81e      	add	r0, sp, #120	; 0x78
    d214:	4601      	mov	r1, r0
    d216:	a806      	add	r0, sp, #24
    d218:	f7fc f9c0 	bl	959c <sqr_mont_384x>
    d21c:	9500      	str	r5, [sp, #0]
    d21e:	4623      	mov	r3, r4
    d220:	463a      	mov	r2, r7
    d222:	a81e      	add	r0, sp, #120	; 0x78
    d224:	4601      	mov	r1, r0
    d226:	4630      	mov	r0, r6
    d228:	f7f3 ff28 	bl	107c <add_mod_n>
    d22c:	f106 0030 	add.w	r0, r6, #48	; 0x30
    d230:	9500      	str	r5, [sp, #0]
    d232:	4623      	mov	r3, r4
    d234:	4642      	mov	r2, r8
    d236:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    d23a:	4661      	mov	r1, ip
    d23c:	9005      	str	r0, [sp, #20]
    d23e:	f7f3 ff1d 	bl	107c <add_mod_n>
    d242:	9500      	str	r5, [sp, #0]
    d244:	4623      	mov	r3, r4
    d246:	aa36      	add	r2, sp, #216	; 0xd8
    d248:	f10d 0c18 	add.w	ip, sp, #24
    d24c:	4661      	mov	r1, ip
    d24e:	4648      	mov	r0, r9
    d250:	f7f3 fa61 	bl	716 <sub_mod_n>
    d254:	f109 0330 	add.w	r3, r9, #48	; 0x30
    d258:	4618      	mov	r0, r3
    d25a:	9500      	str	r5, [sp, #0]
    d25c:	4623      	mov	r3, r4
    d25e:	aa42      	add	r2, sp, #264	; 0x108
    d260:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    d264:	4661      	mov	r1, ip
    d266:	4680      	mov	r8, r0
    d268:	f7f3 fa55 	bl	716 <sub_mod_n>
    d26c:	9500      	str	r5, [sp, #0]
    d26e:	4623      	mov	r3, r4
    d270:	aa36      	add	r2, sp, #216	; 0xd8
    d272:	4649      	mov	r1, r9
    d274:	4648      	mov	r0, r9
    d276:	f7f3 fa4e 	bl	716 <sub_mod_n>
    d27a:	9500      	str	r5, [sp, #0]
    d27c:	4623      	mov	r3, r4
    d27e:	aa42      	add	r2, sp, #264	; 0x108
    d280:	4641      	mov	r1, r8
    d282:	f8cd 8010 	str.w	r8, [sp, #16]
    d286:	4640      	mov	r0, r8
    d288:	f7f3 fa45 	bl	716 <sub_mod_n>
    d28c:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
    d290:	9500      	str	r5, [sp, #0]
    d292:	4623      	mov	r3, r4
    d294:	9a03      	ldr	r2, [sp, #12]
    d296:	4659      	mov	r1, fp
    d298:	4640      	mov	r0, r8
    d29a:	f7f3 feef 	bl	107c <add_mod_n>
    d29e:	f109 0bf0 	add.w	fp, r9, #240	; 0xf0
    d2a2:	9500      	str	r5, [sp, #0]
    d2a4:	4623      	mov	r3, r4
    d2a6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
    d2aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
    d2ae:	4658      	mov	r0, fp
    d2b0:	f7f3 fee4 	bl	107c <add_mod_n>
    d2b4:	4653      	mov	r3, sl
    d2b6:	4622      	mov	r2, r4
    d2b8:	4641      	mov	r1, r8
    d2ba:	4640      	mov	r0, r8
    d2bc:	f7fc f96e 	bl	959c <sqr_mont_384x>
    d2c0:	9500      	str	r5, [sp, #0]
    d2c2:	4623      	mov	r3, r4
    d2c4:	aa66      	add	r2, sp, #408	; 0x198
    d2c6:	4641      	mov	r1, r8
    d2c8:	4640      	mov	r0, r8
    d2ca:	f7f3 fa24 	bl	716 <sub_mod_n>
    d2ce:	9500      	str	r5, [sp, #0]
    d2d0:	4623      	mov	r3, r4
    d2d2:	aa72      	add	r2, sp, #456	; 0x1c8
    d2d4:	4659      	mov	r1, fp
    d2d6:	4658      	mov	r0, fp
    d2d8:	f7f3 fa1d 	bl	716 <sub_mod_n>
    d2dc:	9500      	str	r5, [sp, #0]
    d2de:	4623      	mov	r3, r4
    d2e0:	aa96      	add	r2, sp, #600	; 0x258
    d2e2:	4641      	mov	r1, r8
    d2e4:	4640      	mov	r0, r8
    d2e6:	f7f3 fa16 	bl	716 <sub_mod_n>
    d2ea:	9500      	str	r5, [sp, #0]
    d2ec:	4623      	mov	r3, r4
    d2ee:	aaa2      	add	r2, sp, #648	; 0x288
    d2f0:	4659      	mov	r1, fp
    d2f2:	4658      	mov	r0, fp
    d2f4:	f7f3 fa0f 	bl	716 <sub_mod_n>
    d2f8:	9500      	str	r5, [sp, #0]
    d2fa:	4623      	mov	r3, r4
    d2fc:	2203      	movs	r2, #3
    d2fe:	a94e      	add	r1, sp, #312	; 0x138
    d300:	4608      	mov	r0, r1
    d302:	f7f5 f923 	bl	254c <lshift_mod_n>
    d306:	9500      	str	r5, [sp, #0]
    d308:	4623      	mov	r3, r4
    d30a:	2203      	movs	r2, #3
    d30c:	a95a      	add	r1, sp, #360	; 0x168
    d30e:	4608      	mov	r0, r1
    d310:	f7f5 f91c 	bl	254c <lshift_mod_n>
    d314:	f109 0b60 	add.w	fp, r9, #96	; 0x60
    d318:	9500      	str	r5, [sp, #0]
    d31a:	4623      	mov	r3, r4
    d31c:	464a      	mov	r2, r9
    d31e:	a936      	add	r1, sp, #216	; 0xd8
    d320:	4658      	mov	r0, fp
    d322:	f7f3 f9f8 	bl	716 <sub_mod_n>
    d326:	f109 0790 	add.w	r7, r9, #144	; 0x90
    d32a:	9500      	str	r5, [sp, #0]
    d32c:	4623      	mov	r3, r4
    d32e:	9a04      	ldr	r2, [sp, #16]
    d330:	a942      	add	r1, sp, #264	; 0x108
    d332:	4638      	mov	r0, r7
    d334:	f7f3 f9ef 	bl	716 <sub_mod_n>
    d338:	f8cd a000 	str.w	sl, [sp]
    d33c:	4623      	mov	r3, r4
    d33e:	aa1e      	add	r2, sp, #120	; 0x78
    d340:	4659      	mov	r1, fp
    d342:	4658      	mov	r0, fp
    d344:	f7f7 ff2e 	bl	51a4 <mul_mont_384x>
    d348:	9500      	str	r5, [sp, #0]
    d34a:	4623      	mov	r3, r4
    d34c:	aa4e      	add	r2, sp, #312	; 0x138
    d34e:	4659      	mov	r1, fp
    d350:	4658      	mov	r0, fp
    d352:	f7f3 f9e0 	bl	716 <sub_mod_n>
    d356:	9500      	str	r5, [sp, #0]
    d358:	4623      	mov	r3, r4
    d35a:	aa5a      	add	r2, sp, #360	; 0x168
    d35c:	4639      	mov	r1, r7
    d35e:	4638      	mov	r0, r7
    d360:	f7f3 f9d9 	bl	716 <sub_mod_n>
    d364:	4653      	mov	r3, sl
    d366:	4622      	mov	r2, r4
    d368:	4631      	mov	r1, r6
    d36a:	4630      	mov	r0, r6
    d36c:	f7fc f916 	bl	959c <sqr_mont_384x>
    d370:	9500      	str	r5, [sp, #0]
    d372:	4623      	mov	r3, r4
    d374:	aa7e      	add	r2, sp, #504	; 0x1f8
    d376:	4631      	mov	r1, r6
    d378:	4630      	mov	r0, r6
    d37a:	f7f3 f9cc 	bl	716 <sub_mod_n>
    d37e:	9500      	str	r5, [sp, #0]
    d380:	4623      	mov	r3, r4
    d382:	aa8a      	add	r2, sp, #552	; 0x228
    d384:	9f05      	ldr	r7, [sp, #20]
    d386:	4639      	mov	r1, r7
    d388:	4638      	mov	r0, r7
    d38a:	f7f3 f9c4 	bl	716 <sub_mod_n>
    d38e:	9500      	str	r5, [sp, #0]
    d390:	4623      	mov	r3, r4
    d392:	aa06      	add	r2, sp, #24
    d394:	4631      	mov	r1, r6
    d396:	4630      	mov	r0, r6
    d398:	f7f3 f9bd 	bl	716 <sub_mod_n>
    d39c:	9500      	str	r5, [sp, #0]
    d39e:	4623      	mov	r3, r4
    d3a0:	aa12      	add	r2, sp, #72	; 0x48
    d3a2:	4639      	mov	r1, r7
    d3a4:	4638      	mov	r0, r7
    d3a6:	f7f3 f9b6 	bl	716 <sub_mod_n>
    d3aa:	9500      	str	r5, [sp, #0]
    d3ac:	4623      	mov	r3, r4
    d3ae:	2202      	movs	r2, #2
    d3b0:	a966      	add	r1, sp, #408	; 0x198
    d3b2:	4608      	mov	r0, r1
    d3b4:	f7f5 f8ca 	bl	254c <lshift_mod_n>
    d3b8:	9500      	str	r5, [sp, #0]
    d3ba:	4623      	mov	r3, r4
    d3bc:	2202      	movs	r2, #2
    d3be:	a972      	add	r1, sp, #456	; 0x1c8
    d3c0:	4608      	mov	r0, r1
    d3c2:	f7f5 f8c3 	bl	254c <lshift_mod_n>
    d3c6:	9500      	str	r5, [sp, #0]
    d3c8:	4623      	mov	r3, r4
    d3ca:	aa66      	add	r2, sp, #408	; 0x198
    d3cc:	4631      	mov	r1, r6
    d3ce:	4630      	mov	r0, r6
    d3d0:	f7f3 f9a1 	bl	716 <sub_mod_n>
    d3d4:	9500      	str	r5, [sp, #0]
    d3d6:	4623      	mov	r3, r4
    d3d8:	aa72      	add	r2, sp, #456	; 0x1c8
    d3da:	4639      	mov	r1, r7
    d3dc:	4638      	mov	r0, r7
    d3de:	f7f3 f99a 	bl	716 <sub_mod_n>
    d3e2:	f8cd a000 	str.w	sl, [sp]
    d3e6:	4623      	mov	r3, r4
    d3e8:	aa96      	add	r2, sp, #600	; 0x258
    d3ea:	a91e      	add	r1, sp, #120	; 0x78
    d3ec:	f106 0060 	add.w	r0, r6, #96	; 0x60
    d3f0:	f7f7 fed8 	bl	51a4 <mul_mont_384x>
    d3f4:	f8cd a000 	str.w	sl, [sp]
    d3f8:	4623      	mov	r3, r4
    d3fa:	aa96      	add	r2, sp, #600	; 0x258
    d3fc:	4641      	mov	r1, r8
    d3fe:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    d402:	f7f7 fecf 	bl	51a4 <mul_mont_384x>
    d406:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
    d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d40e:	bf00      	nop
    d410:	0001ade8 	.word	0x0001ade8
    d414:	fffcfffd 	.word	0xfffcfffd

0000d418 <start_dbl_n>:
    d418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d41c:	b0c8      	sub	sp, #288	; 0x120
    d41e:	4606      	mov	r6, r0
    d420:	460f      	mov	r7, r1
    d422:	4615      	mov	r5, r2
    d424:	4698      	mov	r8, r3
    d426:	460a      	mov	r2, r1
    d428:	4668      	mov	r0, sp
    d42a:	f7ff fe79 	bl	d120 <line_dbl>
    d42e:	4629      	mov	r1, r5
    d430:	4668      	mov	r0, sp
    d432:	f7f3 fca5 	bl	d80 <line_by_Px2>
    d436:	4633      	mov	r3, r6
    d438:	f506 7110 	add.w	r1, r6, #576	; 0x240
    d43c:	2200      	movs	r2, #0
    d43e:	f843 2b04 	str.w	r2, [r3], #4
    d442:	428b      	cmp	r3, r1
    d444:	d1fb      	bne.n	d43e <start_dbl_n+0x26>
    d446:	f1ad 0204 	sub.w	r2, sp, #4
    d44a:	1f33      	subs	r3, r6, #4
    d44c:	a82f      	add	r0, sp, #188	; 0xbc
    d44e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    d452:	f843 1f04 	str.w	r1, [r3, #4]!
    d456:	4282      	cmp	r2, r0
    d458:	d1f9      	bne.n	d44e <start_dbl_n+0x36>
    d45a:	aa2f      	add	r2, sp, #188	; 0xbc
    d45c:	f506 73be 	add.w	r3, r6, #380	; 0x17c
    d460:	a847      	add	r0, sp, #284	; 0x11c
    d462:	f852 1f04 	ldr.w	r1, [r2, #4]!
    d466:	f843 1f04 	str.w	r1, [r3, #4]!
    d46a:	4282      	cmp	r2, r0
    d46c:	d1f9      	bne.n	d462 <start_dbl_n+0x4a>
    d46e:	f1b8 0f01 	cmp.w	r8, #1
    d472:	d919      	bls.n	d4a8 <start_dbl_n+0x90>
    d474:	f507 7490 	add.w	r4, r7, #288	; 0x120
    d478:	3560      	adds	r5, #96	; 0x60
    d47a:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
    d47e:	eb07 1748 	add.w	r7, r7, r8, lsl #5
    d482:	4622      	mov	r2, r4
    d484:	4621      	mov	r1, r4
    d486:	4668      	mov	r0, sp
    d488:	f7ff fe4a 	bl	d120 <line_dbl>
    d48c:	4629      	mov	r1, r5
    d48e:	4668      	mov	r0, sp
    d490:	f7f3 fc76 	bl	d80 <line_by_Px2>
    d494:	466a      	mov	r2, sp
    d496:	4631      	mov	r1, r6
    d498:	4630      	mov	r0, r6
    d49a:	f7f8 fb97 	bl	5bcc <mul_by_xy00z0_fp12>
    d49e:	f504 7490 	add.w	r4, r4, #288	; 0x120
    d4a2:	3560      	adds	r5, #96	; 0x60
    d4a4:	42bc      	cmp	r4, r7
    d4a6:	d1ec      	bne.n	d482 <start_dbl_n+0x6a>
    d4a8:	b048      	add	sp, #288	; 0x120
    d4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4ae <line_add>:
    d4ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4b2:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
    d4b6:	4681      	mov	r9, r0
    d4b8:	460e      	mov	r6, r1
    d4ba:	4693      	mov	fp, r2
    d4bc:	461d      	mov	r5, r3
    d4be:	32c0      	adds	r2, #192	; 0xc0
    d4c0:	4611      	mov	r1, r2
    d4c2:	4fd6      	ldr	r7, [pc, #856]	; (d81c <line_add+0x36e>)
    d4c4:	4cd6      	ldr	r4, [pc, #856]	; (d820 <line_add+0x372>)
    d4c6:	463b      	mov	r3, r7
    d4c8:	4622      	mov	r2, r4
    d4ca:	4688      	mov	r8, r1
    d4cc:	f50d 7c2e 	add.w	ip, sp, #696	; 0x2b8
    d4d0:	4660      	mov	r0, ip
    d4d2:	f7fc f863 	bl	959c <sqr_mont_384x>
    d4d6:	9700      	str	r7, [sp, #0]
    d4d8:	4623      	mov	r3, r4
    d4da:	aaae      	add	r2, sp, #696	; 0x2b8
    d4dc:	4629      	mov	r1, r5
    d4de:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
    d4e2:	4660      	mov	r0, ip
    d4e4:	f7f7 fe5e 	bl	51a4 <mul_mont_384x>
    d4e8:	9505      	str	r5, [sp, #20]
    d4ea:	f105 0160 	add.w	r1, r5, #96	; 0x60
    d4ee:	9700      	str	r7, [sp, #0]
    d4f0:	4623      	mov	r3, r4
    d4f2:	f8cd 800c 	str.w	r8, [sp, #12]
    d4f6:	4642      	mov	r2, r8
    d4f8:	9104      	str	r1, [sp, #16]
    d4fa:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
    d4fe:	4660      	mov	r0, ip
    d500:	f7f7 fe50 	bl	51a4 <mul_mont_384x>
    d504:	9700      	str	r7, [sp, #0]
    d506:	4623      	mov	r3, r4
    d508:	f50d 7c2e 	add.w	ip, sp, #696	; 0x2b8
    d50c:	4662      	mov	r2, ip
    d50e:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
    d512:	4661      	mov	r1, ip
    d514:	4660      	mov	r0, ip
    d516:	f7f7 fe45 	bl	51a4 <mul_mont_384x>
    d51a:	250c      	movs	r5, #12
    d51c:	9500      	str	r5, [sp, #0]
    d51e:	4623      	mov	r3, r4
    d520:	465a      	mov	r2, fp
    d522:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
    d526:	4661      	mov	r1, ip
    d528:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
    d52c:	4660      	mov	r0, ip
    d52e:	f7f3 f8f2 	bl	716 <sub_mod_n>
    d532:	9500      	str	r5, [sp, #0]
    d534:	4623      	mov	r3, r4
    d536:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    d53a:	a9a2      	add	r1, sp, #648	; 0x288
    d53c:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
    d540:	4660      	mov	r0, ip
    d542:	f7f3 f8e8 	bl	716 <sub_mod_n>
    d546:	463b      	mov	r3, r7
    d548:	4622      	mov	r2, r4
    d54a:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
    d54e:	4661      	mov	r1, ip
    d550:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
    d554:	4660      	mov	r0, ip
    d556:	f7fc f821 	bl	959c <sqr_mont_384x>
    d55a:	9500      	str	r5, [sp, #0]
    d55c:	4623      	mov	r3, r4
    d55e:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
    d562:	4662      	mov	r2, ip
    d564:	4661      	mov	r1, ip
    d566:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
    d56a:	4660      	mov	r0, ip
    d56c:	f7f3 fd86 	bl	107c <add_mod_n>
    d570:	9500      	str	r5, [sp, #0]
    d572:	4623      	mov	r3, r4
    d574:	f50d 7cb4 	add.w	ip, sp, #360	; 0x168
    d578:	4662      	mov	r2, ip
    d57a:	4661      	mov	r1, ip
    d57c:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
    d580:	4660      	mov	r0, ip
    d582:	f7f3 fd7b 	bl	107c <add_mod_n>
    d586:	9500      	str	r5, [sp, #0]
    d588:	4623      	mov	r3, r4
    d58a:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
    d58e:	4662      	mov	r2, ip
    d590:	4661      	mov	r1, ip
    d592:	4660      	mov	r0, ip
    d594:	f7f3 fd72 	bl	107c <add_mod_n>
    d598:	9500      	str	r5, [sp, #0]
    d59a:	4623      	mov	r3, r4
    d59c:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
    d5a0:	4662      	mov	r2, ip
    d5a2:	4661      	mov	r1, ip
    d5a4:	4660      	mov	r0, ip
    d5a6:	f7f3 fd69 	bl	107c <add_mod_n>
    d5aa:	9700      	str	r7, [sp, #0]
    d5ac:	4623      	mov	r3, r4
    d5ae:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
    d5b2:	4662      	mov	r2, ip
    d5b4:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
    d5b8:	4661      	mov	r1, ip
    d5ba:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    d5be:	4660      	mov	r0, ip
    d5c0:	f7f7 fdf0 	bl	51a4 <mul_mont_384x>
    d5c4:	f8cd 9008 	str.w	r9, [sp, #8]
    d5c8:	f109 0860 	add.w	r8, r9, #96	; 0x60
    d5cc:	f10b 0960 	add.w	r9, fp, #96	; 0x60
    d5d0:	9500      	str	r5, [sp, #0]
    d5d2:	4623      	mov	r3, r4
    d5d4:	464a      	mov	r2, r9
    d5d6:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
    d5da:	4661      	mov	r1, ip
    d5dc:	4640      	mov	r0, r8
    d5de:	f7f3 f89a 	bl	716 <sub_mod_n>
    d5e2:	9802      	ldr	r0, [sp, #8]
    d5e4:	f100 0a90 	add.w	sl, r0, #144	; 0x90
    d5e8:	9500      	str	r5, [sp, #0]
    d5ea:	4623      	mov	r3, r4
    d5ec:	f10b 0290 	add.w	r2, fp, #144	; 0x90
    d5f0:	a98a      	add	r1, sp, #552	; 0x228
    d5f2:	4650      	mov	r0, sl
    d5f4:	f7f3 f88f 	bl	716 <sub_mod_n>
    d5f8:	9500      	str	r5, [sp, #0]
    d5fa:	4623      	mov	r3, r4
    d5fc:	4642      	mov	r2, r8
    d5fe:	4641      	mov	r1, r8
    d600:	4640      	mov	r0, r8
    d602:	f7f3 fd3b 	bl	107c <add_mod_n>
    d606:	9500      	str	r5, [sp, #0]
    d608:	4623      	mov	r3, r4
    d60a:	4652      	mov	r2, sl
    d60c:	4651      	mov	r1, sl
    d60e:	4650      	mov	r0, sl
    d610:	f7f3 fd34 	bl	107c <add_mod_n>
    d614:	9700      	str	r7, [sp, #0]
    d616:	4623      	mov	r3, r4
    d618:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
    d61c:	4662      	mov	r2, ip
    d61e:	4659      	mov	r1, fp
    d620:	a806      	add	r0, sp, #24
    d622:	f7f7 fdbf 	bl	51a4 <mul_mont_384x>
    d626:	463b      	mov	r3, r7
    d628:	4622      	mov	r2, r4
    d62a:	4641      	mov	r1, r8
    d62c:	4630      	mov	r0, r6
    d62e:	f7fb ffb5 	bl	959c <sqr_mont_384x>
    d632:	9500      	str	r5, [sp, #0]
    d634:	4623      	mov	r3, r4
    d636:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    d63a:	4662      	mov	r2, ip
    d63c:	4631      	mov	r1, r6
    d63e:	4630      	mov	r0, r6
    d640:	f7f3 f869 	bl	716 <sub_mod_n>
    d644:	f106 0a30 	add.w	sl, r6, #48	; 0x30
    d648:	9500      	str	r5, [sp, #0]
    d64a:	4623      	mov	r3, r4
    d64c:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    d650:	4662      	mov	r2, ip
    d652:	4651      	mov	r1, sl
    d654:	4650      	mov	r0, sl
    d656:	f7f3 f85e 	bl	716 <sub_mod_n>
    d65a:	9500      	str	r5, [sp, #0]
    d65c:	4623      	mov	r3, r4
    d65e:	f10d 0c18 	add.w	ip, sp, #24
    d662:	4662      	mov	r2, ip
    d664:	4631      	mov	r1, r6
    d666:	4630      	mov	r0, r6
    d668:	f7f3 f855 	bl	716 <sub_mod_n>
    d66c:	9500      	str	r5, [sp, #0]
    d66e:	4623      	mov	r3, r4
    d670:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    d674:	4662      	mov	r2, ip
    d676:	4651      	mov	r1, sl
    d678:	4650      	mov	r0, sl
    d67a:	f7f3 f84c 	bl	716 <sub_mod_n>
    d67e:	9500      	str	r5, [sp, #0]
    d680:	4623      	mov	r3, r4
    d682:	f10d 0c18 	add.w	ip, sp, #24
    d686:	4662      	mov	r2, ip
    d688:	4631      	mov	r1, r6
    d68a:	4630      	mov	r0, r6
    d68c:	f7f3 f843 	bl	716 <sub_mod_n>
    d690:	9500      	str	r5, [sp, #0]
    d692:	4623      	mov	r3, r4
    d694:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    d698:	4662      	mov	r2, ip
    d69a:	4651      	mov	r1, sl
    d69c:	4650      	mov	r0, sl
    d69e:	f7f3 f83a 	bl	716 <sub_mod_n>
    d6a2:	9700      	str	r7, [sp, #0]
    d6a4:	4623      	mov	r3, r4
    d6a6:	464a      	mov	r2, r9
    d6a8:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    d6ac:	4661      	mov	r1, ip
    d6ae:	4660      	mov	r0, ip
    d6b0:	f7f7 fd78 	bl	51a4 <mul_mont_384x>
    d6b4:	f106 0960 	add.w	r9, r6, #96	; 0x60
    d6b8:	9500      	str	r5, [sp, #0]
    d6ba:	4623      	mov	r3, r4
    d6bc:	4632      	mov	r2, r6
    d6be:	f10d 0c18 	add.w	ip, sp, #24
    d6c2:	4661      	mov	r1, ip
    d6c4:	4648      	mov	r0, r9
    d6c6:	f7f3 f826 	bl	716 <sub_mod_n>
    d6ca:	f106 0090 	add.w	r0, r6, #144	; 0x90
    d6ce:	9500      	str	r5, [sp, #0]
    d6d0:	4623      	mov	r3, r4
    d6d2:	4652      	mov	r2, sl
    d6d4:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    d6d8:	4661      	mov	r1, ip
    d6da:	4682      	mov	sl, r0
    d6dc:	f7f3 f81b 	bl	716 <sub_mod_n>
    d6e0:	9700      	str	r7, [sp, #0]
    d6e2:	4623      	mov	r3, r4
    d6e4:	4642      	mov	r2, r8
    d6e6:	4649      	mov	r1, r9
    d6e8:	4648      	mov	r0, r9
    d6ea:	f7f7 fd5b 	bl	51a4 <mul_mont_384x>
    d6ee:	9500      	str	r5, [sp, #0]
    d6f0:	4623      	mov	r3, r4
    d6f2:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    d6f6:	4662      	mov	r2, ip
    d6f8:	4649      	mov	r1, r9
    d6fa:	4648      	mov	r0, r9
    d6fc:	f7f3 f80b 	bl	716 <sub_mod_n>
    d700:	9500      	str	r5, [sp, #0]
    d702:	4623      	mov	r3, r4
    d704:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    d708:	4662      	mov	r2, ip
    d70a:	4651      	mov	r1, sl
    d70c:	4650      	mov	r0, sl
    d70e:	f7f3 f802 	bl	716 <sub_mod_n>
    d712:	9500      	str	r5, [sp, #0]
    d714:	4623      	mov	r3, r4
    d716:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    d71a:	4662      	mov	r2, ip
    d71c:	4649      	mov	r1, r9
    d71e:	4648      	mov	r0, r9
    d720:	f7f2 fff9 	bl	716 <sub_mod_n>
    d724:	9500      	str	r5, [sp, #0]
    d726:	4623      	mov	r3, r4
    d728:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    d72c:	4662      	mov	r2, ip
    d72e:	4651      	mov	r1, sl
    d730:	4650      	mov	r0, sl
    d732:	f7f2 fff0 	bl	716 <sub_mod_n>
    d736:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
    d73a:	9500      	str	r5, [sp, #0]
    d73c:	4623      	mov	r3, r4
    d73e:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
    d742:	4662      	mov	r2, ip
    d744:	9903      	ldr	r1, [sp, #12]
    d746:	4648      	mov	r0, r9
    d748:	f7f3 fc98 	bl	107c <add_mod_n>
    d74c:	f106 0af0 	add.w	sl, r6, #240	; 0xf0
    d750:	9500      	str	r5, [sp, #0]
    d752:	4623      	mov	r3, r4
    d754:	aa72      	add	r2, sp, #456	; 0x1c8
    d756:	f10b 01f0 	add.w	r1, fp, #240	; 0xf0
    d75a:	4650      	mov	r0, sl
    d75c:	f7f3 fc8e 	bl	107c <add_mod_n>
    d760:	463b      	mov	r3, r7
    d762:	4622      	mov	r2, r4
    d764:	4649      	mov	r1, r9
    d766:	4648      	mov	r0, r9
    d768:	f7fb ff18 	bl	959c <sqr_mont_384x>
    d76c:	9500      	str	r5, [sp, #0]
    d76e:	4623      	mov	r3, r4
    d770:	aaae      	add	r2, sp, #696	; 0x2b8
    d772:	4649      	mov	r1, r9
    d774:	4648      	mov	r0, r9
    d776:	f7f2 ffce 	bl	716 <sub_mod_n>
    d77a:	9500      	str	r5, [sp, #0]
    d77c:	4623      	mov	r3, r4
    d77e:	aaba      	add	r2, sp, #744	; 0x2e8
    d780:	4651      	mov	r1, sl
    d782:	4650      	mov	r0, sl
    d784:	f7f2 ffc7 	bl	716 <sub_mod_n>
    d788:	9500      	str	r5, [sp, #0]
    d78a:	4623      	mov	r3, r4
    d78c:	aa4e      	add	r2, sp, #312	; 0x138
    d78e:	4649      	mov	r1, r9
    d790:	4648      	mov	r0, r9
    d792:	f7f2 ffc0 	bl	716 <sub_mod_n>
    d796:	9500      	str	r5, [sp, #0]
    d798:	4623      	mov	r3, r4
    d79a:	aa5a      	add	r2, sp, #360	; 0x168
    d79c:	4651      	mov	r1, sl
    d79e:	4650      	mov	r0, sl
    d7a0:	f7f2 ffb9 	bl	716 <sub_mod_n>
    d7a4:	9700      	str	r7, [sp, #0]
    d7a6:	4623      	mov	r3, r4
    d7a8:	9a05      	ldr	r2, [sp, #20]
    d7aa:	4641      	mov	r1, r8
    d7ac:	a836      	add	r0, sp, #216	; 0xd8
    d7ae:	f7f7 fcf9 	bl	51a4 <mul_mont_384x>
    d7b2:	9700      	str	r7, [sp, #0]
    d7b4:	4623      	mov	r3, r4
    d7b6:	464a      	mov	r2, r9
    d7b8:	9904      	ldr	r1, [sp, #16]
    d7ba:	a81e      	add	r0, sp, #120	; 0x78
    d7bc:	f7f7 fcf2 	bl	51a4 <mul_mont_384x>
    d7c0:	9500      	str	r5, [sp, #0]
    d7c2:	4623      	mov	r3, r4
    d7c4:	aa1e      	add	r2, sp, #120	; 0x78
    d7c6:	a936      	add	r1, sp, #216	; 0xd8
    d7c8:	4608      	mov	r0, r1
    d7ca:	f7f2 ffa4 	bl	716 <sub_mod_n>
    d7ce:	9500      	str	r5, [sp, #0]
    d7d0:	4623      	mov	r3, r4
    d7d2:	aa2a      	add	r2, sp, #168	; 0xa8
    d7d4:	a942      	add	r1, sp, #264	; 0x108
    d7d6:	4608      	mov	r0, r1
    d7d8:	f7f2 ff9d 	bl	716 <sub_mod_n>
    d7dc:	9500      	str	r5, [sp, #0]
    d7de:	4623      	mov	r3, r4
    d7e0:	aa36      	add	r2, sp, #216	; 0xd8
    d7e2:	4611      	mov	r1, r2
    d7e4:	9f02      	ldr	r7, [sp, #8]
    d7e6:	4638      	mov	r0, r7
    d7e8:	f7f3 fc48 	bl	107c <add_mod_n>
    d7ec:	9500      	str	r5, [sp, #0]
    d7ee:	4623      	mov	r3, r4
    d7f0:	aa42      	add	r2, sp, #264	; 0x108
    d7f2:	4611      	mov	r1, r2
    d7f4:	4638      	mov	r0, r7
    d7f6:	3030      	adds	r0, #48	; 0x30
    d7f8:	f7f3 fc40 	bl	107c <add_mod_n>
    d7fc:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
    d800:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
    d804:	f506 768e 	add.w	r6, r6, #284	; 0x11c
    d808:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d80c:	f840 2f04 	str.w	r2, [r0, #4]!
    d810:	429e      	cmp	r6, r3
    d812:	d1f9      	bne.n	d808 <line_add+0x35a>
    d814:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
    d818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d81c:	fffcfffd 	.word	0xfffcfffd
    d820:	0001ade8 	.word	0x0001ade8

0000d824 <add_n_dbl_n>:
    d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d828:	b0c9      	sub	sp, #292	; 0x124
    d82a:	4604      	mov	r4, r0
    d82c:	460d      	mov	r5, r1
    d82e:	469b      	mov	fp, r3
    d830:	f8dd 9148 	ldr.w	r9, [sp, #328]	; 0x148
    d834:	f1b9 0f00 	cmp.w	r9, #0
    d838:	d01c      	beq.n	d874 <add_n_dbl_n+0x50>
    d83a:	460e      	mov	r6, r1
    d83c:	4617      	mov	r7, r2
    d83e:	4698      	mov	r8, r3
    d840:	eb09 0ac9 	add.w	sl, r9, r9, lsl #3
    d844:	eb01 1a4a 	add.w	sl, r1, sl, lsl #5
    d848:	463b      	mov	r3, r7
    d84a:	4632      	mov	r2, r6
    d84c:	4631      	mov	r1, r6
    d84e:	4668      	mov	r0, sp
    d850:	f7ff fe2d 	bl	d4ae <line_add>
    d854:	4641      	mov	r1, r8
    d856:	4668      	mov	r0, sp
    d858:	f7f3 fa92 	bl	d80 <line_by_Px2>
    d85c:	466a      	mov	r2, sp
    d85e:	4621      	mov	r1, r4
    d860:	4620      	mov	r0, r4
    d862:	f7f8 f9b3 	bl	5bcc <mul_by_xy00z0_fp12>
    d866:	f506 7690 	add.w	r6, r6, #288	; 0x120
    d86a:	37c0      	adds	r7, #192	; 0xc0
    d86c:	f108 0860 	add.w	r8, r8, #96	; 0x60
    d870:	4556      	cmp	r6, sl
    d872:	d1e9      	bne.n	d848 <add_n_dbl_n+0x24>
    d874:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    d876:	f103 38ff 	add.w	r8, r3, #4294967295
    d87a:	b33b      	cbz	r3, d8cc <add_n_dbl_n+0xa8>
    d87c:	46aa      	mov	sl, r5
    d87e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
    d882:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    d886:	e004      	b.n	d892 <add_n_dbl_n+0x6e>
    d888:	f108 38ff 	add.w	r8, r8, #4294967295
    d88c:	f1b8 3fff 	cmp.w	r8, #4294967295
    d890:	d01c      	beq.n	d8cc <add_n_dbl_n+0xa8>
    d892:	4621      	mov	r1, r4
    d894:	4620      	mov	r0, r4
    d896:	f7f8 f819 	bl	58cc <sqr_fp12>
    d89a:	f1b9 0f00 	cmp.w	r9, #0
    d89e:	d0f3      	beq.n	d888 <add_n_dbl_n+0x64>
    d8a0:	465f      	mov	r7, fp
    d8a2:	4656      	mov	r6, sl
    d8a4:	4632      	mov	r2, r6
    d8a6:	4631      	mov	r1, r6
    d8a8:	4668      	mov	r0, sp
    d8aa:	f7ff fc39 	bl	d120 <line_dbl>
    d8ae:	4639      	mov	r1, r7
    d8b0:	4668      	mov	r0, sp
    d8b2:	f7f3 fa65 	bl	d80 <line_by_Px2>
    d8b6:	466a      	mov	r2, sp
    d8b8:	4621      	mov	r1, r4
    d8ba:	4620      	mov	r0, r4
    d8bc:	f7f8 f986 	bl	5bcc <mul_by_xy00z0_fp12>
    d8c0:	f506 7690 	add.w	r6, r6, #288	; 0x120
    d8c4:	3760      	adds	r7, #96	; 0x60
    d8c6:	42ae      	cmp	r6, r5
    d8c8:	d1ec      	bne.n	d8a4 <add_n_dbl_n+0x80>
    d8ca:	e7dd      	b.n	d888 <add_n_dbl_n+0x64>
    d8cc:	b049      	add	sp, #292	; 0x124
    d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d8d2 <miller_loop_n>:
    d8d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8d6:	b089      	sub	sp, #36	; 0x24
    d8d8:	af02      	add	r7, sp, #8
    d8da:	6038      	str	r0, [r7, #0]
    d8dc:	6139      	str	r1, [r7, #16]
    d8de:	4690      	mov	r8, r2
    d8e0:	461a      	mov	r2, r3
    d8e2:	617b      	str	r3, [r7, #20]
    d8e4:	f8c7 d004 	str.w	sp, [r7, #4]
    d8e8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    d8ec:	4669      	mov	r1, sp
    d8ee:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
    d8f2:	469d      	mov	sp, r3
    d8f4:	ab02      	add	r3, sp, #8
    d8f6:	60fb      	str	r3, [r7, #12]
    d8f8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    d8fc:	4669      	mov	r1, sp
    d8fe:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
    d902:	469d      	mov	sp, r3
    d904:	ab02      	add	r3, sp, #8
    d906:	60bb      	str	r3, [r7, #8]
    d908:	2a01      	cmp	r2, #1
    d90a:	d010      	beq.n	d92e <miller_loop_n+0x5c>
    d90c:	697b      	ldr	r3, [r7, #20]
    d90e:	2b00      	cmp	r3, #0
    d910:	d074      	beq.n	d9fc <miller_loop_n+0x12a>
    d912:	68be      	ldr	r6, [r7, #8]
    d914:	68fb      	ldr	r3, [r7, #12]
    d916:	f103 0abc 	add.w	sl, r3, #188	; 0xbc
    d91a:	693b      	ldr	r3, [r7, #16]
    d91c:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
    d920:	f04f 0b00 	mov.w	fp, #0
    d924:	f8df 915c 	ldr.w	r9, [pc, #348]	; da84 <miller_loop_n+0x1b2>
    d928:	f109 05bc 	add.w	r5, r9, #188	; 0xbc
    d92c:	e038      	b.n	d9a0 <miller_loop_n+0xce>
    d92e:	693a      	ldr	r2, [r7, #16]
    d930:	1f13      	subs	r3, r2, #4
    d932:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
    d936:	2100      	movs	r1, #0
    d938:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d93c:	4311      	orrs	r1, r2
    d93e:	4283      	cmp	r3, r0
    d940:	d1fa      	bne.n	d938 <miller_loop_n+0x66>
    d942:	1e4c      	subs	r4, r1, #1
    d944:	ea24 0101 	bic.w	r1, r4, r1
    d948:	0fcc      	lsrs	r4, r1, #31
    d94a:	f1a8 0304 	sub.w	r3, r8, #4
    d94e:	f108 005c 	add.w	r0, r8, #92	; 0x5c
    d952:	2100      	movs	r1, #0
    d954:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d958:	4311      	orrs	r1, r2
    d95a:	4283      	cmp	r3, r0
    d95c:	d1fa      	bne.n	d954 <miller_loop_n+0x82>
    d95e:	1e4b      	subs	r3, r1, #1
    d960:	ea23 0101 	bic.w	r1, r3, r1
    d964:	ea54 73d1 	orrs.w	r3, r4, r1, lsr #31
    d968:	d0d3      	beq.n	d912 <miller_loop_n+0x40>
    d96a:	4846      	ldr	r0, [pc, #280]	; (da84 <miller_loop_n+0x1b2>)
    d96c:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    d970:	683a      	ldr	r2, [r7, #0]
    d972:	3a04      	subs	r2, #4
    d974:	f500 7027 	add.w	r0, r0, #668	; 0x29c
    d978:	f853 1f04 	ldr.w	r1, [r3, #4]!
    d97c:	f842 1f04 	str.w	r1, [r2, #4]!
    d980:	4283      	cmp	r3, r0
    d982:	d1f9      	bne.n	d978 <miller_loop_n+0xa6>
    d984:	f8d7 d004 	ldr.w	sp, [r7, #4]
    d988:	e077      	b.n	da7a <miller_loop_n+0x1a8>
    d98a:	f10b 0b01 	add.w	fp, fp, #1
    d98e:	3660      	adds	r6, #96	; 0x60
    d990:	f108 0860 	add.w	r8, r8, #96	; 0x60
    d994:	f50a 7a90 	add.w	sl, sl, #288	; 0x120
    d998:	34c0      	adds	r4, #192	; 0xc0
    d99a:	697b      	ldr	r3, [r7, #20]
    d99c:	455b      	cmp	r3, fp
    d99e:	d92d      	bls.n	d9fc <miller_loop_n+0x12a>
    d9a0:	230c      	movs	r3, #12
    d9a2:	9300      	str	r3, [sp, #0]
    d9a4:	464b      	mov	r3, r9
    d9a6:	4642      	mov	r2, r8
    d9a8:	4641      	mov	r1, r8
    d9aa:	4630      	mov	r0, r6
    d9ac:	f7f3 fb66 	bl	107c <add_mod_n>
    d9b0:	230c      	movs	r3, #12
    d9b2:	9300      	str	r3, [sp, #0]
    d9b4:	464b      	mov	r3, r9
    d9b6:	2201      	movs	r2, #1
    d9b8:	4631      	mov	r1, r6
    d9ba:	4630      	mov	r0, r6
    d9bc:	f7f4 ff60 	bl	2880 <cneg_mod_n>
    d9c0:	f108 0130 	add.w	r1, r8, #48	; 0x30
    d9c4:	230c      	movs	r3, #12
    d9c6:	9300      	str	r3, [sp, #0]
    d9c8:	464b      	mov	r3, r9
    d9ca:	460a      	mov	r2, r1
    d9cc:	f106 0030 	add.w	r0, r6, #48	; 0x30
    d9d0:	f7f3 fb54 	bl	107c <add_mod_n>
    d9d4:	f1a4 03c0 	sub.w	r3, r4, #192	; 0xc0
    d9d8:	f1aa 02c0 	sub.w	r2, sl, #192	; 0xc0
    d9dc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    d9e0:	f842 1f04 	str.w	r1, [r2, #4]!
    d9e4:	42a3      	cmp	r3, r4
    d9e6:	d1f9      	bne.n	d9dc <miller_loop_n+0x10a>
    d9e8:	f109 035c 	add.w	r3, r9, #92	; 0x5c
    d9ec:	4652      	mov	r2, sl
    d9ee:	f853 1f04 	ldr.w	r1, [r3, #4]!
    d9f2:	f842 1f04 	str.w	r1, [r2, #4]!
    d9f6:	42ab      	cmp	r3, r5
    d9f8:	d1f9      	bne.n	d9ee <miller_loop_n+0x11c>
    d9fa:	e7c6      	b.n	d98a <miller_loop_n+0xb8>
    d9fc:	697c      	ldr	r4, [r7, #20]
    d9fe:	4623      	mov	r3, r4
    da00:	f8d7 8008 	ldr.w	r8, [r7, #8]
    da04:	4642      	mov	r2, r8
    da06:	68fe      	ldr	r6, [r7, #12]
    da08:	4631      	mov	r1, r6
    da0a:	683d      	ldr	r5, [r7, #0]
    da0c:	4628      	mov	r0, r5
    da0e:	f7ff fd03 	bl	d418 <start_dbl_n>
    da12:	2302      	movs	r3, #2
    da14:	9301      	str	r3, [sp, #4]
    da16:	9400      	str	r4, [sp, #0]
    da18:	4643      	mov	r3, r8
    da1a:	f8d7 9010 	ldr.w	r9, [r7, #16]
    da1e:	464a      	mov	r2, r9
    da20:	4631      	mov	r1, r6
    da22:	4628      	mov	r0, r5
    da24:	f7ff fefe 	bl	d824 <add_n_dbl_n>
    da28:	2303      	movs	r3, #3
    da2a:	9301      	str	r3, [sp, #4]
    da2c:	9400      	str	r4, [sp, #0]
    da2e:	4643      	mov	r3, r8
    da30:	464a      	mov	r2, r9
    da32:	4631      	mov	r1, r6
    da34:	4628      	mov	r0, r5
    da36:	f7ff fef5 	bl	d824 <add_n_dbl_n>
    da3a:	2309      	movs	r3, #9
    da3c:	9301      	str	r3, [sp, #4]
    da3e:	9400      	str	r4, [sp, #0]
    da40:	4643      	mov	r3, r8
    da42:	464a      	mov	r2, r9
    da44:	4631      	mov	r1, r6
    da46:	4628      	mov	r0, r5
    da48:	f7ff feec 	bl	d824 <add_n_dbl_n>
    da4c:	2320      	movs	r3, #32
    da4e:	9301      	str	r3, [sp, #4]
    da50:	9400      	str	r4, [sp, #0]
    da52:	4643      	mov	r3, r8
    da54:	464a      	mov	r2, r9
    da56:	4631      	mov	r1, r6
    da58:	4628      	mov	r0, r5
    da5a:	f7ff fee3 	bl	d824 <add_n_dbl_n>
    da5e:	2310      	movs	r3, #16
    da60:	9301      	str	r3, [sp, #4]
    da62:	9400      	str	r4, [sp, #0]
    da64:	4643      	mov	r3, r8
    da66:	464a      	mov	r2, r9
    da68:	4631      	mov	r1, r6
    da6a:	4628      	mov	r0, r5
    da6c:	f7ff feda 	bl	d824 <add_n_dbl_n>
    da70:	4628      	mov	r0, r5
    da72:	f7f6 f973 	bl	3d5c <conjugate_fp12>
    da76:	f8d7 d004 	ldr.w	sp, [r7, #4]
    da7a:	371c      	adds	r7, #28
    da7c:	46bd      	mov	sp, r7
    da7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da82:	bf00      	nop
    da84:	0001ade8 	.word	0x0001ade8

0000da88 <blst_miller_loop>:
    da88:	b510      	push	{r4, lr}
    da8a:	460c      	mov	r4, r1
    da8c:	2900      	cmp	r1, #0
    da8e:	4905      	ldr	r1, [pc, #20]	; (daa4 <blst_miller_loop+0x1c>)
    da90:	bf18      	it	ne
    da92:	4621      	movne	r1, r4
    da94:	2a00      	cmp	r2, #0
    da96:	4b04      	ldr	r3, [pc, #16]	; (daa8 <blst_miller_loop+0x20>)
    da98:	bf08      	it	eq
    da9a:	461a      	moveq	r2, r3
    da9c:	2301      	movs	r3, #1
    da9e:	f7ff ff18 	bl	d8d2 <miller_loop_n>
    daa2:	bd10      	pop	{r4, pc}
    daa4:	0001bcb8 	.word	0x0001bcb8
    daa8:	0001bc28 	.word	0x0001bc28

0000daac <PAIRING_Aggregate_PK_in_G2>:
    daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dab0:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
    dab4:	4699      	mov	r9, r3
    dab6:	6803      	ldr	r3, [r0, #0]
    dab8:	f013 0602 	ands.w	r6, r3, #2
    dabc:	f040 8148 	bne.w	dd50 <PAIRING_Aggregate_PK_in_G2+0x2a4>
    dac0:	4607      	mov	r7, r0
    dac2:	460d      	mov	r5, r1
    dac4:	4690      	mov	r8, r2
    dac6:	f043 0301 	orr.w	r3, r3, #1
    daca:	6003      	str	r3, [r0, #0]
    dacc:	f1b9 0f00 	cmp.w	r9, #0
    dad0:	d074      	beq.n	dbbc <PAIRING_Aggregate_PK_in_G2+0x110>
    dad2:	f1a9 0204 	sub.w	r2, r9, #4
    dad6:	f109 005c 	add.w	r0, r9, #92	; 0x5c
    dada:	4614      	mov	r4, r2
    dadc:	4631      	mov	r1, r6
    dade:	f854 3f04 	ldr.w	r3, [r4, #4]!
    dae2:	4319      	orrs	r1, r3
    dae4:	4284      	cmp	r4, r0
    dae6:	d1fa      	bne.n	dade <PAIRING_Aggregate_PK_in_G2+0x32>
    dae8:	1e4b      	subs	r3, r1, #1
    daea:	ea23 0101 	bic.w	r1, r3, r1
    daee:	0fc9      	lsrs	r1, r1, #31
    daf0:	d164      	bne.n	dbbc <PAIRING_Aggregate_PK_in_G2+0x110>
    daf2:	f507 7b14 	add.w	fp, r7, #592	; 0x250
    daf6:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
    dafa:	ab28      	add	r3, sp, #160	; 0xa0
    dafc:	4694      	mov	ip, r2
    dafe:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    db02:	f843 4b04 	str.w	r4, [r3], #4
    db06:	4553      	cmp	r3, sl
    db08:	d1f9      	bne.n	dafe <PAIRING_Aggregate_PK_in_G2+0x52>
    db0a:	4613      	mov	r3, r2
    db0c:	f853 cf04 	ldr.w	ip, [r3, #4]!
    db10:	ea41 010c 	orr.w	r1, r1, ip
    db14:	4283      	cmp	r3, r0
    db16:	d1f9      	bne.n	db0c <PAIRING_Aggregate_PK_in_G2+0x60>
    db18:	f101 3eff 	add.w	lr, r1, #4294967295
    db1c:	ea2e 0101 	bic.w	r1, lr, r1
    db20:	ea4f 7ee1 	mov.w	lr, r1, asr #31
    db24:	488c      	ldr	r0, [pc, #560]	; (dd58 <PAIRING_Aggregate_PK_in_G2+0x2ac>)
    db26:	ab3f      	add	r3, sp, #252	; 0xfc
    db28:	f109 0a2c 	add.w	sl, r9, #44	; 0x2c
    db2c:	f850 cb04 	ldr.w	ip, [r0], #4
    db30:	f852 1f04 	ldr.w	r1, [r2, #4]!
    db34:	f1be 0f00 	cmp.w	lr, #0
    db38:	bf08      	it	eq
    db3a:	4661      	moveq	r1, ip
    db3c:	f843 1f04 	str.w	r1, [r3, #4]!
    db40:	4552      	cmp	r2, sl
    db42:	d1f3      	bne.n	db2c <PAIRING_Aggregate_PK_in_G2+0x80>
    db44:	9bc2      	ldr	r3, [sp, #776]	; 0x308
    db46:	b9a3      	cbnz	r3, db72 <PAIRING_Aggregate_PK_in_G2+0xc6>
    db48:	683b      	ldr	r3, [r7, #0]
    db4a:	f013 0f10 	tst.w	r3, #16
    db4e:	d01d      	beq.n	db8c <PAIRING_Aggregate_PK_in_G2+0xe0>
    db50:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    db52:	b1ab      	cbz	r3, db80 <PAIRING_Aggregate_PK_in_G2+0xd4>
    db54:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
    db56:	b19b      	cbz	r3, db80 <PAIRING_Aggregate_PK_in_G2+0xd4>
    db58:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    db5a:	9ac3      	ldr	r2, [sp, #780]	; 0x30c
    db5c:	a928      	add	r1, sp, #160	; 0xa0
    db5e:	4608      	mov	r0, r1
    db60:	f7f4 ff24 	bl	29ac <POINTonE1_mult_w5>
    db64:	2300      	movs	r3, #0
    db66:	aa28      	add	r2, sp, #160	; 0xa0
    db68:	4659      	mov	r1, fp
    db6a:	4658      	mov	r0, fp
    db6c:	f7f3 ffbb 	bl	1ae6 <POINTonE1_dadd>
    db70:	e024      	b.n	dbbc <PAIRING_Aggregate_PK_in_G2+0x110>
    db72:	a828      	add	r0, sp, #160	; 0xa0
    db74:	f7f5 f882 	bl	2c7c <POINTonE1_in_G1>
    db78:	2800      	cmp	r0, #0
    db7a:	d1e5      	bne.n	db48 <PAIRING_Aggregate_PK_in_G2+0x9c>
    db7c:	2003      	movs	r0, #3
    db7e:	e0af      	b.n	dce0 <PAIRING_Aggregate_PK_in_G2+0x234>
    db80:	464a      	mov	r2, r9
    db82:	4659      	mov	r1, fp
    db84:	4658      	mov	r0, fp
    db86:	f7f4 f95b 	bl	1e40 <POINTonE1_dadd_affine>
    db8a:	e017      	b.n	dbbc <PAIRING_Aggregate_PK_in_G2+0x110>
    db8c:	f043 0310 	orr.w	r3, r3, #16
    db90:	603b      	str	r3, [r7, #0]
    db92:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    db94:	b143      	cbz	r3, dba8 <PAIRING_Aggregate_PK_in_G2+0xfc>
    db96:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
    db98:	b133      	cbz	r3, dba8 <PAIRING_Aggregate_PK_in_G2+0xfc>
    db9a:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    db9c:	9ac3      	ldr	r2, [sp, #780]	; 0x30c
    db9e:	a928      	add	r1, sp, #160	; 0xa0
    dba0:	4658      	mov	r0, fp
    dba2:	f7f4 ff03 	bl	29ac <POINTonE1_mult_w5>
    dba6:	e009      	b.n	dbbc <PAIRING_Aggregate_PK_in_G2+0x110>
    dba8:	ab27      	add	r3, sp, #156	; 0x9c
    dbaa:	f507 7213 	add.w	r2, r7, #588	; 0x24c
    dbae:	a84b      	add	r0, sp, #300	; 0x12c
    dbb0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    dbb4:	f842 1f04 	str.w	r1, [r2, #4]!
    dbb8:	4283      	cmp	r3, r0
    dbba:	d1f9      	bne.n	dbb0 <PAIRING_Aggregate_PK_in_G2+0x104>
    dbbc:	2d00      	cmp	r5, #0
    dbbe:	f000 80c9 	beq.w	dd54 <PAIRING_Aggregate_PK_in_G2+0x2a8>
    dbc2:	f8d7 9008 	ldr.w	r9, [r7, #8]
    dbc6:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    dbca:	bf08      	it	eq
    dbcc:	f507 6947 	addeq.w	r9, r7, #3184	; 0xc70
    dbd0:	1f2c      	subs	r4, r5, #4
    dbd2:	35bc      	adds	r5, #188	; 0xbc
    dbd4:	4623      	mov	r3, r4
    dbd6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    dbda:	4316      	orrs	r6, r2
    dbdc:	42ab      	cmp	r3, r5
    dbde:	d1fa      	bne.n	dbd6 <PAIRING_Aggregate_PK_in_G2+0x12a>
    dbe0:	1e73      	subs	r3, r6, #1
    dbe2:	ea23 0606 	bic.w	r6, r3, r6
    dbe6:	0ff6      	lsrs	r6, r6, #31
    dbe8:	f040 80b0 	bne.w	dd4c <PAIRING_Aggregate_PK_in_G2+0x2a0>
    dbec:	f1b8 0f00 	cmp.w	r8, #0
    dbf0:	d02d      	beq.n	dc4e <PAIRING_Aggregate_PK_in_G2+0x1a2>
    dbf2:	ab28      	add	r3, sp, #160	; 0xa0
    dbf4:	a858      	add	r0, sp, #352	; 0x160
    dbf6:	4622      	mov	r2, r4
    dbf8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    dbfc:	f843 1b04 	str.w	r1, [r3], #4
    dc00:	4283      	cmp	r3, r0
    dc02:	d1f9      	bne.n	dbf8 <PAIRING_Aggregate_PK_in_G2+0x14c>
    dc04:	4623      	mov	r3, r4
    dc06:	4632      	mov	r2, r6
    dc08:	f853 1f04 	ldr.w	r1, [r3, #4]!
    dc0c:	430a      	orrs	r2, r1
    dc0e:	42ab      	cmp	r3, r5
    dc10:	d1fa      	bne.n	dc08 <PAIRING_Aggregate_PK_in_G2+0x15c>
    dc12:	f102 3eff 	add.w	lr, r2, #4294967295
    dc16:	ea2e 0202 	bic.w	r2, lr, r2
    dc1a:	ea4f 7ee2 	mov.w	lr, r2, asr #31
    dc1e:	4b4f      	ldr	r3, [pc, #316]	; (dd5c <PAIRING_Aggregate_PK_in_G2+0x2b0>)
    dc20:	f103 0260 	add.w	r2, r3, #96	; 0x60
    dc24:	a857      	add	r0, sp, #348	; 0x15c
    dc26:	f103 08c0 	add.w	r8, r3, #192	; 0xc0
    dc2a:	4621      	mov	r1, r4
    dc2c:	f852 cb04 	ldr.w	ip, [r2], #4
    dc30:	f851 3f04 	ldr.w	r3, [r1, #4]!
    dc34:	f1be 0f00 	cmp.w	lr, #0
    dc38:	bf08      	it	eq
    dc3a:	4663      	moveq	r3, ip
    dc3c:	f840 3f04 	str.w	r3, [r0, #4]!
    dc40:	4542      	cmp	r2, r8
    dc42:	d1f3      	bne.n	dc2c <PAIRING_Aggregate_PK_in_G2+0x180>
    dc44:	a828      	add	r0, sp, #160	; 0xa0
    dc46:	f7fd fedd 	bl	ba04 <POINTonE2_in_G2>
    dc4a:	2800      	cmp	r0, #0
    dc4c:	d04c      	beq.n	dce8 <PAIRING_Aggregate_PK_in_G2+0x23c>
    dc4e:	683b      	ldr	r3, [r7, #0]
    dc50:	f013 0f40 	tst.w	r3, #64	; 0x40
    dc54:	d04a      	beq.n	dcec <PAIRING_Aggregate_PK_in_G2+0x240>
    dc56:	68fb      	ldr	r3, [r7, #12]
    dc58:	9303      	str	r3, [sp, #12]
    dc5a:	f8cd 9008 	str.w	r9, [sp, #8]
    dc5e:	9bc6      	ldr	r3, [sp, #792]	; 0x318
    dc60:	9301      	str	r3, [sp, #4]
    dc62:	9bc5      	ldr	r3, [sp, #788]	; 0x314
    dc64:	9300      	str	r3, [sp, #0]
    dc66:	9bc8      	ldr	r3, [sp, #800]	; 0x320
    dc68:	9ac7      	ldr	r2, [sp, #796]	; 0x31c
    dc6a:	2102      	movs	r1, #2
    dc6c:	a828      	add	r0, sp, #160	; 0xa0
    dc6e:	f7fb f8bd 	bl	8dec <hash_to_field>
    dc72:	aa34      	add	r2, sp, #208	; 0xd0
    dc74:	a928      	add	r1, sp, #160	; 0xa0
    dc76:	a804      	add	r0, sp, #16
    dc78:	f7fa fa80 	bl	817c <map_to_g1>
    dc7c:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    dc7e:	b13b      	cbz	r3, dc90 <PAIRING_Aggregate_PK_in_G2+0x1e4>
    dc80:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
    dc82:	b12b      	cbz	r3, dc90 <PAIRING_Aggregate_PK_in_G2+0x1e4>
    dc84:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    dc86:	9ac3      	ldr	r2, [sp, #780]	; 0x30c
    dc88:	a904      	add	r1, sp, #16
    dc8a:	4608      	mov	r0, r1
    dc8c:	f7f4 fe8e 	bl	29ac <POINTonE1_mult_w5>
    dc90:	a904      	add	r1, sp, #16
    dc92:	4608      	mov	r0, r1
    dc94:	f7f8 fc88 	bl	65a8 <POINTonE1_from_Jacobian>
    dc98:	687a      	ldr	r2, [r7, #4]
    dc9a:	f507 715c 	add.w	r1, r7, #880	; 0x370
    dc9e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    dca2:	eb07 1383 	add.w	r3, r7, r3, lsl #6
    dca6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
    dcaa:	f854 0f04 	ldr.w	r0, [r4, #4]!
    dcae:	f843 0f04 	str.w	r0, [r3, #4]!
    dcb2:	42ac      	cmp	r4, r5
    dcb4:	d1f9      	bne.n	dcaa <PAIRING_Aggregate_PK_in_G2+0x1fe>
    dcb6:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
    dcba:	ab03      	add	r3, sp, #12
    dcbc:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    dcc0:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    dcc4:	f600 106c 	addw	r0, r0, #2412	; 0x96c
    dcc8:	ad1b      	add	r5, sp, #108	; 0x6c
    dcca:	f853 4f04 	ldr.w	r4, [r3, #4]!
    dcce:	f840 4f04 	str.w	r4, [r0, #4]!
    dcd2:	42ab      	cmp	r3, r5
    dcd4:	d1f9      	bne.n	dcca <PAIRING_Aggregate_PK_in_G2+0x21e>
    dcd6:	1c54      	adds	r4, r2, #1
    dcd8:	2a07      	cmp	r2, #7
    dcda:	d01b      	beq.n	dd14 <PAIRING_Aggregate_PK_in_G2+0x268>
    dcdc:	607c      	str	r4, [r7, #4]
    dcde:	2000      	movs	r0, #0
    dce0:	f50d 7d39 	add.w	sp, sp, #740	; 0x2e4
    dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dce8:	2003      	movs	r0, #3
    dcea:	e7f9      	b.n	dce0 <PAIRING_Aggregate_PK_in_G2+0x234>
    dcec:	68fb      	ldr	r3, [r7, #12]
    dcee:	9303      	str	r3, [sp, #12]
    dcf0:	f8cd 9008 	str.w	r9, [sp, #8]
    dcf4:	9bc6      	ldr	r3, [sp, #792]	; 0x318
    dcf6:	9301      	str	r3, [sp, #4]
    dcf8:	9bc5      	ldr	r3, [sp, #788]	; 0x314
    dcfa:	9300      	str	r3, [sp, #0]
    dcfc:	9bc8      	ldr	r3, [sp, #800]	; 0x320
    dcfe:	9ac7      	ldr	r2, [sp, #796]	; 0x31c
    dd00:	2101      	movs	r1, #1
    dd02:	a828      	add	r0, sp, #160	; 0xa0
    dd04:	f7fb f872 	bl	8dec <hash_to_field>
    dd08:	2200      	movs	r2, #0
    dd0a:	a928      	add	r1, sp, #160	; 0xa0
    dd0c:	a804      	add	r0, sp, #16
    dd0e:	f7fa fa35 	bl	817c <map_to_g1>
    dd12:	e7b3      	b.n	dc7c <PAIRING_Aggregate_PK_in_G2+0x1d0>
    dd14:	683c      	ldr	r4, [r7, #0]
    dd16:	f014 0420 	ands.w	r4, r4, #32
    dd1a:	d00c      	beq.n	dd36 <PAIRING_Aggregate_PK_in_G2+0x28a>
    dd1c:	2308      	movs	r3, #8
    dd1e:	4662      	mov	r2, ip
    dd20:	a828      	add	r0, sp, #160	; 0xa0
    dd22:	f7ff fdd6 	bl	d8d2 <miller_loop_n>
    dd26:	f107 0010 	add.w	r0, r7, #16
    dd2a:	aa28      	add	r2, sp, #160	; 0xa0
    dd2c:	4601      	mov	r1, r0
    dd2e:	f7f7 fd4b 	bl	57c8 <mul_fp12>
    dd32:	4634      	mov	r4, r6
    dd34:	e7d2      	b.n	dcdc <PAIRING_Aggregate_PK_in_G2+0x230>
    dd36:	2308      	movs	r3, #8
    dd38:	4662      	mov	r2, ip
    dd3a:	f107 0010 	add.w	r0, r7, #16
    dd3e:	f7ff fdc8 	bl	d8d2 <miller_loop_n>
    dd42:	683b      	ldr	r3, [r7, #0]
    dd44:	f043 0320 	orr.w	r3, r3, #32
    dd48:	603b      	str	r3, [r7, #0]
    dd4a:	e7c7      	b.n	dcdc <PAIRING_Aggregate_PK_in_G2+0x230>
    dd4c:	2006      	movs	r0, #6
    dd4e:	e7c7      	b.n	dce0 <PAIRING_Aggregate_PK_in_G2+0x234>
    dd50:	2004      	movs	r0, #4
    dd52:	e7c5      	b.n	dce0 <PAIRING_Aggregate_PK_in_G2+0x234>
    dd54:	2000      	movs	r0, #0
    dd56:	e7c3      	b.n	dce0 <PAIRING_Aggregate_PK_in_G2+0x234>
    dd58:	0001ae48 	.word	0x0001ae48
    dd5c:	0001ade8 	.word	0x0001ade8

0000dd60 <blst_pairing_aggregate_pk_in_g2>:
    dd60:	b510      	push	{r4, lr}
    dd62:	b088      	sub	sp, #32
    dd64:	4614      	mov	r4, r2
    dd66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dd68:	9206      	str	r2, [sp, #24]
    dd6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dd6c:	9205      	str	r2, [sp, #20]
    dd6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dd70:	9204      	str	r2, [sp, #16]
    dd72:	9303      	str	r3, [sp, #12]
    dd74:	2200      	movs	r2, #0
    dd76:	9202      	str	r2, [sp, #8]
    dd78:	9201      	str	r2, [sp, #4]
    dd7a:	2301      	movs	r3, #1
    dd7c:	9300      	str	r3, [sp, #0]
    dd7e:	4623      	mov	r3, r4
    dd80:	f7ff fe94 	bl	daac <PAIRING_Aggregate_PK_in_G2>
    dd84:	b008      	add	sp, #32
    dd86:	bd10      	pop	{r4, pc}

0000dd88 <blst_pairing_mul_n_aggregate_pk_in_g2>:
    dd88:	b510      	push	{r4, lr}
    dd8a:	b088      	sub	sp, #32
    dd8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    dd8e:	9406      	str	r4, [sp, #24]
    dd90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    dd92:	9405      	str	r4, [sp, #20]
    dd94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dd96:	9404      	str	r4, [sp, #16]
    dd98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    dd9a:	9403      	str	r4, [sp, #12]
    dd9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    dd9e:	9402      	str	r4, [sp, #8]
    dda0:	9301      	str	r3, [sp, #4]
    dda2:	2301      	movs	r3, #1
    dda4:	9300      	str	r3, [sp, #0]
    dda6:	4613      	mov	r3, r2
    dda8:	2200      	movs	r2, #0
    ddaa:	f7ff fe7f 	bl	daac <PAIRING_Aggregate_PK_in_G2>
    ddae:	b008      	add	sp, #32
    ddb0:	bd10      	pop	{r4, pc}

0000ddb2 <blst_pairing_chk_n_aggr_pk_in_g2>:
    ddb2:	b510      	push	{r4, lr}
    ddb4:	b088      	sub	sp, #32
    ddb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    ddb8:	9406      	str	r4, [sp, #24]
    ddba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ddbc:	9405      	str	r4, [sp, #20]
    ddbe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ddc0:	9404      	str	r4, [sp, #16]
    ddc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ddc4:	9403      	str	r4, [sp, #12]
    ddc6:	2400      	movs	r4, #0
    ddc8:	9402      	str	r4, [sp, #8]
    ddca:	9401      	str	r4, [sp, #4]
    ddcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ddce:	9400      	str	r4, [sp, #0]
    ddd0:	f7ff fe6c 	bl	daac <PAIRING_Aggregate_PK_in_G2>
    ddd4:	b008      	add	sp, #32
    ddd6:	bd10      	pop	{r4, pc}

0000ddd8 <blst_pairing_chk_n_mul_n_aggr_pk_in_g2>:
    ddd8:	b510      	push	{r4, lr}
    ddda:	b088      	sub	sp, #32
    dddc:	9c10      	ldr	r4, [sp, #64]	; 0x40
    ddde:	9406      	str	r4, [sp, #24]
    dde0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    dde2:	9405      	str	r4, [sp, #20]
    dde4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    dde6:	9404      	str	r4, [sp, #16]
    dde8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ddea:	9403      	str	r4, [sp, #12]
    ddec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ddee:	9402      	str	r4, [sp, #8]
    ddf0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ddf2:	9401      	str	r4, [sp, #4]
    ddf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ddf6:	9400      	str	r4, [sp, #0]
    ddf8:	f7ff fe58 	bl	daac <PAIRING_Aggregate_PK_in_G2>
    ddfc:	b008      	add	sp, #32
    ddfe:	bd10      	pop	{r4, pc}

0000de00 <PAIRING_Aggregate_PK_in_G1>:
    de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de04:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
    de08:	4698      	mov	r8, r3
    de0a:	6803      	ldr	r3, [r0, #0]
    de0c:	f013 0501 	ands.w	r5, r3, #1
    de10:	f040 818b 	bne.w	e12a <PAIRING_Aggregate_PK_in_G1+0x32a>
    de14:	4607      	mov	r7, r0
    de16:	460e      	mov	r6, r1
    de18:	4691      	mov	r9, r2
    de1a:	f043 0302 	orr.w	r3, r3, #2
    de1e:	6003      	str	r3, [r0, #0]
    de20:	f1b8 0f00 	cmp.w	r8, #0
    de24:	d07f      	beq.n	df26 <PAIRING_Aggregate_PK_in_G1+0x126>
    de26:	f1a8 0004 	sub.w	r0, r8, #4
    de2a:	f108 01bc 	add.w	r1, r8, #188	; 0xbc
    de2e:	4604      	mov	r4, r0
    de30:	462a      	mov	r2, r5
    de32:	f854 3f04 	ldr.w	r3, [r4, #4]!
    de36:	431a      	orrs	r2, r3
    de38:	428c      	cmp	r4, r1
    de3a:	d1fa      	bne.n	de32 <PAIRING_Aggregate_PK_in_G1+0x32>
    de3c:	1e53      	subs	r3, r2, #1
    de3e:	ea23 0202 	bic.w	r2, r3, r2
    de42:	0fd2      	lsrs	r2, r2, #31
    de44:	d16f      	bne.n	df26 <PAIRING_Aggregate_PK_in_G1+0x126>
    de46:	f507 7b14 	add.w	fp, r7, #592	; 0x250
    de4a:	f50d 7a20 	add.w	sl, sp, #640	; 0x280
    de4e:	ab70      	add	r3, sp, #448	; 0x1c0
    de50:	4684      	mov	ip, r0
    de52:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    de56:	f843 4b04 	str.w	r4, [r3], #4
    de5a:	4553      	cmp	r3, sl
    de5c:	d1f9      	bne.n	de52 <PAIRING_Aggregate_PK_in_G1+0x52>
    de5e:	4603      	mov	r3, r0
    de60:	f853 cf04 	ldr.w	ip, [r3, #4]!
    de64:	ea42 020c 	orr.w	r2, r2, ip
    de68:	428b      	cmp	r3, r1
    de6a:	d1f9      	bne.n	de60 <PAIRING_Aggregate_PK_in_G1+0x60>
    de6c:	f102 3eff 	add.w	lr, r2, #4294967295
    de70:	ea2e 0202 	bic.w	r2, lr, r2
    de74:	ea4f 7ee2 	mov.w	lr, r2, asr #31
    de78:	4aae      	ldr	r2, [pc, #696]	; (e134 <PAIRING_Aggregate_PK_in_G1+0x334>)
    de7a:	f102 0360 	add.w	r3, r2, #96	; 0x60
    de7e:	a99f      	add	r1, sp, #636	; 0x27c
    de80:	f102 0ac0 	add.w	sl, r2, #192	; 0xc0
    de84:	f853 cb04 	ldr.w	ip, [r3], #4
    de88:	f850 2f04 	ldr.w	r2, [r0, #4]!
    de8c:	f1be 0f00 	cmp.w	lr, #0
    de90:	bf08      	it	eq
    de92:	4662      	moveq	r2, ip
    de94:	f841 2f04 	str.w	r2, [r1, #4]!
    de98:	4553      	cmp	r3, sl
    de9a:	d1f3      	bne.n	de84 <PAIRING_Aggregate_PK_in_G1+0x84>
    de9c:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
    dea0:	b9c3      	cbnz	r3, ded4 <PAIRING_Aggregate_PK_in_G1+0xd4>
    dea2:	683b      	ldr	r3, [r7, #0]
    dea4:	f013 0f10 	tst.w	r3, #16
    dea8:	d021      	beq.n	deee <PAIRING_Aggregate_PK_in_G1+0xee>
    deaa:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    deae:	b1c3      	cbz	r3, dee2 <PAIRING_Aggregate_PK_in_G1+0xe2>
    deb0:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
    deb4:	b1ab      	cbz	r3, dee2 <PAIRING_Aggregate_PK_in_G1+0xe2>
    deb6:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    deba:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
    debe:	a970      	add	r1, sp, #448	; 0x1c0
    dec0:	4608      	mov	r0, r1
    dec2:	f7fd fbd1 	bl	b668 <POINTonE2_mult_w5>
    dec6:	2300      	movs	r3, #0
    dec8:	aa70      	add	r2, sp, #448	; 0x1c0
    deca:	4659      	mov	r1, fp
    decc:	4658      	mov	r0, fp
    dece:	f7fc fb17 	bl	a500 <POINTonE2_dadd>
    ded2:	e028      	b.n	df26 <PAIRING_Aggregate_PK_in_G1+0x126>
    ded4:	a870      	add	r0, sp, #448	; 0x1c0
    ded6:	f7fd fd95 	bl	ba04 <POINTonE2_in_G2>
    deda:	2800      	cmp	r0, #0
    dedc:	d1e1      	bne.n	dea2 <PAIRING_Aggregate_PK_in_G1+0xa2>
    dede:	2003      	movs	r0, #3
    dee0:	e0e7      	b.n	e0b2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    dee2:	4642      	mov	r2, r8
    dee4:	4659      	mov	r1, fp
    dee6:	4658      	mov	r0, fp
    dee8:	f7fc fee0 	bl	acac <POINTonE2_dadd_affine>
    deec:	e01b      	b.n	df26 <PAIRING_Aggregate_PK_in_G1+0x126>
    deee:	f043 0310 	orr.w	r3, r3, #16
    def2:	603b      	str	r3, [r7, #0]
    def4:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    def8:	b15b      	cbz	r3, df12 <PAIRING_Aggregate_PK_in_G1+0x112>
    defa:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
    defe:	b143      	cbz	r3, df12 <PAIRING_Aggregate_PK_in_G1+0x112>
    df00:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    df04:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
    df08:	a970      	add	r1, sp, #448	; 0x1c0
    df0a:	4658      	mov	r0, fp
    df0c:	f7fd fbac 	bl	b668 <POINTonE2_mult_w5>
    df10:	e009      	b.n	df26 <PAIRING_Aggregate_PK_in_G1+0x126>
    df12:	ab6f      	add	r3, sp, #444	; 0x1bc
    df14:	f507 7213 	add.w	r2, r7, #588	; 0x24c
    df18:	a8b7      	add	r0, sp, #732	; 0x2dc
    df1a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    df1e:	f842 1f04 	str.w	r1, [r2, #4]!
    df22:	4283      	cmp	r3, r0
    df24:	d1f9      	bne.n	df1a <PAIRING_Aggregate_PK_in_G1+0x11a>
    df26:	2e00      	cmp	r6, #0
    df28:	f000 8101 	beq.w	e12e <PAIRING_Aggregate_PK_in_G1+0x32e>
    df2c:	f8d7 b008 	ldr.w	fp, [r7, #8]
    df30:	f1bb 0f2a 	cmp.w	fp, #42	; 0x2a
    df34:	bf08      	it	eq
    df36:	f507 6b47 	addeq.w	fp, r7, #3184	; 0xc70
    df3a:	f1a6 0804 	sub.w	r8, r6, #4
    df3e:	46b2      	mov	sl, r6
    df40:	f106 045c 	add.w	r4, r6, #92	; 0x5c
    df44:	4643      	mov	r3, r8
    df46:	f853 2f04 	ldr.w	r2, [r3, #4]!
    df4a:	4315      	orrs	r5, r2
    df4c:	42a3      	cmp	r3, r4
    df4e:	d1fa      	bne.n	df46 <PAIRING_Aggregate_PK_in_G1+0x146>
    df50:	1e6b      	subs	r3, r5, #1
    df52:	ea23 0505 	bic.w	r5, r3, r5
    df56:	0fed      	lsrs	r5, r5, #31
    df58:	f040 80e5 	bne.w	e126 <PAIRING_Aggregate_PK_in_G1+0x326>
    df5c:	f1b9 0f00 	cmp.w	r9, #0
    df60:	d02b      	beq.n	dfba <PAIRING_Aggregate_PK_in_G1+0x1ba>
    df62:	ab70      	add	r3, sp, #448	; 0x1c0
    df64:	a888      	add	r0, sp, #544	; 0x220
    df66:	4642      	mov	r2, r8
    df68:	f852 1f04 	ldr.w	r1, [r2, #4]!
    df6c:	f843 1b04 	str.w	r1, [r3], #4
    df70:	4283      	cmp	r3, r0
    df72:	d1f9      	bne.n	df68 <PAIRING_Aggregate_PK_in_G1+0x168>
    df74:	4643      	mov	r3, r8
    df76:	462a      	mov	r2, r5
    df78:	f853 1f04 	ldr.w	r1, [r3, #4]!
    df7c:	430a      	orrs	r2, r1
    df7e:	42a3      	cmp	r3, r4
    df80:	d1fa      	bne.n	df78 <PAIRING_Aggregate_PK_in_G1+0x178>
    df82:	f102 3cff 	add.w	ip, r2, #4294967295
    df86:	ea2c 0202 	bic.w	r2, ip, r2
    df8a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
    df8e:	486a      	ldr	r0, [pc, #424]	; (e138 <PAIRING_Aggregate_PK_in_G1+0x338>)
    df90:	a987      	add	r1, sp, #540	; 0x21c
    df92:	f10a 0e2c 	add.w	lr, sl, #44	; 0x2c
    df96:	4642      	mov	r2, r8
    df98:	f850 9b04 	ldr.w	r9, [r0], #4
    df9c:	f852 3f04 	ldr.w	r3, [r2, #4]!
    dfa0:	f1bc 0f00 	cmp.w	ip, #0
    dfa4:	bf08      	it	eq
    dfa6:	464b      	moveq	r3, r9
    dfa8:	f841 3f04 	str.w	r3, [r1, #4]!
    dfac:	4572      	cmp	r2, lr
    dfae:	d1f3      	bne.n	df98 <PAIRING_Aggregate_PK_in_G1+0x198>
    dfb0:	a870      	add	r0, sp, #448	; 0x1c0
    dfb2:	f7f4 fe63 	bl	2c7c <POINTonE1_in_G1>
    dfb6:	2800      	cmp	r0, #0
    dfb8:	d07f      	beq.n	e0ba <PAIRING_Aggregate_PK_in_G1+0x2ba>
    dfba:	683b      	ldr	r3, [r7, #0]
    dfbc:	f013 0f40 	tst.w	r3, #64	; 0x40
    dfc0:	d07d      	beq.n	e0be <PAIRING_Aggregate_PK_in_G1+0x2be>
    dfc2:	68fb      	ldr	r3, [r7, #12]
    dfc4:	9303      	str	r3, [sp, #12]
    dfc6:	f8cd b008 	str.w	fp, [sp, #8]
    dfca:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
    dfce:	9301      	str	r3, [sp, #4]
    dfd0:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
    dfd4:	9300      	str	r3, [sp, #0]
    dfd6:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
    dfda:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
    dfde:	2104      	movs	r1, #4
    dfe0:	a870      	add	r0, sp, #448	; 0x1c0
    dfe2:	f7fa ff03 	bl	8dec <hash_to_field>
    dfe6:	aa88      	add	r2, sp, #544	; 0x220
    dfe8:	a970      	add	r1, sp, #448	; 0x1c0
    dfea:	a828      	add	r0, sp, #160	; 0xa0
    dfec:	f7fe f960 	bl	c2b0 <map_to_g2>
    dff0:	a928      	add	r1, sp, #160	; 0xa0
    dff2:	4608      	mov	r0, r1
    dff4:	f7fb fb07 	bl	9606 <POINTonE2_from_Jacobian>
    dff8:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    dffc:	b393      	cbz	r3, e064 <PAIRING_Aggregate_PK_in_G1+0x264>
    dffe:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
    e002:	b37b      	cbz	r3, e064 <PAIRING_Aggregate_PK_in_G1+0x264>
    e004:	ab04      	add	r3, sp, #16
    e006:	a81c      	add	r0, sp, #112	; 0x70
    e008:	4642      	mov	r2, r8
    e00a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    e00e:	f843 1b04 	str.w	r1, [r3], #4
    e012:	4283      	cmp	r3, r0
    e014:	d1f9      	bne.n	e00a <PAIRING_Aggregate_PK_in_G1+0x20a>
    e016:	4643      	mov	r3, r8
    e018:	462a      	mov	r2, r5
    e01a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e01e:	430a      	orrs	r2, r1
    e020:	42a3      	cmp	r3, r4
    e022:	d1fa      	bne.n	e01a <PAIRING_Aggregate_PK_in_G1+0x21a>
    e024:	1e53      	subs	r3, r2, #1
    e026:	ea23 0202 	bic.w	r2, r3, r2
    e02a:	17d2      	asrs	r2, r2, #31
    e02c:	4842      	ldr	r0, [pc, #264]	; (e138 <PAIRING_Aggregate_PK_in_G1+0x338>)
    e02e:	a91b      	add	r1, sp, #108	; 0x6c
    e030:	f10a 0a2c 	add.w	sl, sl, #44	; 0x2c
    e034:	f850 4b04 	ldr.w	r4, [r0], #4
    e038:	f858 3f04 	ldr.w	r3, [r8, #4]!
    e03c:	2a00      	cmp	r2, #0
    e03e:	bf08      	it	eq
    e040:	4623      	moveq	r3, r4
    e042:	f841 3f04 	str.w	r3, [r1, #4]!
    e046:	45d0      	cmp	r8, sl
    e048:	d1f4      	bne.n	e034 <PAIRING_Aggregate_PK_in_G1+0x234>
    e04a:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    e04e:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
    e052:	a904      	add	r1, sp, #16
    e054:	4608      	mov	r0, r1
    e056:	f7f4 fca9 	bl	29ac <POINTonE1_mult_w5>
    e05a:	a904      	add	r1, sp, #16
    e05c:	4608      	mov	r0, r1
    e05e:	f7f8 faa3 	bl	65a8 <POINTonE1_from_Jacobian>
    e062:	ae04      	add	r6, sp, #16
    e064:	687c      	ldr	r4, [r7, #4]
    e066:	f507 715c 	add.w	r1, r7, #880	; 0x370
    e06a:	ab27      	add	r3, sp, #156	; 0x9c
    e06c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    e070:	eb07 1282 	add.w	r2, r7, r2, lsl #6
    e074:	f502 725b 	add.w	r2, r2, #876	; 0x36c
    e078:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
    e07c:	f853 0f04 	ldr.w	r0, [r3, #4]!
    e080:	f842 0f04 	str.w	r0, [r2, #4]!
    e084:	4563      	cmp	r3, ip
    e086:	d1f9      	bne.n	e07c <PAIRING_Aggregate_PK_in_G1+0x27c>
    e088:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
    e08c:	1f33      	subs	r3, r6, #4
    e08e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    e092:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    e096:	f600 106c 	addw	r0, r0, #2412	; 0x96c
    e09a:	365c      	adds	r6, #92	; 0x5c
    e09c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e0a0:	f840 2f04 	str.w	r2, [r0, #4]!
    e0a4:	429e      	cmp	r6, r3
    e0a6:	d1f9      	bne.n	e09c <PAIRING_Aggregate_PK_in_G1+0x29c>
    e0a8:	1c66      	adds	r6, r4, #1
    e0aa:	2c07      	cmp	r4, #7
    e0ac:	d01f      	beq.n	e0ee <PAIRING_Aggregate_PK_in_G1+0x2ee>
    e0ae:	607e      	str	r6, [r7, #4]
    e0b0:	2000      	movs	r0, #0
    e0b2:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
    e0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0ba:	2003      	movs	r0, #3
    e0bc:	e7f9      	b.n	e0b2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    e0be:	68fb      	ldr	r3, [r7, #12]
    e0c0:	9303      	str	r3, [sp, #12]
    e0c2:	f8cd b008 	str.w	fp, [sp, #8]
    e0c6:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
    e0ca:	9301      	str	r3, [sp, #4]
    e0cc:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
    e0d0:	9300      	str	r3, [sp, #0]
    e0d2:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
    e0d6:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
    e0da:	2102      	movs	r1, #2
    e0dc:	a870      	add	r0, sp, #448	; 0x1c0
    e0de:	f7fa fe85 	bl	8dec <hash_to_field>
    e0e2:	2200      	movs	r2, #0
    e0e4:	a970      	add	r1, sp, #448	; 0x1c0
    e0e6:	a828      	add	r0, sp, #160	; 0xa0
    e0e8:	f7fe f8e2 	bl	c2b0 <map_to_g2>
    e0ec:	e780      	b.n	dff0 <PAIRING_Aggregate_PK_in_G1+0x1f0>
    e0ee:	683e      	ldr	r6, [r7, #0]
    e0f0:	f016 0620 	ands.w	r6, r6, #32
    e0f4:	d00c      	beq.n	e110 <PAIRING_Aggregate_PK_in_G1+0x310>
    e0f6:	2308      	movs	r3, #8
    e0f8:	4662      	mov	r2, ip
    e0fa:	a870      	add	r0, sp, #448	; 0x1c0
    e0fc:	f7ff fbe9 	bl	d8d2 <miller_loop_n>
    e100:	f107 0010 	add.w	r0, r7, #16
    e104:	aa70      	add	r2, sp, #448	; 0x1c0
    e106:	4601      	mov	r1, r0
    e108:	f7f7 fb5e 	bl	57c8 <mul_fp12>
    e10c:	462e      	mov	r6, r5
    e10e:	e7ce      	b.n	e0ae <PAIRING_Aggregate_PK_in_G1+0x2ae>
    e110:	2308      	movs	r3, #8
    e112:	4662      	mov	r2, ip
    e114:	f107 0010 	add.w	r0, r7, #16
    e118:	f7ff fbdb 	bl	d8d2 <miller_loop_n>
    e11c:	683b      	ldr	r3, [r7, #0]
    e11e:	f043 0320 	orr.w	r3, r3, #32
    e122:	603b      	str	r3, [r7, #0]
    e124:	e7c3      	b.n	e0ae <PAIRING_Aggregate_PK_in_G1+0x2ae>
    e126:	2006      	movs	r0, #6
    e128:	e7c3      	b.n	e0b2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    e12a:	2004      	movs	r0, #4
    e12c:	e7c1      	b.n	e0b2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    e12e:	2000      	movs	r0, #0
    e130:	e7bf      	b.n	e0b2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    e132:	bf00      	nop
    e134:	0001ade8 	.word	0x0001ade8
    e138:	0001ae48 	.word	0x0001ae48

0000e13c <blst_pairing_aggregate_pk_in_g1>:
    e13c:	b510      	push	{r4, lr}
    e13e:	b088      	sub	sp, #32
    e140:	4614      	mov	r4, r2
    e142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e144:	9206      	str	r2, [sp, #24]
    e146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e148:	9205      	str	r2, [sp, #20]
    e14a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e14c:	9204      	str	r2, [sp, #16]
    e14e:	9303      	str	r3, [sp, #12]
    e150:	2200      	movs	r2, #0
    e152:	9202      	str	r2, [sp, #8]
    e154:	9201      	str	r2, [sp, #4]
    e156:	2301      	movs	r3, #1
    e158:	9300      	str	r3, [sp, #0]
    e15a:	4623      	mov	r3, r4
    e15c:	f7ff fe50 	bl	de00 <PAIRING_Aggregate_PK_in_G1>
    e160:	b008      	add	sp, #32
    e162:	bd10      	pop	{r4, pc}

0000e164 <blst_pairing_mul_n_aggregate_pk_in_g1>:
    e164:	b510      	push	{r4, lr}
    e166:	b088      	sub	sp, #32
    e168:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e16a:	9406      	str	r4, [sp, #24]
    e16c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    e16e:	9405      	str	r4, [sp, #20]
    e170:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e172:	9404      	str	r4, [sp, #16]
    e174:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e176:	9403      	str	r4, [sp, #12]
    e178:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e17a:	9402      	str	r4, [sp, #8]
    e17c:	9301      	str	r3, [sp, #4]
    e17e:	2301      	movs	r3, #1
    e180:	9300      	str	r3, [sp, #0]
    e182:	4613      	mov	r3, r2
    e184:	2200      	movs	r2, #0
    e186:	f7ff fe3b 	bl	de00 <PAIRING_Aggregate_PK_in_G1>
    e18a:	b008      	add	sp, #32
    e18c:	bd10      	pop	{r4, pc}

0000e18e <blst_pairing_chk_n_aggr_pk_in_g1>:
    e18e:	b510      	push	{r4, lr}
    e190:	b088      	sub	sp, #32
    e192:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e194:	9406      	str	r4, [sp, #24]
    e196:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    e198:	9405      	str	r4, [sp, #20]
    e19a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e19c:	9404      	str	r4, [sp, #16]
    e19e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e1a0:	9403      	str	r4, [sp, #12]
    e1a2:	2400      	movs	r4, #0
    e1a4:	9402      	str	r4, [sp, #8]
    e1a6:	9401      	str	r4, [sp, #4]
    e1a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e1aa:	9400      	str	r4, [sp, #0]
    e1ac:	f7ff fe28 	bl	de00 <PAIRING_Aggregate_PK_in_G1>
    e1b0:	b008      	add	sp, #32
    e1b2:	bd10      	pop	{r4, pc}

0000e1b4 <blst_pairing_chk_n_mul_n_aggr_pk_in_g1>:
    e1b4:	b510      	push	{r4, lr}
    e1b6:	b088      	sub	sp, #32
    e1b8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    e1ba:	9406      	str	r4, [sp, #24]
    e1bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    e1be:	9405      	str	r4, [sp, #20]
    e1c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e1c2:	9404      	str	r4, [sp, #16]
    e1c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    e1c6:	9403      	str	r4, [sp, #12]
    e1c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e1ca:	9402      	str	r4, [sp, #8]
    e1cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e1ce:	9401      	str	r4, [sp, #4]
    e1d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e1d2:	9400      	str	r4, [sp, #0]
    e1d4:	f7ff fe14 	bl	de00 <PAIRING_Aggregate_PK_in_G1>
    e1d8:	b008      	add	sp, #32
    e1da:	bd10      	pop	{r4, pc}

0000e1dc <PAIRING_Commit>:
    e1dc:	6843      	ldr	r3, [r0, #4]
    e1de:	b32b      	cbz	r3, e22c <PAIRING_Commit+0x50>
    e1e0:	b510      	push	{r4, lr}
    e1e2:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    e1e6:	4604      	mov	r4, r0
    e1e8:	6802      	ldr	r2, [r0, #0]
    e1ea:	f012 0f20 	tst.w	r2, #32
    e1ee:	d011      	beq.n	e214 <PAIRING_Commit+0x38>
    e1f0:	f500 6217 	add.w	r2, r0, #2416	; 0x970
    e1f4:	f500 715c 	add.w	r1, r0, #880	; 0x370
    e1f8:	4668      	mov	r0, sp
    e1fa:	f7ff fb6a 	bl	d8d2 <miller_loop_n>
    e1fe:	f104 0010 	add.w	r0, r4, #16
    e202:	466a      	mov	r2, sp
    e204:	4601      	mov	r1, r0
    e206:	f7f7 fadf 	bl	57c8 <mul_fp12>
    e20a:	2300      	movs	r3, #0
    e20c:	6063      	str	r3, [r4, #4]
    e20e:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
    e212:	bd10      	pop	{r4, pc}
    e214:	f500 6217 	add.w	r2, r0, #2416	; 0x970
    e218:	f500 715c 	add.w	r1, r0, #880	; 0x370
    e21c:	3010      	adds	r0, #16
    e21e:	f7ff fb58 	bl	d8d2 <miller_loop_n>
    e222:	6823      	ldr	r3, [r4, #0]
    e224:	f043 0320 	orr.w	r3, r3, #32
    e228:	6023      	str	r3, [r4, #0]
    e22a:	e7ee      	b.n	e20a <PAIRING_Commit+0x2e>
    e22c:	4770      	bx	lr

0000e22e <blst_pairing_commit>:
    e22e:	b508      	push	{r3, lr}
    e230:	f7ff ffd4 	bl	e1dc <PAIRING_Commit>
    e234:	bd08      	pop	{r3, pc}

0000e236 <blst_pairing_as_fp12>:
    e236:	b510      	push	{r4, lr}
    e238:	4604      	mov	r4, r0
    e23a:	f7ff ffcf 	bl	e1dc <PAIRING_Commit>
    e23e:	f104 0010 	add.w	r0, r4, #16
    e242:	bd10      	pop	{r4, pc}

0000e244 <PAIRING_FinalVerify>:
    e244:	b570      	push	{r4, r5, r6, lr}
    e246:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
    e24a:	4605      	mov	r5, r0
    e24c:	6803      	ldr	r3, [r0, #0]
    e24e:	f013 0020 	ands.w	r0, r3, #32
    e252:	d036      	beq.n	e2c2 <PAIRING_FinalVerify+0x7e>
    e254:	b3c1      	cbz	r1, e2c8 <PAIRING_FinalVerify+0x84>
    e256:	3904      	subs	r1, #4
    e258:	ab48      	add	r3, sp, #288	; 0x120
    e25a:	a8d8      	add	r0, sp, #864	; 0x360
    e25c:	f851 2f04 	ldr.w	r2, [r1, #4]!
    e260:	f843 2b04 	str.w	r2, [r3], #4
    e264:	4283      	cmp	r3, r0
    e266:	d1f9      	bne.n	e25c <PAIRING_FinalVerify+0x18>
    e268:	ac48      	add	r4, sp, #288	; 0x120
    e26a:	4620      	mov	r0, r4
    e26c:	f7f5 fd76 	bl	3d5c <conjugate_fp12>
    e270:	f105 0210 	add.w	r2, r5, #16
    e274:	4621      	mov	r1, r4
    e276:	4620      	mov	r0, r4
    e278:	f7f7 faa6 	bl	57c8 <mul_fp12>
    e27c:	4621      	mov	r1, r4
    e27e:	4620      	mov	r0, r4
    e280:	f7fe fe5e 	bl	cf40 <final_exp>
    e284:	aa47      	add	r2, sp, #284	; 0x11c
    e286:	4828      	ldr	r0, [pc, #160]	; (e328 <PAIRING_FinalVerify+0xe4>)
    e288:	4621      	mov	r1, r4
    e28a:	ae5f      	add	r6, sp, #380	; 0x17c
    e28c:	2400      	movs	r4, #0
    e28e:	f852 3f04 	ldr.w	r3, [r2, #4]!
    e292:	f850 5f04 	ldr.w	r5, [r0, #4]!
    e296:	406b      	eors	r3, r5
    e298:	431c      	orrs	r4, r3
    e29a:	42b2      	cmp	r2, r6
    e29c:	d1f7      	bne.n	e28e <PAIRING_FinalVerify+0x4a>
    e29e:	1e60      	subs	r0, r4, #1
    e2a0:	ea20 0004 	bic.w	r0, r0, r4
    e2a4:	0fc0      	lsrs	r0, r0, #31
    e2a6:	ab5f      	add	r3, sp, #380	; 0x17c
    e2a8:	f501 710f 	add.w	r1, r1, #572	; 0x23c
    e2ac:	2200      	movs	r2, #0
    e2ae:	f853 5f04 	ldr.w	r5, [r3, #4]!
    e2b2:	432a      	orrs	r2, r5
    e2b4:	428b      	cmp	r3, r1
    e2b6:	d1fa      	bne.n	e2ae <PAIRING_FinalVerify+0x6a>
    e2b8:	1e53      	subs	r3, r2, #1
    e2ba:	ea23 0202 	bic.w	r2, r3, r2
    e2be:	ea00 70d2 	and.w	r0, r0, r2, lsr #31
    e2c2:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
    e2c6:	bd70      	pop	{r4, r5, r6, pc}
    e2c8:	f013 0f10 	tst.w	r3, #16
    e2cc:	d01f      	beq.n	e30e <PAIRING_FinalVerify+0xca>
    e2ce:	f003 0303 	and.w	r3, r3, #3
    e2d2:	2b01      	cmp	r3, #1
    e2d4:	d003      	beq.n	e2de <PAIRING_FinalVerify+0x9a>
    e2d6:	2b02      	cmp	r3, #2
    e2d8:	d00d      	beq.n	e2f6 <PAIRING_FinalVerify+0xb2>
    e2da:	2000      	movs	r0, #0
    e2dc:	e7f1      	b.n	e2c2 <PAIRING_FinalVerify+0x7e>
    e2de:	f505 7114 	add.w	r1, r5, #592	; 0x250
    e2e2:	4668      	mov	r0, sp
    e2e4:	f7f8 f960 	bl	65a8 <POINTonE1_from_Jacobian>
    e2e8:	2301      	movs	r3, #1
    e2ea:	466a      	mov	r2, sp
    e2ec:	490f      	ldr	r1, [pc, #60]	; (e32c <PAIRING_FinalVerify+0xe8>)
    e2ee:	a848      	add	r0, sp, #288	; 0x120
    e2f0:	f7ff faef 	bl	d8d2 <miller_loop_n>
    e2f4:	e7b8      	b.n	e268 <PAIRING_FinalVerify+0x24>
    e2f6:	f505 7114 	add.w	r1, r5, #592	; 0x250
    e2fa:	4668      	mov	r0, sp
    e2fc:	f7fb f983 	bl	9606 <POINTonE2_from_Jacobian>
    e300:	2301      	movs	r3, #1
    e302:	4a0b      	ldr	r2, [pc, #44]	; (e330 <PAIRING_FinalVerify+0xec>)
    e304:	4669      	mov	r1, sp
    e306:	a848      	add	r0, sp, #288	; 0x120
    e308:	f7ff fae3 	bl	d8d2 <miller_loop_n>
    e30c:	e7ac      	b.n	e268 <PAIRING_FinalVerify+0x24>
    e30e:	4809      	ldr	r0, [pc, #36]	; (e334 <PAIRING_FinalVerify+0xf0>)
    e310:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    e314:	aa47      	add	r2, sp, #284	; 0x11c
    e316:	f500 7027 	add.w	r0, r0, #668	; 0x29c
    e31a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e31e:	f842 1f04 	str.w	r1, [r2, #4]!
    e322:	4283      	cmp	r3, r0
    e324:	d1f9      	bne.n	e31a <PAIRING_FinalVerify+0xd6>
    e326:	e79f      	b.n	e268 <PAIRING_FinalVerify+0x24>
    e328:	0001ae44 	.word	0x0001ae44
    e32c:	0001bcb8 	.word	0x0001bcb8
    e330:	0001bc28 	.word	0x0001bc28
    e334:	0001ade8 	.word	0x0001ade8

0000e338 <blst_pairing_finalverify>:
    e338:	b508      	push	{r3, lr}
    e33a:	f7ff ff83 	bl	e244 <PAIRING_FinalVerify>
    e33e:	bd08      	pop	{r3, pc}

0000e340 <blst_core_verify_pk_in_g1>:
    e340:	b510      	push	{r4, lr}
    e342:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
    e346:	2a00      	cmp	r2, #0
    e348:	bf14      	ite	ne
    e34a:	2240      	movne	r2, #64	; 0x40
    e34c:	2200      	moveq	r2, #0
    e34e:	9208      	str	r2, [sp, #32]
    e350:	2200      	movs	r2, #0
    e352:	9209      	str	r2, [sp, #36]	; 0x24
    e354:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
    e358:	940a      	str	r4, [sp, #40]	; 0x28
    e35a:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
    e35e:	940b      	str	r4, [sp, #44]	; 0x2c
    e360:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
    e364:	9406      	str	r4, [sp, #24]
    e366:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
    e36a:	9405      	str	r4, [sp, #20]
    e36c:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
    e370:	9404      	str	r4, [sp, #16]
    e372:	9303      	str	r3, [sp, #12]
    e374:	9202      	str	r2, [sp, #8]
    e376:	9201      	str	r2, [sp, #4]
    e378:	2201      	movs	r2, #1
    e37a:	9200      	str	r2, [sp, #0]
    e37c:	460b      	mov	r3, r1
    e37e:	4601      	mov	r1, r0
    e380:	a808      	add	r0, sp, #32
    e382:	f7ff fd3d 	bl	de00 <PAIRING_Aggregate_PK_in_G1>
    e386:	4604      	mov	r4, r0
    e388:	b118      	cbz	r0, e392 <blst_core_verify_pk_in_g1+0x52>
    e38a:	4620      	mov	r0, r4
    e38c:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
    e390:	bd10      	pop	{r4, pc}
    e392:	a808      	add	r0, sp, #32
    e394:	f7ff ff22 	bl	e1dc <PAIRING_Commit>
    e398:	2100      	movs	r1, #0
    e39a:	a808      	add	r0, sp, #32
    e39c:	f7ff ff52 	bl	e244 <PAIRING_FinalVerify>
    e3a0:	2800      	cmp	r0, #0
    e3a2:	bf08      	it	eq
    e3a4:	2405      	moveq	r4, #5
    e3a6:	e7f0      	b.n	e38a <blst_core_verify_pk_in_g1+0x4a>

0000e3a8 <blst_core_verify_pk_in_g2>:
    e3a8:	b510      	push	{r4, lr}
    e3aa:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
    e3ae:	2a00      	cmp	r2, #0
    e3b0:	bf14      	ite	ne
    e3b2:	2240      	movne	r2, #64	; 0x40
    e3b4:	2200      	moveq	r2, #0
    e3b6:	9208      	str	r2, [sp, #32]
    e3b8:	2200      	movs	r2, #0
    e3ba:	9209      	str	r2, [sp, #36]	; 0x24
    e3bc:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
    e3c0:	940a      	str	r4, [sp, #40]	; 0x28
    e3c2:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
    e3c6:	940b      	str	r4, [sp, #44]	; 0x2c
    e3c8:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
    e3cc:	9406      	str	r4, [sp, #24]
    e3ce:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
    e3d2:	9405      	str	r4, [sp, #20]
    e3d4:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
    e3d8:	9404      	str	r4, [sp, #16]
    e3da:	9303      	str	r3, [sp, #12]
    e3dc:	9202      	str	r2, [sp, #8]
    e3de:	9201      	str	r2, [sp, #4]
    e3e0:	2201      	movs	r2, #1
    e3e2:	9200      	str	r2, [sp, #0]
    e3e4:	460b      	mov	r3, r1
    e3e6:	4601      	mov	r1, r0
    e3e8:	a808      	add	r0, sp, #32
    e3ea:	f7ff fb5f 	bl	daac <PAIRING_Aggregate_PK_in_G2>
    e3ee:	4604      	mov	r4, r0
    e3f0:	b118      	cbz	r0, e3fa <blst_core_verify_pk_in_g2+0x52>
    e3f2:	4620      	mov	r0, r4
    e3f4:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
    e3f8:	bd10      	pop	{r4, pc}
    e3fa:	a808      	add	r0, sp, #32
    e3fc:	f7ff feee 	bl	e1dc <PAIRING_Commit>
    e400:	2100      	movs	r1, #0
    e402:	a808      	add	r0, sp, #32
    e404:	f7ff ff1e 	bl	e244 <PAIRING_FinalVerify>
    e408:	2800      	cmp	r0, #0
    e40a:	bf08      	it	eq
    e40c:	2405      	moveq	r4, #5
    e40e:	e7f0      	b.n	e3f2 <blst_core_verify_pk_in_g2+0x4a>

0000e410 <blst_pairing_raw_aggregate>:
    e410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e414:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    e418:	4607      	mov	r7, r0
    e41a:	1f08      	subs	r0, r1, #4
    e41c:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
    e420:	4603      	mov	r3, r0
    e422:	2100      	movs	r1, #0
    e424:	f853 6f04 	ldr.w	r6, [r3, #4]!
    e428:	4331      	orrs	r1, r6
    e42a:	42ab      	cmp	r3, r5
    e42c:	d1fa      	bne.n	e424 <blst_pairing_raw_aggregate+0x14>
    e42e:	f101 38ff 	add.w	r8, r1, #4294967295
    e432:	ea28 0801 	bic.w	r8, r8, r1
    e436:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    e43a:	1f16      	subs	r6, r2, #4
    e43c:	f102 045c 	add.w	r4, r2, #92	; 0x5c
    e440:	4633      	mov	r3, r6
    e442:	2200      	movs	r2, #0
    e444:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e448:	430a      	orrs	r2, r1
    e44a:	42a3      	cmp	r3, r4
    e44c:	d1fa      	bne.n	e444 <blst_pairing_raw_aggregate+0x34>
    e44e:	1e53      	subs	r3, r2, #1
    e450:	ea23 0202 	bic.w	r2, r3, r2
    e454:	ea18 78d2 	ands.w	r8, r8, r2, lsr #31
    e458:	d120      	bne.n	e49c <blst_pairing_raw_aggregate+0x8c>
    e45a:	687a      	ldr	r2, [r7, #4]
    e45c:	f507 7c5c 	add.w	ip, r7, #880	; 0x370
    e460:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    e464:	eb07 1383 	add.w	r3, r7, r3, lsl #6
    e468:	f503 735b 	add.w	r3, r3, #876	; 0x36c
    e46c:	f850 1f04 	ldr.w	r1, [r0, #4]!
    e470:	f843 1f04 	str.w	r1, [r3, #4]!
    e474:	42a8      	cmp	r0, r5
    e476:	d1f9      	bne.n	e46c <blst_pairing_raw_aggregate+0x5c>
    e478:	f507 6517 	add.w	r5, r7, #2416	; 0x970
    e47c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    e480:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    e484:	f603 136c 	addw	r3, r3, #2412	; 0x96c
    e488:	f856 0f04 	ldr.w	r0, [r6, #4]!
    e48c:	f843 0f04 	str.w	r0, [r3, #4]!
    e490:	42a6      	cmp	r6, r4
    e492:	d1f9      	bne.n	e488 <blst_pairing_raw_aggregate+0x78>
    e494:	1c54      	adds	r4, r2, #1
    e496:	2a07      	cmp	r2, #7
    e498:	d004      	beq.n	e4a4 <blst_pairing_raw_aggregate+0x94>
    e49a:	607c      	str	r4, [r7, #4]
    e49c:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
    e4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4a4:	683c      	ldr	r4, [r7, #0]
    e4a6:	f014 0420 	ands.w	r4, r4, #32
    e4aa:	d00d      	beq.n	e4c8 <blst_pairing_raw_aggregate+0xb8>
    e4ac:	2308      	movs	r3, #8
    e4ae:	462a      	mov	r2, r5
    e4b0:	4661      	mov	r1, ip
    e4b2:	4668      	mov	r0, sp
    e4b4:	f7ff fa0d 	bl	d8d2 <miller_loop_n>
    e4b8:	f107 0010 	add.w	r0, r7, #16
    e4bc:	466a      	mov	r2, sp
    e4be:	4601      	mov	r1, r0
    e4c0:	f7f7 f982 	bl	57c8 <mul_fp12>
    e4c4:	4644      	mov	r4, r8
    e4c6:	e7e8      	b.n	e49a <blst_pairing_raw_aggregate+0x8a>
    e4c8:	2308      	movs	r3, #8
    e4ca:	462a      	mov	r2, r5
    e4cc:	4661      	mov	r1, ip
    e4ce:	f107 0010 	add.w	r0, r7, #16
    e4d2:	f7ff f9fe 	bl	d8d2 <miller_loop_n>
    e4d6:	683b      	ldr	r3, [r7, #0]
    e4d8:	f043 0320 	orr.w	r3, r3, #32
    e4dc:	603b      	str	r3, [r7, #0]
    e4de:	e7dc      	b.n	e49a <blst_pairing_raw_aggregate+0x8a>

0000e4e0 <blst_aggregated_in_g1>:
    e4e0:	b508      	push	{r3, lr}
    e4e2:	460a      	mov	r2, r1
    e4e4:	2301      	movs	r3, #1
    e4e6:	4902      	ldr	r1, [pc, #8]	; (e4f0 <blst_aggregated_in_g1+0x10>)
    e4e8:	f7ff f9f3 	bl	d8d2 <miller_loop_n>
    e4ec:	bd08      	pop	{r3, pc}
    e4ee:	bf00      	nop
    e4f0:	0001bcb8 	.word	0x0001bcb8

0000e4f4 <blst_aggregated_in_g2>:
    e4f4:	b508      	push	{r3, lr}
    e4f6:	2301      	movs	r3, #1
    e4f8:	4a01      	ldr	r2, [pc, #4]	; (e500 <blst_aggregated_in_g2+0xc>)
    e4fa:	f7ff f9ea 	bl	d8d2 <miller_loop_n>
    e4fe:	bd08      	pop	{r3, pc}
    e500:	0001bc28 	.word	0x0001bc28

0000e504 <pre_add_n_dbl>:
    e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e506:	460e      	mov	r6, r1
    e508:	461f      	mov	r7, r3
    e50a:	f500 7490 	add.w	r4, r0, #288	; 0x120
    e50e:	4613      	mov	r3, r2
    e510:	460a      	mov	r2, r1
    e512:	f7fe ffcc 	bl	d4ae <line_add>
    e516:	1e7d      	subs	r5, r7, #1
    e518:	b157      	cbz	r7, e530 <pre_add_n_dbl+0x2c>
    e51a:	4620      	mov	r0, r4
    e51c:	4632      	mov	r2, r6
    e51e:	4631      	mov	r1, r6
    e520:	f504 7490 	add.w	r4, r4, #288	; 0x120
    e524:	f7fe fdfc 	bl	d120 <line_dbl>
    e528:	3d01      	subs	r5, #1
    e52a:	f1b5 3fff 	cmp.w	r5, #4294967295
    e52e:	d1f4      	bne.n	e51a <pre_add_n_dbl+0x16>
    e530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e532 <precompute_lines>:
    e532:	b570      	push	{r4, r5, r6, lr}
    e534:	b0c8      	sub	sp, #288	; 0x120
    e536:	4605      	mov	r5, r0
    e538:	460e      	mov	r6, r1
    e53a:	1f0a      	subs	r2, r1, #4
    e53c:	466b      	mov	r3, sp
    e53e:	a930      	add	r1, sp, #192	; 0xc0
    e540:	f852 4f04 	ldr.w	r4, [r2, #4]!
    e544:	f843 4b04 	str.w	r4, [r3], #4
    e548:	428b      	cmp	r3, r1
    e54a:	d1f9      	bne.n	e540 <precompute_lines+0xe>
    e54c:	491a      	ldr	r1, [pc, #104]	; (e5b8 <precompute_lines+0x86>)
    e54e:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    e552:	aa2f      	add	r2, sp, #188	; 0xbc
    e554:	31bc      	adds	r1, #188	; 0xbc
    e556:	f853 4f04 	ldr.w	r4, [r3, #4]!
    e55a:	f842 4f04 	str.w	r4, [r2, #4]!
    e55e:	428b      	cmp	r3, r1
    e560:	d1f9      	bne.n	e556 <precompute_lines+0x24>
    e562:	466a      	mov	r2, sp
    e564:	4669      	mov	r1, sp
    e566:	4628      	mov	r0, r5
    e568:	f7fe fdda 	bl	d120 <line_dbl>
    e56c:	2302      	movs	r3, #2
    e56e:	4632      	mov	r2, r6
    e570:	4669      	mov	r1, sp
    e572:	f505 7090 	add.w	r0, r5, #288	; 0x120
    e576:	f7ff ffc5 	bl	e504 <pre_add_n_dbl>
    e57a:	2303      	movs	r3, #3
    e57c:	4632      	mov	r2, r6
    e57e:	4669      	mov	r1, sp
    e580:	f505 6090 	add.w	r0, r5, #1152	; 0x480
    e584:	f7ff ffbe 	bl	e504 <pre_add_n_dbl>
    e588:	2309      	movs	r3, #9
    e58a:	4632      	mov	r2, r6
    e58c:	4669      	mov	r1, sp
    e58e:	f505 6010 	add.w	r0, r5, #2304	; 0x900
    e592:	f7ff ffb7 	bl	e504 <pre_add_n_dbl>
    e596:	2320      	movs	r3, #32
    e598:	4632      	mov	r2, r6
    e59a:	4669      	mov	r1, sp
    e59c:	f505 50a2 	add.w	r0, r5, #5184	; 0x1440
    e5a0:	f7ff ffb0 	bl	e504 <pre_add_n_dbl>
    e5a4:	2310      	movs	r3, #16
    e5a6:	4632      	mov	r2, r6
    e5a8:	4669      	mov	r1, sp
    e5aa:	f505 5065 	add.w	r0, r5, #14656	; 0x3940
    e5ae:	3020      	adds	r0, #32
    e5b0:	f7ff ffa8 	bl	e504 <pre_add_n_dbl>
    e5b4:	b048      	add	sp, #288	; 0x120
    e5b6:	bd70      	pop	{r4, r5, r6, pc}
    e5b8:	0001ade8 	.word	0x0001ade8

0000e5bc <blst_precompute_lines>:
    e5bc:	b508      	push	{r3, lr}
    e5be:	f7ff ffb8 	bl	e532 <precompute_lines>
    e5c2:	bd08      	pop	{r3, pc}

0000e5c4 <POINTonE2_tail>:
    e5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5c8:	b09d      	sub	sp, #116	; 0x74
    e5ca:	4683      	mov	fp, r0
    e5cc:	460d      	mov	r5, r1
    e5ce:	9202      	str	r2, [sp, #8]
    e5d0:	f501 74ee 	add.w	r4, r1, #476	; 0x1dc
    e5d4:	f501 710f 	add.w	r1, r1, #572	; 0x23c
    e5d8:	4623      	mov	r3, r4
    e5da:	2600      	movs	r6, #0
    e5dc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e5e0:	4316      	orrs	r6, r2
    e5e2:	428b      	cmp	r3, r1
    e5e4:	d1fa      	bne.n	e5dc <POINTonE2_tail+0x18>
    e5e6:	4f3e      	ldr	r7, [pc, #248]	; (e6e0 <POINTonE2_tail+0x11c>)
    e5e8:	f505 7990 	add.w	r9, r5, #288	; 0x120
    e5ec:	4b3d      	ldr	r3, [pc, #244]	; (e6e4 <POINTonE2_tail+0x120>)
    e5ee:	9300      	str	r3, [sp, #0]
    e5f0:	463b      	mov	r3, r7
    e5f2:	f505 72c0 	add.w	r2, r5, #384	; 0x180
    e5f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e5fa:	4641      	mov	r1, r8
    e5fc:	4640      	mov	r0, r8
    e5fe:	f7f6 fdd1 	bl	51a4 <mul_mont_384x>
    e602:	4b38      	ldr	r3, [pc, #224]	; (e6e4 <POINTonE2_tail+0x120>)
    e604:	463a      	mov	r2, r7
    e606:	f8cd 8008 	str.w	r8, [sp, #8]
    e60a:	4641      	mov	r1, r8
    e60c:	a804      	add	r0, sp, #16
    e60e:	f7fa ffc5 	bl	959c <sqr_mont_384x>
    e612:	f04f 080c 	mov.w	r8, #12
    e616:	f8cd 8000 	str.w	r8, [sp]
    e61a:	463b      	mov	r3, r7
    e61c:	464a      	mov	r2, r9
    e61e:	a904      	add	r1, sp, #16
    e620:	4658      	mov	r0, fp
    e622:	f7f2 f878 	bl	716 <sub_mod_n>
    e626:	f10b 0030 	add.w	r0, fp, #48	; 0x30
    e62a:	f8cd 8000 	str.w	r8, [sp]
    e62e:	463b      	mov	r3, r7
    e630:	f505 72a8 	add.w	r2, r5, #336	; 0x150
    e634:	a910      	add	r1, sp, #64	; 0x40
    e636:	9003      	str	r0, [sp, #12]
    e638:	f7f2 f86d 	bl	716 <sub_mod_n>
    e63c:	f10b 0960 	add.w	r9, fp, #96	; 0x60
    e640:	f8cd 8000 	str.w	r8, [sp]
    e644:	463b      	mov	r3, r7
    e646:	465a      	mov	r2, fp
    e648:	4629      	mov	r1, r5
    e64a:	4648      	mov	r0, r9
    e64c:	f7f2 f863 	bl	716 <sub_mod_n>
    e650:	f10b 0a90 	add.w	sl, fp, #144	; 0x90
    e654:	f8cd 8000 	str.w	r8, [sp]
    e658:	463b      	mov	r3, r7
    e65a:	9a03      	ldr	r2, [sp, #12]
    e65c:	f105 0130 	add.w	r1, r5, #48	; 0x30
    e660:	4650      	mov	r0, sl
    e662:	f7f2 f858 	bl	716 <sub_mod_n>
    e666:	4b1f      	ldr	r3, [pc, #124]	; (e6e4 <POINTonE2_tail+0x120>)
    e668:	9300      	str	r3, [sp, #0]
    e66a:	463b      	mov	r3, r7
    e66c:	9a02      	ldr	r2, [sp, #8]
    e66e:	4649      	mov	r1, r9
    e670:	4648      	mov	r0, r9
    e672:	f7f6 fd97 	bl	51a4 <mul_mont_384x>
    e676:	f8cd 8000 	str.w	r8, [sp]
    e67a:	463b      	mov	r3, r7
    e67c:	f105 0260 	add.w	r2, r5, #96	; 0x60
    e680:	4649      	mov	r1, r9
    e682:	4648      	mov	r0, r9
    e684:	f7f2 f847 	bl	716 <sub_mod_n>
    e688:	f8cd 8000 	str.w	r8, [sp]
    e68c:	463b      	mov	r3, r7
    e68e:	f105 0290 	add.w	r2, r5, #144	; 0x90
    e692:	4651      	mov	r1, sl
    e694:	4650      	mov	r0, sl
    e696:	f7f2 f83e 	bl	716 <sub_mod_n>
    e69a:	1e73      	subs	r3, r6, #1
    e69c:	ea23 0606 	bic.w	r6, r3, r6
    e6a0:	17f6      	asrs	r6, r6, #31
    e6a2:	1f2a      	subs	r2, r5, #4
    e6a4:	f1ab 0004 	sub.w	r0, fp, #4
    e6a8:	35bc      	adds	r5, #188	; 0xbc
    e6aa:	f850 1f04 	ldr.w	r1, [r0, #4]!
    e6ae:	f852 3f04 	ldr.w	r3, [r2, #4]!
    e6b2:	2e00      	cmp	r6, #0
    e6b4:	bf08      	it	eq
    e6b6:	460b      	moveq	r3, r1
    e6b8:	6003      	str	r3, [r0, #0]
    e6ba:	42aa      	cmp	r2, r5
    e6bc:	d1f5      	bne.n	e6aa <POINTonE2_tail+0xe6>
    e6be:	4808      	ldr	r0, [pc, #32]	; (e6e0 <POINTonE2_tail+0x11c>)
    e6c0:	f100 025c 	add.w	r2, r0, #92	; 0x5c
    e6c4:	30bc      	adds	r0, #188	; 0xbc
    e6c6:	f854 1f04 	ldr.w	r1, [r4, #4]!
    e6ca:	f852 3f04 	ldr.w	r3, [r2, #4]!
    e6ce:	2e00      	cmp	r6, #0
    e6d0:	bf08      	it	eq
    e6d2:	460b      	moveq	r3, r1
    e6d4:	6023      	str	r3, [r4, #0]
    e6d6:	4282      	cmp	r2, r0
    e6d8:	d1f5      	bne.n	e6c6 <POINTonE2_tail+0x102>
    e6da:	b01d      	add	sp, #116	; 0x74
    e6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6e0:	0001ade8 	.word	0x0001ade8
    e6e4:	fffcfffd 	.word	0xfffcfffd

0000e6e8 <POINTonE2s_accumulate>:
    e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6ec:	b093      	sub	sp, #76	; 0x4c
    e6ee:	9011      	str	r0, [sp, #68]	; 0x44
    e6f0:	910e      	str	r1, [sp, #56]	; 0x38
    e6f2:	920d      	str	r2, [sp, #52]	; 0x34
    e6f4:	2a0f      	cmp	r2, #15
    e6f6:	f240 8187 	bls.w	ea08 <POINTonE2s_accumulate+0x320>
    e6fa:	4fc5      	ldr	r7, [pc, #788]	; (ea10 <POINTonE2s_accumulate+0x328>)
    e6fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
    e700:	930b      	str	r3, [sp, #44]	; 0x2c
    e702:	4bc4      	ldr	r3, [pc, #784]	; (ea14 <POINTonE2s_accumulate+0x32c>)
    e704:	f603 63fc 	addw	r3, r3, #3836	; 0xefc
    e708:	930c      	str	r3, [sp, #48]	; 0x30
    e70a:	e163      	b.n	e9d4 <POINTonE2s_accumulate+0x2ec>
    e70c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e70e:	f502 7490 	add.w	r4, r2, #288	; 0x120
    e712:	9911      	ldr	r1, [sp, #68]	; 0x44
    e714:	4608      	mov	r0, r1
    e716:	f7fc fac9 	bl	acac <POINTonE2_dadd_affine>
    e71a:	940e      	str	r4, [sp, #56]	; 0x38
    e71c:	e15f      	b.n	e9de <POINTonE2s_accumulate+0x2f6>
    e71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e720:	f103 38ff 	add.w	r8, r3, #4294967295
    e724:	ea28 0303 	bic.w	r3, r8, r3
    e728:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e72a:	f102 38ff 	add.w	r8, r2, #4294967295
    e72e:	ea28 0802 	bic.w	r8, r8, r2
    e732:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    e736:	ea48 78d3 	orr.w	r8, r8, r3, lsr #31
    e73a:	f1c8 0800 	rsb	r8, r8, #0
    e73e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e742:	f854 2f04 	ldr.w	r2, [r4, #4]!
    e746:	f1b8 0f00 	cmp.w	r8, #0
    e74a:	bf08      	it	eq
    e74c:	4613      	moveq	r3, r2
    e74e:	6023      	str	r3, [r4, #0]
    e750:	f1aa 03c0 	sub.w	r3, sl, #192	; 0xc0
    e754:	429c      	cmp	r4, r3
    e756:	d1f2      	bne.n	e73e <POINTonE2s_accumulate+0x56>
    e758:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e75a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e75e:	f1b8 0f00 	cmp.w	r8, #0
    e762:	bf08      	it	eq
    e764:	460a      	moveq	r2, r1
    e766:	601a      	str	r2, [r3, #0]
    e768:	9a03      	ldr	r2, [sp, #12]
    e76a:	4293      	cmp	r3, r2
    e76c:	d1f4      	bne.n	e758 <POINTonE2s_accumulate+0x70>
    e76e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    e772:	f8d2 1124 	ldr.w	r1, [r2, #292]	; 0x124
    e776:	f850 3f04 	ldr.w	r3, [r0, #4]!
    e77a:	f1b8 0f00 	cmp.w	r8, #0
    e77e:	bf08      	it	eq
    e780:	460b      	moveq	r3, r1
    e782:	f842 3f04 	str.w	r3, [r2, #4]!
    e786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e788:	4298      	cmp	r0, r3
    e78a:	d1f2      	bne.n	e772 <POINTonE2s_accumulate+0x8a>
    e78c:	4ba1      	ldr	r3, [pc, #644]	; (ea14 <POINTonE2s_accumulate+0x32c>)
    e78e:	f603 629c 	addw	r2, r3, #3740	; 0xe9c
    e792:	f859 1f04 	ldr.w	r1, [r9, #4]!
    e796:	f852 3f04 	ldr.w	r3, [r2, #4]!
    e79a:	f1b8 0f00 	cmp.w	r8, #0
    e79e:	bf08      	it	eq
    e7a0:	460b      	moveq	r3, r1
    e7a2:	f8c9 3000 	str.w	r3, [r9]
    e7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a8:	429a      	cmp	r2, r3
    e7aa:	d1f2      	bne.n	e792 <POINTonE2s_accumulate+0xaa>
    e7ac:	9a08      	ldr	r2, [sp, #32]
    e7ae:	b132      	cbz	r2, e7be <POINTonE2s_accumulate+0xd6>
    e7b0:	4b99      	ldr	r3, [pc, #612]	; (ea18 <POINTonE2s_accumulate+0x330>)
    e7b2:	9300      	str	r3, [sp, #0]
    e7b4:	463b      	mov	r3, r7
    e7b6:	9905      	ldr	r1, [sp, #20]
    e7b8:	4608      	mov	r0, r1
    e7ba:	f7f6 fcf3 	bl	51a4 <mul_mont_384x>
    e7be:	9b06      	ldr	r3, [sp, #24]
    e7c0:	3b01      	subs	r3, #1
    e7c2:	9306      	str	r3, [sp, #24]
    e7c4:	9a03      	ldr	r2, [sp, #12]
    e7c6:	f502 7210 	add.w	r2, r2, #576	; 0x240
    e7ca:	9203      	str	r2, [sp, #12]
    e7cc:	f50a 7a10 	add.w	sl, sl, #576	; 0x240
    e7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    e7d4:	f000 80af 	beq.w	e936 <POINTonE2s_accumulate+0x24e>
    e7d8:	9b05      	ldr	r3, [sp, #20]
    e7da:	9308      	str	r3, [sp, #32]
    e7dc:	f5aa 738e 	sub.w	r3, sl, #284	; 0x11c
    e7e0:	9304      	str	r3, [sp, #16]
    e7e2:	f5aa 7490 	sub.w	r4, sl, #288	; 0x120
    e7e6:	4623      	mov	r3, r4
    e7e8:	2200      	movs	r2, #0
    e7ea:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e7ee:	430a      	orrs	r2, r1
    e7f0:	9903      	ldr	r1, [sp, #12]
    e7f2:	428b      	cmp	r3, r1
    e7f4:	d1f9      	bne.n	e7ea <POINTonE2s_accumulate+0x102>
    e7f6:	920a      	str	r2, [sp, #40]	; 0x28
    e7f8:	4653      	mov	r3, sl
    e7fa:	2200      	movs	r2, #0
    e7fc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e800:	430a      	orrs	r2, r1
    e802:	f10a 09c0 	add.w	r9, sl, #192	; 0xc0
    e806:	454b      	cmp	r3, r9
    e808:	d1f8      	bne.n	e7fc <POINTonE2s_accumulate+0x114>
    e80a:	9209      	str	r2, [sp, #36]	; 0x24
    e80c:	f10a 0604 	add.w	r6, sl, #4
    e810:	f8cd b000 	str.w	fp, [sp]
    e814:	463b      	mov	r3, r7
    e816:	9a04      	ldr	r2, [sp, #16]
    e818:	4631      	mov	r1, r6
    e81a:	f10a 00c4 	add.w	r0, sl, #196	; 0xc4
    e81e:	f7f1 ff7a 	bl	716 <sub_mod_n>
    e822:	f10a 0534 	add.w	r5, sl, #52	; 0x34
    e826:	f1aa 08ec 	sub.w	r8, sl, #236	; 0xec
    e82a:	f8cd b000 	str.w	fp, [sp]
    e82e:	463b      	mov	r3, r7
    e830:	4642      	mov	r2, r8
    e832:	4629      	mov	r1, r5
    e834:	f10a 00f4 	add.w	r0, sl, #244	; 0xf4
    e838:	f7f1 ff6d 	bl	716 <sub_mod_n>
    e83c:	f8cd b000 	str.w	fp, [sp]
    e840:	463b      	mov	r3, r7
    e842:	9a04      	ldr	r2, [sp, #16]
    e844:	4631      	mov	r1, r6
    e846:	4630      	mov	r0, r6
    e848:	f7f2 fc18 	bl	107c <add_mod_n>
    e84c:	f8cd b000 	str.w	fp, [sp]
    e850:	463b      	mov	r3, r7
    e852:	4642      	mov	r2, r8
    e854:	4629      	mov	r1, r5
    e856:	4628      	mov	r0, r5
    e858:	f7f2 fc10 	bl	107c <add_mod_n>
    e85c:	f1aa 005c 	sub.w	r0, sl, #92	; 0x5c
    e860:	9005      	str	r0, [sp, #20]
    e862:	f10a 0564 	add.w	r5, sl, #100	; 0x64
    e866:	f1aa 02bc 	sub.w	r2, sl, #188	; 0xbc
    e86a:	f8cd b000 	str.w	fp, [sp]
    e86e:	463b      	mov	r3, r7
    e870:	9207      	str	r2, [sp, #28]
    e872:	4629      	mov	r1, r5
    e874:	f7f2 fc02 	bl	107c <add_mod_n>
    e878:	f10a 0694 	add.w	r6, sl, #148	; 0x94
    e87c:	f1aa 088c 	sub.w	r8, sl, #140	; 0x8c
    e880:	f8cd b000 	str.w	fp, [sp]
    e884:	463b      	mov	r3, r7
    e886:	4642      	mov	r2, r8
    e888:	4631      	mov	r1, r6
    e88a:	f1aa 002c 	sub.w	r0, sl, #44	; 0x2c
    e88e:	f7f2 fbf5 	bl	107c <add_mod_n>
    e892:	f8cd b000 	str.w	fp, [sp]
    e896:	463b      	mov	r3, r7
    e898:	9a07      	ldr	r2, [sp, #28]
    e89a:	4629      	mov	r1, r5
    e89c:	4628      	mov	r0, r5
    e89e:	f7f1 ff3a 	bl	716 <sub_mod_n>
    e8a2:	f8cd b000 	str.w	fp, [sp]
    e8a6:	463b      	mov	r3, r7
    e8a8:	4642      	mov	r2, r8
    e8aa:	4631      	mov	r1, r6
    e8ac:	4630      	mov	r0, r6
    e8ae:	f7f1 ff32 	bl	716 <sub_mod_n>
    e8b2:	464a      	mov	r2, r9
    e8b4:	2300      	movs	r3, #0
    e8b6:	f50a 7090 	add.w	r0, sl, #288	; 0x120
    e8ba:	f852 1f04 	ldr.w	r1, [r2, #4]!
    e8be:	430b      	orrs	r3, r1
    e8c0:	4282      	cmp	r2, r0
    e8c2:	d1fa      	bne.n	e8ba <POINTonE2s_accumulate+0x1d2>
    e8c4:	1e5a      	subs	r2, r3, #1
    e8c6:	ea32 0303 	bics.w	r3, r2, r3
    e8ca:	f57f af28 	bpl.w	e71e <POINTonE2s_accumulate+0x36>
    e8ce:	9b03      	ldr	r3, [sp, #12]
    e8d0:	2200      	movs	r2, #0
    e8d2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e8d6:	430a      	orrs	r2, r1
    e8d8:	4553      	cmp	r3, sl
    e8da:	d1fa      	bne.n	e8d2 <POINTonE2s_accumulate+0x1ea>
    e8dc:	1e51      	subs	r1, r2, #1
    e8de:	ea21 0102 	bic.w	r1, r1, r2
    e8e2:	ea4f 78d1 	mov.w	r8, r1, lsr #31
    e8e6:	17c9      	asrs	r1, r1, #31
    e8e8:	4653      	mov	r3, sl
    e8ea:	f10a 0c60 	add.w	ip, sl, #96	; 0x60
    e8ee:	f853 2c5c 	ldr.w	r2, [r3, #-92]
    e8f2:	f853 0f04 	ldr.w	r0, [r3, #4]!
    e8f6:	2900      	cmp	r1, #0
    e8f8:	bf08      	it	eq
    e8fa:	4602      	moveq	r2, r0
    e8fc:	601a      	str	r2, [r3, #0]
    e8fe:	4563      	cmp	r3, ip
    e900:	d1f5      	bne.n	e8ee <POINTonE2s_accumulate+0x206>
    e902:	4b45      	ldr	r3, [pc, #276]	; (ea18 <POINTonE2s_accumulate+0x330>)
    e904:	463a      	mov	r2, r7
    e906:	9904      	ldr	r1, [sp, #16]
    e908:	4628      	mov	r0, r5
    e90a:	f7fa fe47 	bl	959c <sqr_mont_384x>
    e90e:	465b      	mov	r3, fp
    e910:	463a      	mov	r2, r7
    e912:	4629      	mov	r1, r5
    e914:	4628      	mov	r0, r5
    e916:	f7f3 f84b 	bl	19b0 <mul_by_3_mod_n>
    e91a:	465b      	mov	r3, fp
    e91c:	463a      	mov	r2, r7
    e91e:	4631      	mov	r1, r6
    e920:	4630      	mov	r0, r6
    e922:	f7f3 f845 	bl	19b0 <mul_by_3_mod_n>
    e926:	9b03      	ldr	r3, [sp, #12]
    e928:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e92c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e930:	4553      	cmp	r3, sl
    e932:	d1f9      	bne.n	e928 <POINTonE2s_accumulate+0x240>
    e934:	e701      	b.n	e73a <POINTonE2s_accumulate+0x52>
    e936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e938:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    e93c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e93e:	eb03 1984 	add.w	r9, r3, r4, lsl #6
    e942:	f5a9 7410 	sub.w	r4, r9, #576	; 0x240
    e946:	f5a9 75c0 	sub.w	r5, r9, #384	; 0x180
    e94a:	4629      	mov	r1, r5
    e94c:	4628      	mov	r0, r5
    e94e:	f7f7 ff37 	bl	67c0 <reciprocal_fp2>
    e952:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e954:	2b00      	cmp	r3, #0
    e956:	d061      	beq.n	ea1c <POINTonE2s_accumulate+0x334>
    e958:	464e      	mov	r6, r9
    e95a:	464c      	mov	r4, r9
    e95c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    e960:	f5a6 7690 	sub.w	r6, r6, #288	; 0x120
    e964:	f5a4 7410 	sub.w	r4, r4, #576	; 0x240
    e968:	f5a4 75c0 	sub.w	r5, r4, #384	; 0x180
    e96c:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
    e970:	4b29      	ldr	r3, [pc, #164]	; (ea18 <POINTonE2s_accumulate+0x330>)
    e972:	9300      	str	r3, [sp, #0]
    e974:	463b      	mov	r3, r7
    e976:	462a      	mov	r2, r5
    e978:	4651      	mov	r1, sl
    e97a:	4628      	mov	r0, r5
    e97c:	f7f6 fc12 	bl	51a4 <mul_mont_384x>
    e980:	462a      	mov	r2, r5
    e982:	4621      	mov	r1, r4
    e984:	4630      	mov	r0, r6
    e986:	f7ff fe1d 	bl	e5c4 <POINTonE2_tail>
    e98a:	4b23      	ldr	r3, [pc, #140]	; (ea18 <POINTonE2s_accumulate+0x330>)
    e98c:	9300      	str	r3, [sp, #0]
    e98e:	463b      	mov	r3, r7
    e990:	f504 72f0 	add.w	r2, r4, #480	; 0x1e0
    e994:	4651      	mov	r1, sl
    e996:	4628      	mov	r0, r5
    e998:	f7f6 fc04 	bl	51a4 <mul_mont_384x>
    e99c:	f1b8 0801 	subs.w	r8, r8, #1
    e9a0:	d1de      	bne.n	e960 <POINTonE2s_accumulate+0x278>
    e9a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e9a4:	ebc2 51c2 	rsb	r1, r2, r2, lsl #23
    e9a8:	ebc2 01c1 	rsb	r1, r2, r1, lsl #3
    e9ac:	ebc2 6302 	rsb	r3, r2, r2, lsl #24
    e9b0:	ebc2 03c3 	rsb	r3, r2, r3, lsl #3
    e9b4:	eb09 1343 	add.w	r3, r9, r3, lsl #5
    e9b8:	930e      	str	r3, [sp, #56]	; 0x38
    e9ba:	eb09 1281 	add.w	r2, r9, r1, lsl #6
    e9be:	32c0      	adds	r2, #192	; 0xc0
    e9c0:	eb09 1181 	add.w	r1, r9, r1, lsl #6
    e9c4:	4618      	mov	r0, r3
    e9c6:	f7ff fdfd 	bl	e5c4 <POINTonE2_tail>
    e9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e9cc:	2b1f      	cmp	r3, #31
    e9ce:	d919      	bls.n	ea04 <POINTonE2s_accumulate+0x31c>
    e9d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e9d2:	930d      	str	r3, [sp, #52]	; 0x34
    e9d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e9d6:	f013 0f01 	tst.w	r3, #1
    e9da:	f47f ae97 	bne.w	e70c <POINTonE2s_accumulate+0x24>
    e9de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e9e0:	0853      	lsrs	r3, r2, #1
    e9e2:	930f      	str	r3, [sp, #60]	; 0x3c
    e9e4:	3b01      	subs	r3, #1
    e9e6:	9310      	str	r3, [sp, #64]	; 0x40
    e9e8:	2a01      	cmp	r2, #1
    e9ea:	d934      	bls.n	ea56 <POINTonE2s_accumulate+0x36e>
    e9ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e9ee:	4611      	mov	r1, r2
    e9f0:	31bc      	adds	r1, #188	; 0xbc
    e9f2:	9103      	str	r1, [sp, #12]
    e9f4:	f502 7a8e 	add.w	sl, r2, #284	; 0x11c
    e9f8:	9306      	str	r3, [sp, #24]
    e9fa:	2300      	movs	r3, #0
    e9fc:	9308      	str	r3, [sp, #32]
    e9fe:	f04f 0b0c 	mov.w	fp, #12
    ea02:	e6eb      	b.n	e7dc <POINTonE2s_accumulate+0xf4>
    ea04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ea06:	930d      	str	r3, [sp, #52]	; 0x34
    ea08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ea0a:	b30b      	cbz	r3, ea50 <POINTonE2s_accumulate+0x368>
    ea0c:	e010      	b.n	ea30 <POINTonE2s_accumulate+0x348>
    ea0e:	bf00      	nop
    ea10:	0001ade8 	.word	0x0001ade8
    ea14:	0001bee0 	.word	0x0001bee0
    ea18:	fffcfffd 	.word	0xfffcfffd
    ea1c:	f504 7390 	add.w	r3, r4, #288	; 0x120
    ea20:	930e      	str	r3, [sp, #56]	; 0x38
    ea22:	462a      	mov	r2, r5
    ea24:	4621      	mov	r1, r4
    ea26:	4618      	mov	r0, r3
    ea28:	f7ff fdcc 	bl	e5c4 <POINTonE2_tail>
    ea2c:	2301      	movs	r3, #1
    ea2e:	930d      	str	r3, [sp, #52]	; 0x34
    ea30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ea32:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    ea36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ea38:	eb05 1444 	add.w	r4, r5, r4, lsl #5
    ea3c:	9e11      	ldr	r6, [sp, #68]	; 0x44
    ea3e:	462a      	mov	r2, r5
    ea40:	f505 7590 	add.w	r5, r5, #288	; 0x120
    ea44:	4631      	mov	r1, r6
    ea46:	4630      	mov	r0, r6
    ea48:	f7fc f930 	bl	acac <POINTonE2_dadd_affine>
    ea4c:	42a5      	cmp	r5, r4
    ea4e:	d1f6      	bne.n	ea3e <POINTonE2s_accumulate+0x356>
    ea50:	b013      	add	sp, #76	; 0x4c
    ea52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    ea58:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    ea5c:	4601      	mov	r1, r0
    ea5e:	f7f7 feaf 	bl	67c0 <reciprocal_fp2>
    ea62:	46a1      	mov	r9, r4
    ea64:	e778      	b.n	e958 <POINTonE2s_accumulate+0x270>

0000ea66 <blst_p2s_add>:
    ea66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea6a:	af00      	add	r7, sp, #0
    ea6c:	4682      	mov	sl, r0
    ea6e:	460d      	mov	r5, r1
    ea70:	4691      	mov	r9, r2
    ea72:	4613      	mov	r3, r2
    ea74:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    ea78:	bf28      	it	cs
    ea7a:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    ea7e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    ea82:	466a      	mov	r2, sp
    ea84:	eba2 1343 	sub.w	r3, r2, r3, lsl #5
    ea88:	469d      	mov	sp, r3
    ea8a:	46eb      	mov	fp, sp
    ea8c:	4603      	mov	r3, r0
    ea8e:	f500 7190 	add.w	r1, r0, #288	; 0x120
    ea92:	2200      	movs	r2, #0
    ea94:	f843 2b04 	str.w	r2, [r3], #4
    ea98:	428b      	cmp	r3, r1
    ea9a:	d1fb      	bne.n	ea94 <blst_p2s_add+0x2e>
    ea9c:	f1b9 0f00 	cmp.w	r9, #0
    eaa0:	d035      	beq.n	eb0e <blst_p2s_add+0xa8>
    eaa2:	2400      	movs	r4, #0
    eaa4:	f1ab 0804 	sub.w	r8, fp, #4
    eaa8:	e01f      	b.n	eaea <blst_p2s_add+0x84>
    eaaa:	34c0      	adds	r4, #192	; 0xc0
    eaac:	1f23      	subs	r3, r4, #4
    eaae:	eb08 020c 	add.w	r2, r8, ip
    eab2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    eab6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    eaba:	f842 1f04 	str.w	r1, [r2, #4]!
    eabe:	4283      	cmp	r3, r0
    eac0:	d1f9      	bne.n	eab6 <blst_p2s_add+0x50>
    eac2:	f10e 0e01 	add.w	lr, lr, #1
    eac6:	f50c 7c90 	add.w	ip, ip, #288	; 0x120
    eaca:	4576      	cmp	r6, lr
    eacc:	d905      	bls.n	eada <blst_p2s_add+0x74>
    eace:	682b      	ldr	r3, [r5, #0]
    ead0:	2b00      	cmp	r3, #0
    ead2:	d0ea      	beq.n	eaaa <blst_p2s_add+0x44>
    ead4:	3504      	adds	r5, #4
    ead6:	461c      	mov	r4, r3
    ead8:	e7e8      	b.n	eaac <blst_p2s_add+0x46>
    eada:	4632      	mov	r2, r6
    eadc:	4659      	mov	r1, fp
    eade:	4650      	mov	r0, sl
    eae0:	f7ff fe02 	bl	e6e8 <POINTonE2s_accumulate>
    eae4:	ebb9 0906 	subs.w	r9, r9, r6
    eae8:	d011      	beq.n	eb0e <blst_p2s_add+0xa8>
    eaea:	464e      	mov	r6, r9
    eaec:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
    eaf0:	bf28      	it	cs
    eaf2:	f44f 6680 	movcs.w	r6, #1024	; 0x400
    eaf6:	f1b9 0f00 	cmp.w	r9, #0
    eafa:	d003      	beq.n	eb04 <blst_p2s_add+0x9e>
    eafc:	f04f 0c00 	mov.w	ip, #0
    eb00:	46e6      	mov	lr, ip
    eb02:	e7e4      	b.n	eace <blst_p2s_add+0x68>
    eb04:	4632      	mov	r2, r6
    eb06:	4659      	mov	r1, fp
    eb08:	4650      	mov	r0, sl
    eb0a:	f7ff fded 	bl	e6e8 <POINTonE2s_accumulate>
    eb0e:	46bd      	mov	sp, r7
    eb10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000eb14 <POINTonE2s_mult_wbits>:
    eb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb18:	b08d      	sub	sp, #52	; 0x34
    eb1a:	af00      	add	r7, sp, #0
    eb1c:	4682      	mov	sl, r0
    eb1e:	60f9      	str	r1, [r7, #12]
    eb20:	4615      	mov	r5, r2
    eb22:	62fb      	str	r3, [r7, #44]	; 0x2c
    eb24:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
    eb26:	f102 38ff 	add.w	r8, r2, #4294967295
    eb2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    eb2c:	2b00      	cmp	r3, #0
    eb2e:	d046      	beq.n	ebbe <POINTonE2s_mult_wbits+0xaa>
    eb30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    eb34:	61fb      	str	r3, [r7, #28]
    eb36:	1df3      	adds	r3, r6, #7
    eb38:	08db      	lsrs	r3, r3, #3
    eb3a:	613b      	str	r3, [r7, #16]
    eb3c:	f8d7 9058 	ldr.w	r9, [r7, #88]	; 0x58
    eb40:	f859 bb04 	ldr.w	fp, [r9], #4
    eb44:	fbb6 f3f5 	udiv	r3, r6, r5
    eb48:	fb05 6113 	mls	r1, r5, r3, r6
    eb4c:	61b9      	str	r1, [r7, #24]
    eb4e:	1c4a      	adds	r2, r1, #1
    eb50:	2301      	movs	r3, #1
    eb52:	4093      	lsls	r3, r2
    eb54:	3b01      	subs	r3, #1
    eb56:	627b      	str	r3, [r7, #36]	; 0x24
    eb58:	1a76      	subs	r6, r6, r1
    eb5a:	1e72      	subs	r2, r6, #1
    eb5c:	62ba      	str	r2, [r7, #40]	; 0x28
    eb5e:	ea22 0406 	bic.w	r4, r2, r6
    eb62:	0fe4      	lsrs	r4, r4, #31
    eb64:	f084 0101 	eor.w	r1, r4, #1
    eb68:	194a      	adds	r2, r1, r5
    eb6a:	1a71      	subs	r1, r6, r1
    eb6c:	4658      	mov	r0, fp
    eb6e:	f7f1 fd93 	bl	698 <get_wval_limb>
    eb72:	40a0      	lsls	r0, r4
    eb74:	4629      	mov	r1, r5
    eb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb78:	4018      	ands	r0, r3
    eb7a:	f7f1 fdaa 	bl	6d2 <booth_encode>
    eb7e:	4603      	mov	r3, r0
    eb80:	462a      	mov	r2, r5
    eb82:	68fc      	ldr	r4, [r7, #12]
    eb84:	4621      	mov	r1, r4
    eb86:	6e38      	ldr	r0, [r7, #96]	; 0x60
    eb88:	f7f5 f87a 	bl	3c80 <POINTonE2_gather_booth_wbits>
    eb8c:	23c0      	movs	r3, #192	; 0xc0
    eb8e:	fa03 f308 	lsl.w	r3, r3, r8
    eb92:	623b      	str	r3, [r7, #32]
    eb94:	eb04 0803 	add.w	r8, r4, r3
    eb98:	4653      	mov	r3, sl
    eb9a:	f50a 7190 	add.w	r1, sl, #288	; 0x120
    eb9e:	2200      	movs	r2, #0
    eba0:	f843 2b04 	str.w	r2, [r3], #4
    eba4:	4299      	cmp	r1, r3
    eba6:	d1fb      	bne.n	eba0 <POINTonE2s_mult_wbits+0x8c>
    eba8:	2e00      	cmp	r6, #0
    ebaa:	d071      	beq.n	ec90 <POINTonE2s_mult_wbits+0x17c>
    ebac:	1c6b      	adds	r3, r5, #1
    ebae:	2601      	movs	r6, #1
    ebb0:	fa06 f303 	lsl.w	r3, r6, r3
    ebb4:	3b01      	subs	r3, #1
    ebb6:	60bb      	str	r3, [r7, #8]
    ebb8:	607b      	str	r3, [r7, #4]
    ebba:	69bb      	ldr	r3, [r7, #24]
    ebbc:	e05b      	b.n	ec76 <POINTonE2s_mult_wbits+0x162>
    ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ebc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    ebc4:	bf28      	it	cs
    ebc6:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    ebca:	61fb      	str	r3, [r7, #28]
    ebcc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    ebd0:	466a      	mov	r2, sp
    ebd2:	eba2 1343 	sub.w	r3, r2, r3, lsl #5
    ebd6:	469d      	mov	sp, r3
    ebd8:	f8c7 d060 	str.w	sp, [r7, #96]	; 0x60
    ebdc:	e7ab      	b.n	eb36 <POINTonE2s_mult_wbits+0x22>
    ebde:	4622      	mov	r2, r4
    ebe0:	4651      	mov	r1, sl
    ebe2:	6978      	ldr	r0, [r7, #20]
    ebe4:	f7ff fd80 	bl	e6e8 <POINTonE2s_accumulate>
    ebe8:	2400      	movs	r4, #0
    ebea:	e01e      	b.n	ec2a <POINTonE2s_mult_wbits+0x116>
    ebec:	693b      	ldr	r3, [r7, #16]
    ebee:	449b      	add	fp, r3
    ebf0:	69ba      	ldr	r2, [r7, #24]
    ebf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ebf4:	4658      	mov	r0, fp
    ebf6:	f7f1 fd4f 	bl	698 <get_wval_limb>
    ebfa:	4629      	mov	r1, r5
    ebfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ebfe:	4018      	ands	r0, r3
    ec00:	f7f1 fd67 	bl	6d2 <booth_encode>
    ec04:	4603      	mov	r3, r0
    ec06:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    ec0a:	462a      	mov	r2, r5
    ec0c:	4641      	mov	r1, r8
    ec0e:	eb0a 1040 	add.w	r0, sl, r0, lsl #5
    ec12:	f7f5 f835 	bl	3c80 <POINTonE2_gather_booth_wbits>
    ec16:	3601      	adds	r6, #1
    ec18:	3401      	adds	r4, #1
    ec1a:	6a3b      	ldr	r3, [r7, #32]
    ec1c:	4498      	add	r8, r3
    ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec20:	42b3      	cmp	r3, r6
    ec22:	d00a      	beq.n	ec3a <POINTonE2s_mult_wbits+0x126>
    ec24:	69fb      	ldr	r3, [r7, #28]
    ec26:	42a3      	cmp	r3, r4
    ec28:	d0d9      	beq.n	ebde <POINTonE2s_mult_wbits+0xca>
    ec2a:	f8d9 3000 	ldr.w	r3, [r9]
    ec2e:	2b00      	cmp	r3, #0
    ec30:	d0dc      	beq.n	ebec <POINTonE2s_mult_wbits+0xd8>
    ec32:	f109 0904 	add.w	r9, r9, #4
    ec36:	469b      	mov	fp, r3
    ec38:	e7da      	b.n	ebf0 <POINTonE2s_mult_wbits+0xdc>
    ec3a:	f8d7 a014 	ldr.w	sl, [r7, #20]
    ec3e:	4622      	mov	r2, r4
    ec40:	6e39      	ldr	r1, [r7, #96]	; 0x60
    ec42:	4650      	mov	r0, sl
    ec44:	f7ff fd50 	bl	e6e8 <POINTonE2s_accumulate>
    ec48:	b13d      	cbz	r5, ec5a <POINTonE2s_mult_wbits+0x146>
    ec4a:	2400      	movs	r4, #0
    ec4c:	4651      	mov	r1, sl
    ec4e:	4650      	mov	r0, sl
    ec50:	f7fc f9d0 	bl	aff4 <POINTonE2_double>
    ec54:	3401      	adds	r4, #1
    ec56:	42a5      	cmp	r5, r4
    ec58:	d1f8      	bne.n	ec4c <POINTonE2s_mult_wbits+0x138>
    ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec5c:	1b5b      	subs	r3, r3, r5
    ec5e:	62bb      	str	r3, [r7, #40]	; 0x28
    ec60:	2600      	movs	r6, #0
    ec62:	f1b3 3fff 	cmp.w	r3, #4294967295
    ec66:	d01b      	beq.n	eca0 <POINTonE2s_mult_wbits+0x18c>
    ec68:	f8d7 800c 	ldr.w	r8, [r7, #12]
    ec6c:	f8d7 9058 	ldr.w	r9, [r7, #88]	; 0x58
    ec70:	462b      	mov	r3, r5
    ec72:	687a      	ldr	r2, [r7, #4]
    ec74:	627a      	str	r2, [r7, #36]	; 0x24
    ec76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ec78:	42b2      	cmp	r2, r6
    ec7a:	bf98      	it	ls
    ec7c:	4634      	movls	r4, r6
    ec7e:	d9de      	bls.n	ec3e <POINTonE2s_mult_wbits+0x12a>
    ec80:	4634      	mov	r4, r6
    ec82:	3301      	adds	r3, #1
    ec84:	61bb      	str	r3, [r7, #24]
    ec86:	f8c7 a014 	str.w	sl, [r7, #20]
    ec8a:	f8d7 a060 	ldr.w	sl, [r7, #96]	; 0x60
    ec8e:	e7c9      	b.n	ec24 <POINTonE2s_mult_wbits+0x110>
    ec90:	f8c7 800c 	str.w	r8, [r7, #12]
    ec94:	f8c7 9058 	str.w	r9, [r7, #88]	; 0x58
    ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ec9a:	60bb      	str	r3, [r7, #8]
    ec9c:	2601      	movs	r6, #1
    ec9e:	e000      	b.n	eca2 <POINTonE2s_mult_wbits+0x18e>
    eca0:	2600      	movs	r6, #0
    eca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eca4:	42b3      	cmp	r3, r6
    eca6:	d944      	bls.n	ed32 <POINTonE2s_mult_wbits+0x21e>
    eca8:	4634      	mov	r4, r6
    ecaa:	f04f 0800 	mov.w	r8, #0
    ecae:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
    ecb2:	f8d7 900c 	ldr.w	r9, [r7, #12]
    ecb6:	f8d7 a058 	ldr.w	sl, [r7, #88]	; 0x58
    ecba:	e024      	b.n	ed06 <POINTonE2s_mult_wbits+0x1f2>
    ecbc:	4622      	mov	r2, r4
    ecbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
    ecc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ecc2:	f7ff fd11 	bl	e6e8 <POINTonE2s_accumulate>
    ecc6:	2400      	movs	r4, #0
    ecc8:	e020      	b.n	ed0c <POINTonE2s_mult_wbits+0x1f8>
    ecca:	693b      	ldr	r3, [r7, #16]
    eccc:	449b      	add	fp, r3
    ecce:	462a      	mov	r2, r5
    ecd0:	4641      	mov	r1, r8
    ecd2:	4658      	mov	r0, fp
    ecd4:	f7f1 fce0 	bl	698 <get_wval_limb>
    ecd8:	4629      	mov	r1, r5
    ecda:	68bb      	ldr	r3, [r7, #8]
    ecdc:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    ece0:	f7f1 fcf7 	bl	6d2 <booth_encode>
    ece4:	4603      	mov	r3, r0
    ece6:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
    ecea:	462a      	mov	r2, r5
    ecec:	4649      	mov	r1, r9
    ecee:	6e38      	ldr	r0, [r7, #96]	; 0x60
    ecf0:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    ecf4:	f7f4 ffc4 	bl	3c80 <POINTonE2_gather_booth_wbits>
    ecf8:	3601      	adds	r6, #1
    ecfa:	3401      	adds	r4, #1
    ecfc:	6a3b      	ldr	r3, [r7, #32]
    ecfe:	4499      	add	r9, r3
    ed00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed02:	42b3      	cmp	r3, r6
    ed04:	d00a      	beq.n	ed1c <POINTonE2s_mult_wbits+0x208>
    ed06:	69fb      	ldr	r3, [r7, #28]
    ed08:	42a3      	cmp	r3, r4
    ed0a:	d0d7      	beq.n	ecbc <POINTonE2s_mult_wbits+0x1a8>
    ed0c:	f8da 3000 	ldr.w	r3, [sl]
    ed10:	2b00      	cmp	r3, #0
    ed12:	d0da      	beq.n	ecca <POINTonE2s_mult_wbits+0x1b6>
    ed14:	f10a 0a04 	add.w	sl, sl, #4
    ed18:	469b      	mov	fp, r3
    ed1a:	e7d8      	b.n	ecce <POINTonE2s_mult_wbits+0x1ba>
    ed1c:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
    ed20:	4622      	mov	r2, r4
    ed22:	6e39      	ldr	r1, [r7, #96]	; 0x60
    ed24:	4650      	mov	r0, sl
    ed26:	f7ff fcdf 	bl	e6e8 <POINTonE2s_accumulate>
    ed2a:	3734      	adds	r7, #52	; 0x34
    ed2c:	46bd      	mov	sp, r7
    ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed32:	4634      	mov	r4, r6
    ed34:	e7f4      	b.n	ed20 <POINTonE2s_mult_wbits+0x20c>

0000ed36 <blst_p2s_mult_wbits>:
    ed36:	b510      	push	{r4, lr}
    ed38:	b084      	sub	sp, #16
    ed3a:	9c08      	ldr	r4, [sp, #32]
    ed3c:	9402      	str	r4, [sp, #8]
    ed3e:	9c07      	ldr	r4, [sp, #28]
    ed40:	9401      	str	r4, [sp, #4]
    ed42:	9c06      	ldr	r4, [sp, #24]
    ed44:	9400      	str	r4, [sp, #0]
    ed46:	f7ff fee5 	bl	eb14 <POINTonE2s_mult_wbits>
    ed4a:	b004      	add	sp, #16
    ed4c:	bd10      	pop	{r4, pc}

0000ed4e <blst_p2s_to_affine>:
    ed4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed52:	b0bb      	sub	sp, #236	; 0xec
    ed54:	9103      	str	r1, [sp, #12]
    ed56:	9204      	str	r2, [sp, #16]
    ed58:	2a00      	cmp	r2, #0
    ed5a:	f000 80fa 	beq.w	ef52 <blst_p2s_to_affine+0x204>
    ed5e:	4680      	mov	r8, r0
    ed60:	2400      	movs	r4, #0
    ed62:	f8df a1f4 	ldr.w	sl, [pc, #500]	; ef58 <blst_p2s_to_affine+0x20a>
    ed66:	f8df b1f4 	ldr.w	fp, [pc, #500]	; ef5c <blst_p2s_to_affine+0x20e>
    ed6a:	e0cf      	b.n	ef0c <blst_p2s_to_affine+0x1be>
    ed6c:	f504 7590 	add.w	r5, r4, #288	; 0x120
    ed70:	e0da      	b.n	ef28 <blst_p2s_to_affine+0x1da>
    ed72:	f505 7590 	add.w	r5, r5, #288	; 0x120
    ed76:	f8cd b000 	str.w	fp, [sp]
    ed7a:	4653      	mov	r3, sl
    ed7c:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
    ed80:	f1a6 0160 	sub.w	r1, r6, #96	; 0x60
    ed84:	4630      	mov	r0, r6
    ed86:	f7f6 fa0d 	bl	51a4 <mul_mont_384x>
    ed8a:	3701      	adds	r7, #1
    ed8c:	3660      	adds	r6, #96	; 0x60
    ed8e:	45b9      	cmp	r9, r7
    ed90:	d91a      	bls.n	edc8 <blst_p2s_to_affine+0x7a>
    ed92:	9a03      	ldr	r2, [sp, #12]
    ed94:	6813      	ldr	r3, [r2, #0]
    ed96:	2b00      	cmp	r3, #0
    ed98:	d0eb      	beq.n	ed72 <blst_p2s_to_affine+0x24>
    ed9a:	3204      	adds	r2, #4
    ed9c:	9203      	str	r2, [sp, #12]
    ed9e:	461d      	mov	r5, r3
    eda0:	e7e9      	b.n	ed76 <blst_p2s_to_affine+0x28>
    eda2:	4641      	mov	r1, r8
    eda4:	4640      	mov	r0, r8
    eda6:	f7f7 fd0b 	bl	67c0 <reciprocal_fp2>
    edaa:	f109 34ff 	add.w	r4, r9, #4294967295
    edae:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    edb2:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    edb6:	b90c      	cbnz	r4, edbc <blst_p2s_to_affine+0x6e>
    edb8:	462c      	mov	r4, r5
    edba:	e07e      	b.n	eeba <blst_p2s_to_affine+0x16c>
    edbc:	9b03      	ldr	r3, [sp, #12]
    edbe:	3b04      	subs	r3, #4
    edc0:	4619      	mov	r1, r3
    edc2:	f8cd 8014 	str.w	r8, [sp, #20]
    edc6:	e017      	b.n	edf8 <blst_p2s_to_affine+0xaa>
    edc8:	464b      	mov	r3, r9
    edca:	2b02      	cmp	r3, #2
    edcc:	bf38      	it	cc
    edce:	2302      	movcc	r3, #2
    edd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    edd4:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    edd8:	f1a4 03c0 	sub.w	r3, r4, #192	; 0xc0
    eddc:	4619      	mov	r1, r3
    edde:	9305      	str	r3, [sp, #20]
    ede0:	4618      	mov	r0, r3
    ede2:	f7f7 fced 	bl	67c0 <reciprocal_fp2>
    ede6:	9b03      	ldr	r3, [sp, #12]
    ede8:	3b04      	subs	r3, #4
    edea:	4619      	mov	r1, r3
    edec:	f109 34ff 	add.w	r4, r9, #4294967295
    edf0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    edf4:	eb08 1686 	add.w	r6, r8, r6, lsl #6
    edf8:	462f      	mov	r7, r5
    edfa:	f8dd 8014 	ldr.w	r8, [sp, #20]
    edfe:	2300      	movs	r3, #0
    ee00:	9306      	str	r3, [sp, #24]
    ee02:	9508      	str	r5, [sp, #32]
    ee04:	9609      	str	r6, [sp, #36]	; 0x24
    ee06:	460d      	mov	r5, r1
    ee08:	4642      	mov	r2, r8
    ee0a:	f1a8 0860 	sub.w	r8, r8, #96	; 0x60
    ee0e:	f8cd b000 	str.w	fp, [sp]
    ee12:	4653      	mov	r3, sl
    ee14:	9207      	str	r2, [sp, #28]
    ee16:	4641      	mov	r1, r8
    ee18:	4640      	mov	r0, r8
    ee1a:	f7f6 f9c3 	bl	51a4 <mul_mont_384x>
    ee1e:	465b      	mov	r3, fp
    ee20:	4652      	mov	r2, sl
    ee22:	4641      	mov	r1, r8
    ee24:	a80a      	add	r0, sp, #40	; 0x28
    ee26:	f7fa fbb9 	bl	959c <sqr_mont_384x>
    ee2a:	f8cd b000 	str.w	fp, [sp]
    ee2e:	4653      	mov	r3, sl
    ee30:	4642      	mov	r2, r8
    ee32:	a90a      	add	r1, sp, #40	; 0x28
    ee34:	a822      	add	r0, sp, #136	; 0x88
    ee36:	f7f6 f9b5 	bl	51a4 <mul_mont_384x>
    ee3a:	f8cd b000 	str.w	fp, [sp]
    ee3e:	4653      	mov	r3, sl
    ee40:	9a07      	ldr	r2, [sp, #28]
    ee42:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    ee46:	4640      	mov	r0, r8
    ee48:	f7f6 f9ac 	bl	51a4 <mul_mont_384x>
    ee4c:	f8cd b000 	str.w	fp, [sp]
    ee50:	4653      	mov	r3, sl
    ee52:	aa0a      	add	r2, sp, #40	; 0x28
    ee54:	4639      	mov	r1, r7
    ee56:	4630      	mov	r0, r6
    ee58:	f7f6 f9a4 	bl	51a4 <mul_mont_384x>
    ee5c:	f8cd b000 	str.w	fp, [sp]
    ee60:	4653      	mov	r3, sl
    ee62:	aa22      	add	r2, sp, #136	; 0x88
    ee64:	f107 0160 	add.w	r1, r7, #96	; 0x60
    ee68:	f106 0060 	add.w	r0, r6, #96	; 0x60
    ee6c:	f7f6 f99a 	bl	51a4 <mul_mont_384x>
    ee70:	682b      	ldr	r3, [r5, #0]
    ee72:	42bb      	cmp	r3, r7
    ee74:	bf06      	itte	eq
    ee76:	f855 7c04 	ldreq.w	r7, [r5, #-4]
    ee7a:	3d04      	subeq	r5, #4
    ee7c:	f5a7 7790 	subne.w	r7, r7, #288	; 0x120
    ee80:	9b06      	ldr	r3, [sp, #24]
    ee82:	3301      	adds	r3, #1
    ee84:	9306      	str	r3, [sp, #24]
    ee86:	3ec0      	subs	r6, #192	; 0xc0
    ee88:	42a3      	cmp	r3, r4
    ee8a:	d3bd      	bcc.n	ee08 <blst_p2s_to_affine+0xba>
    ee8c:	9d08      	ldr	r5, [sp, #32]
    ee8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ee90:	eba4 0884 	sub.w	r8, r4, r4, lsl #2
    ee94:	ea4f 1848 	mov.w	r8, r8, lsl #5
    ee98:	2c00      	cmp	r4, #0
    ee9a:	bf08      	it	eq
    ee9c:	f06f 085f 	mvneq.w	r8, #95	; 0x5f
    eea0:	9b05      	ldr	r3, [sp, #20]
    eea2:	4443      	add	r3, r8
    eea4:	4698      	mov	r8, r3
    eea6:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
    eeaa:	ea4f 1484 	mov.w	r4, r4, lsl #6
    eeae:	bf08      	it	eq
    eeb0:	f06f 04bf 	mvneq.w	r4, #191	; 0xbf
    eeb4:	4426      	add	r6, r4
    eeb6:	462c      	mov	r4, r5
    eeb8:	463d      	mov	r5, r7
    eeba:	465b      	mov	r3, fp
    eebc:	4652      	mov	r2, sl
    eebe:	4641      	mov	r1, r8
    eec0:	a80a      	add	r0, sp, #40	; 0x28
    eec2:	f7fa fb6b 	bl	959c <sqr_mont_384x>
    eec6:	f8cd b000 	str.w	fp, [sp]
    eeca:	4653      	mov	r3, sl
    eecc:	4642      	mov	r2, r8
    eece:	a90a      	add	r1, sp, #40	; 0x28
    eed0:	a822      	add	r0, sp, #136	; 0x88
    eed2:	f7f6 f967 	bl	51a4 <mul_mont_384x>
    eed6:	f8cd b000 	str.w	fp, [sp]
    eeda:	4653      	mov	r3, sl
    eedc:	aa0a      	add	r2, sp, #40	; 0x28
    eede:	4629      	mov	r1, r5
    eee0:	4630      	mov	r0, r6
    eee2:	f7f6 f95f 	bl	51a4 <mul_mont_384x>
    eee6:	f8cd b000 	str.w	fp, [sp]
    eeea:	4653      	mov	r3, sl
    eeec:	aa22      	add	r2, sp, #136	; 0x88
    eeee:	f105 0160 	add.w	r1, r5, #96	; 0x60
    eef2:	f106 0060 	add.w	r0, r6, #96	; 0x60
    eef6:	f7f6 f955 	bl	51a4 <mul_mont_384x>
    eefa:	eb09 0849 	add.w	r8, r9, r9, lsl #1
    eefe:	eb06 1888 	add.w	r8, r6, r8, lsl #6
    ef02:	9b04      	ldr	r3, [sp, #16]
    ef04:	ebb3 0309 	subs.w	r3, r3, r9
    ef08:	9304      	str	r3, [sp, #16]
    ef0a:	d022      	beq.n	ef52 <blst_p2s_to_affine+0x204>
    ef0c:	9b04      	ldr	r3, [sp, #16]
    ef0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    ef12:	bf28      	it	cs
    ef14:	f44f 7340 	movcs.w	r3, #768	; 0x300
    ef18:	4699      	mov	r9, r3
    ef1a:	9b03      	ldr	r3, [sp, #12]
    ef1c:	681d      	ldr	r5, [r3, #0]
    ef1e:	2d00      	cmp	r5, #0
    ef20:	f43f af24 	beq.w	ed6c <blst_p2s_to_affine+0x1e>
    ef24:	3304      	adds	r3, #4
    ef26:	9303      	str	r3, [sp, #12]
    ef28:	f108 0460 	add.w	r4, r8, #96	; 0x60
    ef2c:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
    ef30:	f1a8 0204 	sub.w	r2, r8, #4
    ef34:	f505 718e 	add.w	r1, r5, #284	; 0x11c
    ef38:	f853 0f04 	ldr.w	r0, [r3, #4]!
    ef3c:	f842 0f04 	str.w	r0, [r2, #4]!
    ef40:	428b      	cmp	r3, r1
    ef42:	d1f9      	bne.n	ef38 <blst_p2s_to_affine+0x1ea>
    ef44:	9b04      	ldr	r3, [sp, #16]
    ef46:	2b01      	cmp	r3, #1
    ef48:	f67f af2b 	bls.w	eda2 <blst_p2s_to_affine+0x54>
    ef4c:	4626      	mov	r6, r4
    ef4e:	2701      	movs	r7, #1
    ef50:	e71f      	b.n	ed92 <blst_p2s_to_affine+0x44>
    ef52:	b03b      	add	sp, #236	; 0xec
    ef54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef58:	0001ade8 	.word	0x0001ade8
    ef5c:	fffcfffd 	.word	0xfffcfffd

0000ef60 <POINTonE2s_to_affine_row_wbits>:
    ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef64:	b0bb      	sub	sp, #236	; 0xec
    ef66:	9004      	str	r0, [sp, #16]
    ef68:	469a      	mov	sl, r3
    ef6a:	3a01      	subs	r2, #1
    ef6c:	9208      	str	r2, [sp, #32]
    ef6e:	2301      	movs	r3, #1
    ef70:	fa03 fb02 	lsl.w	fp, r3, r2
    ef74:	fa0a f302 	lsl.w	r3, sl, r2
    ef78:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    ef7c:	eb01 1243 	add.w	r2, r1, r3, lsl #5
    ef80:	9202      	str	r2, [sp, #8]
    ef82:	f102 0960 	add.w	r9, r2, #96	; 0x60
    ef86:	4863      	ldr	r0, [pc, #396]	; (f114 <POINTonE2s_to_affine_row_wbits+0x1b4>)
    ef88:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    ef8c:	3a04      	subs	r2, #4
    ef8e:	30bc      	adds	r0, #188	; 0xbc
    ef90:	f853 1f04 	ldr.w	r1, [r3, #4]!
    ef94:	f842 1f04 	str.w	r1, [r2, #4]!
    ef98:	4283      	cmp	r3, r0
    ef9a:	d1f9      	bne.n	ef90 <POINTonE2s_to_affine_row_wbits+0x30>
    ef9c:	f1ba 0f00 	cmp.w	sl, #0
    efa0:	f000 8096 	beq.w	f0d0 <POINTonE2s_to_affine_row_wbits+0x170>
    efa4:	4b5c      	ldr	r3, [pc, #368]	; (f118 <POINTonE2s_to_affine_row_wbits+0x1b8>)
    efa6:	9a08      	ldr	r2, [sp, #32]
    efa8:	4093      	lsls	r3, r2
    efaa:	9307      	str	r3, [sp, #28]
    efac:	2360      	movs	r3, #96	; 0x60
    efae:	4093      	lsls	r3, r2
    efb0:	3b60      	subs	r3, #96	; 0x60
    efb2:	9306      	str	r3, [sp, #24]
    efb4:	2300      	movs	r3, #0
    efb6:	9303      	str	r3, [sp, #12]
    efb8:	f8df 8158 	ldr.w	r8, [pc, #344]	; f114 <POINTonE2s_to_affine_row_wbits+0x1b4>
    efbc:	4f57      	ldr	r7, [pc, #348]	; (f11c <POINTonE2s_to_affine_row_wbits+0x1bc>)
    efbe:	f8cd a014 	str.w	sl, [sp, #20]
    efc2:	f8dd a008 	ldr.w	sl, [sp, #8]
    efc6:	e019      	b.n	effc <POINTonE2s_to_affine_row_wbits+0x9c>
    efc8:	f1aa 0660 	sub.w	r6, sl, #96	; 0x60
    efcc:	464c      	mov	r4, r9
    efce:	9700      	str	r7, [sp, #0]
    efd0:	4643      	mov	r3, r8
    efd2:	4632      	mov	r2, r6
    efd4:	f1a4 0160 	sub.w	r1, r4, #96	; 0x60
    efd8:	4620      	mov	r0, r4
    efda:	f7f6 f8e3 	bl	51a4 <mul_mont_384x>
    efde:	3460      	adds	r4, #96	; 0x60
    efe0:	f5a6 7690 	sub.w	r6, r6, #288	; 0x120
    efe4:	3d01      	subs	r5, #1
    efe6:	d1f2      	bne.n	efce <POINTonE2s_to_affine_row_wbits+0x6e>
    efe8:	9b07      	ldr	r3, [sp, #28]
    efea:	449a      	add	sl, r3
    efec:	9b06      	ldr	r3, [sp, #24]
    efee:	4499      	add	r9, r3
    eff0:	9b03      	ldr	r3, [sp, #12]
    eff2:	3301      	adds	r3, #1
    eff4:	9a05      	ldr	r2, [sp, #20]
    eff6:	429a      	cmp	r2, r3
    eff8:	d071      	beq.n	f0de <POINTonE2s_to_affine_row_wbits+0x17e>
    effa:	9303      	str	r3, [sp, #12]
    effc:	f5aa 7390 	sub.w	r3, sl, #288	; 0x120
    f000:	f1bb 0501 	subs.w	r5, fp, #1
    f004:	bf08      	it	eq
    f006:	469a      	moveq	sl, r3
    f008:	d1de      	bne.n	efc8 <POINTonE2s_to_affine_row_wbits+0x68>
    f00a:	e7f1      	b.n	eff0 <POINTonE2s_to_affine_row_wbits+0x90>
    f00c:	9702      	str	r7, [sp, #8]
    f00e:	f8cd 8010 	str.w	r8, [sp, #16]
    f012:	9a06      	ldr	r2, [sp, #24]
    f014:	1c53      	adds	r3, r2, #1
    f016:	9903      	ldr	r1, [sp, #12]
    f018:	4291      	cmp	r1, r2
    f01a:	d05d      	beq.n	f0d8 <POINTonE2s_to_affine_row_wbits+0x178>
    f01c:	9306      	str	r3, [sp, #24]
    f01e:	9a04      	ldr	r2, [sp, #16]
    f020:	f102 08c0 	add.w	r8, r2, #192	; 0xc0
    f024:	9902      	ldr	r1, [sp, #8]
    f026:	f501 7790 	add.w	r7, r1, #288	; 0x120
    f02a:	1f0b      	subs	r3, r1, #4
    f02c:	3a04      	subs	r2, #4
    f02e:	f101 00bc 	add.w	r0, r1, #188	; 0xbc
    f032:	f853 1f04 	ldr.w	r1, [r3, #4]!
    f036:	f842 1f04 	str.w	r1, [r2, #4]!
    f03a:	4283      	cmp	r3, r0
    f03c:	d1f9      	bne.n	f032 <POINTonE2s_to_affine_row_wbits+0xd2>
    f03e:	f1bb 0f01 	cmp.w	fp, #1
    f042:	d9e3      	bls.n	f00c <POINTonE2s_to_affine_row_wbits+0xac>
    f044:	9c05      	ldr	r4, [sp, #20]
    f046:	f04f 0901 	mov.w	r9, #1
    f04a:	46a2      	mov	sl, r4
    f04c:	3c60      	subs	r4, #96	; 0x60
    f04e:	9500      	str	r5, [sp, #0]
    f050:	4633      	mov	r3, r6
    f052:	4652      	mov	r2, sl
    f054:	4621      	mov	r1, r4
    f056:	4620      	mov	r0, r4
    f058:	f7f6 f8a4 	bl	51a4 <mul_mont_384x>
    f05c:	462b      	mov	r3, r5
    f05e:	4632      	mov	r2, r6
    f060:	4621      	mov	r1, r4
    f062:	a822      	add	r0, sp, #136	; 0x88
    f064:	f7fa fa9a 	bl	959c <sqr_mont_384x>
    f068:	9500      	str	r5, [sp, #0]
    f06a:	4633      	mov	r3, r6
    f06c:	4622      	mov	r2, r4
    f06e:	a922      	add	r1, sp, #136	; 0x88
    f070:	a80a      	add	r0, sp, #40	; 0x28
    f072:	f7f6 f897 	bl	51a4 <mul_mont_384x>
    f076:	9500      	str	r5, [sp, #0]
    f078:	4633      	mov	r3, r6
    f07a:	4652      	mov	r2, sl
    f07c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    f080:	4620      	mov	r0, r4
    f082:	f7f6 f88f 	bl	51a4 <mul_mont_384x>
    f086:	9500      	str	r5, [sp, #0]
    f088:	4633      	mov	r3, r6
    f08a:	aa22      	add	r2, sp, #136	; 0x88
    f08c:	4639      	mov	r1, r7
    f08e:	4640      	mov	r0, r8
    f090:	f7f6 f888 	bl	51a4 <mul_mont_384x>
    f094:	9500      	str	r5, [sp, #0]
    f096:	4633      	mov	r3, r6
    f098:	aa0a      	add	r2, sp, #40	; 0x28
    f09a:	f107 0160 	add.w	r1, r7, #96	; 0x60
    f09e:	f108 0060 	add.w	r0, r8, #96	; 0x60
    f0a2:	f7f6 f87f 	bl	51a4 <mul_mont_384x>
    f0a6:	f109 0901 	add.w	r9, r9, #1
    f0aa:	f507 7790 	add.w	r7, r7, #288	; 0x120
    f0ae:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
    f0b2:	45cb      	cmp	fp, r9
    f0b4:	d1c9      	bne.n	f04a <POINTonE2s_to_affine_row_wbits+0xea>
    f0b6:	9b05      	ldr	r3, [sp, #20]
    f0b8:	9a07      	ldr	r2, [sp, #28]
    f0ba:	4413      	add	r3, r2
    f0bc:	9305      	str	r3, [sp, #20]
    f0be:	9b02      	ldr	r3, [sp, #8]
    f0c0:	9a08      	ldr	r2, [sp, #32]
    f0c2:	4413      	add	r3, r2
    f0c4:	9302      	str	r3, [sp, #8]
    f0c6:	9b04      	ldr	r3, [sp, #16]
    f0c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f0ca:	4413      	add	r3, r2
    f0cc:	9304      	str	r3, [sp, #16]
    f0ce:	e7a0      	b.n	f012 <POINTonE2s_to_affine_row_wbits+0xb2>
    f0d0:	9902      	ldr	r1, [sp, #8]
    f0d2:	4608      	mov	r0, r1
    f0d4:	f7f7 fb74 	bl	67c0 <reciprocal_fp2>
    f0d8:	b03b      	add	sp, #236	; 0xec
    f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0de:	f8cd a008 	str.w	sl, [sp, #8]
    f0e2:	f1a9 0360 	sub.w	r3, r9, #96	; 0x60
    f0e6:	4619      	mov	r1, r3
    f0e8:	9305      	str	r3, [sp, #20]
    f0ea:	4618      	mov	r0, r3
    f0ec:	f7f7 fb68 	bl	67c0 <reciprocal_fp2>
    f0f0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
    f0f4:	9a08      	ldr	r2, [sp, #32]
    f0f6:	4093      	lsls	r3, r2
    f0f8:	3360      	adds	r3, #96	; 0x60
    f0fa:	9307      	str	r3, [sp, #28]
    f0fc:	f44f 7390 	mov.w	r3, #288	; 0x120
    f100:	4093      	lsls	r3, r2
    f102:	9308      	str	r3, [sp, #32]
    f104:	23c0      	movs	r3, #192	; 0xc0
    f106:	4093      	lsls	r3, r2
    f108:	9309      	str	r3, [sp, #36]	; 0x24
    f10a:	2300      	movs	r3, #0
    f10c:	9306      	str	r3, [sp, #24]
    f10e:	4e01      	ldr	r6, [pc, #4]	; (f114 <POINTonE2s_to_affine_row_wbits+0x1b4>)
    f110:	4d02      	ldr	r5, [pc, #8]	; (f11c <POINTonE2s_to_affine_row_wbits+0x1bc>)
    f112:	e784      	b.n	f01e <POINTonE2s_to_affine_row_wbits+0xbe>
    f114:	0001ade8 	.word	0x0001ade8
    f118:	fffffee0 	.word	0xfffffee0
    f11c:	fffcfffd 	.word	0xfffcfffd

0000f120 <POINTonE2s_precompute_wbits>:
    f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f124:	b089      	sub	sp, #36	; 0x24
    f126:	af00      	add	r7, sp, #0
    f128:	60b8      	str	r0, [r7, #8]
    f12a:	468a      	mov	sl, r1
    f12c:	4616      	mov	r6, r2
    f12e:	61bb      	str	r3, [r7, #24]
    f130:	1e4a      	subs	r2, r1, #1
    f132:	613a      	str	r2, [r7, #16]
    f134:	4093      	lsls	r3, r2
    f136:	607b      	str	r3, [r7, #4]
    f138:	2909      	cmp	r1, #9
    f13a:	bf9d      	ittte	ls
    f13c:	f1c1 0309 	rsbls	r3, r1, #9
    f140:	2201      	movls	r2, #1
    f142:	fa02 f303 	lslls.w	r3, r2, r3
    f146:	2301      	movhi	r3, #1
    f148:	60fb      	str	r3, [r7, #12]
    f14a:	f640 29aa 	movw	r9, #2730	; 0xaaa
    f14e:	fa29 f901 	lsr.w	r9, r9, r1
    f152:	f1b9 0f01 	cmp.w	r9, #1
    f156:	bf38      	it	cc
    f158:	f04f 0901 	movcc.w	r9, #1
    f15c:	68fb      	ldr	r3, [r7, #12]
    f15e:	69ba      	ldr	r2, [r7, #24]
    f160:	4293      	cmp	r3, r2
    f162:	d84f      	bhi.n	f204 <POINTonE2s_precompute_wbits+0xe4>
    f164:	f44f 7390 	mov.w	r3, #288	; 0x120
    f168:	693a      	ldr	r2, [r7, #16]
    f16a:	fa03 fb02 	lsl.w	fp, r3, r2
    f16e:	f04f 0800 	mov.w	r8, #0
    f172:	f8c7 801c 	str.w	r8, [r7, #28]
    f176:	e01c      	b.n	f1b2 <POINTonE2s_precompute_wbits+0x92>
    f178:	69fb      	ldr	r3, [r7, #28]
    f17a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f17e:	68ba      	ldr	r2, [r7, #8]
    f180:	eb02 1383 	add.w	r3, r2, r3, lsl #6
    f184:	617b      	str	r3, [r7, #20]
    f186:	f1b9 0f00 	cmp.w	r9, #0
    f18a:	d127      	bne.n	f1dc <POINTonE2s_precompute_wbits+0xbc>
    f18c:	464b      	mov	r3, r9
    f18e:	4652      	mov	r2, sl
    f190:	6979      	ldr	r1, [r7, #20]
    f192:	4608      	mov	r0, r1
    f194:	f7ff fee4 	bl	ef60 <POINTonE2s_to_affine_row_wbits>
    f198:	693b      	ldr	r3, [r7, #16]
    f19a:	fa09 f303 	lsl.w	r3, r9, r3
    f19e:	69fa      	ldr	r2, [r7, #28]
    f1a0:	441a      	add	r2, r3
    f1a2:	61fa      	str	r2, [r7, #28]
    f1a4:	69bb      	ldr	r3, [r7, #24]
    f1a6:	eba3 0309 	sub.w	r3, r3, r9
    f1aa:	61bb      	str	r3, [r7, #24]
    f1ac:	68fa      	ldr	r2, [r7, #12]
    f1ae:	429a      	cmp	r2, r3
    f1b0:	d82c      	bhi.n	f20c <POINTonE2s_precompute_wbits+0xec>
    f1b2:	687b      	ldr	r3, [r7, #4]
    f1b4:	69ba      	ldr	r2, [r7, #24]
    f1b6:	1a9a      	subs	r2, r3, r2
    f1b8:	fa09 f30a 	lsl.w	r3, r9, sl
    f1bc:	69f9      	ldr	r1, [r7, #28]
    f1be:	440b      	add	r3, r1
    f1c0:	4293      	cmp	r3, r2
    f1c2:	d9d9      	bls.n	f178 <POINTonE2s_precompute_wbits+0x58>
    f1c4:	eba2 0901 	sub.w	r9, r2, r1
    f1c8:	fa39 f90a 	lsrs.w	r9, r9, sl
    f1cc:	d01e      	beq.n	f20c <POINTonE2s_precompute_wbits+0xec>
    f1ce:	69fb      	ldr	r3, [r7, #28]
    f1d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f1d4:	68ba      	ldr	r2, [r7, #8]
    f1d6:	eb02 1383 	add.w	r3, r2, r3, lsl #6
    f1da:	617b      	str	r3, [r7, #20]
    f1dc:	697d      	ldr	r5, [r7, #20]
    f1de:	2400      	movs	r4, #0
    f1e0:	e00a      	b.n	f1f8 <POINTonE2s_precompute_wbits+0xd8>
    f1e2:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
    f1e6:	4642      	mov	r2, r8
    f1e8:	4651      	mov	r1, sl
    f1ea:	4628      	mov	r0, r5
    f1ec:	f7fc fb3e 	bl	b86c <POINTonE2_precompute_row_wbits>
    f1f0:	3401      	adds	r4, #1
    f1f2:	445d      	add	r5, fp
    f1f4:	454c      	cmp	r4, r9
    f1f6:	d2c9      	bcs.n	f18c <POINTonE2s_precompute_wbits+0x6c>
    f1f8:	6833      	ldr	r3, [r6, #0]
    f1fa:	2b00      	cmp	r3, #0
    f1fc:	d0f1      	beq.n	f1e2 <POINTonE2s_precompute_wbits+0xc2>
    f1fe:	3604      	adds	r6, #4
    f200:	4698      	mov	r8, r3
    f202:	e7f0      	b.n	f1e6 <POINTonE2s_precompute_wbits+0xc6>
    f204:	f04f 0800 	mov.w	r8, #0
    f208:	f8c7 801c 	str.w	r8, [r7, #28]
    f20c:	69ba      	ldr	r2, [r7, #24]
    f20e:	4613      	mov	r3, r2
    f210:	6939      	ldr	r1, [r7, #16]
    f212:	408b      	lsls	r3, r1
    f214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f218:	4668      	mov	r0, sp
    f21a:	eba0 13c3 	sub.w	r3, r0, r3, lsl #7
    f21e:	469d      	mov	sp, r3
    f220:	46eb      	mov	fp, sp
    f222:	b1e2      	cbz	r2, f25e <POINTonE2s_precompute_wbits+0x13e>
    f224:	f44f 7990 	mov.w	r9, #288	; 0x120
    f228:	fa09 f901 	lsl.w	r9, r9, r1
    f22c:	465d      	mov	r5, fp
    f22e:	2400      	movs	r4, #0
    f230:	f8c7 b014 	str.w	fp, [r7, #20]
    f234:	4693      	mov	fp, r2
    f236:	e00a      	b.n	f24e <POINTonE2s_precompute_wbits+0x12e>
    f238:	f108 08c0 	add.w	r8, r8, #192	; 0xc0
    f23c:	4642      	mov	r2, r8
    f23e:	4651      	mov	r1, sl
    f240:	4628      	mov	r0, r5
    f242:	f7fc fb13 	bl	b86c <POINTonE2_precompute_row_wbits>
    f246:	3401      	adds	r4, #1
    f248:	444d      	add	r5, r9
    f24a:	455c      	cmp	r4, fp
    f24c:	d005      	beq.n	f25a <POINTonE2s_precompute_wbits+0x13a>
    f24e:	6833      	ldr	r3, [r6, #0]
    f250:	2b00      	cmp	r3, #0
    f252:	d0f1      	beq.n	f238 <POINTonE2s_precompute_wbits+0x118>
    f254:	3604      	adds	r6, #4
    f256:	4698      	mov	r8, r3
    f258:	e7f0      	b.n	f23c <POINTonE2s_precompute_wbits+0x11c>
    f25a:	f8d7 b014 	ldr.w	fp, [r7, #20]
    f25e:	69fb      	ldr	r3, [r7, #28]
    f260:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    f264:	69bb      	ldr	r3, [r7, #24]
    f266:	4652      	mov	r2, sl
    f268:	4659      	mov	r1, fp
    f26a:	68bc      	ldr	r4, [r7, #8]
    f26c:	eb04 1080 	add.w	r0, r4, r0, lsl #6
    f270:	f7ff fe76 	bl	ef60 <POINTonE2s_to_affine_row_wbits>
    f274:	3724      	adds	r7, #36	; 0x24
    f276:	46bd      	mov	sp, r7
    f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f27c <blst_p2s_mult_wbits_precompute>:
    f27c:	b508      	push	{r3, lr}
    f27e:	f7ff ff4f 	bl	f120 <POINTonE2s_precompute_wbits>
    f282:	bd08      	pop	{r3, pc}

0000f284 <POINTonE2xyzz_dadd_affine>:
    f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f288:	b0ff      	sub	sp, #508	; 0x1fc
    f28a:	4604      	mov	r4, r0
    f28c:	460d      	mov	r5, r1
    f28e:	4617      	mov	r7, r2
    f290:	4698      	mov	r8, r3
    f292:	1f10      	subs	r0, r2, #4
    f294:	f102 01bc 	add.w	r1, r2, #188	; 0xbc
    f298:	4603      	mov	r3, r0
    f29a:	2200      	movs	r2, #0
    f29c:	f853 6f04 	ldr.w	r6, [r3, #4]!
    f2a0:	4332      	orrs	r2, r6
    f2a2:	428b      	cmp	r3, r1
    f2a4:	d1fa      	bne.n	f29c <POINTonE2xyzz_dadd_affine+0x18>
    f2a6:	1e56      	subs	r6, r2, #1
    f2a8:	ea26 0202 	bic.w	r2, r6, r2
    f2ac:	0fd2      	lsrs	r2, r2, #31
    f2ae:	d137      	bne.n	f320 <POINTonE2xyzz_dadd_affine+0x9c>
    f2b0:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
    f2b4:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
    f2b8:	f505 7cbe 	add.w	ip, r5, #380	; 0x17c
    f2bc:	f853 6f04 	ldr.w	r6, [r3, #4]!
    f2c0:	4332      	orrs	r2, r6
    f2c2:	4563      	cmp	r3, ip
    f2c4:	d1fa      	bne.n	f2bc <POINTonE2xyzz_dadd_affine+0x38>
    f2c6:	1e56      	subs	r6, r2, #1
    f2c8:	ea26 0202 	bic.w	r2, r6, r2
    f2cc:	0fd6      	lsrs	r6, r2, #31
    f2ce:	d034      	beq.n	f33a <POINTonE2xyzz_dadd_affine+0xb6>
    f2d0:	1f23      	subs	r3, r4, #4
    f2d2:	f850 2f04 	ldr.w	r2, [r0, #4]!
    f2d6:	f843 2f04 	str.w	r2, [r3, #4]!
    f2da:	4288      	cmp	r0, r1
    f2dc:	d1f9      	bne.n	f2d2 <POINTonE2xyzz_dadd_affine+0x4e>
    f2de:	4d93      	ldr	r5, [pc, #588]	; (f52c <POINTonE2xyzz_dadd_affine+0x2a8>)
    f2e0:	260c      	movs	r6, #12
    f2e2:	9600      	str	r6, [sp, #0]
    f2e4:	462b      	mov	r3, r5
    f2e6:	4642      	mov	r2, r8
    f2e8:	f105 0160 	add.w	r1, r5, #96	; 0x60
    f2ec:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f2f0:	f7f3 fac6 	bl	2880 <cneg_mod_n>
    f2f4:	9600      	str	r6, [sp, #0]
    f2f6:	462b      	mov	r3, r5
    f2f8:	4642      	mov	r2, r8
    f2fa:	f105 0190 	add.w	r1, r5, #144	; 0x90
    f2fe:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    f302:	f7f3 fabd 	bl	2880 <cneg_mod_n>
    f306:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    f30a:	f504 748e 	add.w	r4, r4, #284	; 0x11c
    f30e:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
    f312:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f316:	f844 2f04 	str.w	r2, [r4, #4]!
    f31a:	4299      	cmp	r1, r3
    f31c:	d1f9      	bne.n	f312 <POINTonE2xyzz_dadd_affine+0x8e>
    f31e:	e009      	b.n	f334 <POINTonE2xyzz_dadd_affine+0xb0>
    f320:	1f2b      	subs	r3, r5, #4
    f322:	3c04      	subs	r4, #4
    f324:	f505 75be 	add.w	r5, r5, #380	; 0x17c
    f328:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f32c:	f844 2f04 	str.w	r2, [r4, #4]!
    f330:	42ab      	cmp	r3, r5
    f332:	d1f9      	bne.n	f328 <POINTonE2xyzz_dadd_affine+0xa4>
    f334:	b07f      	add	sp, #508	; 0x1fc
    f336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f33a:	f505 7390 	add.w	r3, r5, #288	; 0x120
    f33e:	461a      	mov	r2, r3
    f340:	9304      	str	r3, [sp, #16]
    f342:	f8df 91e8 	ldr.w	r9, [pc, #488]	; f52c <POINTonE2xyzz_dadd_affine+0x2a8>
    f346:	f8df a1e8 	ldr.w	sl, [pc, #488]	; f530 <POINTonE2xyzz_dadd_affine+0x2ac>
    f34a:	f8cd a000 	str.w	sl, [sp]
    f34e:	464b      	mov	r3, r9
    f350:	4639      	mov	r1, r7
    f352:	a866      	add	r0, sp, #408	; 0x198
    f354:	f7f5 ff26 	bl	51a4 <mul_mont_384x>
    f358:	f107 0360 	add.w	r3, r7, #96	; 0x60
    f35c:	4619      	mov	r1, r3
    f35e:	9303      	str	r3, [sp, #12]
    f360:	f8cd a000 	str.w	sl, [sp]
    f364:	464b      	mov	r3, r9
    f366:	465a      	mov	r2, fp
    f368:	a84e      	add	r0, sp, #312	; 0x138
    f36a:	f7f5 ff1b 	bl	51a4 <mul_mont_384x>
    f36e:	f04f 0a0c 	mov.w	sl, #12
    f372:	f8cd a000 	str.w	sl, [sp]
    f376:	464b      	mov	r3, r9
    f378:	4642      	mov	r2, r8
    f37a:	a94e      	add	r1, sp, #312	; 0x138
    f37c:	4608      	mov	r0, r1
    f37e:	f7f3 fa7f 	bl	2880 <cneg_mod_n>
    f382:	f8cd a000 	str.w	sl, [sp]
    f386:	464b      	mov	r3, r9
    f388:	4642      	mov	r2, r8
    f38a:	a95a      	add	r1, sp, #360	; 0x168
    f38c:	4608      	mov	r0, r1
    f38e:	f7f3 fa77 	bl	2880 <cneg_mod_n>
    f392:	f8cd a000 	str.w	sl, [sp]
    f396:	464b      	mov	r3, r9
    f398:	462a      	mov	r2, r5
    f39a:	a966      	add	r1, sp, #408	; 0x198
    f39c:	4608      	mov	r0, r1
    f39e:	f7f1 f9ba 	bl	716 <sub_mod_n>
    f3a2:	f8cd a000 	str.w	sl, [sp]
    f3a6:	464b      	mov	r3, r9
    f3a8:	f105 0230 	add.w	r2, r5, #48	; 0x30
    f3ac:	a972      	add	r1, sp, #456	; 0x1c8
    f3ae:	4608      	mov	r0, r1
    f3b0:	f7f1 f9b1 	bl	716 <sub_mod_n>
    f3b4:	f105 0360 	add.w	r3, r5, #96	; 0x60
    f3b8:	461a      	mov	r2, r3
    f3ba:	9305      	str	r3, [sp, #20]
    f3bc:	f8cd a000 	str.w	sl, [sp]
    f3c0:	464b      	mov	r3, r9
    f3c2:	a94e      	add	r1, sp, #312	; 0x138
    f3c4:	4608      	mov	r0, r1
    f3c6:	f7f1 f9a6 	bl	716 <sub_mod_n>
    f3ca:	f8cd a000 	str.w	sl, [sp]
    f3ce:	464b      	mov	r3, r9
    f3d0:	f105 0290 	add.w	r2, r5, #144	; 0x90
    f3d4:	a95a      	add	r1, sp, #360	; 0x168
    f3d6:	4608      	mov	r0, r1
    f3d8:	f7f1 f99d 	bl	716 <sub_mod_n>
    f3dc:	ab65      	add	r3, sp, #404	; 0x194
    f3de:	a87d      	add	r0, sp, #500	; 0x1f4
    f3e0:	4632      	mov	r2, r6
    f3e2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    f3e6:	430a      	orrs	r2, r1
    f3e8:	4283      	cmp	r3, r0
    f3ea:	d1fa      	bne.n	f3e2 <POINTonE2xyzz_dadd_affine+0x15e>
    f3ec:	1e53      	subs	r3, r2, #1
    f3ee:	4393      	bics	r3, r2
    f3f0:	d515      	bpl.n	f41e <POINTonE2xyzz_dadd_affine+0x19a>
    f3f2:	ab4d      	add	r3, sp, #308	; 0x134
    f3f4:	a965      	add	r1, sp, #404	; 0x194
    f3f6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f3fa:	4316      	orrs	r6, r2
    f3fc:	428b      	cmp	r3, r1
    f3fe:	d1fa      	bne.n	f3f6 <POINTonE2xyzz_dadd_affine+0x172>
    f400:	1e73      	subs	r3, r6, #1
    f402:	43b3      	bics	r3, r6
    f404:	f100 8096 	bmi.w	f534 <POINTonE2xyzz_dadd_affine+0x2b0>
    f408:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    f40c:	460b      	mov	r3, r1
    f40e:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    f412:	2200      	movs	r2, #0
    f414:	f843 2b04 	str.w	r2, [r3], #4
    f418:	42a3      	cmp	r3, r4
    f41a:	d1fb      	bne.n	f414 <POINTonE2xyzz_dadd_affine+0x190>
    f41c:	e78a      	b.n	f334 <POINTonE2xyzz_dadd_affine+0xb0>
    f41e:	4f44      	ldr	r7, [pc, #272]	; (f530 <POINTonE2xyzz_dadd_affine+0x2ac>)
    f420:	4e42      	ldr	r6, [pc, #264]	; (f52c <POINTonE2xyzz_dadd_affine+0x2a8>)
    f422:	463b      	mov	r3, r7
    f424:	4632      	mov	r2, r6
    f426:	a966      	add	r1, sp, #408	; 0x198
    f428:	a806      	add	r0, sp, #24
    f42a:	f7fa f8b7 	bl	959c <sqr_mont_384x>
    f42e:	9700      	str	r7, [sp, #0]
    f430:	4633      	mov	r3, r6
    f432:	aa66      	add	r2, sp, #408	; 0x198
    f434:	a906      	add	r1, sp, #24
    f436:	a81e      	add	r0, sp, #120	; 0x78
    f438:	f7f5 feb4 	bl	51a4 <mul_mont_384x>
    f43c:	9700      	str	r7, [sp, #0]
    f43e:	4633      	mov	r3, r6
    f440:	aa06      	add	r2, sp, #24
    f442:	4629      	mov	r1, r5
    f444:	a836      	add	r0, sp, #216	; 0xd8
    f446:	f7f5 fead 	bl	51a4 <mul_mont_384x>
    f44a:	463b      	mov	r3, r7
    f44c:	4632      	mov	r2, r6
    f44e:	a94e      	add	r1, sp, #312	; 0x138
    f450:	4620      	mov	r0, r4
    f452:	f7fa f8a3 	bl	959c <sqr_mont_384x>
    f456:	250c      	movs	r5, #12
    f458:	9500      	str	r5, [sp, #0]
    f45a:	4633      	mov	r3, r6
    f45c:	aa36      	add	r2, sp, #216	; 0xd8
    f45e:	4611      	mov	r1, r2
    f460:	a866      	add	r0, sp, #408	; 0x198
    f462:	f7f1 fe0b 	bl	107c <add_mod_n>
    f466:	9500      	str	r5, [sp, #0]
    f468:	4633      	mov	r3, r6
    f46a:	aa42      	add	r2, sp, #264	; 0x108
    f46c:	4611      	mov	r1, r2
    f46e:	a872      	add	r0, sp, #456	; 0x1c8
    f470:	f7f1 fe04 	bl	107c <add_mod_n>
    f474:	9500      	str	r5, [sp, #0]
    f476:	4633      	mov	r3, r6
    f478:	aa1e      	add	r2, sp, #120	; 0x78
    f47a:	4621      	mov	r1, r4
    f47c:	4620      	mov	r0, r4
    f47e:	f7f1 f94a 	bl	716 <sub_mod_n>
    f482:	f104 0830 	add.w	r8, r4, #48	; 0x30
    f486:	9500      	str	r5, [sp, #0]
    f488:	4633      	mov	r3, r6
    f48a:	aa2a      	add	r2, sp, #168	; 0xa8
    f48c:	4641      	mov	r1, r8
    f48e:	4640      	mov	r0, r8
    f490:	f7f1 f941 	bl	716 <sub_mod_n>
    f494:	9500      	str	r5, [sp, #0]
    f496:	4633      	mov	r3, r6
    f498:	aa66      	add	r2, sp, #408	; 0x198
    f49a:	4621      	mov	r1, r4
    f49c:	4620      	mov	r0, r4
    f49e:	f7f1 f93a 	bl	716 <sub_mod_n>
    f4a2:	9500      	str	r5, [sp, #0]
    f4a4:	4633      	mov	r3, r6
    f4a6:	aa72      	add	r2, sp, #456	; 0x1c8
    f4a8:	4641      	mov	r1, r8
    f4aa:	4640      	mov	r0, r8
    f4ac:	f7f1 f933 	bl	716 <sub_mod_n>
    f4b0:	9500      	str	r5, [sp, #0]
    f4b2:	4633      	mov	r3, r6
    f4b4:	4622      	mov	r2, r4
    f4b6:	a936      	add	r1, sp, #216	; 0xd8
    f4b8:	4608      	mov	r0, r1
    f4ba:	f7f1 f92c 	bl	716 <sub_mod_n>
    f4be:	9500      	str	r5, [sp, #0]
    f4c0:	4633      	mov	r3, r6
    f4c2:	4642      	mov	r2, r8
    f4c4:	a942      	add	r1, sp, #264	; 0x108
    f4c6:	4608      	mov	r0, r1
    f4c8:	f7f1 f925 	bl	716 <sub_mod_n>
    f4cc:	9700      	str	r7, [sp, #0]
    f4ce:	4633      	mov	r3, r6
    f4d0:	aa4e      	add	r2, sp, #312	; 0x138
    f4d2:	a936      	add	r1, sp, #216	; 0xd8
    f4d4:	4608      	mov	r0, r1
    f4d6:	f7f5 fe65 	bl	51a4 <mul_mont_384x>
    f4da:	f104 0860 	add.w	r8, r4, #96	; 0x60
    f4de:	9700      	str	r7, [sp, #0]
    f4e0:	4633      	mov	r3, r6
    f4e2:	aa1e      	add	r2, sp, #120	; 0x78
    f4e4:	9905      	ldr	r1, [sp, #20]
    f4e6:	4640      	mov	r0, r8
    f4e8:	f7f5 fe5c 	bl	51a4 <mul_mont_384x>
    f4ec:	9500      	str	r5, [sp, #0]
    f4ee:	4633      	mov	r3, r6
    f4f0:	4642      	mov	r2, r8
    f4f2:	a936      	add	r1, sp, #216	; 0xd8
    f4f4:	4640      	mov	r0, r8
    f4f6:	f7f1 f90e 	bl	716 <sub_mod_n>
    f4fa:	f104 0090 	add.w	r0, r4, #144	; 0x90
    f4fe:	9500      	str	r5, [sp, #0]
    f500:	4633      	mov	r3, r6
    f502:	4602      	mov	r2, r0
    f504:	a942      	add	r1, sp, #264	; 0x108
    f506:	f7f1 f906 	bl	716 <sub_mod_n>
    f50a:	9700      	str	r7, [sp, #0]
    f50c:	4633      	mov	r3, r6
    f50e:	aa06      	add	r2, sp, #24
    f510:	9904      	ldr	r1, [sp, #16]
    f512:	f504 7090 	add.w	r0, r4, #288	; 0x120
    f516:	f7f5 fe45 	bl	51a4 <mul_mont_384x>
    f51a:	9700      	str	r7, [sp, #0]
    f51c:	4633      	mov	r3, r6
    f51e:	aa1e      	add	r2, sp, #120	; 0x78
    f520:	4659      	mov	r1, fp
    f522:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    f526:	f7f5 fe3d 	bl	51a4 <mul_mont_384x>
    f52a:	e703      	b.n	f334 <POINTonE2xyzz_dadd_affine+0xb0>
    f52c:	0001ade8 	.word	0x0001ade8
    f530:	fffcfffd 	.word	0xfffcfffd
    f534:	4d53      	ldr	r5, [pc, #332]	; (f684 <POINTonE2xyzz_dadd_affine+0x400>)
    f536:	260c      	movs	r6, #12
    f538:	9600      	str	r6, [sp, #0]
    f53a:	462b      	mov	r3, r5
    f53c:	9a03      	ldr	r2, [sp, #12]
    f53e:	4611      	mov	r1, r2
    f540:	a806      	add	r0, sp, #24
    f542:	f7f1 fd9b 	bl	107c <add_mod_n>
    f546:	f107 0190 	add.w	r1, r7, #144	; 0x90
    f54a:	9600      	str	r6, [sp, #0]
    f54c:	462b      	mov	r3, r5
    f54e:	460a      	mov	r2, r1
    f550:	a812      	add	r0, sp, #72	; 0x48
    f552:	f7f1 fd93 	bl	107c <add_mod_n>
    f556:	f504 7b90 	add.w	fp, r4, #288	; 0x120
    f55a:	f8df 912c 	ldr.w	r9, [pc, #300]	; f688 <POINTonE2xyzz_dadd_affine+0x404>
    f55e:	464b      	mov	r3, r9
    f560:	462a      	mov	r2, r5
    f562:	a906      	add	r1, sp, #24
    f564:	4658      	mov	r0, fp
    f566:	f7fa f819 	bl	959c <sqr_mont_384x>
    f56a:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
    f56e:	f8cd 9000 	str.w	r9, [sp]
    f572:	462b      	mov	r3, r5
    f574:	a806      	add	r0, sp, #24
    f576:	4602      	mov	r2, r0
    f578:	4659      	mov	r1, fp
    f57a:	4650      	mov	r0, sl
    f57c:	f7f5 fe12 	bl	51a4 <mul_mont_384x>
    f580:	f8cd 9000 	str.w	r9, [sp]
    f584:	462b      	mov	r3, r5
    f586:	465a      	mov	r2, fp
    f588:	4639      	mov	r1, r7
    f58a:	a81e      	add	r0, sp, #120	; 0x78
    f58c:	f7f5 fe0a 	bl	51a4 <mul_mont_384x>
    f590:	464b      	mov	r3, r9
    f592:	462a      	mov	r2, r5
    f594:	4639      	mov	r1, r7
    f596:	a836      	add	r0, sp, #216	; 0xd8
    f598:	f7fa f800 	bl	959c <sqr_mont_384x>
    f59c:	4633      	mov	r3, r6
    f59e:	462a      	mov	r2, r5
    f5a0:	a936      	add	r1, sp, #216	; 0xd8
    f5a2:	4608      	mov	r0, r1
    f5a4:	f7f2 fa04 	bl	19b0 <mul_by_3_mod_n>
    f5a8:	4633      	mov	r3, r6
    f5aa:	462a      	mov	r2, r5
    f5ac:	a942      	add	r1, sp, #264	; 0x108
    f5ae:	4608      	mov	r0, r1
    f5b0:	f7f2 f9fe 	bl	19b0 <mul_by_3_mod_n>
    f5b4:	464b      	mov	r3, r9
    f5b6:	462a      	mov	r2, r5
    f5b8:	a936      	add	r1, sp, #216	; 0xd8
    f5ba:	4620      	mov	r0, r4
    f5bc:	f7f9 ffee 	bl	959c <sqr_mont_384x>
    f5c0:	9600      	str	r6, [sp, #0]
    f5c2:	462b      	mov	r3, r5
    f5c4:	a81e      	add	r0, sp, #120	; 0x78
    f5c6:	4602      	mov	r2, r0
    f5c8:	4601      	mov	r1, r0
    f5ca:	a806      	add	r0, sp, #24
    f5cc:	f7f1 fd56 	bl	107c <add_mod_n>
    f5d0:	9600      	str	r6, [sp, #0]
    f5d2:	462b      	mov	r3, r5
    f5d4:	a82a      	add	r0, sp, #168	; 0xa8
    f5d6:	4602      	mov	r2, r0
    f5d8:	4601      	mov	r1, r0
    f5da:	a812      	add	r0, sp, #72	; 0x48
    f5dc:	f7f1 fd4e 	bl	107c <add_mod_n>
    f5e0:	9600      	str	r6, [sp, #0]
    f5e2:	462b      	mov	r3, r5
    f5e4:	a806      	add	r0, sp, #24
    f5e6:	4602      	mov	r2, r0
    f5e8:	4621      	mov	r1, r4
    f5ea:	4620      	mov	r0, r4
    f5ec:	f7f1 f893 	bl	716 <sub_mod_n>
    f5f0:	f104 0b30 	add.w	fp, r4, #48	; 0x30
    f5f4:	9600      	str	r6, [sp, #0]
    f5f6:	462b      	mov	r3, r5
    f5f8:	a812      	add	r0, sp, #72	; 0x48
    f5fa:	4602      	mov	r2, r0
    f5fc:	4659      	mov	r1, fp
    f5fe:	4658      	mov	r0, fp
    f600:	f7f1 f889 	bl	716 <sub_mod_n>
    f604:	f104 0760 	add.w	r7, r4, #96	; 0x60
    f608:	f8cd 9000 	str.w	r9, [sp]
    f60c:	462b      	mov	r3, r5
    f60e:	9a03      	ldr	r2, [sp, #12]
    f610:	4651      	mov	r1, sl
    f612:	4638      	mov	r0, r7
    f614:	f7f5 fdc6 	bl	51a4 <mul_mont_384x>
    f618:	9600      	str	r6, [sp, #0]
    f61a:	462b      	mov	r3, r5
    f61c:	4622      	mov	r2, r4
    f61e:	a91e      	add	r1, sp, #120	; 0x78
    f620:	4608      	mov	r0, r1
    f622:	f7f1 f878 	bl	716 <sub_mod_n>
    f626:	9600      	str	r6, [sp, #0]
    f628:	462b      	mov	r3, r5
    f62a:	465a      	mov	r2, fp
    f62c:	a92a      	add	r1, sp, #168	; 0xa8
    f62e:	4608      	mov	r0, r1
    f630:	f7f1 f871 	bl	716 <sub_mod_n>
    f634:	f8cd 9000 	str.w	r9, [sp]
    f638:	462b      	mov	r3, r5
    f63a:	aa36      	add	r2, sp, #216	; 0xd8
    f63c:	a91e      	add	r1, sp, #120	; 0x78
    f63e:	4608      	mov	r0, r1
    f640:	f7f5 fdb0 	bl	51a4 <mul_mont_384x>
    f644:	9600      	str	r6, [sp, #0]
    f646:	462b      	mov	r3, r5
    f648:	463a      	mov	r2, r7
    f64a:	a91e      	add	r1, sp, #120	; 0x78
    f64c:	4638      	mov	r0, r7
    f64e:	f7f1 f862 	bl	716 <sub_mod_n>
    f652:	f104 0090 	add.w	r0, r4, #144	; 0x90
    f656:	9600      	str	r6, [sp, #0]
    f658:	462b      	mov	r3, r5
    f65a:	4602      	mov	r2, r0
    f65c:	a92a      	add	r1, sp, #168	; 0xa8
    f65e:	f7f1 f85a 	bl	716 <sub_mod_n>
    f662:	9600      	str	r6, [sp, #0]
    f664:	462b      	mov	r3, r5
    f666:	4642      	mov	r2, r8
    f668:	4651      	mov	r1, sl
    f66a:	4650      	mov	r0, sl
    f66c:	f7f3 f908 	bl	2880 <cneg_mod_n>
    f670:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    f674:	9600      	str	r6, [sp, #0]
    f676:	462b      	mov	r3, r5
    f678:	4642      	mov	r2, r8
    f67a:	4601      	mov	r1, r0
    f67c:	f7f3 f900 	bl	2880 <cneg_mod_n>
    f680:	e658      	b.n	f334 <POINTonE2xyzz_dadd_affine+0xb0>
    f682:	bf00      	nop
    f684:	0001ade8 	.word	0x0001ade8
    f688:	fffcfffd 	.word	0xfffcfffd

0000f68c <POINTonE2_bucket>:
    f68c:	b538      	push	{r3, r4, r5, lr}
    f68e:	4615      	mov	r5, r2
    f690:	2401      	movs	r4, #1
    f692:	4094      	lsls	r4, r2
    f694:	3c01      	subs	r4, #1
    f696:	400c      	ands	r4, r1
    f698:	d100      	bne.n	f69c <POINTonE2_bucket+0x10>
    f69a:	bd38      	pop	{r3, r4, r5, pc}
    f69c:	461a      	mov	r2, r3
    f69e:	3c01      	subs	r4, #1
    f6a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f6a4:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    f6a8:	fa21 f505 	lsr.w	r5, r1, r5
    f6ac:	f005 0301 	and.w	r3, r5, #1
    f6b0:	4601      	mov	r1, r0
    f6b2:	f7ff fde7 	bl	f284 <POINTonE2xyzz_dadd_affine>
    f6b6:	e7f0      	b.n	f69a <POINTonE2_bucket+0xe>

0000f6b8 <POINTonE2xyzz_dadd>:
    f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6bc:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
    f6c0:	4604      	mov	r4, r0
    f6c2:	460e      	mov	r6, r1
    f6c4:	4615      	mov	r5, r2
    f6c6:	f102 0ac0 	add.w	sl, r2, #192	; 0xc0
    f6ca:	f102 03bc 	add.w	r3, r2, #188	; 0xbc
    f6ce:	f502 7cbe 	add.w	ip, r2, #380	; 0x17c
    f6d2:	2200      	movs	r2, #0
    f6d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    f6d8:	430a      	orrs	r2, r1
    f6da:	4563      	cmp	r3, ip
    f6dc:	d1fa      	bne.n	f6d4 <POINTonE2xyzz_dadd+0x1c>
    f6de:	1e57      	subs	r7, r2, #1
    f6e0:	ea27 0202 	bic.w	r2, r7, r2
    f6e4:	0fd2      	lsrs	r2, r2, #31
    f6e6:	d118      	bne.n	f71a <POINTonE2xyzz_dadd+0x62>
    f6e8:	f106 0bc0 	add.w	fp, r6, #192	; 0xc0
    f6ec:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
    f6f0:	f506 70be 	add.w	r0, r6, #380	; 0x17c
    f6f4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    f6f8:	430a      	orrs	r2, r1
    f6fa:	4283      	cmp	r3, r0
    f6fc:	d1fa      	bne.n	f6f4 <POINTonE2xyzz_dadd+0x3c>
    f6fe:	1e57      	subs	r7, r2, #1
    f700:	ea27 0202 	bic.w	r2, r7, r2
    f704:	0fd7      	lsrs	r7, r2, #31
    f706:	d016      	beq.n	f736 <POINTonE2xyzz_dadd+0x7e>
    f708:	3d04      	subs	r5, #4
    f70a:	3c04      	subs	r4, #4
    f70c:	f855 3f04 	ldr.w	r3, [r5, #4]!
    f710:	f844 3f04 	str.w	r3, [r4, #4]!
    f714:	4565      	cmp	r5, ip
    f716:	d1f9      	bne.n	f70c <POINTonE2xyzz_dadd+0x54>
    f718:	e009      	b.n	f72e <POINTonE2xyzz_dadd+0x76>
    f71a:	1f33      	subs	r3, r6, #4
    f71c:	3c04      	subs	r4, #4
    f71e:	f506 76be 	add.w	r6, r6, #380	; 0x17c
    f722:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f726:	f844 2f04 	str.w	r2, [r4, #4]!
    f72a:	42b3      	cmp	r3, r6
    f72c:	d1f9      	bne.n	f722 <POINTonE2xyzz_dadd+0x6a>
    f72e:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
    f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f736:	f505 7390 	add.w	r3, r5, #288	; 0x120
    f73a:	461a      	mov	r2, r3
    f73c:	9304      	str	r3, [sp, #16]
    f73e:	f8df 8344 	ldr.w	r8, [pc, #836]	; fa84 <POINTonE2xyzz_dadd+0x3cc>
    f742:	f8df 933c 	ldr.w	r9, [pc, #828]	; fa80 <POINTonE2xyzz_dadd+0x3c8>
    f746:	f8cd 9000 	str.w	r9, [sp]
    f74a:	4643      	mov	r3, r8
    f74c:	4631      	mov	r1, r6
    f74e:	a896      	add	r0, sp, #600	; 0x258
    f750:	f7f5 fd28 	bl	51a4 <mul_mont_384x>
    f754:	f106 0360 	add.w	r3, r6, #96	; 0x60
    f758:	4619      	mov	r1, r3
    f75a:	9305      	str	r3, [sp, #20]
    f75c:	f8cd 9000 	str.w	r9, [sp]
    f760:	4643      	mov	r3, r8
    f762:	4652      	mov	r2, sl
    f764:	a87e      	add	r0, sp, #504	; 0x1f8
    f766:	f7f5 fd1d 	bl	51a4 <mul_mont_384x>
    f76a:	f506 7390 	add.w	r3, r6, #288	; 0x120
    f76e:	461a      	mov	r2, r3
    f770:	9303      	str	r3, [sp, #12]
    f772:	f8cd 9000 	str.w	r9, [sp]
    f776:	4643      	mov	r3, r8
    f778:	4629      	mov	r1, r5
    f77a:	a866      	add	r0, sp, #408	; 0x198
    f77c:	f7f5 fd12 	bl	51a4 <mul_mont_384x>
    f780:	f8cd 9000 	str.w	r9, [sp]
    f784:	4643      	mov	r3, r8
    f786:	465a      	mov	r2, fp
    f788:	f105 0160 	add.w	r1, r5, #96	; 0x60
    f78c:	a84e      	add	r0, sp, #312	; 0x138
    f78e:	f7f5 fd09 	bl	51a4 <mul_mont_384x>
    f792:	250c      	movs	r5, #12
    f794:	9500      	str	r5, [sp, #0]
    f796:	4643      	mov	r3, r8
    f798:	aa96      	add	r2, sp, #600	; 0x258
    f79a:	a966      	add	r1, sp, #408	; 0x198
    f79c:	4608      	mov	r0, r1
    f79e:	f7f0 ffba 	bl	716 <sub_mod_n>
    f7a2:	9500      	str	r5, [sp, #0]
    f7a4:	4643      	mov	r3, r8
    f7a6:	aaa2      	add	r2, sp, #648	; 0x288
    f7a8:	a972      	add	r1, sp, #456	; 0x1c8
    f7aa:	4608      	mov	r0, r1
    f7ac:	f7f0 ffb3 	bl	716 <sub_mod_n>
    f7b0:	9500      	str	r5, [sp, #0]
    f7b2:	4643      	mov	r3, r8
    f7b4:	aa7e      	add	r2, sp, #504	; 0x1f8
    f7b6:	a94e      	add	r1, sp, #312	; 0x138
    f7b8:	4608      	mov	r0, r1
    f7ba:	f7f0 ffac 	bl	716 <sub_mod_n>
    f7be:	9500      	str	r5, [sp, #0]
    f7c0:	4643      	mov	r3, r8
    f7c2:	aa8a      	add	r2, sp, #552	; 0x228
    f7c4:	a95a      	add	r1, sp, #360	; 0x168
    f7c6:	4608      	mov	r0, r1
    f7c8:	f7f0 ffa5 	bl	716 <sub_mod_n>
    f7cc:	ab65      	add	r3, sp, #404	; 0x194
    f7ce:	a87d      	add	r0, sp, #500	; 0x1f4
    f7d0:	463a      	mov	r2, r7
    f7d2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    f7d6:	430a      	orrs	r2, r1
    f7d8:	4283      	cmp	r3, r0
    f7da:	d1fa      	bne.n	f7d2 <POINTonE2xyzz_dadd+0x11a>
    f7dc:	1e53      	subs	r3, r2, #1
    f7de:	4393      	bics	r3, r2
    f7e0:	d515      	bpl.n	f80e <POINTonE2xyzz_dadd+0x156>
    f7e2:	ab4d      	add	r3, sp, #308	; 0x134
    f7e4:	a965      	add	r1, sp, #404	; 0x194
    f7e6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f7ea:	4317      	orrs	r7, r2
    f7ec:	428b      	cmp	r3, r1
    f7ee:	d1fa      	bne.n	f7e6 <POINTonE2xyzz_dadd+0x12e>
    f7f0:	1e7b      	subs	r3, r7, #1
    f7f2:	43bb      	bics	r3, r7
    f7f4:	f100 80a1 	bmi.w	f93a <POINTonE2xyzz_dadd+0x282>
    f7f8:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    f7fc:	460b      	mov	r3, r1
    f7fe:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    f802:	2200      	movs	r2, #0
    f804:	f843 2b04 	str.w	r2, [r3], #4
    f808:	42a3      	cmp	r3, r4
    f80a:	d1fb      	bne.n	f804 <POINTonE2xyzz_dadd+0x14c>
    f80c:	e78f      	b.n	f72e <POINTonE2xyzz_dadd+0x76>
    f80e:	4e9c      	ldr	r6, [pc, #624]	; (fa80 <POINTonE2xyzz_dadd+0x3c8>)
    f810:	4d9c      	ldr	r5, [pc, #624]	; (fa84 <POINTonE2xyzz_dadd+0x3cc>)
    f812:	4633      	mov	r3, r6
    f814:	462a      	mov	r2, r5
    f816:	a966      	add	r1, sp, #408	; 0x198
    f818:	a806      	add	r0, sp, #24
    f81a:	f7f9 febf 	bl	959c <sqr_mont_384x>
    f81e:	9600      	str	r6, [sp, #0]
    f820:	462b      	mov	r3, r5
    f822:	aa66      	add	r2, sp, #408	; 0x198
    f824:	a906      	add	r1, sp, #24
    f826:	a81e      	add	r0, sp, #120	; 0x78
    f828:	f7f5 fcbc 	bl	51a4 <mul_mont_384x>
    f82c:	9600      	str	r6, [sp, #0]
    f82e:	462b      	mov	r3, r5
    f830:	aa06      	add	r2, sp, #24
    f832:	a996      	add	r1, sp, #600	; 0x258
    f834:	a836      	add	r0, sp, #216	; 0xd8
    f836:	f7f5 fcb5 	bl	51a4 <mul_mont_384x>
    f83a:	4633      	mov	r3, r6
    f83c:	462a      	mov	r2, r5
    f83e:	a94e      	add	r1, sp, #312	; 0x138
    f840:	4620      	mov	r0, r4
    f842:	f7f9 feab 	bl	959c <sqr_mont_384x>
    f846:	270c      	movs	r7, #12
    f848:	9700      	str	r7, [sp, #0]
    f84a:	462b      	mov	r3, r5
    f84c:	aa36      	add	r2, sp, #216	; 0xd8
    f84e:	4611      	mov	r1, r2
    f850:	a866      	add	r0, sp, #408	; 0x198
    f852:	f7f1 fc13 	bl	107c <add_mod_n>
    f856:	9700      	str	r7, [sp, #0]
    f858:	462b      	mov	r3, r5
    f85a:	aa42      	add	r2, sp, #264	; 0x108
    f85c:	4611      	mov	r1, r2
    f85e:	a872      	add	r0, sp, #456	; 0x1c8
    f860:	f7f1 fc0c 	bl	107c <add_mod_n>
    f864:	9700      	str	r7, [sp, #0]
    f866:	462b      	mov	r3, r5
    f868:	aa1e      	add	r2, sp, #120	; 0x78
    f86a:	4621      	mov	r1, r4
    f86c:	4620      	mov	r0, r4
    f86e:	f7f0 ff52 	bl	716 <sub_mod_n>
    f872:	f104 0830 	add.w	r8, r4, #48	; 0x30
    f876:	9700      	str	r7, [sp, #0]
    f878:	462b      	mov	r3, r5
    f87a:	aa2a      	add	r2, sp, #168	; 0xa8
    f87c:	4641      	mov	r1, r8
    f87e:	4640      	mov	r0, r8
    f880:	f7f0 ff49 	bl	716 <sub_mod_n>
    f884:	9700      	str	r7, [sp, #0]
    f886:	462b      	mov	r3, r5
    f888:	aa66      	add	r2, sp, #408	; 0x198
    f88a:	4621      	mov	r1, r4
    f88c:	4620      	mov	r0, r4
    f88e:	f7f0 ff42 	bl	716 <sub_mod_n>
    f892:	9700      	str	r7, [sp, #0]
    f894:	462b      	mov	r3, r5
    f896:	aa72      	add	r2, sp, #456	; 0x1c8
    f898:	4641      	mov	r1, r8
    f89a:	4640      	mov	r0, r8
    f89c:	f7f0 ff3b 	bl	716 <sub_mod_n>
    f8a0:	9700      	str	r7, [sp, #0]
    f8a2:	462b      	mov	r3, r5
    f8a4:	4622      	mov	r2, r4
    f8a6:	a936      	add	r1, sp, #216	; 0xd8
    f8a8:	4608      	mov	r0, r1
    f8aa:	f7f0 ff34 	bl	716 <sub_mod_n>
    f8ae:	9700      	str	r7, [sp, #0]
    f8b0:	462b      	mov	r3, r5
    f8b2:	4642      	mov	r2, r8
    f8b4:	a942      	add	r1, sp, #264	; 0x108
    f8b6:	4608      	mov	r0, r1
    f8b8:	f7f0 ff2d 	bl	716 <sub_mod_n>
    f8bc:	9600      	str	r6, [sp, #0]
    f8be:	462b      	mov	r3, r5
    f8c0:	aa4e      	add	r2, sp, #312	; 0x138
    f8c2:	a936      	add	r1, sp, #216	; 0xd8
    f8c4:	4608      	mov	r0, r1
    f8c6:	f7f5 fc6d 	bl	51a4 <mul_mont_384x>
    f8ca:	f104 0860 	add.w	r8, r4, #96	; 0x60
    f8ce:	9600      	str	r6, [sp, #0]
    f8d0:	462b      	mov	r3, r5
    f8d2:	aa1e      	add	r2, sp, #120	; 0x78
    f8d4:	a97e      	add	r1, sp, #504	; 0x1f8
    f8d6:	4640      	mov	r0, r8
    f8d8:	f7f5 fc64 	bl	51a4 <mul_mont_384x>
    f8dc:	9700      	str	r7, [sp, #0]
    f8de:	462b      	mov	r3, r5
    f8e0:	4642      	mov	r2, r8
    f8e2:	a936      	add	r1, sp, #216	; 0xd8
    f8e4:	4640      	mov	r0, r8
    f8e6:	f7f0 ff16 	bl	716 <sub_mod_n>
    f8ea:	f104 0090 	add.w	r0, r4, #144	; 0x90
    f8ee:	9700      	str	r7, [sp, #0]
    f8f0:	462b      	mov	r3, r5
    f8f2:	4602      	mov	r2, r0
    f8f4:	a942      	add	r1, sp, #264	; 0x108
    f8f6:	f7f0 ff0e 	bl	716 <sub_mod_n>
    f8fa:	f504 7790 	add.w	r7, r4, #288	; 0x120
    f8fe:	9600      	str	r6, [sp, #0]
    f900:	462b      	mov	r3, r5
    f902:	9a04      	ldr	r2, [sp, #16]
    f904:	9903      	ldr	r1, [sp, #12]
    f906:	4638      	mov	r0, r7
    f908:	f7f5 fc4c 	bl	51a4 <mul_mont_384x>
    f90c:	34c0      	adds	r4, #192	; 0xc0
    f90e:	9600      	str	r6, [sp, #0]
    f910:	462b      	mov	r3, r5
    f912:	4652      	mov	r2, sl
    f914:	4659      	mov	r1, fp
    f916:	4620      	mov	r0, r4
    f918:	f7f5 fc44 	bl	51a4 <mul_mont_384x>
    f91c:	9600      	str	r6, [sp, #0]
    f91e:	462b      	mov	r3, r5
    f920:	aa06      	add	r2, sp, #24
    f922:	4639      	mov	r1, r7
    f924:	4638      	mov	r0, r7
    f926:	f7f5 fc3d 	bl	51a4 <mul_mont_384x>
    f92a:	9600      	str	r6, [sp, #0]
    f92c:	462b      	mov	r3, r5
    f92e:	aa1e      	add	r2, sp, #120	; 0x78
    f930:	4621      	mov	r1, r4
    f932:	4620      	mov	r0, r4
    f934:	f7f5 fc36 	bl	51a4 <mul_mont_384x>
    f938:	e6f9      	b.n	f72e <POINTonE2xyzz_dadd+0x76>
    f93a:	4d52      	ldr	r5, [pc, #328]	; (fa84 <POINTonE2xyzz_dadd+0x3cc>)
    f93c:	270c      	movs	r7, #12
    f93e:	9700      	str	r7, [sp, #0]
    f940:	462b      	mov	r3, r5
    f942:	f8dd a014 	ldr.w	sl, [sp, #20]
    f946:	4652      	mov	r2, sl
    f948:	4651      	mov	r1, sl
    f94a:	a896      	add	r0, sp, #600	; 0x258
    f94c:	f7f1 fb96 	bl	107c <add_mod_n>
    f950:	f106 0190 	add.w	r1, r6, #144	; 0x90
    f954:	9700      	str	r7, [sp, #0]
    f956:	462b      	mov	r3, r5
    f958:	460a      	mov	r2, r1
    f95a:	a8a2      	add	r0, sp, #648	; 0x288
    f95c:	f7f1 fb8e 	bl	107c <add_mod_n>
    f960:	f8df 811c 	ldr.w	r8, [pc, #284]	; fa80 <POINTonE2xyzz_dadd+0x3c8>
    f964:	4643      	mov	r3, r8
    f966:	462a      	mov	r2, r5
    f968:	a996      	add	r1, sp, #600	; 0x258
    f96a:	a806      	add	r0, sp, #24
    f96c:	f7f9 fe16 	bl	959c <sqr_mont_384x>
    f970:	f8cd 8000 	str.w	r8, [sp]
    f974:	462b      	mov	r3, r5
    f976:	aa96      	add	r2, sp, #600	; 0x258
    f978:	a906      	add	r1, sp, #24
    f97a:	a81e      	add	r0, sp, #120	; 0x78
    f97c:	f7f5 fc12 	bl	51a4 <mul_mont_384x>
    f980:	f8cd 8000 	str.w	r8, [sp]
    f984:	462b      	mov	r3, r5
    f986:	aa06      	add	r2, sp, #24
    f988:	4631      	mov	r1, r6
    f98a:	a87e      	add	r0, sp, #504	; 0x1f8
    f98c:	f7f5 fc0a 	bl	51a4 <mul_mont_384x>
    f990:	4643      	mov	r3, r8
    f992:	462a      	mov	r2, r5
    f994:	4631      	mov	r1, r6
    f996:	a836      	add	r0, sp, #216	; 0xd8
    f998:	f7f9 fe00 	bl	959c <sqr_mont_384x>
    f99c:	463b      	mov	r3, r7
    f99e:	462a      	mov	r2, r5
    f9a0:	a936      	add	r1, sp, #216	; 0xd8
    f9a2:	4608      	mov	r0, r1
    f9a4:	f7f2 f804 	bl	19b0 <mul_by_3_mod_n>
    f9a8:	463b      	mov	r3, r7
    f9aa:	462a      	mov	r2, r5
    f9ac:	a942      	add	r1, sp, #264	; 0x108
    f9ae:	4608      	mov	r0, r1
    f9b0:	f7f1 fffe 	bl	19b0 <mul_by_3_mod_n>
    f9b4:	4643      	mov	r3, r8
    f9b6:	462a      	mov	r2, r5
    f9b8:	a936      	add	r1, sp, #216	; 0xd8
    f9ba:	4620      	mov	r0, r4
    f9bc:	f7f9 fdee 	bl	959c <sqr_mont_384x>
    f9c0:	9700      	str	r7, [sp, #0]
    f9c2:	462b      	mov	r3, r5
    f9c4:	aa7e      	add	r2, sp, #504	; 0x1f8
    f9c6:	4611      	mov	r1, r2
    f9c8:	a896      	add	r0, sp, #600	; 0x258
    f9ca:	f7f1 fb57 	bl	107c <add_mod_n>
    f9ce:	9700      	str	r7, [sp, #0]
    f9d0:	462b      	mov	r3, r5
    f9d2:	aa8a      	add	r2, sp, #552	; 0x228
    f9d4:	4611      	mov	r1, r2
    f9d6:	a8a2      	add	r0, sp, #648	; 0x288
    f9d8:	f7f1 fb50 	bl	107c <add_mod_n>
    f9dc:	9700      	str	r7, [sp, #0]
    f9de:	462b      	mov	r3, r5
    f9e0:	aa96      	add	r2, sp, #600	; 0x258
    f9e2:	4621      	mov	r1, r4
    f9e4:	4620      	mov	r0, r4
    f9e6:	f7f0 fe96 	bl	716 <sub_mod_n>
    f9ea:	f104 0930 	add.w	r9, r4, #48	; 0x30
    f9ee:	9700      	str	r7, [sp, #0]
    f9f0:	462b      	mov	r3, r5
    f9f2:	aaa2      	add	r2, sp, #648	; 0x288
    f9f4:	4649      	mov	r1, r9
    f9f6:	4648      	mov	r0, r9
    f9f8:	f7f0 fe8d 	bl	716 <sub_mod_n>
    f9fc:	f104 0660 	add.w	r6, r4, #96	; 0x60
    fa00:	f8cd 8000 	str.w	r8, [sp]
    fa04:	462b      	mov	r3, r5
    fa06:	4652      	mov	r2, sl
    fa08:	a91e      	add	r1, sp, #120	; 0x78
    fa0a:	4630      	mov	r0, r6
    fa0c:	f7f5 fbca 	bl	51a4 <mul_mont_384x>
    fa10:	9700      	str	r7, [sp, #0]
    fa12:	462b      	mov	r3, r5
    fa14:	4622      	mov	r2, r4
    fa16:	a97e      	add	r1, sp, #504	; 0x1f8
    fa18:	4608      	mov	r0, r1
    fa1a:	f7f0 fe7c 	bl	716 <sub_mod_n>
    fa1e:	9700      	str	r7, [sp, #0]
    fa20:	462b      	mov	r3, r5
    fa22:	464a      	mov	r2, r9
    fa24:	a98a      	add	r1, sp, #552	; 0x228
    fa26:	4608      	mov	r0, r1
    fa28:	f7f0 fe75 	bl	716 <sub_mod_n>
    fa2c:	f8cd 8000 	str.w	r8, [sp]
    fa30:	462b      	mov	r3, r5
    fa32:	aa36      	add	r2, sp, #216	; 0xd8
    fa34:	a97e      	add	r1, sp, #504	; 0x1f8
    fa36:	4608      	mov	r0, r1
    fa38:	f7f5 fbb4 	bl	51a4 <mul_mont_384x>
    fa3c:	9700      	str	r7, [sp, #0]
    fa3e:	462b      	mov	r3, r5
    fa40:	4632      	mov	r2, r6
    fa42:	a97e      	add	r1, sp, #504	; 0x1f8
    fa44:	4630      	mov	r0, r6
    fa46:	f7f0 fe66 	bl	716 <sub_mod_n>
    fa4a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    fa4e:	9700      	str	r7, [sp, #0]
    fa50:	462b      	mov	r3, r5
    fa52:	4602      	mov	r2, r0
    fa54:	a98a      	add	r1, sp, #552	; 0x228
    fa56:	f7f0 fe5e 	bl	716 <sub_mod_n>
    fa5a:	f8cd 8000 	str.w	r8, [sp]
    fa5e:	462b      	mov	r3, r5
    fa60:	aa06      	add	r2, sp, #24
    fa62:	9903      	ldr	r1, [sp, #12]
    fa64:	f504 7090 	add.w	r0, r4, #288	; 0x120
    fa68:	f7f5 fb9c 	bl	51a4 <mul_mont_384x>
    fa6c:	f8cd 8000 	str.w	r8, [sp]
    fa70:	462b      	mov	r3, r5
    fa72:	aa1e      	add	r2, sp, #120	; 0x78
    fa74:	4659      	mov	r1, fp
    fa76:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fa7a:	f7f5 fb93 	bl	51a4 <mul_mont_384x>
    fa7e:	e656      	b.n	f72e <POINTonE2xyzz_dadd+0x76>
    fa80:	fffcfffd 	.word	0xfffcfffd
    fa84:	0001ade8 	.word	0x0001ade8

0000fa88 <POINTonE2_integrate_buckets>:
    fa88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa8c:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
    fa90:	4607      	mov	r7, r0
    fa92:	2501      	movs	r5, #1
    fa94:	4095      	lsls	r5, r2
    fa96:	3d01      	subs	r5, #1
    fa98:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    fa9c:	eb01 1cc3 	add.w	ip, r1, r3, lsl #7
    faa0:	f1ac 0004 	sub.w	r0, ip, #4
    faa4:	ab02      	add	r3, sp, #8
    faa6:	f50d 7ec4 	add.w	lr, sp, #392	; 0x188
    faaa:	4604      	mov	r4, r0
    faac:	f854 6f04 	ldr.w	r6, [r4, #4]!
    fab0:	f843 6b04 	str.w	r6, [r3], #4
    fab4:	4573      	cmp	r3, lr
    fab6:	d1f9      	bne.n	faac <POINTonE2_integrate_buckets+0x24>
    fab8:	aec2      	add	r6, sp, #776	; 0x308
    faba:	ab62      	add	r3, sp, #392	; 0x188
    fabc:	f850 4f04 	ldr.w	r4, [r0, #4]!
    fac0:	f843 4b04 	str.w	r4, [r3], #4
    fac4:	42b3      	cmp	r3, r6
    fac6:	d1f9      	bne.n	fabc <POINTonE2_integrate_buckets+0x34>
    fac8:	4663      	mov	r3, ip
    faca:	f50c 74c0 	add.w	r4, ip, #384	; 0x180
    face:	2000      	movs	r0, #0
    fad0:	f843 0b04 	str.w	r0, [r3], #4
    fad4:	42a3      	cmp	r3, r4
    fad6:	d1fb      	bne.n	fad0 <POINTonE2_integrate_buckets+0x48>
    fad8:	b1f5      	cbz	r5, fb18 <POINTonE2_integrate_buckets+0x90>
    fada:	f44f 75c0 	mov.w	r5, #384	; 0x180
    fade:	4095      	lsls	r5, r2
    fae0:	440d      	add	r5, r1
    fae2:	f5a5 75c0 	sub.w	r5, r5, #384	; 0x180
    fae6:	4689      	mov	r9, r1
    fae8:	2600      	movs	r6, #0
    faea:	e003      	b.n	faf4 <POINTonE2_integrate_buckets+0x6c>
    faec:	f5a5 75c0 	sub.w	r5, r5, #384	; 0x180
    faf0:	454d      	cmp	r5, r9
    faf2:	d011      	beq.n	fb18 <POINTonE2_integrate_buckets+0x90>
    faf4:	f5a5 74c0 	sub.w	r4, r5, #384	; 0x180
    faf8:	46a0      	mov	r8, r4
    fafa:	4622      	mov	r2, r4
    fafc:	a902      	add	r1, sp, #8
    fafe:	4608      	mov	r0, r1
    fb00:	f7ff fdda 	bl	f6b8 <POINTonE2xyzz_dadd>
    fb04:	aa02      	add	r2, sp, #8
    fb06:	a962      	add	r1, sp, #392	; 0x188
    fb08:	4608      	mov	r0, r1
    fb0a:	f7ff fdd5 	bl	f6b8 <POINTonE2xyzz_dadd>
    fb0e:	f844 6b04 	str.w	r6, [r4], #4
    fb12:	42a5      	cmp	r5, r4
    fb14:	d1fb      	bne.n	fb0e <POINTonE2_integrate_buckets+0x86>
    fb16:	e7e9      	b.n	faec <POINTonE2_integrate_buckets+0x64>
    fb18:	4c0e      	ldr	r4, [pc, #56]	; (fb54 <POINTonE2_integrate_buckets+0xcc>)
    fb1a:	4d0f      	ldr	r5, [pc, #60]	; (fb58 <POINTonE2_integrate_buckets+0xd0>)
    fb1c:	9500      	str	r5, [sp, #0]
    fb1e:	4623      	mov	r3, r4
    fb20:	aaaa      	add	r2, sp, #680	; 0x2a8
    fb22:	a962      	add	r1, sp, #392	; 0x188
    fb24:	4638      	mov	r0, r7
    fb26:	f7f5 fb3d 	bl	51a4 <mul_mont_384x>
    fb2a:	9500      	str	r5, [sp, #0]
    fb2c:	4623      	mov	r3, r4
    fb2e:	aa92      	add	r2, sp, #584	; 0x248
    fb30:	a97a      	add	r1, sp, #488	; 0x1e8
    fb32:	f107 0060 	add.w	r0, r7, #96	; 0x60
    fb36:	f7f5 fb35 	bl	51a4 <mul_mont_384x>
    fb3a:	aba9      	add	r3, sp, #676	; 0x2a4
    fb3c:	37bc      	adds	r7, #188	; 0xbc
    fb3e:	a9c1      	add	r1, sp, #772	; 0x304
    fb40:	f853 2f04 	ldr.w	r2, [r3, #4]!
    fb44:	f847 2f04 	str.w	r2, [r7, #4]!
    fb48:	428b      	cmp	r3, r1
    fb4a:	d1f9      	bne.n	fb40 <POINTonE2_integrate_buckets+0xb8>
    fb4c:	f50d 7d43 	add.w	sp, sp, #780	; 0x30c
    fb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fb54:	0001ade8 	.word	0x0001ade8
    fb58:	fffcfffd 	.word	0xfffcfffd

0000fb5c <POINTonE2s_tile_pippenger>:
    fb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb60:	b089      	sub	sp, #36	; 0x24
    fb62:	9007      	str	r0, [sp, #28]
    fb64:	4693      	mov	fp, r2
    fb66:	461c      	mov	r4, r3
    fb68:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fb6a:	9815      	ldr	r0, [sp, #84]	; 0x54
    fb6c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    fb6e:	6826      	ldr	r6, [r4, #0]
    fb70:	460d      	mov	r5, r1
    fb72:	f855 9b04 	ldr.w	r9, [r5], #4
    fb76:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fb78:	3207      	adds	r2, #7
    fb7a:	08d2      	lsrs	r2, r2, #3
    fb7c:	9206      	str	r2, [sp, #24]
    fb7e:	1c41      	adds	r1, r0, #1
    fb80:	2201      	movs	r2, #1
    fb82:	408a      	lsls	r2, r1
    fb84:	3a01      	subs	r2, #1
    fb86:	9203      	str	r2, [sp, #12]
    fb88:	1e5a      	subs	r2, r3, #1
    fb8a:	ea22 0203 	bic.w	r2, r2, r3
    fb8e:	ea4f 7ad2 	mov.w	sl, r2, lsr #31
    fb92:	f08a 0201 	eor.w	r2, sl, #1
    fb96:	1a99      	subs	r1, r3, r2
    fb98:	9104      	str	r1, [sp, #16]
    fb9a:	1813      	adds	r3, r2, r0
    fb9c:	9305      	str	r3, [sp, #20]
    fb9e:	461a      	mov	r2, r3
    fba0:	4630      	mov	r0, r6
    fba2:	f7f0 fd79 	bl	698 <get_wval_limb>
    fba6:	fa00 f00a 	lsl.w	r0, r0, sl
    fbaa:	4639      	mov	r1, r7
    fbac:	9a03      	ldr	r2, [sp, #12]
    fbae:	4010      	ands	r0, r2
    fbb0:	f7f0 fd8f 	bl	6d2 <booth_encode>
    fbb4:	9002      	str	r0, [sp, #8]
    fbb6:	f8d4 8004 	ldr.w	r8, [r4, #4]
    fbba:	f1b8 0f00 	cmp.w	r8, #0
    fbbe:	d01a      	beq.n	fbf6 <POINTonE2s_tile_pippenger+0x9a>
    fbc0:	3408      	adds	r4, #8
    fbc2:	9a05      	ldr	r2, [sp, #20]
    fbc4:	9904      	ldr	r1, [sp, #16]
    fbc6:	4640      	mov	r0, r8
    fbc8:	f7f0 fd66 	bl	698 <get_wval_limb>
    fbcc:	fa00 f00a 	lsl.w	r0, r0, sl
    fbd0:	4639      	mov	r1, r7
    fbd2:	9b03      	ldr	r3, [sp, #12]
    fbd4:	4018      	ands	r0, r3
    fbd6:	f7f0 fd7c 	bl	6d2 <booth_encode>
    fbda:	9001      	str	r0, [sp, #4]
    fbdc:	f10b 3bff 	add.w	fp, fp, #4294967295
    fbe0:	464b      	mov	r3, r9
    fbe2:	463a      	mov	r2, r7
    fbe4:	9902      	ldr	r1, [sp, #8]
    fbe6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fbe8:	f7ff fd50 	bl	f68c <POINTonE2_bucket>
    fbec:	f1bb 0f01 	cmp.w	fp, #1
    fbf0:	d92e      	bls.n	fc50 <POINTonE2s_tile_pippenger+0xf4>
    fbf2:	2601      	movs	r6, #1
    fbf4:	e014      	b.n	fc20 <POINTonE2s_tile_pippenger+0xc4>
    fbf6:	3404      	adds	r4, #4
    fbf8:	9b06      	ldr	r3, [sp, #24]
    fbfa:	eb06 0803 	add.w	r8, r6, r3
    fbfe:	e7e0      	b.n	fbc2 <POINTonE2s_tile_pippenger+0x66>
    fc00:	9b06      	ldr	r3, [sp, #24]
    fc02:	4498      	add	r8, r3
    fc04:	e011      	b.n	fc2a <POINTonE2s_tile_pippenger+0xce>
    fc06:	f109 09c0 	add.w	r9, r9, #192	; 0xc0
    fc0a:	464b      	mov	r3, r9
    fc0c:	463a      	mov	r2, r7
    fc0e:	9901      	ldr	r1, [sp, #4]
    fc10:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fc12:	f7ff fd3b 	bl	f68c <POINTonE2_bucket>
    fc16:	3601      	adds	r6, #1
    fc18:	45b3      	cmp	fp, r6
    fc1a:	d01b      	beq.n	fc54 <POINTonE2s_tile_pippenger+0xf8>
    fc1c:	9b02      	ldr	r3, [sp, #8]
    fc1e:	9301      	str	r3, [sp, #4]
    fc20:	6823      	ldr	r3, [r4, #0]
    fc22:	2b00      	cmp	r3, #0
    fc24:	d0ec      	beq.n	fc00 <POINTonE2s_tile_pippenger+0xa4>
    fc26:	3404      	adds	r4, #4
    fc28:	4698      	mov	r8, r3
    fc2a:	9a05      	ldr	r2, [sp, #20]
    fc2c:	9904      	ldr	r1, [sp, #16]
    fc2e:	4640      	mov	r0, r8
    fc30:	f7f0 fd32 	bl	698 <get_wval_limb>
    fc34:	fa00 f00a 	lsl.w	r0, r0, sl
    fc38:	4639      	mov	r1, r7
    fc3a:	9b03      	ldr	r3, [sp, #12]
    fc3c:	4018      	ands	r0, r3
    fc3e:	f7f0 fd48 	bl	6d2 <booth_encode>
    fc42:	9002      	str	r0, [sp, #8]
    fc44:	682b      	ldr	r3, [r5, #0]
    fc46:	2b00      	cmp	r3, #0
    fc48:	d0dd      	beq.n	fc06 <POINTonE2s_tile_pippenger+0xaa>
    fc4a:	3504      	adds	r5, #4
    fc4c:	4699      	mov	r9, r3
    fc4e:	e7dc      	b.n	fc0a <POINTonE2s_tile_pippenger+0xae>
    fc50:	9b01      	ldr	r3, [sp, #4]
    fc52:	9302      	str	r3, [sp, #8]
    fc54:	682b      	ldr	r3, [r5, #0]
    fc56:	b163      	cbz	r3, fc72 <POINTonE2s_tile_pippenger+0x116>
    fc58:	463a      	mov	r2, r7
    fc5a:	9902      	ldr	r1, [sp, #8]
    fc5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fc5e:	f7ff fd15 	bl	f68c <POINTonE2_bucket>
    fc62:	1e7a      	subs	r2, r7, #1
    fc64:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fc66:	9807      	ldr	r0, [sp, #28]
    fc68:	f7ff ff0e 	bl	fa88 <POINTonE2_integrate_buckets>
    fc6c:	b009      	add	sp, #36	; 0x24
    fc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc72:	f109 03c0 	add.w	r3, r9, #192	; 0xc0
    fc76:	e7ef      	b.n	fc58 <POINTonE2s_tile_pippenger+0xfc>

0000fc78 <blst_p2s_tile_pippenger>:
    fc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc7a:	b087      	sub	sp, #28
    fc7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    fc7e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    fc80:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    fc82:	1937      	adds	r7, r6, r4
    fc84:	42af      	cmp	r7, r5
    fc86:	bf86      	itte	hi
    fc88:	1bac      	subhi	r4, r5, r6
    fc8a:	1c67      	addhi	r7, r4, #1
    fc8c:	4627      	movls	r7, r4
    fc8e:	9704      	str	r7, [sp, #16]
    fc90:	9403      	str	r4, [sp, #12]
    fc92:	9602      	str	r6, [sp, #8]
    fc94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    fc96:	9401      	str	r4, [sp, #4]
    fc98:	9500      	str	r5, [sp, #0]
    fc9a:	f7ff ff5f 	bl	fb5c <POINTonE2s_tile_pippenger>
    fc9e:	b007      	add	sp, #28
    fca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fca2 <POINTonE2s_mult_pippenger>:
    fca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fca6:	b0d1      	sub	sp, #324	; 0x144
    fca8:	4605      	mov	r5, r0
    fcaa:	468b      	mov	fp, r1
    fcac:	4691      	mov	r9, r2
    fcae:	469a      	mov	sl, r3
    fcb0:	f8dd 8168 	ldr.w	r8, [sp, #360]	; 0x168
    fcb4:	9e5c      	ldr	r6, [sp, #368]	; 0x170
    fcb6:	b30e      	cbz	r6, fcfc <POINTonE2s_mult_pippenger+0x5a>
    fcb8:	1e72      	subs	r2, r6, #1
    fcba:	f44f 73c0 	mov.w	r3, #384	; 0x180
    fcbe:	4093      	lsls	r3, r2
    fcc0:	0899      	lsrs	r1, r3, #2
    fcc2:	2b03      	cmp	r3, #3
    fcc4:	d907      	bls.n	fcd6 <POINTonE2s_mult_pippenger+0x34>
    fcc6:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    fcc8:	2300      	movs	r3, #0
    fcca:	4618      	mov	r0, r3
    fccc:	f842 0b04 	str.w	r0, [r2], #4
    fcd0:	3301      	adds	r3, #1
    fcd2:	4299      	cmp	r1, r3
    fcd4:	d8fa      	bhi.n	fccc <POINTonE2s_mult_pippenger+0x2a>
    fcd6:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    fcd8:	462b      	mov	r3, r5
    fcda:	f505 7190 	add.w	r1, r5, #288	; 0x120
    fcde:	2200      	movs	r2, #0
    fce0:	f843 2b04 	str.w	r2, [r3], #4
    fce4:	4299      	cmp	r1, r3
    fce6:	d1fb      	bne.n	fce0 <POINTonE2s_mult_pippenger+0x3e>
    fce8:	fbb8 f3f6 	udiv	r3, r8, r6
    fcec:	fb06 8313 	mls	r3, r6, r3, r8
    fcf0:	1c5a      	adds	r2, r3, #1
    fcf2:	ebb8 0703 	subs.w	r7, r8, r3
    fcf6:	d040      	beq.n	fd7a <POINTonE2s_mult_pippenger+0xd8>
    fcf8:	9607      	str	r6, [sp, #28]
    fcfa:	e008      	b.n	fd0e <POINTonE2s_mult_pippenger+0x6c>
    fcfc:	4610      	mov	r0, r2
    fcfe:	f7f0 fcf4 	bl	6ea <pippenger_window_size>
    fd02:	4606      	mov	r6, r0
    fd04:	e7d8      	b.n	fcb8 <POINTonE2s_mult_pippenger+0x16>
    fd06:	1bbf      	subs	r7, r7, r6
    fd08:	d01f      	beq.n	fd4a <POINTonE2s_mult_pippenger+0xa8>
    fd0a:	9b07      	ldr	r3, [sp, #28]
    fd0c:	461a      	mov	r2, r3
    fd0e:	9204      	str	r2, [sp, #16]
    fd10:	9303      	str	r3, [sp, #12]
    fd12:	9702      	str	r7, [sp, #8]
    fd14:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    fd16:	9301      	str	r3, [sp, #4]
    fd18:	f8cd 8000 	str.w	r8, [sp]
    fd1c:	4653      	mov	r3, sl
    fd1e:	464a      	mov	r2, r9
    fd20:	4659      	mov	r1, fp
    fd22:	a808      	add	r0, sp, #32
    fd24:	f7ff ff1a 	bl	fb5c <POINTonE2s_tile_pippenger>
    fd28:	2300      	movs	r3, #0
    fd2a:	aa08      	add	r2, sp, #32
    fd2c:	4629      	mov	r1, r5
    fd2e:	4628      	mov	r0, r5
    fd30:	f7fa fbe6 	bl	a500 <POINTonE2_dadd>
    fd34:	2e00      	cmp	r6, #0
    fd36:	d0e6      	beq.n	fd06 <POINTonE2s_mult_pippenger+0x64>
    fd38:	2400      	movs	r4, #0
    fd3a:	4629      	mov	r1, r5
    fd3c:	4628      	mov	r0, r5
    fd3e:	f7fb f959 	bl	aff4 <POINTonE2_double>
    fd42:	3401      	adds	r4, #1
    fd44:	42a6      	cmp	r6, r4
    fd46:	d1f8      	bne.n	fd3a <POINTonE2s_mult_pippenger+0x98>
    fd48:	e7dd      	b.n	fd06 <POINTonE2s_mult_pippenger+0x64>
    fd4a:	4632      	mov	r2, r6
    fd4c:	9204      	str	r2, [sp, #16]
    fd4e:	9603      	str	r6, [sp, #12]
    fd50:	2400      	movs	r4, #0
    fd52:	9402      	str	r4, [sp, #8]
    fd54:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    fd56:	9301      	str	r3, [sp, #4]
    fd58:	f8cd 8000 	str.w	r8, [sp]
    fd5c:	4653      	mov	r3, sl
    fd5e:	464a      	mov	r2, r9
    fd60:	4659      	mov	r1, fp
    fd62:	a808      	add	r0, sp, #32
    fd64:	f7ff fefa 	bl	fb5c <POINTonE2s_tile_pippenger>
    fd68:	4623      	mov	r3, r4
    fd6a:	aa08      	add	r2, sp, #32
    fd6c:	4629      	mov	r1, r5
    fd6e:	4628      	mov	r0, r5
    fd70:	f7fa fbc6 	bl	a500 <POINTonE2_dadd>
    fd74:	b051      	add	sp, #324	; 0x144
    fd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd7a:	461e      	mov	r6, r3
    fd7c:	e7e6      	b.n	fd4c <POINTonE2s_mult_pippenger+0xaa>

0000fd7e <blst_p2s_mult_pippenger>:
    fd7e:	b510      	push	{r4, lr}
    fd80:	b084      	sub	sp, #16
    fd82:	2400      	movs	r4, #0
    fd84:	9402      	str	r4, [sp, #8]
    fd86:	9c07      	ldr	r4, [sp, #28]
    fd88:	9401      	str	r4, [sp, #4]
    fd8a:	9c06      	ldr	r4, [sp, #24]
    fd8c:	9400      	str	r4, [sp, #0]
    fd8e:	f7ff ff88 	bl	fca2 <POINTonE2s_mult_pippenger>
    fd92:	b004      	add	sp, #16
    fd94:	bd10      	pop	{r4, pc}

0000fd96 <blst_fr_add>:
    fd96:	b500      	push	{lr}
    fd98:	b083      	sub	sp, #12
    fd9a:	2308      	movs	r3, #8
    fd9c:	9300      	str	r3, [sp, #0]
    fd9e:	4b03      	ldr	r3, [pc, #12]	; (fdac <blst_fr_add+0x16>)
    fda0:	f7f1 f96c 	bl	107c <add_mod_n>
    fda4:	b003      	add	sp, #12
    fda6:	f85d fb04 	ldr.w	pc, [sp], #4
    fdaa:	bf00      	nop
    fdac:	0001bbe8 	.word	0x0001bbe8

0000fdb0 <blst_fr_sub>:
    fdb0:	b500      	push	{lr}
    fdb2:	b083      	sub	sp, #12
    fdb4:	2308      	movs	r3, #8
    fdb6:	9300      	str	r3, [sp, #0]
    fdb8:	4b02      	ldr	r3, [pc, #8]	; (fdc4 <blst_fr_sub+0x14>)
    fdba:	f7f0 fcac 	bl	716 <sub_mod_n>
    fdbe:	b003      	add	sp, #12
    fdc0:	f85d fb04 	ldr.w	pc, [sp], #4
    fdc4:	0001bbe8 	.word	0x0001bbe8

0000fdc8 <blst_fr_mul_by_3>:
    fdc8:	b508      	push	{r3, lr}
    fdca:	2308      	movs	r3, #8
    fdcc:	4a01      	ldr	r2, [pc, #4]	; (fdd4 <blst_fr_mul_by_3+0xc>)
    fdce:	f7f1 fdef 	bl	19b0 <mul_by_3_mod_n>
    fdd2:	bd08      	pop	{r3, pc}
    fdd4:	0001bbe8 	.word	0x0001bbe8

0000fdd8 <blst_fr_lshift>:
    fdd8:	b500      	push	{lr}
    fdda:	b083      	sub	sp, #12
    fddc:	2308      	movs	r3, #8
    fdde:	9300      	str	r3, [sp, #0]
    fde0:	4b02      	ldr	r3, [pc, #8]	; (fdec <blst_fr_lshift+0x14>)
    fde2:	f7f2 fbb3 	bl	254c <lshift_mod_n>
    fde6:	b003      	add	sp, #12
    fde8:	f85d fb04 	ldr.w	pc, [sp], #4
    fdec:	0001bbe8 	.word	0x0001bbe8

0000fdf0 <blst_fr_rshift>:
    fdf0:	b500      	push	{lr}
    fdf2:	b083      	sub	sp, #12
    fdf4:	2308      	movs	r3, #8
    fdf6:	9300      	str	r3, [sp, #0]
    fdf8:	4b02      	ldr	r3, [pc, #8]	; (fe04 <blst_fr_rshift+0x14>)
    fdfa:	f7f0 fcf0 	bl	7de <rshift_mod_n>
    fdfe:	b003      	add	sp, #12
    fe00:	f85d fb04 	ldr.w	pc, [sp], #4
    fe04:	0001bbe8 	.word	0x0001bbe8

0000fe08 <blst_fr_mul>:
    fe08:	b500      	push	{lr}
    fe0a:	b083      	sub	sp, #12
    fe0c:	2308      	movs	r3, #8
    fe0e:	9301      	str	r3, [sp, #4]
    fe10:	f04f 33ff 	mov.w	r3, #4294967295
    fe14:	9300      	str	r3, [sp, #0]
    fe16:	4b03      	ldr	r3, [pc, #12]	; (fe24 <blst_fr_mul+0x1c>)
    fe18:	f7f0 fe87 	bl	b2a <mul_mont_n>
    fe1c:	b003      	add	sp, #12
    fe1e:	f85d fb04 	ldr.w	pc, [sp], #4
    fe22:	bf00      	nop
    fe24:	0001bbe8 	.word	0x0001bbe8

0000fe28 <blst_fr_sqr>:
    fe28:	b500      	push	{lr}
    fe2a:	b083      	sub	sp, #12
    fe2c:	460a      	mov	r2, r1
    fe2e:	2308      	movs	r3, #8
    fe30:	9301      	str	r3, [sp, #4]
    fe32:	f04f 33ff 	mov.w	r3, #4294967295
    fe36:	9300      	str	r3, [sp, #0]
    fe38:	4b02      	ldr	r3, [pc, #8]	; (fe44 <blst_fr_sqr+0x1c>)
    fe3a:	f7f0 fe76 	bl	b2a <mul_mont_n>
    fe3e:	b003      	add	sp, #12
    fe40:	f85d fb04 	ldr.w	pc, [sp], #4
    fe44:	0001bbe8 	.word	0x0001bbe8

0000fe48 <blst_fr_cneg>:
    fe48:	b500      	push	{lr}
    fe4a:	b083      	sub	sp, #12
    fe4c:	1e53      	subs	r3, r2, #1
    fe4e:	ea23 0202 	bic.w	r2, r3, r2
    fe52:	2308      	movs	r3, #8
    fe54:	9300      	str	r3, [sp, #0]
    fe56:	4b04      	ldr	r3, [pc, #16]	; (fe68 <blst_fr_cneg+0x20>)
    fe58:	43d2      	mvns	r2, r2
    fe5a:	0fd2      	lsrs	r2, r2, #31
    fe5c:	f7f2 fd10 	bl	2880 <cneg_mod_n>
    fe60:	b003      	add	sp, #12
    fe62:	f85d fb04 	ldr.w	pc, [sp], #4
    fe66:	bf00      	nop
    fe68:	0001bbe8 	.word	0x0001bbe8

0000fe6c <blst_fr_to>:
    fe6c:	b500      	push	{lr}
    fe6e:	b083      	sub	sp, #12
    fe70:	4a07      	ldr	r2, [pc, #28]	; (fe90 <blst_fr_to+0x24>)
    fe72:	2308      	movs	r3, #8
    fe74:	9301      	str	r3, [sp, #4]
    fe76:	f04f 33ff 	mov.w	r3, #4294967295
    fe7a:	9300      	str	r3, [sp, #0]
    fe7c:	f502 6360 	add.w	r3, r2, #3584	; 0xe00
    fe80:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
    fe84:	f7f0 fe51 	bl	b2a <mul_mont_n>
    fe88:	b003      	add	sp, #12
    fe8a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe8e:	bf00      	nop
    fe90:	0001ade8 	.word	0x0001ade8

0000fe94 <blst_fr_from>:
    fe94:	b500      	push	{lr}
    fe96:	b083      	sub	sp, #12
    fe98:	2308      	movs	r3, #8
    fe9a:	9300      	str	r3, [sp, #0]
    fe9c:	f04f 33ff 	mov.w	r3, #4294967295
    fea0:	4a02      	ldr	r2, [pc, #8]	; (feac <blst_fr_from+0x18>)
    fea2:	f7f3 f9b9 	bl	3218 <from_mont_n>
    fea6:	b003      	add	sp, #12
    fea8:	f85d fb04 	ldr.w	pc, [sp], #4
    feac:	0001bbe8 	.word	0x0001bbe8

0000feb0 <blst_fr_from_scalar>:
    feb0:	b570      	push	{r4, r5, r6, lr}
    feb2:	b08a      	sub	sp, #40	; 0x28
    feb4:	4288      	cmp	r0, r1
    feb6:	d029      	beq.n	ff0c <__kernel_ram_size+0x2c>
    feb8:	460d      	mov	r5, r1
    feba:	3120      	adds	r1, #32
    febc:	2200      	movs	r2, #0
    febe:	43ee      	mvns	r6, r5
    fec0:	1873      	adds	r3, r6, r1
    fec2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    fec6:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
    feca:	f023 0303 	bic.w	r3, r3, #3
    fece:	ac0a      	add	r4, sp, #40	; 0x28
    fed0:	4423      	add	r3, r4
    fed2:	f843 2c20 	str.w	r2, [r3, #-32]
    fed6:	428d      	cmp	r5, r1
    fed8:	d1f2      	bne.n	fec0 <blst_fr_from_scalar+0x10>
    feda:	4a13      	ldr	r2, [pc, #76]	; (ff28 <__kernel_ram_size+0x48>)
    fedc:	ac02      	add	r4, sp, #8
    fede:	2308      	movs	r3, #8
    fee0:	9301      	str	r3, [sp, #4]
    fee2:	f04f 33ff 	mov.w	r3, #4294967295
    fee6:	9300      	str	r3, [sp, #0]
    fee8:	f502 6360 	add.w	r3, r2, #3584	; 0xe00
    feec:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
    fef0:	4621      	mov	r1, r4
    fef2:	f7f0 fe1a 	bl	b2a <mul_mont_n>
    fef6:	2300      	movs	r3, #0
    fef8:	9302      	str	r3, [sp, #8]
    fefa:	9303      	str	r3, [sp, #12]
    fefc:	9304      	str	r3, [sp, #16]
    fefe:	9305      	str	r3, [sp, #20]
    ff00:	9306      	str	r3, [sp, #24]
    ff02:	9307      	str	r3, [sp, #28]
    ff04:	9308      	str	r3, [sp, #32]
    ff06:	9309      	str	r3, [sp, #36]	; 0x24
    ff08:	b00a      	add	sp, #40	; 0x28
    ff0a:	bd70      	pop	{r4, r5, r6, pc}
    ff0c:	4a06      	ldr	r2, [pc, #24]	; (ff28 <__kernel_ram_size+0x48>)
    ff0e:	2308      	movs	r3, #8
    ff10:	9301      	str	r3, [sp, #4]
    ff12:	f04f 33ff 	mov.w	r3, #4294967295
    ff16:	9300      	str	r3, [sp, #0]
    ff18:	f502 6360 	add.w	r3, r2, #3584	; 0xe00
    ff1c:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
    ff20:	f7f0 fe03 	bl	b2a <mul_mont_n>
    ff24:	e7f0      	b.n	ff08 <__kernel_ram_size+0x28>
    ff26:	bf00      	nop
    ff28:	0001ade8 	.word	0x0001ade8

0000ff2c <blst_scalar_from_fr>:
    ff2c:	b530      	push	{r4, r5, lr}
    ff2e:	b08b      	sub	sp, #44	; 0x2c
    ff30:	4604      	mov	r4, r0
    ff32:	4281      	cmp	r1, r0
    ff34:	d00e      	beq.n	ff54 <blst_scalar_from_fr+0x28>
    ff36:	ad02      	add	r5, sp, #8
    ff38:	2308      	movs	r3, #8
    ff3a:	9300      	str	r3, [sp, #0]
    ff3c:	f04f 33ff 	mov.w	r3, #4294967295
    ff40:	4a15      	ldr	r2, [pc, #84]	; (ff98 <blst_scalar_from_fr+0x6c>)
    ff42:	4628      	mov	r0, r5
    ff44:	f7f3 f968 	bl	3218 <from_mont_n>
    ff48:	42ac      	cmp	r4, r5
    ff4a:	d00b      	beq.n	ff64 <blst_scalar_from_fr+0x38>
    ff4c:	a901      	add	r1, sp, #4
    ff4e:	f105 001c 	add.w	r0, r5, #28
    ff52:	e016      	b.n	ff82 <blst_scalar_from_fr+0x56>
    ff54:	2308      	movs	r3, #8
    ff56:	9300      	str	r3, [sp, #0]
    ff58:	f04f 33ff 	mov.w	r3, #4294967295
    ff5c:	4a0e      	ldr	r2, [pc, #56]	; (ff98 <blst_scalar_from_fr+0x6c>)
    ff5e:	f7f3 f95b 	bl	3218 <from_mont_n>
    ff62:	e009      	b.n	ff78 <blst_scalar_from_fr+0x4c>
    ff64:	2300      	movs	r3, #0
    ff66:	9302      	str	r3, [sp, #8]
    ff68:	9303      	str	r3, [sp, #12]
    ff6a:	9304      	str	r3, [sp, #16]
    ff6c:	9305      	str	r3, [sp, #20]
    ff6e:	9306      	str	r3, [sp, #24]
    ff70:	9307      	str	r3, [sp, #28]
    ff72:	9308      	str	r3, [sp, #32]
    ff74:	9309      	str	r3, [sp, #36]	; 0x24
    ff76:	ab02      	add	r3, sp, #8
    ff78:	b00b      	add	sp, #44	; 0x2c
    ff7a:	bd30      	pop	{r4, r5, pc}
    ff7c:	3404      	adds	r4, #4
    ff7e:	4281      	cmp	r1, r0
    ff80:	d0f0      	beq.n	ff64 <blst_scalar_from_fr+0x38>
    ff82:	f851 2f04 	ldr.w	r2, [r1, #4]!
    ff86:	4623      	mov	r3, r4
    ff88:	1d25      	adds	r5, r4, #4
    ff8a:	f803 2b01 	strb.w	r2, [r3], #1
    ff8e:	0a12      	lsrs	r2, r2, #8
    ff90:	42ab      	cmp	r3, r5
    ff92:	d1fa      	bne.n	ff8a <blst_scalar_from_fr+0x5e>
    ff94:	e7f2      	b.n	ff7c <blst_scalar_from_fr+0x50>
    ff96:	bf00      	nop
    ff98:	0001bbe8 	.word	0x0001bbe8

0000ff9c <blst_scalar_fr_check>:
    ff9c:	b510      	push	{r4, lr}
    ff9e:	4604      	mov	r4, r0
    ffa0:	2208      	movs	r2, #8
    ffa2:	4907      	ldr	r1, [pc, #28]	; (ffc0 <blst_scalar_fr_check+0x24>)
    ffa4:	f7f0 fbed 	bl	782 <check_mod_n>
    ffa8:	1e63      	subs	r3, r4, #1
    ffaa:	341f      	adds	r4, #31
    ffac:	2200      	movs	r2, #0
    ffae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    ffb2:	430a      	orrs	r2, r1
    ffb4:	42a3      	cmp	r3, r4
    ffb6:	d1fa      	bne.n	ffae <blst_scalar_fr_check+0x12>
    ffb8:	3a01      	subs	r2, #1
    ffba:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    ffbe:	bd10      	pop	{r4, pc}
    ffc0:	0001bbe8 	.word	0x0001bbe8

0000ffc4 <blst_sk_check>:
    ffc4:	b508      	push	{r3, lr}
    ffc6:	2208      	movs	r2, #8
    ffc8:	4901      	ldr	r1, [pc, #4]	; (ffd0 <blst_sk_check+0xc>)
    ffca:	f7f0 fbda 	bl	782 <check_mod_n>
    ffce:	bd08      	pop	{r3, pc}
    ffd0:	0001bbe8 	.word	0x0001bbe8

0000ffd4 <blst_sk_add_n_check>:
    ffd4:	b500      	push	{lr}
    ffd6:	b083      	sub	sp, #12
    ffd8:	2308      	movs	r3, #8
    ffda:	9300      	str	r3, [sp, #0]
    ffdc:	4b02      	ldr	r3, [pc, #8]	; (ffe8 <blst_sk_add_n_check+0x14>)
    ffde:	f7f4 f895 	bl	410c <add_n_check_mod_n>
    ffe2:	b003      	add	sp, #12
    ffe4:	f85d fb04 	ldr.w	pc, [sp], #4
    ffe8:	0001bbe8 	.word	0x0001bbe8

0000ffec <blst_sk_sub_n_check>:
    ffec:	b500      	push	{lr}
    ffee:	b083      	sub	sp, #12
    fff0:	2308      	movs	r3, #8
    fff2:	9300      	str	r3, [sp, #0]
    fff4:	4b02      	ldr	r3, [pc, #8]	; (10000 <CONFIG_PM_PARTITION_SIZE_SPM>)
    fff6:	f7f3 f89f 	bl	3138 <sub_n_check_mod_n>
    fffa:	b003      	add	sp, #12
    fffc:	f85d fb04 	ldr.w	pc, [sp], #4
   10000:	0001bbe8 	.word	0x0001bbe8

00010004 <blst_sk_mul_n_check>:
   10004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10008:	b092      	sub	sp, #72	; 0x48
   1000a:	4604      	mov	r4, r0
   1000c:	4615      	mov	r5, r2
   1000e:	ea41 0302 	orr.w	r3, r1, r2
   10012:	f013 0f03 	tst.w	r3, #3
   10016:	d026      	beq.n	10066 <blst_sk_mul_n_check+0x62>
   10018:	460f      	mov	r7, r1
   1001a:	4610      	mov	r0, r2
   1001c:	3120      	adds	r1, #32
   1001e:	2200      	movs	r2, #0
   10020:	ea6f 0c07 	mvn.w	ip, r7
   10024:	eb0c 0301 	add.w	r3, ip, r1
   10028:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
   1002c:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
   10030:	f023 0303 	bic.w	r3, r3, #3
   10034:	ae12      	add	r6, sp, #72	; 0x48
   10036:	4433      	add	r3, r6
   10038:	f843 2c20 	str.w	r2, [r3, #-32]
   1003c:	428f      	cmp	r7, r1
   1003e:	d1f1      	bne.n	10024 <blst_sk_mul_n_check+0x20>
   10040:	f105 0220 	add.w	r2, r5, #32
   10044:	2100      	movs	r1, #0
   10046:	43c6      	mvns	r6, r0
   10048:	18b3      	adds	r3, r6, r2
   1004a:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
   1004e:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
   10052:	f023 0303 	bic.w	r3, r3, #3
   10056:	ad12      	add	r5, sp, #72	; 0x48
   10058:	442b      	add	r3, r5
   1005a:	f843 1c40 	str.w	r1, [r3, #-64]
   1005e:	4290      	cmp	r0, r2
   10060:	d1f2      	bne.n	10048 <blst_sk_mul_n_check+0x44>
   10062:	ad02      	add	r5, sp, #8
   10064:	a90a      	add	r1, sp, #40	; 0x28
   10066:	4f2a      	ldr	r7, [pc, #168]	; (10110 <blst_sk_mul_n_check+0x10c>)
   10068:	f507 6860 	add.w	r8, r7, #3584	; 0xe00
   1006c:	f507 6762 	add.w	r7, r7, #3616	; 0xe20
   10070:	ae0a      	add	r6, sp, #40	; 0x28
   10072:	f04f 0a08 	mov.w	sl, #8
   10076:	f8cd a004 	str.w	sl, [sp, #4]
   1007a:	f04f 39ff 	mov.w	r9, #4294967295
   1007e:	f8cd 9000 	str.w	r9, [sp]
   10082:	4643      	mov	r3, r8
   10084:	463a      	mov	r2, r7
   10086:	4630      	mov	r0, r6
   10088:	f7f0 fd4f 	bl	b2a <mul_mont_n>
   1008c:	f8cd a004 	str.w	sl, [sp, #4]
   10090:	f8cd 9000 	str.w	r9, [sp]
   10094:	4643      	mov	r3, r8
   10096:	463a      	mov	r2, r7
   10098:	4629      	mov	r1, r5
   1009a:	eb0d 000a 	add.w	r0, sp, sl
   1009e:	f7f0 fd44 	bl	b2a <mul_mont_n>
   100a2:	f8cd a004 	str.w	sl, [sp, #4]
   100a6:	f8cd 9000 	str.w	r9, [sp]
   100aa:	4643      	mov	r3, r8
   100ac:	eb0d 020a 	add.w	r2, sp, sl
   100b0:	4631      	mov	r1, r6
   100b2:	4630      	mov	r0, r6
   100b4:	f7f0 fd39 	bl	b2a <mul_mont_n>
   100b8:	f8cd a000 	str.w	sl, [sp]
   100bc:	464b      	mov	r3, r9
   100be:	4642      	mov	r2, r8
   100c0:	4631      	mov	r1, r6
   100c2:	4630      	mov	r0, r6
   100c4:	f7f3 f8a8 	bl	3218 <from_mont_n>
   100c8:	4630      	mov	r0, r6
   100ca:	42b4      	cmp	r4, r6
   100cc:	d00f      	beq.n	100ee <blst_sk_mul_n_check+0xea>
   100ce:	ad09      	add	r5, sp, #36	; 0x24
   100d0:	361c      	adds	r6, #28
   100d2:	e002      	b.n	100da <blst_sk_mul_n_check+0xd6>
   100d4:	3404      	adds	r4, #4
   100d6:	42b5      	cmp	r5, r6
   100d8:	d009      	beq.n	100ee <blst_sk_mul_n_check+0xea>
   100da:	f855 2f04 	ldr.w	r2, [r5, #4]!
   100de:	4623      	mov	r3, r4
   100e0:	1d21      	adds	r1, r4, #4
   100e2:	f803 2b01 	strb.w	r2, [r3], #1
   100e6:	0a12      	lsrs	r2, r2, #8
   100e8:	428b      	cmp	r3, r1
   100ea:	d1fa      	bne.n	100e2 <blst_sk_mul_n_check+0xde>
   100ec:	e7f2      	b.n	100d4 <blst_sk_mul_n_check+0xd0>
   100ee:	ab09      	add	r3, sp, #36	; 0x24
   100f0:	f100 011c 	add.w	r1, r0, #28
   100f4:	2000      	movs	r0, #0
   100f6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   100fa:	4310      	orrs	r0, r2
   100fc:	428b      	cmp	r3, r1
   100fe:	d1fa      	bne.n	100f6 <blst_sk_mul_n_check+0xf2>
   10100:	1e43      	subs	r3, r0, #1
   10102:	ea23 0000 	bic.w	r0, r3, r0
   10106:	43c0      	mvns	r0, r0
   10108:	0fc0      	lsrs	r0, r0, #31
   1010a:	b012      	add	sp, #72	; 0x48
   1010c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10110:	0001ade8 	.word	0x0001ade8

00010114 <blst_sk_inverse>:
   10114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10118:	b08b      	sub	sp, #44	; 0x2c
   1011a:	4604      	mov	r4, r0
   1011c:	ea41 0300 	orr.w	r3, r1, r0
   10120:	f013 0f03 	tst.w	r3, #3
   10124:	d035      	beq.n	10192 <blst_sk_inverse+0x7e>
   10126:	460e      	mov	r6, r1
   10128:	4605      	mov	r5, r0
   1012a:	3120      	adds	r1, #32
   1012c:	2200      	movs	r2, #0
   1012e:	43f7      	mvns	r7, r6
   10130:	187b      	adds	r3, r7, r1
   10132:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
   10136:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   1013a:	f023 0303 	bic.w	r3, r3, #3
   1013e:	a80a      	add	r0, sp, #40	; 0x28
   10140:	4403      	add	r3, r0
   10142:	f843 2c20 	str.w	r2, [r3, #-32]
   10146:	428e      	cmp	r6, r1
   10148:	d1f2      	bne.n	10130 <blst_sk_inverse+0x1c>
   1014a:	4a2b      	ldr	r2, [pc, #172]	; (101f8 <blst_sk_inverse+0xe4>)
   1014c:	f502 6760 	add.w	r7, r2, #3584	; 0xe00
   10150:	ae02      	add	r6, sp, #8
   10152:	f04f 0908 	mov.w	r9, #8
   10156:	f8cd 9004 	str.w	r9, [sp, #4]
   1015a:	f04f 38ff 	mov.w	r8, #4294967295
   1015e:	f8cd 8000 	str.w	r8, [sp]
   10162:	463b      	mov	r3, r7
   10164:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
   10168:	4631      	mov	r1, r6
   1016a:	4630      	mov	r0, r6
   1016c:	f7f0 fcdd 	bl	b2a <mul_mont_n>
   10170:	4631      	mov	r1, r6
   10172:	4630      	mov	r0, r6
   10174:	f7f4 fa0a 	bl	458c <reciprocal_fr>
   10178:	f8cd 9000 	str.w	r9, [sp]
   1017c:	4643      	mov	r3, r8
   1017e:	463a      	mov	r2, r7
   10180:	4631      	mov	r1, r6
   10182:	4630      	mov	r0, r6
   10184:	f7f3 f848 	bl	3218 <from_mont_n>
   10188:	42b5      	cmp	r5, r6
   1018a:	d01b      	beq.n	101c4 <blst_sk_inverse+0xb0>
   1018c:	ad01      	add	r5, sp, #4
   1018e:	361c      	adds	r6, #28
   10190:	e028      	b.n	101e4 <blst_sk_inverse+0xd0>
   10192:	4a19      	ldr	r2, [pc, #100]	; (101f8 <blst_sk_inverse+0xe4>)
   10194:	f502 6560 	add.w	r5, r2, #3584	; 0xe00
   10198:	2708      	movs	r7, #8
   1019a:	9701      	str	r7, [sp, #4]
   1019c:	f04f 36ff 	mov.w	r6, #4294967295
   101a0:	9600      	str	r6, [sp, #0]
   101a2:	462b      	mov	r3, r5
   101a4:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
   101a8:	f7f0 fcbf 	bl	b2a <mul_mont_n>
   101ac:	4621      	mov	r1, r4
   101ae:	4620      	mov	r0, r4
   101b0:	f7f4 f9ec 	bl	458c <reciprocal_fr>
   101b4:	9700      	str	r7, [sp, #0]
   101b6:	4633      	mov	r3, r6
   101b8:	462a      	mov	r2, r5
   101ba:	4621      	mov	r1, r4
   101bc:	4620      	mov	r0, r4
   101be:	f7f3 f82b 	bl	3218 <from_mont_n>
   101c2:	e009      	b.n	101d8 <blst_sk_inverse+0xc4>
   101c4:	2300      	movs	r3, #0
   101c6:	9302      	str	r3, [sp, #8]
   101c8:	9303      	str	r3, [sp, #12]
   101ca:	9304      	str	r3, [sp, #16]
   101cc:	9305      	str	r3, [sp, #20]
   101ce:	9306      	str	r3, [sp, #24]
   101d0:	9307      	str	r3, [sp, #28]
   101d2:	9308      	str	r3, [sp, #32]
   101d4:	9309      	str	r3, [sp, #36]	; 0x24
   101d6:	ab02      	add	r3, sp, #8
   101d8:	b00b      	add	sp, #44	; 0x2c
   101da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   101de:	3404      	adds	r4, #4
   101e0:	42b5      	cmp	r5, r6
   101e2:	d0ef      	beq.n	101c4 <blst_sk_inverse+0xb0>
   101e4:	f855 2f04 	ldr.w	r2, [r5, #4]!
   101e8:	4623      	mov	r3, r4
   101ea:	1d21      	adds	r1, r4, #4
   101ec:	f803 2b01 	strb.w	r2, [r3], #1
   101f0:	0a12      	lsrs	r2, r2, #8
   101f2:	428b      	cmp	r3, r1
   101f4:	d1fa      	bne.n	101ec <blst_sk_inverse+0xd8>
   101f6:	e7f2      	b.n	101de <blst_sk_inverse+0xca>
   101f8:	0001ade8 	.word	0x0001ade8

000101fc <blst_fp_add>:
   101fc:	b500      	push	{lr}
   101fe:	b083      	sub	sp, #12
   10200:	230c      	movs	r3, #12
   10202:	9300      	str	r3, [sp, #0]
   10204:	4b02      	ldr	r3, [pc, #8]	; (10210 <blst_fp_add+0x14>)
   10206:	f7f0 ff39 	bl	107c <add_mod_n>
   1020a:	b003      	add	sp, #12
   1020c:	f85d fb04 	ldr.w	pc, [sp], #4
   10210:	0001ade8 	.word	0x0001ade8

00010214 <blst_fp_sub>:
   10214:	b500      	push	{lr}
   10216:	b083      	sub	sp, #12
   10218:	230c      	movs	r3, #12
   1021a:	9300      	str	r3, [sp, #0]
   1021c:	4b02      	ldr	r3, [pc, #8]	; (10228 <blst_fp_sub+0x14>)
   1021e:	f7f0 fa7a 	bl	716 <sub_mod_n>
   10222:	b003      	add	sp, #12
   10224:	f85d fb04 	ldr.w	pc, [sp], #4
   10228:	0001ade8 	.word	0x0001ade8

0001022c <blst_fp_mul_by_3>:
   1022c:	b508      	push	{r3, lr}
   1022e:	230c      	movs	r3, #12
   10230:	4a01      	ldr	r2, [pc, #4]	; (10238 <blst_fp_mul_by_3+0xc>)
   10232:	f7f1 fbbd 	bl	19b0 <mul_by_3_mod_n>
   10236:	bd08      	pop	{r3, pc}
   10238:	0001ade8 	.word	0x0001ade8

0001023c <blst_fp_mul_by_8>:
   1023c:	b500      	push	{lr}
   1023e:	b083      	sub	sp, #12
   10240:	230c      	movs	r3, #12
   10242:	9300      	str	r3, [sp, #0]
   10244:	4b03      	ldr	r3, [pc, #12]	; (10254 <blst_fp_mul_by_8+0x18>)
   10246:	2203      	movs	r2, #3
   10248:	f7f2 f980 	bl	254c <lshift_mod_n>
   1024c:	b003      	add	sp, #12
   1024e:	f85d fb04 	ldr.w	pc, [sp], #4
   10252:	bf00      	nop
   10254:	0001ade8 	.word	0x0001ade8

00010258 <blst_fp_lshift>:
   10258:	b500      	push	{lr}
   1025a:	b083      	sub	sp, #12
   1025c:	230c      	movs	r3, #12
   1025e:	9300      	str	r3, [sp, #0]
   10260:	4b02      	ldr	r3, [pc, #8]	; (1026c <blst_fp_lshift+0x14>)
   10262:	f7f2 f973 	bl	254c <lshift_mod_n>
   10266:	b003      	add	sp, #12
   10268:	f85d fb04 	ldr.w	pc, [sp], #4
   1026c:	0001ade8 	.word	0x0001ade8

00010270 <blst_fp_mul>:
   10270:	b500      	push	{lr}
   10272:	b083      	sub	sp, #12
   10274:	230c      	movs	r3, #12
   10276:	9301      	str	r3, [sp, #4]
   10278:	4b03      	ldr	r3, [pc, #12]	; (10288 <blst_fp_mul+0x18>)
   1027a:	9300      	str	r3, [sp, #0]
   1027c:	4b03      	ldr	r3, [pc, #12]	; (1028c <blst_fp_mul+0x1c>)
   1027e:	f7f0 fc54 	bl	b2a <mul_mont_n>
   10282:	b003      	add	sp, #12
   10284:	f85d fb04 	ldr.w	pc, [sp], #4
   10288:	fffcfffd 	.word	0xfffcfffd
   1028c:	0001ade8 	.word	0x0001ade8

00010290 <blst_fp_sqr>:
   10290:	b500      	push	{lr}
   10292:	b083      	sub	sp, #12
   10294:	460a      	mov	r2, r1
   10296:	230c      	movs	r3, #12
   10298:	9301      	str	r3, [sp, #4]
   1029a:	4b04      	ldr	r3, [pc, #16]	; (102ac <blst_fp_sqr+0x1c>)
   1029c:	9300      	str	r3, [sp, #0]
   1029e:	4b04      	ldr	r3, [pc, #16]	; (102b0 <blst_fp_sqr+0x20>)
   102a0:	f7f0 fc43 	bl	b2a <mul_mont_n>
   102a4:	b003      	add	sp, #12
   102a6:	f85d fb04 	ldr.w	pc, [sp], #4
   102aa:	bf00      	nop
   102ac:	fffcfffd 	.word	0xfffcfffd
   102b0:	0001ade8 	.word	0x0001ade8

000102b4 <blst_fp_cneg>:
   102b4:	b500      	push	{lr}
   102b6:	b083      	sub	sp, #12
   102b8:	1e53      	subs	r3, r2, #1
   102ba:	ea23 0202 	bic.w	r2, r3, r2
   102be:	230c      	movs	r3, #12
   102c0:	9300      	str	r3, [sp, #0]
   102c2:	4b04      	ldr	r3, [pc, #16]	; (102d4 <blst_fp_cneg+0x20>)
   102c4:	43d2      	mvns	r2, r2
   102c6:	0fd2      	lsrs	r2, r2, #31
   102c8:	f7f2 fada 	bl	2880 <cneg_mod_n>
   102cc:	b003      	add	sp, #12
   102ce:	f85d fb04 	ldr.w	pc, [sp], #4
   102d2:	bf00      	nop
   102d4:	0001ade8 	.word	0x0001ade8

000102d8 <blst_fp_to>:
   102d8:	b500      	push	{lr}
   102da:	b083      	sub	sp, #12
   102dc:	230c      	movs	r3, #12
   102de:	9301      	str	r3, [sp, #4]
   102e0:	4b04      	ldr	r3, [pc, #16]	; (102f4 <blst_fp_to+0x1c>)
   102e2:	9300      	str	r3, [sp, #0]
   102e4:	4b04      	ldr	r3, [pc, #16]	; (102f8 <blst_fp_to+0x20>)
   102e6:	4a05      	ldr	r2, [pc, #20]	; (102fc <blst_fp_to+0x24>)
   102e8:	f7f0 fc1f 	bl	b2a <mul_mont_n>
   102ec:	b003      	add	sp, #12
   102ee:	f85d fb04 	ldr.w	pc, [sp], #4
   102f2:	bf00      	nop
   102f4:	fffcfffd 	.word	0xfffcfffd
   102f8:	0001ade8 	.word	0x0001ade8
   102fc:	0001c198 	.word	0x0001c198

00010300 <blst_fp_from>:
   10300:	b500      	push	{lr}
   10302:	b083      	sub	sp, #12
   10304:	230c      	movs	r3, #12
   10306:	9300      	str	r3, [sp, #0]
   10308:	4b03      	ldr	r3, [pc, #12]	; (10318 <blst_fp_from+0x18>)
   1030a:	4a04      	ldr	r2, [pc, #16]	; (1031c <blst_fp_from+0x1c>)
   1030c:	f7f2 ff84 	bl	3218 <from_mont_n>
   10310:	b003      	add	sp, #12
   10312:	f85d fb04 	ldr.w	pc, [sp], #4
   10316:	bf00      	nop
   10318:	fffcfffd 	.word	0xfffcfffd
   1031c:	0001ade8 	.word	0x0001ade8

00010320 <blst_fp_from_uint32>:
   10320:	b500      	push	{lr}
   10322:	b083      	sub	sp, #12
   10324:	230c      	movs	r3, #12
   10326:	9301      	str	r3, [sp, #4]
   10328:	4b04      	ldr	r3, [pc, #16]	; (1033c <blst_fp_from_uint32+0x1c>)
   1032a:	9300      	str	r3, [sp, #0]
   1032c:	4b04      	ldr	r3, [pc, #16]	; (10340 <blst_fp_from_uint32+0x20>)
   1032e:	4a05      	ldr	r2, [pc, #20]	; (10344 <blst_fp_from_uint32+0x24>)
   10330:	f7f0 fbfb 	bl	b2a <mul_mont_n>
   10334:	b003      	add	sp, #12
   10336:	f85d fb04 	ldr.w	pc, [sp], #4
   1033a:	bf00      	nop
   1033c:	fffcfffd 	.word	0xfffcfffd
   10340:	0001ade8 	.word	0x0001ade8
   10344:	0001c198 	.word	0x0001c198

00010348 <blst_uint32_from_fp>:
   10348:	b500      	push	{lr}
   1034a:	b083      	sub	sp, #12
   1034c:	230c      	movs	r3, #12
   1034e:	9300      	str	r3, [sp, #0]
   10350:	4b03      	ldr	r3, [pc, #12]	; (10360 <blst_uint32_from_fp+0x18>)
   10352:	4a04      	ldr	r2, [pc, #16]	; (10364 <blst_uint32_from_fp+0x1c>)
   10354:	f7f2 ff60 	bl	3218 <from_mont_n>
   10358:	b003      	add	sp, #12
   1035a:	f85d fb04 	ldr.w	pc, [sp], #4
   1035e:	bf00      	nop
   10360:	fffcfffd 	.word	0xfffcfffd
   10364:	0001ade8 	.word	0x0001ade8

00010368 <blst_fp_from_uint64>:
   10368:	b500      	push	{lr}
   1036a:	b083      	sub	sp, #12
   1036c:	230c      	movs	r3, #12
   1036e:	9301      	str	r3, [sp, #4]
   10370:	4b04      	ldr	r3, [pc, #16]	; (10384 <blst_fp_from_uint64+0x1c>)
   10372:	9300      	str	r3, [sp, #0]
   10374:	4b04      	ldr	r3, [pc, #16]	; (10388 <blst_fp_from_uint64+0x20>)
   10376:	4a05      	ldr	r2, [pc, #20]	; (1038c <blst_fp_from_uint64+0x24>)
   10378:	f7f0 fbd7 	bl	b2a <mul_mont_n>
   1037c:	b003      	add	sp, #12
   1037e:	f85d fb04 	ldr.w	pc, [sp], #4
   10382:	bf00      	nop
   10384:	fffcfffd 	.word	0xfffcfffd
   10388:	0001ade8 	.word	0x0001ade8
   1038c:	0001c198 	.word	0x0001c198

00010390 <blst_uint64_from_fp>:
   10390:	b500      	push	{lr}
   10392:	b083      	sub	sp, #12
   10394:	230c      	movs	r3, #12
   10396:	9300      	str	r3, [sp, #0]
   10398:	4b03      	ldr	r3, [pc, #12]	; (103a8 <blst_uint64_from_fp+0x18>)
   1039a:	4a04      	ldr	r2, [pc, #16]	; (103ac <blst_uint64_from_fp+0x1c>)
   1039c:	f7f2 ff3c 	bl	3218 <from_mont_n>
   103a0:	b003      	add	sp, #12
   103a2:	f85d fb04 	ldr.w	pc, [sp], #4
   103a6:	bf00      	nop
   103a8:	fffcfffd 	.word	0xfffcfffd
   103ac:	0001ade8 	.word	0x0001ade8

000103b0 <blst_fp_from_bendian>:
   103b0:	b570      	push	{r4, r5, r6, lr}
   103b2:	b08e      	sub	sp, #56	; 0x38
   103b4:	f101 0630 	add.w	r6, r1, #48	; 0x30
   103b8:	460a      	mov	r2, r1
   103ba:	2400      	movs	r4, #0
   103bc:	f101 052f 	add.w	r5, r1, #47	; 0x2f
   103c0:	1aab      	subs	r3, r5, r2
   103c2:	f812 1b01 	ldrb.w	r1, [r2], #1
   103c6:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   103ca:	f023 0303 	bic.w	r3, r3, #3
   103ce:	a90e      	add	r1, sp, #56	; 0x38
   103d0:	440b      	add	r3, r1
   103d2:	f843 4c30 	str.w	r4, [r3, #-48]
   103d6:	42b2      	cmp	r2, r6
   103d8:	d1f2      	bne.n	103c0 <blst_fp_from_bendian+0x10>
   103da:	230c      	movs	r3, #12
   103dc:	9301      	str	r3, [sp, #4]
   103de:	4b04      	ldr	r3, [pc, #16]	; (103f0 <blst_fp_from_bendian+0x40>)
   103e0:	9300      	str	r3, [sp, #0]
   103e2:	4b04      	ldr	r3, [pc, #16]	; (103f4 <blst_fp_from_bendian+0x44>)
   103e4:	4a04      	ldr	r2, [pc, #16]	; (103f8 <blst_fp_from_bendian+0x48>)
   103e6:	a902      	add	r1, sp, #8
   103e8:	f7f0 fb9f 	bl	b2a <mul_mont_n>
   103ec:	b00e      	add	sp, #56	; 0x38
   103ee:	bd70      	pop	{r4, r5, r6, pc}
   103f0:	fffcfffd 	.word	0xfffcfffd
   103f4:	0001ade8 	.word	0x0001ade8
   103f8:	0001c198 	.word	0x0001c198

000103fc <blst_bendian_from_fp>:
   103fc:	b530      	push	{r4, r5, lr}
   103fe:	b08f      	sub	sp, #60	; 0x3c
   10400:	4604      	mov	r4, r0
   10402:	230c      	movs	r3, #12
   10404:	9300      	str	r3, [sp, #0]
   10406:	4b0e      	ldr	r3, [pc, #56]	; (10440 <blst_bendian_from_fp+0x44>)
   10408:	4a0e      	ldr	r2, [pc, #56]	; (10444 <blst_bendian_from_fp+0x48>)
   1040a:	a802      	add	r0, sp, #8
   1040c:	f7f2 ff04 	bl	3218 <from_mont_n>
   10410:	f104 0530 	add.w	r5, r4, #48	; 0x30
   10414:	4622      	mov	r2, r4
   10416:	f104 002f 	add.w	r0, r4, #47	; 0x2f
   1041a:	1a83      	subs	r3, r0, r2
   1041c:	f023 0103 	bic.w	r1, r3, #3
   10420:	ac0e      	add	r4, sp, #56	; 0x38
   10422:	4421      	add	r1, r4
   10424:	f003 0303 	and.w	r3, r3, #3
   10428:	00db      	lsls	r3, r3, #3
   1042a:	f851 1c30 	ldr.w	r1, [r1, #-48]
   1042e:	fa21 f303 	lsr.w	r3, r1, r3
   10432:	f802 3b01 	strb.w	r3, [r2], #1
   10436:	42aa      	cmp	r2, r5
   10438:	d1ef      	bne.n	1041a <blst_bendian_from_fp+0x1e>
   1043a:	b00f      	add	sp, #60	; 0x3c
   1043c:	bd30      	pop	{r4, r5, pc}
   1043e:	bf00      	nop
   10440:	fffcfffd 	.word	0xfffcfffd
   10444:	0001ade8 	.word	0x0001ade8

00010448 <blst_fp_from_lendian>:
   10448:	b570      	push	{r4, r5, r6, lr}
   1044a:	b08e      	sub	sp, #56	; 0x38
   1044c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   10450:	2400      	movs	r4, #0
   10452:	43ce      	mvns	r6, r1
   10454:	18b3      	adds	r3, r6, r2
   10456:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
   1045a:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
   1045e:	f023 0303 	bic.w	r3, r3, #3
   10462:	ad0e      	add	r5, sp, #56	; 0x38
   10464:	442b      	add	r3, r5
   10466:	f843 4c30 	str.w	r4, [r3, #-48]
   1046a:	428a      	cmp	r2, r1
   1046c:	d1f2      	bne.n	10454 <blst_fp_from_lendian+0xc>
   1046e:	230c      	movs	r3, #12
   10470:	9301      	str	r3, [sp, #4]
   10472:	4b04      	ldr	r3, [pc, #16]	; (10484 <blst_fp_from_lendian+0x3c>)
   10474:	9300      	str	r3, [sp, #0]
   10476:	4b04      	ldr	r3, [pc, #16]	; (10488 <blst_fp_from_lendian+0x40>)
   10478:	4a04      	ldr	r2, [pc, #16]	; (1048c <blst_fp_from_lendian+0x44>)
   1047a:	a902      	add	r1, sp, #8
   1047c:	f7f0 fb55 	bl	b2a <mul_mont_n>
   10480:	b00e      	add	sp, #56	; 0x38
   10482:	bd70      	pop	{r4, r5, r6, pc}
   10484:	fffcfffd 	.word	0xfffcfffd
   10488:	0001ade8 	.word	0x0001ade8
   1048c:	0001c198 	.word	0x0001c198

00010490 <blst_lendian_from_fp>:
   10490:	b530      	push	{r4, r5, lr}
   10492:	b08f      	sub	sp, #60	; 0x3c
   10494:	4604      	mov	r4, r0
   10496:	ad02      	add	r5, sp, #8
   10498:	230c      	movs	r3, #12
   1049a:	9300      	str	r3, [sp, #0]
   1049c:	4b0c      	ldr	r3, [pc, #48]	; (104d0 <blst_lendian_from_fp+0x40>)
   1049e:	4a0d      	ldr	r2, [pc, #52]	; (104d4 <blst_lendian_from_fp+0x44>)
   104a0:	4628      	mov	r0, r5
   104a2:	f7f2 feb9 	bl	3218 <from_mont_n>
   104a6:	42ac      	cmp	r4, r5
   104a8:	d00f      	beq.n	104ca <blst_lendian_from_fp+0x3a>
   104aa:	462b      	mov	r3, r5
   104ac:	3530      	adds	r5, #48	; 0x30
   104ae:	e002      	b.n	104b6 <blst_lendian_from_fp+0x26>
   104b0:	3404      	adds	r4, #4
   104b2:	42ab      	cmp	r3, r5
   104b4:	d009      	beq.n	104ca <blst_lendian_from_fp+0x3a>
   104b6:	f853 1b04 	ldr.w	r1, [r3], #4
   104ba:	4622      	mov	r2, r4
   104bc:	1d20      	adds	r0, r4, #4
   104be:	f802 1b01 	strb.w	r1, [r2], #1
   104c2:	0a09      	lsrs	r1, r1, #8
   104c4:	4282      	cmp	r2, r0
   104c6:	d1fa      	bne.n	104be <blst_lendian_from_fp+0x2e>
   104c8:	e7f2      	b.n	104b0 <blst_lendian_from_fp+0x20>
   104ca:	b00f      	add	sp, #60	; 0x3c
   104cc:	bd30      	pop	{r4, r5, pc}
   104ce:	bf00      	nop
   104d0:	fffcfffd 	.word	0xfffcfffd
   104d4:	0001ade8 	.word	0x0001ade8

000104d8 <blst_fp2_add>:
   104d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104dc:	b082      	sub	sp, #8
   104de:	4604      	mov	r4, r0
   104e0:	460d      	mov	r5, r1
   104e2:	4616      	mov	r6, r2
   104e4:	4f0a      	ldr	r7, [pc, #40]	; (10510 <blst_fp2_add+0x38>)
   104e6:	f04f 080c 	mov.w	r8, #12
   104ea:	f8cd 8000 	str.w	r8, [sp]
   104ee:	463b      	mov	r3, r7
   104f0:	f7f0 fdc4 	bl	107c <add_mod_n>
   104f4:	f8cd 8000 	str.w	r8, [sp]
   104f8:	463b      	mov	r3, r7
   104fa:	f106 0230 	add.w	r2, r6, #48	; 0x30
   104fe:	f105 0130 	add.w	r1, r5, #48	; 0x30
   10502:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10506:	f7f0 fdb9 	bl	107c <add_mod_n>
   1050a:	b002      	add	sp, #8
   1050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10510:	0001ade8 	.word	0x0001ade8

00010514 <blst_fp2_sub>:
   10514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10518:	b082      	sub	sp, #8
   1051a:	4604      	mov	r4, r0
   1051c:	460d      	mov	r5, r1
   1051e:	4616      	mov	r6, r2
   10520:	4f0a      	ldr	r7, [pc, #40]	; (1054c <blst_fp2_sub+0x38>)
   10522:	f04f 080c 	mov.w	r8, #12
   10526:	f8cd 8000 	str.w	r8, [sp]
   1052a:	463b      	mov	r3, r7
   1052c:	f7f0 f8f3 	bl	716 <sub_mod_n>
   10530:	f8cd 8000 	str.w	r8, [sp]
   10534:	463b      	mov	r3, r7
   10536:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1053a:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1053e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10542:	f7f0 f8e8 	bl	716 <sub_mod_n>
   10546:	b002      	add	sp, #8
   10548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1054c:	0001ade8 	.word	0x0001ade8

00010550 <blst_fp2_mul_by_3>:
   10550:	b570      	push	{r4, r5, r6, lr}
   10552:	4604      	mov	r4, r0
   10554:	460d      	mov	r5, r1
   10556:	4e07      	ldr	r6, [pc, #28]	; (10574 <blst_fp2_mul_by_3+0x24>)
   10558:	230c      	movs	r3, #12
   1055a:	4632      	mov	r2, r6
   1055c:	f7f1 fa28 	bl	19b0 <mul_by_3_mod_n>
   10560:	230c      	movs	r3, #12
   10562:	4632      	mov	r2, r6
   10564:	f105 0130 	add.w	r1, r5, #48	; 0x30
   10568:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1056c:	f7f1 fa20 	bl	19b0 <mul_by_3_mod_n>
   10570:	bd70      	pop	{r4, r5, r6, pc}
   10572:	bf00      	nop
   10574:	0001ade8 	.word	0x0001ade8

00010578 <blst_fp2_mul_by_8>:
   10578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1057a:	b083      	sub	sp, #12
   1057c:	4604      	mov	r4, r0
   1057e:	460d      	mov	r5, r1
   10580:	4e08      	ldr	r6, [pc, #32]	; (105a4 <blst_fp2_mul_by_8+0x2c>)
   10582:	270c      	movs	r7, #12
   10584:	9700      	str	r7, [sp, #0]
   10586:	4633      	mov	r3, r6
   10588:	2203      	movs	r2, #3
   1058a:	f7f1 ffdf 	bl	254c <lshift_mod_n>
   1058e:	9700      	str	r7, [sp, #0]
   10590:	4633      	mov	r3, r6
   10592:	2203      	movs	r2, #3
   10594:	f105 0130 	add.w	r1, r5, #48	; 0x30
   10598:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1059c:	f7f1 ffd6 	bl	254c <lshift_mod_n>
   105a0:	b003      	add	sp, #12
   105a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105a4:	0001ade8 	.word	0x0001ade8

000105a8 <blst_fp2_lshift>:
   105a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105ac:	b082      	sub	sp, #8
   105ae:	4604      	mov	r4, r0
   105b0:	460d      	mov	r5, r1
   105b2:	4616      	mov	r6, r2
   105b4:	4f0a      	ldr	r7, [pc, #40]	; (105e0 <blst_fp2_lshift+0x38>)
   105b6:	f04f 080c 	mov.w	r8, #12
   105ba:	f8cd 8000 	str.w	r8, [sp]
   105be:	463b      	mov	r3, r7
   105c0:	f7f1 ffc4 	bl	254c <lshift_mod_n>
   105c4:	f8cd 8000 	str.w	r8, [sp]
   105c8:	463b      	mov	r3, r7
   105ca:	4632      	mov	r2, r6
   105cc:	f105 0130 	add.w	r1, r5, #48	; 0x30
   105d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   105d4:	f7f1 ffba 	bl	254c <lshift_mod_n>
   105d8:	b002      	add	sp, #8
   105da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105de:	bf00      	nop
   105e0:	0001ade8 	.word	0x0001ade8

000105e4 <blst_fp2_mul>:
   105e4:	b500      	push	{lr}
   105e6:	b083      	sub	sp, #12
   105e8:	4b03      	ldr	r3, [pc, #12]	; (105f8 <blst_fp2_mul+0x14>)
   105ea:	9300      	str	r3, [sp, #0]
   105ec:	4b03      	ldr	r3, [pc, #12]	; (105fc <blst_fp2_mul+0x18>)
   105ee:	f7f4 fdd9 	bl	51a4 <mul_mont_384x>
   105f2:	b003      	add	sp, #12
   105f4:	f85d fb04 	ldr.w	pc, [sp], #4
   105f8:	fffcfffd 	.word	0xfffcfffd
   105fc:	0001ade8 	.word	0x0001ade8

00010600 <blst_fp2_sqr>:
   10600:	b508      	push	{r3, lr}
   10602:	4b02      	ldr	r3, [pc, #8]	; (1060c <blst_fp2_sqr+0xc>)
   10604:	4a02      	ldr	r2, [pc, #8]	; (10610 <blst_fp2_sqr+0x10>)
   10606:	f7f8 ffc9 	bl	959c <sqr_mont_384x>
   1060a:	bd08      	pop	{r3, pc}
   1060c:	fffcfffd 	.word	0xfffcfffd
   10610:	0001ade8 	.word	0x0001ade8

00010614 <blst_fp2_cneg>:
   10614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10618:	b082      	sub	sp, #8
   1061a:	4605      	mov	r5, r0
   1061c:	460e      	mov	r6, r1
   1061e:	1e54      	subs	r4, r2, #1
   10620:	ea24 0402 	bic.w	r4, r4, r2
   10624:	43e4      	mvns	r4, r4
   10626:	0fe4      	lsrs	r4, r4, #31
   10628:	4f0a      	ldr	r7, [pc, #40]	; (10654 <blst_fp2_cneg+0x40>)
   1062a:	f04f 080c 	mov.w	r8, #12
   1062e:	f8cd 8000 	str.w	r8, [sp]
   10632:	463b      	mov	r3, r7
   10634:	4622      	mov	r2, r4
   10636:	f7f2 f923 	bl	2880 <cneg_mod_n>
   1063a:	f8cd 8000 	str.w	r8, [sp]
   1063e:	463b      	mov	r3, r7
   10640:	4622      	mov	r2, r4
   10642:	f106 0130 	add.w	r1, r6, #48	; 0x30
   10646:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1064a:	f7f2 f919 	bl	2880 <cneg_mod_n>
   1064e:	b002      	add	sp, #8
   10650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10654:	0001ade8 	.word	0x0001ade8

00010658 <blst_scalar_from_uint32>:
   10658:	4281      	cmp	r1, r0
   1065a:	d015      	beq.n	10688 <blst_scalar_from_uint32+0x30>
   1065c:	b410      	push	{r4}
   1065e:	1d03      	adds	r3, r0, #4
   10660:	3904      	subs	r1, #4
   10662:	3024      	adds	r0, #36	; 0x24
   10664:	f851 2f04 	ldr.w	r2, [r1, #4]!
   10668:	f803 2c04 	strb.w	r2, [r3, #-4]
   1066c:	0a14      	lsrs	r4, r2, #8
   1066e:	f803 4c03 	strb.w	r4, [r3, #-3]
   10672:	0c14      	lsrs	r4, r2, #16
   10674:	f803 4c02 	strb.w	r4, [r3, #-2]
   10678:	0e12      	lsrs	r2, r2, #24
   1067a:	f803 2c01 	strb.w	r2, [r3, #-1]
   1067e:	3304      	adds	r3, #4
   10680:	4283      	cmp	r3, r0
   10682:	d1ef      	bne.n	10664 <blst_scalar_from_uint32+0xc>
   10684:	bc10      	pop	{r4}
   10686:	4770      	bx	lr
   10688:	4770      	bx	lr

0001068a <blst_uint32_from_scalar>:
   1068a:	4288      	cmp	r0, r1
   1068c:	d018      	beq.n	106c0 <blst_uint32_from_scalar+0x36>
   1068e:	b430      	push	{r4, r5}
   10690:	1d0a      	adds	r2, r1, #4
   10692:	3804      	subs	r0, #4
   10694:	3124      	adds	r1, #36	; 0x24
   10696:	f812 4c04 	ldrb.w	r4, [r2, #-4]
   1069a:	f812 5c03 	ldrb.w	r5, [r2, #-3]
   1069e:	f812 3c02 	ldrb.w	r3, [r2, #-2]
   106a2:	041b      	lsls	r3, r3, #16
   106a4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   106a8:	4323      	orrs	r3, r4
   106aa:	f812 4c01 	ldrb.w	r4, [r2, #-1]
   106ae:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   106b2:	f840 3f04 	str.w	r3, [r0, #4]!
   106b6:	3204      	adds	r2, #4
   106b8:	428a      	cmp	r2, r1
   106ba:	d1ec      	bne.n	10696 <blst_uint32_from_scalar+0xc>
   106bc:	bc30      	pop	{r4, r5}
   106be:	4770      	bx	lr
   106c0:	4770      	bx	lr

000106c2 <blst_scalar_from_uint64>:
   106c2:	4281      	cmp	r1, r0
   106c4:	d023      	beq.n	1070e <blst_scalar_from_uint64+0x4c>
   106c6:	b430      	push	{r4, r5}
   106c8:	f100 0308 	add.w	r3, r0, #8
   106cc:	f1a1 0408 	sub.w	r4, r1, #8
   106d0:	3028      	adds	r0, #40	; 0x28
   106d2:	f854 1f08 	ldr.w	r1, [r4, #8]!
   106d6:	6862      	ldr	r2, [r4, #4]
   106d8:	f803 1c08 	strb.w	r1, [r3, #-8]
   106dc:	0a0d      	lsrs	r5, r1, #8
   106de:	f803 5c07 	strb.w	r5, [r3, #-7]
   106e2:	0c0d      	lsrs	r5, r1, #16
   106e4:	f803 5c06 	strb.w	r5, [r3, #-6]
   106e8:	0e09      	lsrs	r1, r1, #24
   106ea:	f803 1c05 	strb.w	r1, [r3, #-5]
   106ee:	f803 2c04 	strb.w	r2, [r3, #-4]
   106f2:	0a11      	lsrs	r1, r2, #8
   106f4:	f803 1c03 	strb.w	r1, [r3, #-3]
   106f8:	0c11      	lsrs	r1, r2, #16
   106fa:	f803 1c02 	strb.w	r1, [r3, #-2]
   106fe:	0e12      	lsrs	r2, r2, #24
   10700:	f803 2c01 	strb.w	r2, [r3, #-1]
   10704:	3308      	adds	r3, #8
   10706:	4283      	cmp	r3, r0
   10708:	d1e3      	bne.n	106d2 <blst_scalar_from_uint64+0x10>
   1070a:	bc30      	pop	{r4, r5}
   1070c:	4770      	bx	lr
   1070e:	4770      	bx	lr

00010710 <blst_uint64_from_scalar>:
   10710:	4288      	cmp	r0, r1
   10712:	d02c      	beq.n	1076e <blst_uint64_from_scalar+0x5e>
   10714:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   10718:	f101 0308 	add.w	r3, r1, #8
   1071c:	f1a0 0408 	sub.w	r4, r0, #8
   10720:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10724:	f813 6c08 	ldrb.w	r6, [r3, #-8]
   10728:	f813 8c07 	ldrb.w	r8, [r3, #-7]
   1072c:	f813 0c06 	ldrb.w	r0, [r3, #-6]
   10730:	0400      	lsls	r0, r0, #16
   10732:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
   10736:	4330      	orrs	r0, r6
   10738:	f813 6c05 	ldrb.w	r6, [r3, #-5]
   1073c:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
   10740:	f813 2c04 	ldrb.w	r2, [r3, #-4]
   10744:	f813 6c03 	ldrb.w	r6, [r3, #-3]
   10748:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   1074c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   10750:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   10754:	f813 6c01 	ldrb.w	r6, [r3, #-1]
   10758:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
   1075c:	f844 0f08 	str.w	r0, [r4, #8]!
   10760:	6062      	str	r2, [r4, #4]
   10762:	3308      	adds	r3, #8
   10764:	42ab      	cmp	r3, r5
   10766:	d1dd      	bne.n	10724 <blst_uint64_from_scalar+0x14>
   10768:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   1076c:	4770      	bx	lr
   1076e:	4770      	bx	lr

00010770 <blst_scalar_from_bendian>:
   10770:	b470      	push	{r4, r5, r6}
   10772:	b089      	sub	sp, #36	; 0x24
   10774:	f101 0620 	add.w	r6, r1, #32
   10778:	460a      	mov	r2, r1
   1077a:	2400      	movs	r4, #0
   1077c:	f101 051f 	add.w	r5, r1, #31
   10780:	1aab      	subs	r3, r5, r2
   10782:	f812 1b01 	ldrb.w	r1, [r2], #1
   10786:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   1078a:	f023 0303 	bic.w	r3, r3, #3
   1078e:	a908      	add	r1, sp, #32
   10790:	440b      	add	r3, r1
   10792:	f843 4c20 	str.w	r4, [r3, #-32]
   10796:	42b2      	cmp	r2, r6
   10798:	d1f2      	bne.n	10780 <blst_scalar_from_bendian+0x10>
   1079a:	466d      	mov	r5, sp
   1079c:	42a8      	cmp	r0, r5
   1079e:	d003      	beq.n	107a8 <blst_scalar_from_bendian+0x38>
   107a0:	f1ad 0104 	sub.w	r1, sp, #4
   107a4:	351c      	adds	r5, #28
   107a6:	e00f      	b.n	107c8 <blst_scalar_from_bendian+0x58>
   107a8:	2300      	movs	r3, #0
   107aa:	9300      	str	r3, [sp, #0]
   107ac:	9301      	str	r3, [sp, #4]
   107ae:	9302      	str	r3, [sp, #8]
   107b0:	9303      	str	r3, [sp, #12]
   107b2:	9304      	str	r3, [sp, #16]
   107b4:	9305      	str	r3, [sp, #20]
   107b6:	9306      	str	r3, [sp, #24]
   107b8:	9307      	str	r3, [sp, #28]
   107ba:	466b      	mov	r3, sp
   107bc:	b009      	add	sp, #36	; 0x24
   107be:	bc70      	pop	{r4, r5, r6}
   107c0:	4770      	bx	lr
   107c2:	3004      	adds	r0, #4
   107c4:	42a9      	cmp	r1, r5
   107c6:	d0ef      	beq.n	107a8 <blst_scalar_from_bendian+0x38>
   107c8:	f851 2f04 	ldr.w	r2, [r1, #4]!
   107cc:	4603      	mov	r3, r0
   107ce:	1d04      	adds	r4, r0, #4
   107d0:	f803 2b01 	strb.w	r2, [r3], #1
   107d4:	0a12      	lsrs	r2, r2, #8
   107d6:	42a3      	cmp	r3, r4
   107d8:	d1fa      	bne.n	107d0 <blst_scalar_from_bendian+0x60>
   107da:	e7f2      	b.n	107c2 <blst_scalar_from_bendian+0x52>

000107dc <blst_bendian_from_scalar>:
   107dc:	b470      	push	{r4, r5, r6}
   107de:	b089      	sub	sp, #36	; 0x24
   107e0:	f101 0220 	add.w	r2, r1, #32
   107e4:	2400      	movs	r4, #0
   107e6:	43ce      	mvns	r6, r1
   107e8:	18b3      	adds	r3, r6, r2
   107ea:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
   107ee:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
   107f2:	f023 0303 	bic.w	r3, r3, #3
   107f6:	ad08      	add	r5, sp, #32
   107f8:	442b      	add	r3, r5
   107fa:	f843 4c20 	str.w	r4, [r3, #-32]
   107fe:	4291      	cmp	r1, r2
   10800:	d1f2      	bne.n	107e8 <blst_bendian_from_scalar+0xc>
   10802:	f100 0420 	add.w	r4, r0, #32
   10806:	4602      	mov	r2, r0
   10808:	301f      	adds	r0, #31
   1080a:	1a83      	subs	r3, r0, r2
   1080c:	f023 0103 	bic.w	r1, r3, #3
   10810:	ad08      	add	r5, sp, #32
   10812:	4429      	add	r1, r5
   10814:	f003 0303 	and.w	r3, r3, #3
   10818:	00db      	lsls	r3, r3, #3
   1081a:	f851 1c20 	ldr.w	r1, [r1, #-32]
   1081e:	fa21 f303 	lsr.w	r3, r1, r3
   10822:	f802 3b01 	strb.w	r3, [r2], #1
   10826:	42a2      	cmp	r2, r4
   10828:	d1ef      	bne.n	1080a <blst_bendian_from_scalar+0x2e>
   1082a:	2300      	movs	r3, #0
   1082c:	9300      	str	r3, [sp, #0]
   1082e:	9301      	str	r3, [sp, #4]
   10830:	9302      	str	r3, [sp, #8]
   10832:	9303      	str	r3, [sp, #12]
   10834:	9304      	str	r3, [sp, #16]
   10836:	9305      	str	r3, [sp, #20]
   10838:	9306      	str	r3, [sp, #24]
   1083a:	9307      	str	r3, [sp, #28]
   1083c:	466b      	mov	r3, sp
   1083e:	b009      	add	sp, #36	; 0x24
   10840:	bc70      	pop	{r4, r5, r6}
   10842:	4770      	bx	lr

00010844 <blst_scalar_from_lendian>:
   10844:	4288      	cmp	r0, r1
   10846:	d009      	beq.n	1085c <blst_scalar_from_lendian+0x18>
   10848:	1e4b      	subs	r3, r1, #1
   1084a:	1e42      	subs	r2, r0, #1
   1084c:	f101 001f 	add.w	r0, r1, #31
   10850:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   10854:	f802 1f01 	strb.w	r1, [r2, #1]!
   10858:	4283      	cmp	r3, r0
   1085a:	d1f9      	bne.n	10850 <blst_scalar_from_lendian+0xc>
   1085c:	4770      	bx	lr

0001085e <blst_lendian_from_scalar>:
   1085e:	4288      	cmp	r0, r1
   10860:	d009      	beq.n	10876 <blst_lendian_from_scalar+0x18>
   10862:	1e4b      	subs	r3, r1, #1
   10864:	1e42      	subs	r2, r0, #1
   10866:	f101 001f 	add.w	r0, r1, #31
   1086a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   1086e:	f802 1f01 	strb.w	r1, [r2, #1]!
   10872:	4283      	cmp	r3, r0
   10874:	d1f9      	bne.n	1086a <blst_lendian_from_scalar+0xc>
   10876:	4770      	bx	lr

00010878 <blst_fr_from_uint64>:
   10878:	b500      	push	{lr}
   1087a:	b083      	sub	sp, #12
   1087c:	4a07      	ldr	r2, [pc, #28]	; (1089c <blst_fr_from_uint64+0x24>)
   1087e:	2308      	movs	r3, #8
   10880:	9301      	str	r3, [sp, #4]
   10882:	f04f 33ff 	mov.w	r3, #4294967295
   10886:	9300      	str	r3, [sp, #0]
   10888:	f502 6360 	add.w	r3, r2, #3584	; 0xe00
   1088c:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
   10890:	f7f0 f94b 	bl	b2a <mul_mont_n>
   10894:	b003      	add	sp, #12
   10896:	f85d fb04 	ldr.w	pc, [sp], #4
   1089a:	bf00      	nop
   1089c:	0001ade8 	.word	0x0001ade8

000108a0 <blst_uint64_from_fr>:
   108a0:	b500      	push	{lr}
   108a2:	b083      	sub	sp, #12
   108a4:	2308      	movs	r3, #8
   108a6:	9300      	str	r3, [sp, #0]
   108a8:	f04f 33ff 	mov.w	r3, #4294967295
   108ac:	4a02      	ldr	r2, [pc, #8]	; (108b8 <blst_uint64_from_fr+0x18>)
   108ae:	f7f2 fcb3 	bl	3218 <from_mont_n>
   108b2:	b003      	add	sp, #12
   108b4:	f85d fb04 	ldr.w	pc, [sp], #4
   108b8:	0001bbe8 	.word	0x0001bbe8

000108bc <blst_scalar_from_le_bytes>:
   108bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108c0:	b09d      	sub	sp, #116	; 0x74
   108c2:	9002      	str	r0, [sp, #8]
   108c4:	460c      	mov	r4, r1
   108c6:	4692      	mov	sl, r2
   108c8:	2300      	movs	r3, #0
   108ca:	9304      	str	r3, [sp, #16]
   108cc:	9305      	str	r3, [sp, #20]
   108ce:	9306      	str	r3, [sp, #24]
   108d0:	9307      	str	r3, [sp, #28]
   108d2:	9308      	str	r3, [sp, #32]
   108d4:	9309      	str	r3, [sp, #36]	; 0x24
   108d6:	930a      	str	r3, [sp, #40]	; 0x28
   108d8:	930b      	str	r3, [sp, #44]	; 0x2c
   108da:	ab04      	add	r3, sp, #16
   108dc:	4b6a      	ldr	r3, [pc, #424]	; (10a88 <blst_scalar_from_le_bytes+0x1cc>)
   108de:	9314      	str	r3, [sp, #80]	; 0x50
   108e0:	4b6a      	ldr	r3, [pc, #424]	; (10a8c <blst_scalar_from_le_bytes+0x1d0>)
   108e2:	9315      	str	r3, [sp, #84]	; 0x54
   108e4:	f103 433e 	add.w	r3, r3, #3187671040	; 0xbe000000
   108e8:	f5a3 23f1 	sub.w	r3, r3, #493568	; 0x78800
   108ec:	f2a3 536d 	subw	r3, r3, #1389	; 0x56d
   108f0:	9316      	str	r3, [sp, #88]	; 0x58
   108f2:	4b67      	ldr	r3, [pc, #412]	; (10a90 <blst_scalar_from_le_bytes+0x1d4>)
   108f4:	9317      	str	r3, [sp, #92]	; 0x5c
   108f6:	4b67      	ldr	r3, [pc, #412]	; (10a94 <blst_scalar_from_le_bytes+0x1d8>)
   108f8:	9318      	str	r3, [sp, #96]	; 0x60
   108fa:	4b67      	ldr	r3, [pc, #412]	; (10a98 <blst_scalar_from_le_bytes+0x1dc>)
   108fc:	9319      	str	r3, [sp, #100]	; 0x64
   108fe:	4b67      	ldr	r3, [pc, #412]	; (10a9c <blst_scalar_from_le_bytes+0x1e0>)
   10900:	931a      	str	r3, [sp, #104]	; 0x68
   10902:	4b67      	ldr	r3, [pc, #412]	; (10aa0 <blst_scalar_from_le_bytes+0x1e4>)
   10904:	931b      	str	r3, [sp, #108]	; 0x6c
   10906:	2a20      	cmp	r2, #32
   10908:	f240 80a2 	bls.w	10a50 <blst_scalar_from_le_bytes+0x194>
   1090c:	f1c1 0900 	rsb	r9, r1, #0
   10910:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   10914:	095b      	lsrs	r3, r3, #5
   10916:	9303      	str	r3, [sp, #12]
   10918:	1c5f      	adds	r7, r3, #1
   1091a:	eb01 1747 	add.w	r7, r1, r7, lsl #5
   1091e:	f8df b188 	ldr.w	fp, [pc, #392]	; 10aa8 <blst_scalar_from_le_bytes+0x1ec>
   10922:	f50b 6660 	add.w	r6, fp, #3584	; 0xe00
   10926:	f04f 38ff 	mov.w	r8, #4294967295
   1092a:	e026      	b.n	1097a <blst_scalar_from_le_bytes+0xbe>
   1092c:	2508      	movs	r5, #8
   1092e:	9500      	str	r5, [sp, #0]
   10930:	4643      	mov	r3, r8
   10932:	4632      	mov	r2, r6
   10934:	a90c      	add	r1, sp, #48	; 0x30
   10936:	4608      	mov	r0, r1
   10938:	f7f2 fc6e 	bl	3218 <from_mont_n>
   1093c:	9501      	str	r5, [sp, #4]
   1093e:	f8cd 8000 	str.w	r8, [sp]
   10942:	4633      	mov	r3, r6
   10944:	aa14      	add	r2, sp, #80	; 0x50
   10946:	a90c      	add	r1, sp, #48	; 0x30
   10948:	4608      	mov	r0, r1
   1094a:	f7f0 f8ee 	bl	b2a <mul_mont_n>
   1094e:	9500      	str	r5, [sp, #0]
   10950:	4633      	mov	r3, r6
   10952:	aa0c      	add	r2, sp, #48	; 0x30
   10954:	a904      	add	r1, sp, #16
   10956:	4608      	mov	r0, r1
   10958:	f7f0 fb90 	bl	107c <add_mod_n>
   1095c:	9501      	str	r5, [sp, #4]
   1095e:	f8cd 8000 	str.w	r8, [sp]
   10962:	4633      	mov	r3, r6
   10964:	f50b 6262 	add.w	r2, fp, #3616	; 0xe20
   10968:	a914      	add	r1, sp, #80	; 0x50
   1096a:	4608      	mov	r0, r1
   1096c:	f7f0 f8dd 	bl	b2a <mul_mont_n>
   10970:	3420      	adds	r4, #32
   10972:	f1a9 0920 	sub.w	r9, r9, #32
   10976:	42bc      	cmp	r4, r7
   10978:	d014      	beq.n	109a4 <blst_scalar_from_le_bytes+0xe8>
   1097a:	4625      	mov	r5, r4
   1097c:	f104 0220 	add.w	r2, r4, #32
   10980:	2100      	movs	r1, #0
   10982:	f109 30ff 	add.w	r0, r9, #4294967295
   10986:	1883      	adds	r3, r0, r2
   10988:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1098c:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   10990:	f023 0303 	bic.w	r3, r3, #3
   10994:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   10998:	4463      	add	r3, ip
   1099a:	f843 1c40 	str.w	r1, [r3, #-64]
   1099e:	42aa      	cmp	r2, r5
   109a0:	d1f1      	bne.n	10986 <blst_scalar_from_le_bytes+0xca>
   109a2:	e7c3      	b.n	1092c <blst_scalar_from_le_bytes+0x70>
   109a4:	f1aa 0a20 	sub.w	sl, sl, #32
   109a8:	9b03      	ldr	r3, [sp, #12]
   109aa:	ebc3 63c3 	rsb	r3, r3, r3, lsl #27
   109ae:	eb0a 1a43 	add.w	sl, sl, r3, lsl #5
   109b2:	2300      	movs	r3, #0
   109b4:	930c      	str	r3, [sp, #48]	; 0x30
   109b6:	930d      	str	r3, [sp, #52]	; 0x34
   109b8:	930e      	str	r3, [sp, #56]	; 0x38
   109ba:	930f      	str	r3, [sp, #60]	; 0x3c
   109bc:	9310      	str	r3, [sp, #64]	; 0x40
   109be:	9311      	str	r3, [sp, #68]	; 0x44
   109c0:	9312      	str	r3, [sp, #72]	; 0x48
   109c2:	9313      	str	r3, [sp, #76]	; 0x4c
   109c4:	ab0c      	add	r3, sp, #48	; 0x30
   109c6:	f10a 33ff 	add.w	r3, sl, #4294967295
   109ca:	f1ba 0f00 	cmp.w	sl, #0
   109ce:	d00f      	beq.n	109f0 <blst_scalar_from_le_bytes+0x134>
   109d0:	4457      	add	r7, sl
   109d2:	2100      	movs	r1, #0
   109d4:	f817 2d01 	ldrb.w	r2, [r7, #-1]!
   109d8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   109dc:	f023 0203 	bic.w	r2, r3, #3
   109e0:	a81c      	add	r0, sp, #112	; 0x70
   109e2:	4402      	add	r2, r0
   109e4:	f842 1c40 	str.w	r1, [r2, #-64]
   109e8:	3b01      	subs	r3, #1
   109ea:	f1b3 3fff 	cmp.w	r3, #4294967295
   109ee:	d1f1      	bne.n	109d4 <blst_scalar_from_le_bytes+0x118>
   109f0:	4c2c      	ldr	r4, [pc, #176]	; (10aa4 <blst_scalar_from_le_bytes+0x1e8>)
   109f2:	2508      	movs	r5, #8
   109f4:	9500      	str	r5, [sp, #0]
   109f6:	f04f 33ff 	mov.w	r3, #4294967295
   109fa:	4622      	mov	r2, r4
   109fc:	a90c      	add	r1, sp, #48	; 0x30
   109fe:	4608      	mov	r0, r1
   10a00:	f7f2 fc0a 	bl	3218 <from_mont_n>
   10a04:	9501      	str	r5, [sp, #4]
   10a06:	f04f 33ff 	mov.w	r3, #4294967295
   10a0a:	9300      	str	r3, [sp, #0]
   10a0c:	4623      	mov	r3, r4
   10a0e:	aa14      	add	r2, sp, #80	; 0x50
   10a10:	a90c      	add	r1, sp, #48	; 0x30
   10a12:	4608      	mov	r0, r1
   10a14:	f7f0 f889 	bl	b2a <mul_mont_n>
   10a18:	9500      	str	r5, [sp, #0]
   10a1a:	4623      	mov	r3, r4
   10a1c:	aa0c      	add	r2, sp, #48	; 0x30
   10a1e:	a904      	add	r1, sp, #16
   10a20:	4608      	mov	r0, r1
   10a22:	f7f0 fb2b 	bl	107c <add_mod_n>
   10a26:	ad03      	add	r5, sp, #12
   10a28:	ac04      	add	r4, sp, #16
   10a2a:	ae0b      	add	r6, sp, #44	; 0x2c
   10a2c:	462b      	mov	r3, r5
   10a2e:	2200      	movs	r2, #0
   10a30:	f853 1f04 	ldr.w	r1, [r3, #4]!
   10a34:	430a      	orrs	r2, r1
   10a36:	42b3      	cmp	r3, r6
   10a38:	d1fa      	bne.n	10a30 <blst_scalar_from_le_bytes+0x174>
   10a3a:	1e50      	subs	r0, r2, #1
   10a3c:	ea20 0202 	bic.w	r2, r0, r2
   10a40:	0fd0      	lsrs	r0, r2, #31
   10a42:	ab04      	add	r3, sp, #16
   10a44:	9a02      	ldr	r2, [sp, #8]
   10a46:	429a      	cmp	r2, r3
   10a48:	d004      	beq.n	10a54 <blst_scalar_from_le_bytes+0x198>
   10a4a:	9902      	ldr	r1, [sp, #8]
   10a4c:	3104      	adds	r1, #4
   10a4e:	e011      	b.n	10a74 <blst_scalar_from_le_bytes+0x1b8>
   10a50:	460f      	mov	r7, r1
   10a52:	e7ae      	b.n	109b2 <blst_scalar_from_le_bytes+0xf6>
   10a54:	f104 0240 	add.w	r2, r4, #64	; 0x40
   10a58:	2300      	movs	r3, #0
   10a5a:	f844 3b04 	str.w	r3, [r4], #4
   10a5e:	4294      	cmp	r4, r2
   10a60:	d1fb      	bne.n	10a5a <blst_scalar_from_le_bytes+0x19e>
   10a62:	ab04      	add	r3, sp, #16
   10a64:	f080 0001 	eor.w	r0, r0, #1
   10a68:	b01d      	add	sp, #116	; 0x74
   10a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a6e:	3104      	adds	r1, #4
   10a70:	42b5      	cmp	r5, r6
   10a72:	d0ef      	beq.n	10a54 <blst_scalar_from_le_bytes+0x198>
   10a74:	1f0a      	subs	r2, r1, #4
   10a76:	f855 3f04 	ldr.w	r3, [r5, #4]!
   10a7a:	f802 3b01 	strb.w	r3, [r2], #1
   10a7e:	0a1b      	lsrs	r3, r3, #8
   10a80:	428a      	cmp	r2, r1
   10a82:	d1fa      	bne.n	10a7a <blst_scalar_from_le_bytes+0x1be>
   10a84:	e7f3      	b.n	10a6e <blst_scalar_from_le_bytes+0x1b2>
   10a86:	bf00      	nop
   10a88:	f3f29c6d 	.word	0xf3f29c6d
   10a8c:	c999e990 	.word	0xc999e990
   10a90:	2b6cedcb 	.word	0x2b6cedcb
   10a94:	7254398f 	.word	0x7254398f
   10a98:	05d31496 	.word	0x05d31496
   10a9c:	9f59ff11 	.word	0x9f59ff11
   10aa0:	0748d9d9 	.word	0x0748d9d9
   10aa4:	0001bbe8 	.word	0x0001bbe8
   10aa8:	0001ade8 	.word	0x0001ade8

00010aac <blst_scalar_from_be_bytes>:
   10aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ab0:	b09d      	sub	sp, #116	; 0x74
   10ab2:	9002      	str	r0, [sp, #8]
   10ab4:	4692      	mov	sl, r2
   10ab6:	2300      	movs	r3, #0
   10ab8:	9304      	str	r3, [sp, #16]
   10aba:	9305      	str	r3, [sp, #20]
   10abc:	9306      	str	r3, [sp, #24]
   10abe:	9307      	str	r3, [sp, #28]
   10ac0:	9308      	str	r3, [sp, #32]
   10ac2:	9309      	str	r3, [sp, #36]	; 0x24
   10ac4:	930a      	str	r3, [sp, #40]	; 0x28
   10ac6:	930b      	str	r3, [sp, #44]	; 0x2c
   10ac8:	ab04      	add	r3, sp, #16
   10aca:	4b6b      	ldr	r3, [pc, #428]	; (10c78 <blst_scalar_from_be_bytes+0x1cc>)
   10acc:	9314      	str	r3, [sp, #80]	; 0x50
   10ace:	4b6b      	ldr	r3, [pc, #428]	; (10c7c <blst_scalar_from_be_bytes+0x1d0>)
   10ad0:	9315      	str	r3, [sp, #84]	; 0x54
   10ad2:	f103 433e 	add.w	r3, r3, #3187671040	; 0xbe000000
   10ad6:	f5a3 23f1 	sub.w	r3, r3, #493568	; 0x78800
   10ada:	f2a3 536d 	subw	r3, r3, #1389	; 0x56d
   10ade:	9316      	str	r3, [sp, #88]	; 0x58
   10ae0:	4b67      	ldr	r3, [pc, #412]	; (10c80 <blst_scalar_from_be_bytes+0x1d4>)
   10ae2:	9317      	str	r3, [sp, #92]	; 0x5c
   10ae4:	4b67      	ldr	r3, [pc, #412]	; (10c84 <blst_scalar_from_be_bytes+0x1d8>)
   10ae6:	9318      	str	r3, [sp, #96]	; 0x60
   10ae8:	4b67      	ldr	r3, [pc, #412]	; (10c88 <blst_scalar_from_be_bytes+0x1dc>)
   10aea:	9319      	str	r3, [sp, #100]	; 0x64
   10aec:	4b67      	ldr	r3, [pc, #412]	; (10c8c <blst_scalar_from_be_bytes+0x1e0>)
   10aee:	931a      	str	r3, [sp, #104]	; 0x68
   10af0:	4b67      	ldr	r3, [pc, #412]	; (10c90 <blst_scalar_from_be_bytes+0x1e4>)
   10af2:	931b      	str	r3, [sp, #108]	; 0x6c
   10af4:	188f      	adds	r7, r1, r2
   10af6:	2a20      	cmp	r2, #32
   10af8:	d954      	bls.n	10ba4 <blst_scalar_from_be_bytes+0xf8>
   10afa:	463c      	mov	r4, r7
   10afc:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   10b00:	095a      	lsrs	r2, r3, #5
   10b02:	9203      	str	r2, [sp, #12]
   10b04:	f1a7 0920 	sub.w	r9, r7, #32
   10b08:	f023 031f 	bic.w	r3, r3, #31
   10b0c:	eba9 0903 	sub.w	r9, r9, r3
   10b10:	f8df b184 	ldr.w	fp, [pc, #388]	; 10c98 <blst_scalar_from_be_bytes+0x1ec>
   10b14:	f50b 6660 	add.w	r6, fp, #3584	; 0xe00
   10b18:	f04f 38ff 	mov.w	r8, #4294967295
   10b1c:	e024      	b.n	10b68 <blst_scalar_from_be_bytes+0xbc>
   10b1e:	2508      	movs	r5, #8
   10b20:	9500      	str	r5, [sp, #0]
   10b22:	4643      	mov	r3, r8
   10b24:	4632      	mov	r2, r6
   10b26:	a90c      	add	r1, sp, #48	; 0x30
   10b28:	4608      	mov	r0, r1
   10b2a:	f7f2 fb75 	bl	3218 <from_mont_n>
   10b2e:	9501      	str	r5, [sp, #4]
   10b30:	f8cd 8000 	str.w	r8, [sp]
   10b34:	4633      	mov	r3, r6
   10b36:	aa14      	add	r2, sp, #80	; 0x50
   10b38:	a90c      	add	r1, sp, #48	; 0x30
   10b3a:	4608      	mov	r0, r1
   10b3c:	f7ef fff5 	bl	b2a <mul_mont_n>
   10b40:	9500      	str	r5, [sp, #0]
   10b42:	4633      	mov	r3, r6
   10b44:	aa0c      	add	r2, sp, #48	; 0x30
   10b46:	a904      	add	r1, sp, #16
   10b48:	4608      	mov	r0, r1
   10b4a:	f7f0 fa97 	bl	107c <add_mod_n>
   10b4e:	9501      	str	r5, [sp, #4]
   10b50:	f8cd 8000 	str.w	r8, [sp]
   10b54:	4633      	mov	r3, r6
   10b56:	f50b 6262 	add.w	r2, fp, #3616	; 0xe20
   10b5a:	a914      	add	r1, sp, #80	; 0x50
   10b5c:	4608      	mov	r0, r1
   10b5e:	f7ef ffe4 	bl	b2a <mul_mont_n>
   10b62:	3c20      	subs	r4, #32
   10b64:	45a1      	cmp	r9, r4
   10b66:	d011      	beq.n	10b8c <blst_scalar_from_be_bytes+0xe0>
   10b68:	f1a4 0220 	sub.w	r2, r4, #32
   10b6c:	2100      	movs	r1, #0
   10b6e:	1e65      	subs	r5, r4, #1
   10b70:	1aab      	subs	r3, r5, r2
   10b72:	f812 0b01 	ldrb.w	r0, [r2], #1
   10b76:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
   10b7a:	f023 0303 	bic.w	r3, r3, #3
   10b7e:	a81c      	add	r0, sp, #112	; 0x70
   10b80:	4403      	add	r3, r0
   10b82:	f843 1c40 	str.w	r1, [r3, #-64]
   10b86:	42a2      	cmp	r2, r4
   10b88:	d1f2      	bne.n	10b70 <blst_scalar_from_be_bytes+0xc4>
   10b8a:	e7c8      	b.n	10b1e <blst_scalar_from_be_bytes+0x72>
   10b8c:	9a03      	ldr	r2, [sp, #12]
   10b8e:	0153      	lsls	r3, r2, #5
   10b90:	f083 031f 	eor.w	r3, r3, #31
   10b94:	43db      	mvns	r3, r3
   10b96:	441f      	add	r7, r3
   10b98:	f1aa 0a20 	sub.w	sl, sl, #32
   10b9c:	ebc2 63c2 	rsb	r3, r2, r2, lsl #27
   10ba0:	eb0a 1a43 	add.w	sl, sl, r3, lsl #5
   10ba4:	2300      	movs	r3, #0
   10ba6:	930c      	str	r3, [sp, #48]	; 0x30
   10ba8:	930d      	str	r3, [sp, #52]	; 0x34
   10baa:	930e      	str	r3, [sp, #56]	; 0x38
   10bac:	930f      	str	r3, [sp, #60]	; 0x3c
   10bae:	9310      	str	r3, [sp, #64]	; 0x40
   10bb0:	9311      	str	r3, [sp, #68]	; 0x44
   10bb2:	9312      	str	r3, [sp, #72]	; 0x48
   10bb4:	9313      	str	r3, [sp, #76]	; 0x4c
   10bb6:	ab0c      	add	r3, sp, #48	; 0x30
   10bb8:	eba7 070a 	sub.w	r7, r7, sl
   10bbc:	f10a 33ff 	add.w	r3, sl, #4294967295
   10bc0:	f1ba 0f00 	cmp.w	sl, #0
   10bc4:	d00e      	beq.n	10be4 <blst_scalar_from_be_bytes+0x138>
   10bc6:	2100      	movs	r1, #0
   10bc8:	f817 2b01 	ldrb.w	r2, [r7], #1
   10bcc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   10bd0:	f023 0203 	bic.w	r2, r3, #3
   10bd4:	a81c      	add	r0, sp, #112	; 0x70
   10bd6:	4402      	add	r2, r0
   10bd8:	f842 1c40 	str.w	r1, [r2, #-64]
   10bdc:	3b01      	subs	r3, #1
   10bde:	f1b3 3fff 	cmp.w	r3, #4294967295
   10be2:	d1f1      	bne.n	10bc8 <blst_scalar_from_be_bytes+0x11c>
   10be4:	4c2b      	ldr	r4, [pc, #172]	; (10c94 <blst_scalar_from_be_bytes+0x1e8>)
   10be6:	2508      	movs	r5, #8
   10be8:	9500      	str	r5, [sp, #0]
   10bea:	f04f 33ff 	mov.w	r3, #4294967295
   10bee:	4622      	mov	r2, r4
   10bf0:	a90c      	add	r1, sp, #48	; 0x30
   10bf2:	4608      	mov	r0, r1
   10bf4:	f7f2 fb10 	bl	3218 <from_mont_n>
   10bf8:	9501      	str	r5, [sp, #4]
   10bfa:	f04f 33ff 	mov.w	r3, #4294967295
   10bfe:	9300      	str	r3, [sp, #0]
   10c00:	4623      	mov	r3, r4
   10c02:	aa14      	add	r2, sp, #80	; 0x50
   10c04:	a90c      	add	r1, sp, #48	; 0x30
   10c06:	4608      	mov	r0, r1
   10c08:	f7ef ff8f 	bl	b2a <mul_mont_n>
   10c0c:	9500      	str	r5, [sp, #0]
   10c0e:	4623      	mov	r3, r4
   10c10:	aa0c      	add	r2, sp, #48	; 0x30
   10c12:	a904      	add	r1, sp, #16
   10c14:	4608      	mov	r0, r1
   10c16:	f7f0 fa31 	bl	107c <add_mod_n>
   10c1a:	ad03      	add	r5, sp, #12
   10c1c:	ac04      	add	r4, sp, #16
   10c1e:	ae0b      	add	r6, sp, #44	; 0x2c
   10c20:	462b      	mov	r3, r5
   10c22:	2200      	movs	r2, #0
   10c24:	f853 1f04 	ldr.w	r1, [r3, #4]!
   10c28:	430a      	orrs	r2, r1
   10c2a:	42b3      	cmp	r3, r6
   10c2c:	d1fa      	bne.n	10c24 <blst_scalar_from_be_bytes+0x178>
   10c2e:	1e50      	subs	r0, r2, #1
   10c30:	ea20 0202 	bic.w	r2, r0, r2
   10c34:	0fd0      	lsrs	r0, r2, #31
   10c36:	ab04      	add	r3, sp, #16
   10c38:	9a02      	ldr	r2, [sp, #8]
   10c3a:	429a      	cmp	r2, r3
   10c3c:	d002      	beq.n	10c44 <blst_scalar_from_be_bytes+0x198>
   10c3e:	9902      	ldr	r1, [sp, #8]
   10c40:	3104      	adds	r1, #4
   10c42:	e00f      	b.n	10c64 <blst_scalar_from_be_bytes+0x1b8>
   10c44:	f104 0240 	add.w	r2, r4, #64	; 0x40
   10c48:	2300      	movs	r3, #0
   10c4a:	f844 3b04 	str.w	r3, [r4], #4
   10c4e:	4294      	cmp	r4, r2
   10c50:	d1fb      	bne.n	10c4a <blst_scalar_from_be_bytes+0x19e>
   10c52:	ab04      	add	r3, sp, #16
   10c54:	f080 0001 	eor.w	r0, r0, #1
   10c58:	b01d      	add	sp, #116	; 0x74
   10c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c5e:	3104      	adds	r1, #4
   10c60:	42b5      	cmp	r5, r6
   10c62:	d0ef      	beq.n	10c44 <blst_scalar_from_be_bytes+0x198>
   10c64:	1f0a      	subs	r2, r1, #4
   10c66:	f855 3f04 	ldr.w	r3, [r5, #4]!
   10c6a:	f802 3b01 	strb.w	r3, [r2], #1
   10c6e:	0a1b      	lsrs	r3, r3, #8
   10c70:	428a      	cmp	r2, r1
   10c72:	d1fa      	bne.n	10c6a <blst_scalar_from_be_bytes+0x1be>
   10c74:	e7f3      	b.n	10c5e <blst_scalar_from_be_bytes+0x1b2>
   10c76:	bf00      	nop
   10c78:	f3f29c6d 	.word	0xf3f29c6d
   10c7c:	c999e990 	.word	0xc999e990
   10c80:	2b6cedcb 	.word	0x2b6cedcb
   10c84:	7254398f 	.word	0x7254398f
   10c88:	05d31496 	.word	0x05d31496
   10c8c:	9f59ff11 	.word	0x9f59ff11
   10c90:	0748d9d9 	.word	0x0748d9d9
   10c94:	0001bbe8 	.word	0x0001bbe8
   10c98:	0001ade8 	.word	0x0001ade8

00010c9c <blst_scalar_from_hexascii>:
   10c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c9e:	4607      	mov	r7, r0
   10ca0:	460d      	mov	r5, r1
   10ca2:	780b      	ldrb	r3, [r1, #0]
   10ca4:	2b30      	cmp	r3, #48	; 0x30
   10ca6:	d028      	beq.n	10cfa <blst_scalar_from_hexascii+0x5e>
   10ca8:	1e6e      	subs	r6, r5, #1
   10caa:	2400      	movs	r4, #0
   10cac:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   10cb0:	f7ef fc44 	bl	53c <nibble_from_hex>
   10cb4:	280f      	cmp	r0, #15
   10cb6:	d802      	bhi.n	10cbe <blst_scalar_from_hexascii+0x22>
   10cb8:	3401      	adds	r4, #1
   10cba:	2c40      	cmp	r4, #64	; 0x40
   10cbc:	d1f6      	bne.n	10cac <blst_scalar_from_hexascii+0x10>
   10cbe:	1e7b      	subs	r3, r7, #1
   10cc0:	f107 011f 	add.w	r1, r7, #31
   10cc4:	2200      	movs	r2, #0
   10cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
   10cca:	428b      	cmp	r3, r1
   10ccc:	d1fb      	bne.n	10cc6 <blst_scalar_from_hexascii+0x2a>
   10cce:	1e66      	subs	r6, r4, #1
   10cd0:	b194      	cbz	r4, 10cf8 <blst_scalar_from_hexascii+0x5c>
   10cd2:	2300      	movs	r3, #0
   10cd4:	011b      	lsls	r3, r3, #4
   10cd6:	b2dc      	uxtb	r4, r3
   10cd8:	f815 0b01 	ldrb.w	r0, [r5], #1
   10cdc:	f7ef fc2e 	bl	53c <nibble_from_hex>
   10ce0:	ea44 0300 	orr.w	r3, r4, r0
   10ce4:	b2db      	uxtb	r3, r3
   10ce6:	f016 0f01 	tst.w	r6, #1
   10cea:	bf04      	itt	eq
   10cec:	0872      	lsreq	r2, r6, #1
   10cee:	54bb      	strbeq	r3, [r7, r2]
   10cf0:	3e01      	subs	r6, #1
   10cf2:	f1b6 3fff 	cmp.w	r6, #4294967295
   10cf6:	d1ed      	bne.n	10cd4 <blst_scalar_from_hexascii+0x38>
   10cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10cfa:	784b      	ldrb	r3, [r1, #1]
   10cfc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   10d00:	2b58      	cmp	r3, #88	; 0x58
   10d02:	bf08      	it	eq
   10d04:	3502      	addeq	r5, #2
   10d06:	e7cf      	b.n	10ca8 <blst_scalar_from_hexascii+0xc>

00010d08 <blst_fr_from_hexascii>:
   10d08:	b510      	push	{r4, lr}
   10d0a:	b082      	sub	sp, #8
   10d0c:	4604      	mov	r4, r0
   10d0e:	460a      	mov	r2, r1
   10d10:	2120      	movs	r1, #32
   10d12:	f7ef fc38 	bl	586 <limbs_from_hexascii>
   10d16:	4a08      	ldr	r2, [pc, #32]	; (10d38 <blst_fr_from_hexascii+0x30>)
   10d18:	2308      	movs	r3, #8
   10d1a:	9301      	str	r3, [sp, #4]
   10d1c:	f04f 33ff 	mov.w	r3, #4294967295
   10d20:	9300      	str	r3, [sp, #0]
   10d22:	f502 6360 	add.w	r3, r2, #3584	; 0xe00
   10d26:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
   10d2a:	4621      	mov	r1, r4
   10d2c:	4620      	mov	r0, r4
   10d2e:	f7ef fefc 	bl	b2a <mul_mont_n>
   10d32:	b002      	add	sp, #8
   10d34:	bd10      	pop	{r4, pc}
   10d36:	bf00      	nop
   10d38:	0001ade8 	.word	0x0001ade8

00010d3c <blst_fp_from_hexascii>:
   10d3c:	b510      	push	{r4, lr}
   10d3e:	b082      	sub	sp, #8
   10d40:	4604      	mov	r4, r0
   10d42:	460a      	mov	r2, r1
   10d44:	2130      	movs	r1, #48	; 0x30
   10d46:	f7ef fc1e 	bl	586 <limbs_from_hexascii>
   10d4a:	230c      	movs	r3, #12
   10d4c:	9301      	str	r3, [sp, #4]
   10d4e:	4b05      	ldr	r3, [pc, #20]	; (10d64 <blst_fp_from_hexascii+0x28>)
   10d50:	9300      	str	r3, [sp, #0]
   10d52:	4b05      	ldr	r3, [pc, #20]	; (10d68 <blst_fp_from_hexascii+0x2c>)
   10d54:	4a05      	ldr	r2, [pc, #20]	; (10d6c <blst_fp_from_hexascii+0x30>)
   10d56:	4621      	mov	r1, r4
   10d58:	4620      	mov	r0, r4
   10d5a:	f7ef fee6 	bl	b2a <mul_mont_n>
   10d5e:	b002      	add	sp, #8
   10d60:	bd10      	pop	{r4, pc}
   10d62:	bf00      	nop
   10d64:	fffcfffd 	.word	0xfffcfffd
   10d68:	0001ade8 	.word	0x0001ade8
   10d6c:	0001c198 	.word	0x0001c198

00010d70 <blst_uniq_sizeof>:
   10d70:	0100      	lsls	r0, r0, #4
   10d72:	3008      	adds	r0, #8
   10d74:	4770      	bx	lr

00010d76 <blst_uniq_init>:
   10d76:	2300      	movs	r3, #0
   10d78:	6003      	str	r3, [r0, #0]
   10d7a:	6043      	str	r3, [r0, #4]
   10d7c:	4770      	bx	lr

00010d7e <blst_uniq_test>:
   10d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d82:	b0a8      	sub	sp, #160	; 0xa0
   10d84:	4605      	mov	r5, r0
   10d86:	6804      	ldr	r4, [r0, #0]
   10d88:	2c00      	cmp	r4, #0
   10d8a:	f000 80a9 	beq.w	10ee0 <blst_uniq_test+0x162>
   10d8e:	f10d 0c20 	add.w	ip, sp, #32
   10d92:	466f      	mov	r7, sp
   10d94:	2600      	movs	r6, #0
   10d96:	e013      	b.n	10dc0 <blst_uniq_test+0x42>
   10d98:	ebaa 0009 	sub.w	r0, sl, r9
   10d9c:	e000      	b.n	10da0 <blst_uniq_test+0x22>
   10d9e:	1ad0      	subs	r0, r2, r3
   10da0:	2800      	cmp	r0, #0
   10da2:	f000 80b4 	beq.w	10f0e <blst_uniq_test+0x190>
   10da6:	f84c 4b04 	str.w	r4, [ip], #4
   10daa:	2800      	cmp	r0, #0
   10dac:	bfd4      	ite	le
   10dae:	2300      	movle	r3, #0
   10db0:	2301      	movgt	r3, #1
   10db2:	f807 3b01 	strb.w	r3, [r7], #1
   10db6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
   10dba:	1c73      	adds	r3, r6, #1
   10dbc:	b1c4      	cbz	r4, 10df0 <blst_uniq_test+0x72>
   10dbe:	461e      	mov	r6, r3
   10dc0:	f8d4 8008 	ldr.w	r8, [r4, #8]
   10dc4:	68e3      	ldr	r3, [r4, #12]
   10dc6:	085b      	lsrs	r3, r3, #1
   10dc8:	4610      	mov	r0, r2
   10dca:	429a      	cmp	r2, r3
   10dcc:	bf28      	it	cs
   10dce:	4618      	movcs	r0, r3
   10dd0:	2800      	cmp	r0, #0
   10dd2:	d0e4      	beq.n	10d9e <blst_uniq_test+0x20>
   10dd4:	f101 3eff 	add.w	lr, r1, #4294967295
   10dd8:	f108 38ff 	add.w	r8, r8, #4294967295
   10ddc:	4470      	add	r0, lr
   10dde:	f81e af01 	ldrb.w	sl, [lr, #1]!
   10de2:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   10de6:	45ca      	cmp	sl, r9
   10de8:	d1d6      	bne.n	10d98 <blst_uniq_test+0x1a>
   10dea:	4586      	cmp	lr, r0
   10dec:	d1f7      	bne.n	10dde <blst_uniq_test+0x60>
   10dee:	e7d6      	b.n	10d9e <blst_uniq_test+0x20>
   10df0:	6868      	ldr	r0, [r5, #4]
   10df2:	1c44      	adds	r4, r0, #1
   10df4:	606c      	str	r4, [r5, #4]
   10df6:	0100      	lsls	r0, r0, #4
   10df8:	f100 0408 	add.w	r4, r0, #8
   10dfc:	442c      	add	r4, r5
   10dfe:	4428      	add	r0, r5
   10e00:	2700      	movs	r7, #0
   10e02:	60c7      	str	r7, [r0, #12]
   10e04:	6087      	str	r7, [r0, #8]
   10e06:	6101      	str	r1, [r0, #16]
   10e08:	0052      	lsls	r2, r2, #1
   10e0a:	f042 0201 	orr.w	r2, r2, #1
   10e0e:	6142      	str	r2, [r0, #20]
   10e10:	2b00      	cmp	r3, #0
   10e12:	d075      	beq.n	10f00 <blst_uniq_test+0x182>
   10e14:	aa28      	add	r2, sp, #160	; 0xa0
   10e16:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   10e1a:	f852 2c80 	ldr.w	r2, [r2, #-128]
   10e1e:	a928      	add	r1, sp, #160	; 0xa0
   10e20:	440e      	add	r6, r1
   10e22:	f816 1ca0 	ldrb.w	r1, [r6, #-160]
   10e26:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   10e2a:	2b01      	cmp	r3, #1
   10e2c:	d969      	bls.n	10f02 <blst_uniq_test+0x184>
   10e2e:	aa08      	add	r2, sp, #32
   10e30:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   10e34:	f103 3eff 	add.w	lr, r3, #4294967295
   10e38:	f851 2c04 	ldr.w	r2, [r1, #-4]
   10e3c:	68d0      	ldr	r0, [r2, #12]
   10e3e:	f010 0f01 	tst.w	r0, #1
   10e42:	d05e      	beq.n	10f02 <blst_uniq_test+0x184>
   10e44:	eb0d 0003 	add.w	r0, sp, r3
   10e48:	f810 cc02 	ldrb.w	ip, [r0, #-2]
   10e4c:	f851 4c08 	ldr.w	r4, [r1, #-8]
   10e50:	f08c 0601 	eor.w	r6, ip, #1
   10e54:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   10e58:	b1a0      	cbz	r0, 10e84 <blst_uniq_test+0x106>
   10e5a:	68c7      	ldr	r7, [r0, #12]
   10e5c:	f017 0f01 	tst.w	r7, #1
   10e60:	d010      	beq.n	10e84 <blst_uniq_test+0x106>
   10e62:	68e6      	ldr	r6, [r4, #12]
   10e64:	f046 0601 	orr.w	r6, r6, #1
   10e68:	60e6      	str	r6, [r4, #12]
   10e6a:	68d4      	ldr	r4, [r2, #12]
   10e6c:	f024 0401 	bic.w	r4, r4, #1
   10e70:	60d4      	str	r4, [r2, #12]
   10e72:	68c2      	ldr	r2, [r0, #12]
   10e74:	f022 0201 	bic.w	r2, r2, #1
   10e78:	60c2      	str	r2, [r0, #12]
   10e7a:	3b02      	subs	r3, #2
   10e7c:	3908      	subs	r1, #8
   10e7e:	2b01      	cmp	r3, #1
   10e80:	d8d8      	bhi.n	10e34 <blst_uniq_test+0xb6>
   10e82:	e03e      	b.n	10f02 <blst_uniq_test+0x184>
   10e84:	a928      	add	r1, sp, #160	; 0xa0
   10e86:	448e      	add	lr, r1
   10e88:	f81e 1ca0 	ldrb.w	r1, [lr, #-160]
   10e8c:	4561      	cmp	r1, ip
   10e8e:	d008      	beq.n	10ea2 <blst_uniq_test+0x124>
   10e90:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
   10e94:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
   10e98:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
   10e9c:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
   10ea0:	460a      	mov	r2, r1
   10ea2:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
   10ea6:	f844 102c 	str.w	r1, [r4, ip, lsl #2]
   10eaa:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   10eae:	68e1      	ldr	r1, [r4, #12]
   10eb0:	f041 0101 	orr.w	r1, r1, #1
   10eb4:	60e1      	str	r1, [r4, #12]
   10eb6:	68d1      	ldr	r1, [r2, #12]
   10eb8:	f021 0101 	bic.w	r1, r1, #1
   10ebc:	60d1      	str	r1, [r2, #12]
   10ebe:	2b02      	cmp	r3, #2
   10ec0:	d90c      	bls.n	10edc <blst_uniq_test+0x15e>
   10ec2:	3b03      	subs	r3, #3
   10ec4:	a928      	add	r1, sp, #160	; 0xa0
   10ec6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   10eca:	f851 1c80 	ldr.w	r1, [r1, #-128]
   10ece:	a828      	add	r0, sp, #160	; 0xa0
   10ed0:	4403      	add	r3, r0
   10ed2:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
   10ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   10eda:	e012      	b.n	10f02 <blst_uniq_test+0x184>
   10edc:	602a      	str	r2, [r5, #0]
   10ede:	e010      	b.n	10f02 <blst_uniq_test+0x184>
   10ee0:	6843      	ldr	r3, [r0, #4]
   10ee2:	1c58      	adds	r0, r3, #1
   10ee4:	6068      	str	r0, [r5, #4]
   10ee6:	011b      	lsls	r3, r3, #4
   10ee8:	f103 0408 	add.w	r4, r3, #8
   10eec:	442c      	add	r4, r5
   10eee:	442b      	add	r3, r5
   10ef0:	2000      	movs	r0, #0
   10ef2:	60d8      	str	r0, [r3, #12]
   10ef4:	6098      	str	r0, [r3, #8]
   10ef6:	6119      	str	r1, [r3, #16]
   10ef8:	0052      	lsls	r2, r2, #1
   10efa:	f042 0201 	orr.w	r2, r2, #1
   10efe:	615a      	str	r2, [r3, #20]
   10f00:	602c      	str	r4, [r5, #0]
   10f02:	682a      	ldr	r2, [r5, #0]
   10f04:	68d3      	ldr	r3, [r2, #12]
   10f06:	f023 0301 	bic.w	r3, r3, #1
   10f0a:	60d3      	str	r3, [r2, #12]
   10f0c:	2001      	movs	r0, #1
   10f0e:	b028      	add	sp, #160	; 0xa0
   10f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010f14 <ocrypto_aes_slice>:
   10f14:	ea80 1410 	eor.w	r4, r0, r0, lsr #4
   10f18:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   10f1c:	ea80 1004 	eor.w	r0, r0, r4, lsl #4
   10f20:	4060      	eors	r0, r4
   10f22:	ea81 1411 	eor.w	r4, r1, r1, lsr #4
   10f26:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   10f2a:	ea81 1104 	eor.w	r1, r1, r4, lsl #4
   10f2e:	4061      	eors	r1, r4
   10f30:	ea82 1412 	eor.w	r4, r2, r2, lsr #4
   10f34:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   10f38:	ea82 1204 	eor.w	r2, r2, r4, lsl #4
   10f3c:	4062      	eors	r2, r4
   10f3e:	ea83 1413 	eor.w	r4, r3, r3, lsr #4
   10f42:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   10f46:	ea83 1304 	eor.w	r3, r3, r4, lsl #4
   10f4a:	4063      	eors	r3, r4
   10f4c:	ea80 2410 	eor.w	r4, r0, r0, lsr #8
   10f50:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   10f54:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
   10f58:	4060      	eors	r0, r4
   10f5a:	ea81 2411 	eor.w	r4, r1, r1, lsr #8
   10f5e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   10f62:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
   10f66:	4061      	eors	r1, r4
   10f68:	ea82 2412 	eor.w	r4, r2, r2, lsr #8
   10f6c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   10f70:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
   10f74:	4062      	eors	r2, r4
   10f76:	ea83 2413 	eor.w	r4, r3, r3, lsr #8
   10f7a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   10f7e:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
   10f82:	4063      	eors	r3, r4
   10f84:	ea81 0450 	eor.w	r4, r1, r0, lsr #1
   10f88:	f004 3455 	and.w	r4, r4, #1431655765	; 0x55555555
   10f8c:	ea80 0044 	eor.w	r0, r0, r4, lsl #1
   10f90:	4061      	eors	r1, r4
   10f92:	ea83 0452 	eor.w	r4, r3, r2, lsr #1
   10f96:	f004 3455 	and.w	r4, r4, #1431655765	; 0x55555555
   10f9a:	ea82 0244 	eor.w	r2, r2, r4, lsl #1
   10f9e:	4063      	eors	r3, r4
   10fa0:	ea82 0490 	eor.w	r4, r2, r0, lsr #2
   10fa4:	f004 3433 	and.w	r4, r4, #858993459	; 0x33333333
   10fa8:	ea80 0084 	eor.w	r0, r0, r4, lsl #2
   10fac:	4062      	eors	r2, r4
   10fae:	ea83 0491 	eor.w	r4, r3, r1, lsr #2
   10fb2:	f004 3433 	and.w	r4, r4, #858993459	; 0x33333333
   10fb6:	ea81 0184 	eor.w	r1, r1, r4, lsl #2
   10fba:	4063      	eors	r3, r4
   10fbc:	4770      	bx	lr
   10fbe:	bf00      	nop

00010fc0 <ocrypto_aes_unslice>:
   10fc0:	ea82 0490 	eor.w	r4, r2, r0, lsr #2
   10fc4:	f004 3433 	and.w	r4, r4, #858993459	; 0x33333333
   10fc8:	ea80 0084 	eor.w	r0, r0, r4, lsl #2
   10fcc:	4062      	eors	r2, r4
   10fce:	ea83 0491 	eor.w	r4, r3, r1, lsr #2
   10fd2:	f004 3433 	and.w	r4, r4, #858993459	; 0x33333333
   10fd6:	ea81 0184 	eor.w	r1, r1, r4, lsl #2
   10fda:	4063      	eors	r3, r4
   10fdc:	ea81 0450 	eor.w	r4, r1, r0, lsr #1
   10fe0:	f004 3455 	and.w	r4, r4, #1431655765	; 0x55555555
   10fe4:	ea80 0044 	eor.w	r0, r0, r4, lsl #1
   10fe8:	4061      	eors	r1, r4
   10fea:	ea83 0452 	eor.w	r4, r3, r2, lsr #1
   10fee:	f004 3455 	and.w	r4, r4, #1431655765	; 0x55555555
   10ff2:	ea82 0244 	eor.w	r2, r2, r4, lsl #1
   10ff6:	4063      	eors	r3, r4
   10ff8:	ea80 2410 	eor.w	r4, r0, r0, lsr #8
   10ffc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   11000:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
   11004:	4060      	eors	r0, r4
   11006:	ea81 2411 	eor.w	r4, r1, r1, lsr #8
   1100a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   1100e:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
   11012:	4061      	eors	r1, r4
   11014:	ea82 2412 	eor.w	r4, r2, r2, lsr #8
   11018:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   1101c:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
   11020:	4062      	eors	r2, r4
   11022:	ea83 2413 	eor.w	r4, r3, r3, lsr #8
   11026:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   1102a:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
   1102e:	4063      	eors	r3, r4
   11030:	ea80 1410 	eor.w	r4, r0, r0, lsr #4
   11034:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   11038:	ea80 1004 	eor.w	r0, r0, r4, lsl #4
   1103c:	4060      	eors	r0, r4
   1103e:	ea81 1411 	eor.w	r4, r1, r1, lsr #4
   11042:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   11046:	ea81 1104 	eor.w	r1, r1, r4, lsl #4
   1104a:	4061      	eors	r1, r4
   1104c:	ea82 1412 	eor.w	r4, r2, r2, lsr #4
   11050:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   11054:	ea82 1204 	eor.w	r2, r2, r4, lsl #4
   11058:	4062      	eors	r2, r4
   1105a:	ea83 1413 	eor.w	r4, r3, r3, lsr #4
   1105e:	f004 14f0 	and.w	r4, r4, #15728880	; 0xf000f0
   11062:	ea83 1304 	eor.w	r3, r3, r4, lsl #4
   11066:	4063      	eors	r3, r4
   11068:	4770      	bx	lr
   1106a:	bf00      	nop

0001106c <sbox4>:
   1106c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11070:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
   11074:	ea80 3110 	eor.w	r1, r0, r0, lsr #12
   11078:	4011      	ands	r1, r2
   1107a:	ea80 3001 	eor.w	r0, r0, r1, lsl #12
   1107e:	4048      	eors	r0, r1
   11080:	0841      	lsrs	r1, r0, #1
   11082:	0882      	lsrs	r2, r0, #2
   11084:	08c3      	lsrs	r3, r0, #3
   11086:	f04f 0e00 	mov.w	lr, #0
   1108a:	e0a3      	b.n	111d4 <sbox1>

0001108c <sbox4_ret>:
   1108c:	f000 3011 	and.w	r0, r0, #286331153	; 0x11111111
   11090:	f001 3111 	and.w	r1, r1, #286331153	; 0x11111111
   11094:	f002 3211 	and.w	r2, r2, #286331153	; 0x11111111
   11098:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
   1109c:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
   110a0:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
   110a4:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
   110a8:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
   110ac:	ea80 3110 	eor.w	r1, r0, r0, lsr #12
   110b0:	4011      	ands	r1, r2
   110b2:	ea80 3001 	eor.w	r0, r0, r1, lsl #12
   110b6:	4048      	eors	r0, r1
   110b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000110bc <ocrypto_aes_encrypt_block>:
   110bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110c0:	4694      	mov	ip, r2
   110c2:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   110c6:	688a      	ldr	r2, [r1, #8]
   110c8:	68cb      	ldr	r3, [r1, #12]
   110ca:	6808      	ldr	r0, [r1, #0]
   110cc:	6849      	ldr	r1, [r1, #4]
   110ce:	f7ff ff21 	bl	10f14 <ocrypto_aes_slice>
   110d2:	f10b 0e06 	add.w	lr, fp, #6
   110d6:	e033      	b.n	11140 <loop_start>

000110d8 <loop1>:
   110d8:	ea83 4413 	eor.w	r4, r3, r3, lsr #16
   110dc:	ea80 4513 	eor.w	r5, r0, r3, lsr #16
   110e0:	ea82 4713 	eor.w	r7, r2, r3, lsr #16
   110e4:	ba46      	rev16	r6, r0
   110e6:	ea96 4434 	eors.w	r4, r6, r4, ror #16
   110ea:	4060      	eors	r0, r4
   110ec:	f000 160f 	and.w	r6, r0, #983055	; 0xf000f
   110f0:	ea84 3406 	eor.w	r4, r4, r6, lsl #12
   110f4:	f020 160f 	bic.w	r6, r0, #983055	; 0xf000f
   110f8:	ea84 1016 	eor.w	r0, r4, r6, lsr #4
   110fc:	ba54      	rev16	r4, r2
   110fe:	ea94 0601 	eors.w	r6, r4, r1
   11102:	4072      	eors	r2, r6
   11104:	f002 140f 	and.w	r4, r2, #983055	; 0xf000f
   11108:	ea86 3604 	eor.w	r6, r6, r4, lsl #12
   1110c:	f022 140f 	bic.w	r4, r2, #983055	; 0xf000f
   11110:	ea86 1214 	eor.w	r2, r6, r4, lsr #4
   11114:	ba4c      	rev16	r4, r1
   11116:	4065      	eors	r5, r4
   11118:	4069      	eors	r1, r5
   1111a:	f001 140f 	and.w	r4, r1, #983055	; 0xf000f
   1111e:	ea85 3504 	eor.w	r5, r5, r4, lsl #12
   11122:	f021 140f 	bic.w	r4, r1, #983055	; 0xf000f
   11126:	ea85 1114 	eor.w	r1, r5, r4, lsr #4
   1112a:	ba5c      	rev16	r4, r3
   1112c:	4067      	eors	r7, r4
   1112e:	407b      	eors	r3, r7
   11130:	f003 140f 	and.w	r4, r3, #983055	; 0xf000f
   11134:	ea87 3704 	eor.w	r7, r7, r4, lsl #12
   11138:	f023 140f 	bic.w	r4, r3, #983055	; 0xf000f
   1113c:	ea87 1314 	eor.w	r3, r7, r4, lsr #4

00011140 <loop_start>:
   11140:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
   11144:	4060      	eors	r0, r4
   11146:	4069      	eors	r1, r5
   11148:	4072      	eors	r2, r6
   1114a:	407b      	eors	r3, r7
   1114c:	f000 34e0 	and.w	r4, r0, #3772834016	; 0xe0e0e0e0
   11150:	f000 3510 	and.w	r5, r0, #269488144	; 0x10101010
   11154:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   11158:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   1115c:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
   11160:	ea80 0490 	eor.w	r4, r0, r0, lsr #2
   11164:	f004 2433 	and.w	r4, r4, #855651072	; 0x33003300
   11168:	ea80 0084 	eor.w	r0, r0, r4, lsl #2
   1116c:	4060      	eors	r0, r4
   1116e:	f001 34e0 	and.w	r4, r1, #3772834016	; 0xe0e0e0e0
   11172:	f001 3510 	and.w	r5, r1, #269488144	; 0x10101010
   11176:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
   1117a:	ea41 0154 	orr.w	r1, r1, r4, lsr #1
   1117e:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
   11182:	ea81 0491 	eor.w	r4, r1, r1, lsr #2
   11186:	f004 2433 	and.w	r4, r4, #855651072	; 0x33003300
   1118a:	ea81 0184 	eor.w	r1, r1, r4, lsl #2
   1118e:	4061      	eors	r1, r4
   11190:	f002 34e0 	and.w	r4, r2, #3772834016	; 0xe0e0e0e0
   11194:	f002 3510 	and.w	r5, r2, #269488144	; 0x10101010
   11198:	f002 320f 	and.w	r2, r2, #252645135	; 0xf0f0f0f
   1119c:	ea42 0254 	orr.w	r2, r2, r4, lsr #1
   111a0:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
   111a4:	ea82 0492 	eor.w	r4, r2, r2, lsr #2
   111a8:	f004 2433 	and.w	r4, r4, #855651072	; 0x33003300
   111ac:	ea82 0284 	eor.w	r2, r2, r4, lsl #2
   111b0:	4062      	eors	r2, r4
   111b2:	f003 34e0 	and.w	r4, r3, #3772834016	; 0xe0e0e0e0
   111b6:	f003 3510 	and.w	r5, r3, #269488144	; 0x10101010
   111ba:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
   111be:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
   111c2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   111c6:	ea83 0493 	eor.w	r4, r3, r3, lsr #2
   111ca:	f004 2433 	and.w	r4, r4, #855651072	; 0x33003300
   111ce:	ea83 0384 	eor.w	r3, r3, r4, lsl #2
   111d2:	4063      	eors	r3, r4

000111d4 <sbox1>:
   111d4:	ea81 4732 	eor.w	r7, r1, r2, ror #16
   111d8:	ea87 4513 	eor.w	r5, r7, r3, lsr #16
   111dc:	ea81 4635 	eor.w	r6, r1, r5, ror #16
   111e0:	ea90 0406 	eors.w	r4, r0, r6
   111e4:	ea84 4b03 	eor.w	fp, r4, r3, lsl #16
   111e8:	ea82 421b 	eor.w	r2, r2, fp, lsr #16
   111ec:	ea80 4404 	eor.w	r4, r0, r4, lsl #16
   111f0:	ea84 4405 	eor.w	r4, r4, r5, lsl #16
   111f4:	ea83 4a14 	eor.w	sl, r3, r4, lsr #16
   111f8:	ea85 4414 	eor.w	r4, r5, r4, lsr #16
   111fc:	ea8b 4b04 	eor.w	fp, fp, r4, lsl #16
   11200:	ea84 4437 	eor.w	r4, r4, r7, ror #16
   11204:	ea81 410b 	eor.w	r1, r1, fp, lsl #16
   11208:	ea81 4116 	eor.w	r1, r1, r6, lsr #16
   1120c:	ea04 000a 	and.w	r0, r4, sl
   11210:	4045      	eors	r5, r0
   11212:	ea82 0804 	eor.w	r8, r2, r4
   11216:	ea2b 0008 	bic.w	r0, fp, r8
   1121a:	4041      	eors	r1, r0
   1121c:	ea8a 060b 	eor.w	r6, sl, fp
   11220:	ea02 0006 	and.w	r0, r2, r6
   11224:	ea84 4334 	eor.w	r3, r4, r4, ror #16
   11228:	ea8a 463a 	eor.w	r6, sl, sl, ror #16
   1122c:	ea03 0706 	and.w	r7, r3, r6
   11230:	4078      	eors	r0, r7
   11232:	4045      	eors	r5, r0
   11234:	4041      	eors	r1, r0
   11236:	ea88 4738 	eor.w	r7, r8, r8, ror #16
   1123a:	ea8b 403b 	eor.w	r0, fp, fp, ror #16
   1123e:	ea07 0900 	and.w	r9, r7, r0
   11242:	ea85 0509 	eor.w	r5, r5, r9
   11246:	ea83 0907 	eor.w	r9, r3, r7
   1124a:	4046      	eors	r6, r0
   1124c:	ea06 0609 	and.w	r6, r6, r9
   11250:	4071      	eors	r1, r6
   11252:	ea85 0001 	eor.w	r0, r5, r1
   11256:	ea05 4635 	and.w	r6, r5, r5, ror #16
   1125a:	4046      	eors	r6, r0
   1125c:	ea06 4131 	and.w	r1, r6, r1, ror #16
   11260:	ea81 4130 	eor.w	r1, r1, r0, ror #16
   11264:	ea81 4636 	eor.w	r6, r1, r6, ror #16
   11268:	ea06 4630 	and.w	r6, r6, r0, ror #16
   1126c:	ea86 4635 	eor.w	r6, r6, r5, ror #16
   11270:	4034      	ands	r4, r6
   11272:	ea08 0801 	and.w	r8, r8, r1
   11276:	ea86 0501 	eor.w	r5, r6, r1
   1127a:	402a      	ands	r2, r5
   1127c:	ea86 4036 	eor.w	r0, r6, r6, ror #16
   11280:	4003      	ands	r3, r0
   11282:	405a      	eors	r2, r3
   11284:	ea81 4331 	eor.w	r3, r1, r1, ror #16
   11288:	401f      	ands	r7, r3
   1128a:	407c      	eors	r4, r7
   1128c:	ea80 0703 	eor.w	r7, r0, r3
   11290:	ea09 0907 	and.w	r9, r9, r7
   11294:	ea88 0809 	eor.w	r8, r8, r9
   11298:	4054      	eors	r4, r2
   1129a:	ea88 0802 	eor.w	r8, r8, r2
   1129e:	ea06 060a 	and.w	r6, r6, sl
   112a2:	ea01 010b 	and.w	r1, r1, fp
   112a6:	ea8a 020b 	eor.w	r2, sl, fp
   112aa:	4015      	ands	r5, r2
   112ac:	ea8a 423a 	eor.w	r2, sl, sl, ror #16
   112b0:	4010      	ands	r0, r2
   112b2:	4045      	eors	r5, r0
   112b4:	ea8b 403b 	eor.w	r0, fp, fp, ror #16
   112b8:	4003      	ands	r3, r0
   112ba:	405e      	eors	r6, r3
   112bc:	4042      	eors	r2, r0
   112be:	4017      	ands	r7, r2
   112c0:	4079      	eors	r1, r7
   112c2:	404d      	eors	r5, r1
   112c4:	404e      	eors	r6, r1
   112c6:	43e4      	mvns	r4, r4
   112c8:	43f6      	mvns	r6, r6
   112ca:	ea86 4318 	eor.w	r3, r6, r8, lsr #16
   112ce:	405d      	eors	r5, r3
   112d0:	ea85 4005 	eor.w	r0, r5, r5, lsl #16
   112d4:	ea83 4313 	eor.w	r3, r3, r3, lsr #16
   112d8:	ea86 4103 	eor.w	r1, r6, r3, lsl #16
   112dc:	ea83 4238 	eor.w	r2, r3, r8, ror #16
   112e0:	ea84 4311 	eor.w	r3, r4, r1, lsr #16
   112e4:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
   112e8:	ea5f 4333 	movs.w	r3, r3, ror #16
   112ec:	f1be 0e01 	subs.w	lr, lr, #1
   112f0:	f63f aef2 	bhi.w	110d8 <loop1>
   112f4:	f53f aeca 	bmi.w	1108c <sbox4_ret>
   112f8:	e8bc 00f0 	ldmia.w	ip!, {r4, r5, r6, r7}
   112fc:	4060      	eors	r0, r4
   112fe:	4069      	eors	r1, r5
   11300:	4072      	eors	r2, r6
   11302:	407b      	eors	r3, r7
   11304:	f7ff fe5c 	bl	10fc0 <ocrypto_aes_unslice>
   11308:	bc10      	pop	{r4}
   1130a:	6020      	str	r0, [r4, #0]
   1130c:	6061      	str	r1, [r4, #4]
   1130e:	60a2      	str	r2, [r4, #8]
   11310:	60e3      	str	r3, [r4, #12]
   11312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11316:	bf00      	nop

00011318 <ocrypto_aes_key_schedule>:
   11318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1131c:	f102 051c 	add.w	r5, r2, #28
   11320:	4606      	mov	r6, r0
   11322:	4607      	mov	r7, r0
   11324:	eb00 0885 	add.w	r8, r0, r5, lsl #2

00011328 <loop2>:
   11328:	f851 0b04 	ldr.w	r0, [r1], #4
   1132c:	f846 0b04 	str.w	r0, [r6], #4
   11330:	3a04      	subs	r2, #4
   11332:	d1f9      	bne.n	11328 <loop2>
   11334:	f04f 0c01 	mov.w	ip, #1

00011338 <loop3>:
   11338:	f7ff fe98 	bl	1106c <sbox4>
   1133c:	ea5f 2030 	movs.w	r0, r0, ror #8
   11340:	ea80 000c 	eor.w	r0, r0, ip
   11344:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   11348:	ea4f 211c 	mov.w	r1, ip, lsr #8
   1134c:	f240 121b 	movw	r2, #283	; 0x11b
   11350:	fb01 f202 	mul.w	r2, r1, r2
   11354:	ea8c 0c02 	eor.w	ip, ip, r2
   11358:	cf1e      	ldmia	r7!, {r1, r2, r3, r4}
   1135a:	4041      	eors	r1, r0
   1135c:	404a      	eors	r2, r1
   1135e:	4053      	eors	r3, r2
   11360:	405c      	eors	r4, r3
   11362:	c61e      	stmia	r6!, {r1, r2, r3, r4}
   11364:	0020      	movs	r0, r4
   11366:	4546      	cmp	r6, r8
   11368:	d010      	beq.n	1138c <loop_end>
   1136a:	2d2c      	cmp	r5, #44	; 0x2c
   1136c:	d0e4      	beq.n	11338 <loop3>
   1136e:	2d3c      	cmp	r5, #60	; 0x3c
   11370:	d106      	bne.n	11380 <next>
   11372:	f7ff fe7b 	bl	1106c <sbox4>
   11376:	cf06      	ldmia	r7!, {r1, r2}
   11378:	4041      	eors	r1, r0
   1137a:	404a      	eors	r2, r1
   1137c:	c606      	stmia	r6!, {r1, r2}
   1137e:	0010      	movs	r0, r2

00011380 <next>:
   11380:	cf06      	ldmia	r7!, {r1, r2}
   11382:	4041      	eors	r1, r0
   11384:	404a      	eors	r2, r1
   11386:	c606      	stmia	r6!, {r1, r2}
   11388:	0010      	movs	r0, r2
   1138a:	e7d5      	b.n	11338 <loop3>

0001138c <loop_end>:
   1138c:	e936 000f 	ldmdb	r6!, {r0, r1, r2, r3}
   11390:	f7ff fdc0 	bl	10f14 <ocrypto_aes_slice>
   11394:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   11398:	3d04      	subs	r5, #4
   1139a:	d1f7      	bne.n	1138c <loop_end>
   1139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000113a0 <ocrypto_constant_time_equal>:
   113a0:	b430      	push	{r4, r5}
   113a2:	f04f 0300 	mov.w	r3, #0

000113a6 <constant_time_equal_loop>:
   113a6:	f810 4b01 	ldrb.w	r4, [r0], #1
   113aa:	f811 5b01 	ldrb.w	r5, [r1], #1
   113ae:	3a01      	subs	r2, #1
   113b0:	ea84 0405 	eor.w	r4, r4, r5
   113b4:	ea43 0304 	orr.w	r3, r3, r4
   113b8:	d1f5      	bne.n	113a6 <constant_time_equal_loop>
   113ba:	f1a3 0301 	sub.w	r3, r3, #1
   113be:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   113c2:	bc30      	pop	{r4, r5}
   113c4:	4770      	bx	lr
   113c6:	bf00      	nop

000113c8 <ocrypto_constant_time_is_zero>:
   113c8:	f04f 0300 	mov.w	r3, #0

000113cc <constant_time_is_zero_loop>:
   113cc:	f810 2b01 	ldrb.w	r2, [r0], #1
   113d0:	3901      	subs	r1, #1
   113d2:	ea43 0302 	orr.w	r3, r3, r2
   113d6:	d1f9      	bne.n	113cc <constant_time_is_zero_loop>
   113d8:	f1a3 0301 	sub.w	r3, r3, #1
   113dc:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   113e0:	4770      	bx	lr
   113e2:	bf00      	nop

000113e4 <ocrypto_constant_time_copy>:
   113e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   113e8:	f800 3b01 	strb.w	r3, [r0], #1
   113ec:	3a01      	subs	r2, #1
   113ee:	d1f9      	bne.n	113e4 <ocrypto_constant_time_copy>
   113f0:	4770      	bx	lr
   113f2:	bf00      	nop

000113f4 <ocrypto_constant_time_fill_zero>:
   113f4:	2200      	movs	r2, #0

000113f6 <constant_time_fill_zero_loop>:
   113f6:	f800 2b01 	strb.w	r2, [r0], #1
   113fa:	3901      	subs	r1, #1
   113fc:	d1fb      	bne.n	113f6 <constant_time_fill_zero_loop>
   113fe:	4770      	bx	lr

00011400 <ocrypto_sha256_loop1>:
   11400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11404:	e892 0ff0 	ldmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
   11408:	f04f 0e02 	mov.w	lr, #2

0001140c <sha256_loop>:
   1140c:	ea88 1c78 	eor.w	ip, r8, r8, ror #5
   11410:	ea8c 4cf8 	eor.w	ip, ip, r8, ror #19
   11414:	eb0b 1cbc 	add.w	ip, fp, ip, ror #6
   11418:	ea8a 0309 	eor.w	r3, sl, r9
   1141c:	ea03 0308 	and.w	r3, r3, r8
   11420:	ea83 030a 	eor.w	r3, r3, sl
   11424:	449c      	add	ip, r3
   11426:	f850 3b04 	ldr.w	r3, [r0], #4
   1142a:	449c      	add	ip, r3
   1142c:	f851 3b04 	ldr.w	r3, [r1], #4
   11430:	449c      	add	ip, r3
   11432:	4467      	add	r7, ip
   11434:	ea44 0b05 	orr.w	fp, r4, r5
   11438:	ea0b 0b06 	and.w	fp, fp, r6
   1143c:	ea04 0305 	and.w	r3, r4, r5
   11440:	ea4b 0b03 	orr.w	fp, fp, r3
   11444:	44e3      	add	fp, ip
   11446:	ea84 23f4 	eor.w	r3, r4, r4, ror #11
   1144a:	ea83 5334 	eor.w	r3, r3, r4, ror #20
   1144e:	eb0b 0bb3 	add.w	fp, fp, r3, ror #2
   11452:	ea87 1c77 	eor.w	ip, r7, r7, ror #5
   11456:	ea8c 4cf7 	eor.w	ip, ip, r7, ror #19
   1145a:	eb0a 1cbc 	add.w	ip, sl, ip, ror #6
   1145e:	ea89 0308 	eor.w	r3, r9, r8
   11462:	ea03 0307 	and.w	r3, r3, r7
   11466:	ea83 0309 	eor.w	r3, r3, r9
   1146a:	449c      	add	ip, r3
   1146c:	f850 3b04 	ldr.w	r3, [r0], #4
   11470:	449c      	add	ip, r3
   11472:	f851 3b04 	ldr.w	r3, [r1], #4
   11476:	449c      	add	ip, r3
   11478:	4466      	add	r6, ip
   1147a:	ea4b 0a04 	orr.w	sl, fp, r4
   1147e:	ea0a 0a05 	and.w	sl, sl, r5
   11482:	ea0b 0304 	and.w	r3, fp, r4
   11486:	ea4a 0a03 	orr.w	sl, sl, r3
   1148a:	44e2      	add	sl, ip
   1148c:	ea8b 23fb 	eor.w	r3, fp, fp, ror #11
   11490:	ea83 533b 	eor.w	r3, r3, fp, ror #20
   11494:	eb0a 0ab3 	add.w	sl, sl, r3, ror #2
   11498:	ea86 1c76 	eor.w	ip, r6, r6, ror #5
   1149c:	ea8c 4cf6 	eor.w	ip, ip, r6, ror #19
   114a0:	eb09 1cbc 	add.w	ip, r9, ip, ror #6
   114a4:	ea88 0307 	eor.w	r3, r8, r7
   114a8:	ea03 0306 	and.w	r3, r3, r6
   114ac:	ea83 0308 	eor.w	r3, r3, r8
   114b0:	449c      	add	ip, r3
   114b2:	f850 3b04 	ldr.w	r3, [r0], #4
   114b6:	449c      	add	ip, r3
   114b8:	f851 3b04 	ldr.w	r3, [r1], #4
   114bc:	449c      	add	ip, r3
   114be:	4465      	add	r5, ip
   114c0:	ea4a 090b 	orr.w	r9, sl, fp
   114c4:	ea09 0904 	and.w	r9, r9, r4
   114c8:	ea0a 030b 	and.w	r3, sl, fp
   114cc:	ea49 0903 	orr.w	r9, r9, r3
   114d0:	44e1      	add	r9, ip
   114d2:	ea8a 23fa 	eor.w	r3, sl, sl, ror #11
   114d6:	ea83 533a 	eor.w	r3, r3, sl, ror #20
   114da:	eb09 09b3 	add.w	r9, r9, r3, ror #2
   114de:	ea85 1c75 	eor.w	ip, r5, r5, ror #5
   114e2:	ea8c 4cf5 	eor.w	ip, ip, r5, ror #19
   114e6:	eb08 1cbc 	add.w	ip, r8, ip, ror #6
   114ea:	ea87 0306 	eor.w	r3, r7, r6
   114ee:	ea03 0305 	and.w	r3, r3, r5
   114f2:	ea83 0307 	eor.w	r3, r3, r7
   114f6:	449c      	add	ip, r3
   114f8:	f850 3b04 	ldr.w	r3, [r0], #4
   114fc:	449c      	add	ip, r3
   114fe:	f851 3b04 	ldr.w	r3, [r1], #4
   11502:	449c      	add	ip, r3
   11504:	4464      	add	r4, ip
   11506:	ea49 080a 	orr.w	r8, r9, sl
   1150a:	ea08 080b 	and.w	r8, r8, fp
   1150e:	ea09 030a 	and.w	r3, r9, sl
   11512:	ea48 0803 	orr.w	r8, r8, r3
   11516:	44e0      	add	r8, ip
   11518:	ea89 23f9 	eor.w	r3, r9, r9, ror #11
   1151c:	ea83 5339 	eor.w	r3, r3, r9, ror #20
   11520:	eb08 08b3 	add.w	r8, r8, r3, ror #2
   11524:	ea84 1c74 	eor.w	ip, r4, r4, ror #5
   11528:	ea8c 4cf4 	eor.w	ip, ip, r4, ror #19
   1152c:	eb07 1cbc 	add.w	ip, r7, ip, ror #6
   11530:	ea86 0305 	eor.w	r3, r6, r5
   11534:	ea03 0304 	and.w	r3, r3, r4
   11538:	ea83 0306 	eor.w	r3, r3, r6
   1153c:	449c      	add	ip, r3
   1153e:	f850 3b04 	ldr.w	r3, [r0], #4
   11542:	449c      	add	ip, r3
   11544:	f851 3b04 	ldr.w	r3, [r1], #4
   11548:	449c      	add	ip, r3
   1154a:	44e3      	add	fp, ip
   1154c:	ea48 0709 	orr.w	r7, r8, r9
   11550:	ea07 070a 	and.w	r7, r7, sl
   11554:	ea08 0309 	and.w	r3, r8, r9
   11558:	ea47 0703 	orr.w	r7, r7, r3
   1155c:	4467      	add	r7, ip
   1155e:	ea88 23f8 	eor.w	r3, r8, r8, ror #11
   11562:	ea83 5338 	eor.w	r3, r3, r8, ror #20
   11566:	eb07 07b3 	add.w	r7, r7, r3, ror #2
   1156a:	ea8b 1c7b 	eor.w	ip, fp, fp, ror #5
   1156e:	ea8c 4cfb 	eor.w	ip, ip, fp, ror #19
   11572:	eb06 1cbc 	add.w	ip, r6, ip, ror #6
   11576:	ea85 0304 	eor.w	r3, r5, r4
   1157a:	ea03 030b 	and.w	r3, r3, fp
   1157e:	ea83 0305 	eor.w	r3, r3, r5
   11582:	449c      	add	ip, r3
   11584:	f850 3b04 	ldr.w	r3, [r0], #4
   11588:	449c      	add	ip, r3
   1158a:	f851 3b04 	ldr.w	r3, [r1], #4
   1158e:	449c      	add	ip, r3
   11590:	44e2      	add	sl, ip
   11592:	ea47 0608 	orr.w	r6, r7, r8
   11596:	ea06 0609 	and.w	r6, r6, r9
   1159a:	ea07 0308 	and.w	r3, r7, r8
   1159e:	ea46 0603 	orr.w	r6, r6, r3
   115a2:	4466      	add	r6, ip
   115a4:	ea87 23f7 	eor.w	r3, r7, r7, ror #11
   115a8:	ea83 5337 	eor.w	r3, r3, r7, ror #20
   115ac:	eb06 06b3 	add.w	r6, r6, r3, ror #2
   115b0:	ea8a 1c7a 	eor.w	ip, sl, sl, ror #5
   115b4:	ea8c 4cfa 	eor.w	ip, ip, sl, ror #19
   115b8:	eb05 1cbc 	add.w	ip, r5, ip, ror #6
   115bc:	ea84 030b 	eor.w	r3, r4, fp
   115c0:	ea03 030a 	and.w	r3, r3, sl
   115c4:	ea83 0304 	eor.w	r3, r3, r4
   115c8:	449c      	add	ip, r3
   115ca:	f850 3b04 	ldr.w	r3, [r0], #4
   115ce:	449c      	add	ip, r3
   115d0:	f851 3b04 	ldr.w	r3, [r1], #4
   115d4:	449c      	add	ip, r3
   115d6:	44e1      	add	r9, ip
   115d8:	ea46 0507 	orr.w	r5, r6, r7
   115dc:	ea05 0508 	and.w	r5, r5, r8
   115e0:	ea06 0307 	and.w	r3, r6, r7
   115e4:	ea45 0503 	orr.w	r5, r5, r3
   115e8:	4465      	add	r5, ip
   115ea:	ea86 23f6 	eor.w	r3, r6, r6, ror #11
   115ee:	ea83 5336 	eor.w	r3, r3, r6, ror #20
   115f2:	eb05 05b3 	add.w	r5, r5, r3, ror #2
   115f6:	ea89 1c79 	eor.w	ip, r9, r9, ror #5
   115fa:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
   115fe:	eb04 1cbc 	add.w	ip, r4, ip, ror #6
   11602:	ea8b 030a 	eor.w	r3, fp, sl
   11606:	ea03 0309 	and.w	r3, r3, r9
   1160a:	ea83 030b 	eor.w	r3, r3, fp
   1160e:	449c      	add	ip, r3
   11610:	f850 3b04 	ldr.w	r3, [r0], #4
   11614:	449c      	add	ip, r3
   11616:	f851 3b04 	ldr.w	r3, [r1], #4
   1161a:	449c      	add	ip, r3
   1161c:	44e0      	add	r8, ip
   1161e:	ea45 0406 	orr.w	r4, r5, r6
   11622:	ea04 0407 	and.w	r4, r4, r7
   11626:	ea05 0306 	and.w	r3, r5, r6
   1162a:	ea44 0403 	orr.w	r4, r4, r3
   1162e:	4464      	add	r4, ip
   11630:	ea85 23f5 	eor.w	r3, r5, r5, ror #11
   11634:	ea83 5335 	eor.w	r3, r3, r5, ror #20
   11638:	eb04 04b3 	add.w	r4, r4, r3, ror #2
   1163c:	f1be 0e01 	subs.w	lr, lr, #1
   11640:	f47f aee4 	bne.w	1140c <sha256_loop>
   11644:	e882 0ff0 	stmia.w	r2, {r4, r5, r6, r7, r8, r9, sl, fp}
   11648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001164c <ocrypto_sha256_loop2>:
   1164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11650:	e890 03fc 	ldmia.w	r0, {r2, r3, r4, r5, r6, r7, r8, r9}
   11654:	e9d0 1c09 	ldrd	r1, ip, [r0, #36]	; 0x24
   11658:	e9d0 ab0e 	ldrd	sl, fp, [r0, #56]	; 0x38
   1165c:	440a      	add	r2, r1
   1165e:	ea4f 4e7a 	mov.w	lr, sl, ror #17
   11662:	ea8e 4efa 	eor.w	lr, lr, sl, ror #19
   11666:	ea8e 2e9a 	eor.w	lr, lr, sl, lsr #10
   1166a:	4472      	add	r2, lr
   1166c:	ea4f 1ef3 	mov.w	lr, r3, ror #7
   11670:	ea8e 4eb3 	eor.w	lr, lr, r3, ror #18
   11674:	ea8e 0ed3 	eor.w	lr, lr, r3, lsr #3
   11678:	4472      	add	r2, lr
   1167a:	4463      	add	r3, ip
   1167c:	ea4f 4e7b 	mov.w	lr, fp, ror #17
   11680:	ea8e 4efb 	eor.w	lr, lr, fp, ror #19
   11684:	ea8e 2e9b 	eor.w	lr, lr, fp, lsr #10
   11688:	4473      	add	r3, lr
   1168a:	ea4f 1ef4 	mov.w	lr, r4, ror #7
   1168e:	ea8e 4eb4 	eor.w	lr, lr, r4, ror #18
   11692:	ea8e 0ed4 	eor.w	lr, lr, r4, lsr #3
   11696:	4473      	add	r3, lr
   11698:	e9d0 1a0b 	ldrd	r1, sl, [r0, #44]	; 0x2c
   1169c:	440c      	add	r4, r1
   1169e:	ea4f 4e72 	mov.w	lr, r2, ror #17
   116a2:	ea8e 4ef2 	eor.w	lr, lr, r2, ror #19
   116a6:	ea8e 2e92 	eor.w	lr, lr, r2, lsr #10
   116aa:	4474      	add	r4, lr
   116ac:	ea4f 1ef5 	mov.w	lr, r5, ror #7
   116b0:	ea8e 4eb5 	eor.w	lr, lr, r5, ror #18
   116b4:	ea8e 0ed5 	eor.w	lr, lr, r5, lsr #3
   116b8:	4474      	add	r4, lr
   116ba:	4455      	add	r5, sl
   116bc:	ea4f 4e73 	mov.w	lr, r3, ror #17
   116c0:	ea8e 4ef3 	eor.w	lr, lr, r3, ror #19
   116c4:	ea8e 2e93 	eor.w	lr, lr, r3, lsr #10
   116c8:	4475      	add	r5, lr
   116ca:	ea4f 1ef6 	mov.w	lr, r6, ror #7
   116ce:	ea8e 4eb6 	eor.w	lr, lr, r6, ror #18
   116d2:	ea8e 0ed6 	eor.w	lr, lr, r6, lsr #3
   116d6:	4475      	add	r5, lr
   116d8:	e9d0 ea0d 	ldrd	lr, sl, [r0, #52]	; 0x34
   116dc:	4476      	add	r6, lr
   116de:	ea4f 4e74 	mov.w	lr, r4, ror #17
   116e2:	ea8e 4ef4 	eor.w	lr, lr, r4, ror #19
   116e6:	ea8e 2e94 	eor.w	lr, lr, r4, lsr #10
   116ea:	4476      	add	r6, lr
   116ec:	ea4f 1ef7 	mov.w	lr, r7, ror #7
   116f0:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
   116f4:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
   116f8:	4476      	add	r6, lr
   116fa:	4457      	add	r7, sl
   116fc:	ea4f 4e75 	mov.w	lr, r5, ror #17
   11700:	ea8e 4ef5 	eor.w	lr, lr, r5, ror #19
   11704:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
   11708:	4477      	add	r7, lr
   1170a:	ea4f 1ef8 	mov.w	lr, r8, ror #7
   1170e:	ea8e 4eb8 	eor.w	lr, lr, r8, ror #18
   11712:	ea8e 0ed8 	eor.w	lr, lr, r8, lsr #3
   11716:	4477      	add	r7, lr
   11718:	44d8      	add	r8, fp
   1171a:	ea4f 4e76 	mov.w	lr, r6, ror #17
   1171e:	ea8e 4ef6 	eor.w	lr, lr, r6, ror #19
   11722:	ea8e 2e96 	eor.w	lr, lr, r6, lsr #10
   11726:	44f0      	add	r8, lr
   11728:	ea4f 1ef9 	mov.w	lr, r9, ror #7
   1172c:	ea8e 4eb9 	eor.w	lr, lr, r9, ror #18
   11730:	ea8e 0ed9 	eor.w	lr, lr, r9, lsr #3
   11734:	44f0      	add	r8, lr
   11736:	e9d0 ab08 	ldrd	sl, fp, [r0, #32]
   1173a:	4491      	add	r9, r2
   1173c:	ea4f 4e77 	mov.w	lr, r7, ror #17
   11740:	ea8e 4ef7 	eor.w	lr, lr, r7, ror #19
   11744:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
   11748:	44f1      	add	r9, lr
   1174a:	ea4f 1efa 	mov.w	lr, sl, ror #7
   1174e:	ea8e 4eba 	eor.w	lr, lr, sl, ror #18
   11752:	ea8e 0eda 	eor.w	lr, lr, sl, lsr #3
   11756:	44f1      	add	r9, lr
   11758:	449a      	add	sl, r3
   1175a:	ea4f 4e78 	mov.w	lr, r8, ror #17
   1175e:	ea8e 4ef8 	eor.w	lr, lr, r8, ror #19
   11762:	ea8e 2e98 	eor.w	lr, lr, r8, lsr #10
   11766:	44f2      	add	sl, lr
   11768:	ea4f 1efb 	mov.w	lr, fp, ror #7
   1176c:	ea8e 4ebb 	eor.w	lr, lr, fp, ror #18
   11770:	ea8e 0edb 	eor.w	lr, lr, fp, lsr #3
   11774:	44f2      	add	sl, lr
   11776:	44a3      	add	fp, r4
   11778:	ea4f 4e79 	mov.w	lr, r9, ror #17
   1177c:	ea8e 4ef9 	eor.w	lr, lr, r9, ror #19
   11780:	ea8e 2e99 	eor.w	lr, lr, r9, lsr #10
   11784:	44f3      	add	fp, lr
   11786:	ea4f 1efc 	mov.w	lr, ip, ror #7
   1178a:	ea8e 4ebc 	eor.w	lr, lr, ip, ror #18
   1178e:	ea8e 0edc 	eor.w	lr, lr, ip, lsr #3
   11792:	44f3      	add	fp, lr
   11794:	44ac      	add	ip, r5
   11796:	ea4f 4e7a 	mov.w	lr, sl, ror #17
   1179a:	ea8e 4efa 	eor.w	lr, lr, sl, ror #19
   1179e:	ea8e 2e9a 	eor.w	lr, lr, sl, lsr #10
   117a2:	44f4      	add	ip, lr
   117a4:	ea4f 1ef1 	mov.w	lr, r1, ror #7
   117a8:	ea8e 4eb1 	eor.w	lr, lr, r1, ror #18
   117ac:	ea8e 0ed1 	eor.w	lr, lr, r1, lsr #3
   117b0:	44f4      	add	ip, lr
   117b2:	e8a0 1ffc 	stmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   117b6:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
   117ba:	4431      	add	r1, r6
   117bc:	ea4f 4e7b 	mov.w	lr, fp, ror #17
   117c0:	ea8e 4efb 	eor.w	lr, lr, fp, ror #19
   117c4:	ea8e 2e9b 	eor.w	lr, lr, fp, lsr #10
   117c8:	4471      	add	r1, lr
   117ca:	ea4f 1ef4 	mov.w	lr, r4, ror #7
   117ce:	ea8e 4eb4 	eor.w	lr, lr, r4, ror #18
   117d2:	ea8e 0ed4 	eor.w	lr, lr, r4, lsr #3
   117d6:	4471      	add	r1, lr
   117d8:	443c      	add	r4, r7
   117da:	ea4f 4e7c 	mov.w	lr, ip, ror #17
   117de:	ea8e 4efc 	eor.w	lr, lr, ip, ror #19
   117e2:	ea8e 2e9c 	eor.w	lr, lr, ip, lsr #10
   117e6:	4474      	add	r4, lr
   117e8:	ea4f 1ef5 	mov.w	lr, r5, ror #7
   117ec:	ea8e 4eb5 	eor.w	lr, lr, r5, ror #18
   117f0:	ea8e 0ed5 	eor.w	lr, lr, r5, lsr #3
   117f4:	4474      	add	r4, lr
   117f6:	e9d0 6703 	ldrd	r6, r7, [r0, #12]
   117fa:	4445      	add	r5, r8
   117fc:	ea4f 4e71 	mov.w	lr, r1, ror #17
   11800:	ea8e 4ef1 	eor.w	lr, lr, r1, ror #19
   11804:	ea8e 2e91 	eor.w	lr, lr, r1, lsr #10
   11808:	4475      	add	r5, lr
   1180a:	ea4f 1ef6 	mov.w	lr, r6, ror #7
   1180e:	ea8e 4eb6 	eor.w	lr, lr, r6, ror #18
   11812:	ea8e 0ed6 	eor.w	lr, lr, r6, lsr #3
   11816:	4475      	add	r5, lr
   11818:	444e      	add	r6, r9
   1181a:	ea4f 4e74 	mov.w	lr, r4, ror #17
   1181e:	ea8e 4ef4 	eor.w	lr, lr, r4, ror #19
   11822:	ea8e 2e94 	eor.w	lr, lr, r4, lsr #10
   11826:	4476      	add	r6, lr
   11828:	ea4f 1ef7 	mov.w	lr, r7, ror #7
   1182c:	ea8e 4eb7 	eor.w	lr, lr, r7, ror #18
   11830:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
   11834:	4476      	add	r6, lr
   11836:	4457      	add	r7, sl
   11838:	ea4f 4e75 	mov.w	lr, r5, ror #17
   1183c:	ea8e 4ef5 	eor.w	lr, lr, r5, ror #19
   11840:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
   11844:	4477      	add	r7, lr
   11846:	ea4f 1ef2 	mov.w	lr, r2, ror #7
   1184a:	ea8e 4eb2 	eor.w	lr, lr, r2, ror #18
   1184e:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
   11852:	4477      	add	r7, lr
   11854:	c0f2      	stmia	r0!, {r1, r4, r5, r6, r7}
   11856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1185a:	bf00      	nop

0001185c <__gnu_cmse_nonsecure_call>:
   1185c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   11860:	4627      	mov	r7, r4
   11862:	46a0      	mov	r8, r4
   11864:	46a1      	mov	r9, r4
   11866:	46a2      	mov	sl, r4
   11868:	46a3      	mov	fp, r4
   1186a:	46a4      	mov	ip, r4
   1186c:	b0a2      	sub	sp, #136	; 0x88
   1186e:	ec2d 0a00 	vlstm	sp
   11872:	f384 8800 	msr	CPSR_f, r4
   11876:	4625      	mov	r5, r4
   11878:	4626      	mov	r6, r4
   1187a:	47a4      	blxns	r4
   1187c:	ec3d 0a00 	vlldm	sp
   11880:	b022      	add	sp, #136	; 0x88
   11882:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00011888 <ocrypto_sha256>:
   11888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1188c:	f20f 29d0 	addw	r9, pc, #720	; 0x2d0
   11890:	e9d9 8900 	ldrd	r8, r9, [r9]
   11894:	f20f 2bd0 	addw	fp, pc, #720	; 0x2d0
   11898:	e9db ab00 	ldrd	sl, fp, [fp]
   1189c:	2600      	movs	r6, #0
   1189e:	b09b      	sub	sp, #108	; 0x6c
   118a0:	e9cd 8900 	strd	r8, r9, [sp]
   118a4:	f20f 29c8 	addw	r9, pc, #712	; 0x2c8
   118a8:	e9d9 8900 	ldrd	r8, r9, [r9]
   118ac:	e9cd ab02 	strd	sl, fp, [sp, #8]
   118b0:	f20f 2bc4 	addw	fp, pc, #708	; 0x2c4
   118b4:	e9db ab00 	ldrd	sl, fp, [fp]
   118b8:	4614      	mov	r4, r2
   118ba:	4605      	mov	r5, r0
   118bc:	e9cd 6218 	strd	r6, r2, [sp, #96]	; 0x60
   118c0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   118c4:	e9cd ab06 	strd	sl, fp, [sp, #24]
   118c8:	2a00      	cmp	r2, #0
   118ca:	d179      	bne.n	119c0 <ocrypto_sha256+0x138>
   118cc:	2380      	movs	r3, #128	; 0x80
   118ce:	2001      	movs	r0, #1
   118d0:	f88d 3020 	strb.w	r3, [sp, #32]
   118d4:	213a      	movs	r1, #58	; 0x3a
   118d6:	230e      	movs	r3, #14
   118d8:	46e8      	mov	r8, sp
   118da:	f8cd 2021 	str.w	r2, [sp, #33]	; 0x21
   118de:	af08      	add	r7, sp, #32
   118e0:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   118e4:	2600      	movs	r6, #0
   118e6:	2b02      	cmp	r3, #2
   118e8:	6016      	str	r6, [r2, #0]
   118ea:	d021      	beq.n	11930 <ocrypto_sha256+0xa8>
   118ec:	2b03      	cmp	r3, #3
   118ee:	6056      	str	r6, [r2, #4]
   118f0:	d01e      	beq.n	11930 <ocrypto_sha256+0xa8>
   118f2:	2b04      	cmp	r3, #4
   118f4:	6096      	str	r6, [r2, #8]
   118f6:	d01b      	beq.n	11930 <ocrypto_sha256+0xa8>
   118f8:	2b05      	cmp	r3, #5
   118fa:	60d6      	str	r6, [r2, #12]
   118fc:	d018      	beq.n	11930 <ocrypto_sha256+0xa8>
   118fe:	2b06      	cmp	r3, #6
   11900:	6116      	str	r6, [r2, #16]
   11902:	d015      	beq.n	11930 <ocrypto_sha256+0xa8>
   11904:	2b07      	cmp	r3, #7
   11906:	6156      	str	r6, [r2, #20]
   11908:	d012      	beq.n	11930 <ocrypto_sha256+0xa8>
   1190a:	2b08      	cmp	r3, #8
   1190c:	6196      	str	r6, [r2, #24]
   1190e:	d00f      	beq.n	11930 <ocrypto_sha256+0xa8>
   11910:	2b09      	cmp	r3, #9
   11912:	61d6      	str	r6, [r2, #28]
   11914:	d00c      	beq.n	11930 <ocrypto_sha256+0xa8>
   11916:	2b0a      	cmp	r3, #10
   11918:	6216      	str	r6, [r2, #32]
   1191a:	d009      	beq.n	11930 <ocrypto_sha256+0xa8>
   1191c:	2b0b      	cmp	r3, #11
   1191e:	6256      	str	r6, [r2, #36]	; 0x24
   11920:	d006      	beq.n	11930 <ocrypto_sha256+0xa8>
   11922:	2b0c      	cmp	r3, #12
   11924:	6296      	str	r6, [r2, #40]	; 0x28
   11926:	d003      	beq.n	11930 <ocrypto_sha256+0xa8>
   11928:	2b0e      	cmp	r3, #14
   1192a:	62d6      	str	r6, [r2, #44]	; 0x2c
   1192c:	bf08      	it	eq
   1192e:	6316      	streq	r6, [r2, #48]	; 0x30
   11930:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
   11934:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11938:	d012      	beq.n	11960 <ocrypto_sha256+0xd8>
   1193a:	1c43      	adds	r3, r0, #1
   1193c:	2200      	movs	r2, #0
   1193e:	a91a      	add	r1, sp, #104	; 0x68
   11940:	4401      	add	r1, r0
   11942:	2b3b      	cmp	r3, #59	; 0x3b
   11944:	f801 2c48 	strb.w	r2, [r1, #-72]
   11948:	d00a      	beq.n	11960 <ocrypto_sha256+0xd8>
   1194a:	a91a      	add	r1, sp, #104	; 0x68
   1194c:	440b      	add	r3, r1
   1194e:	2839      	cmp	r0, #57	; 0x39
   11950:	f803 2c48 	strb.w	r2, [r3, #-72]
   11954:	f100 0302 	add.w	r3, r0, #2
   11958:	d002      	beq.n	11960 <ocrypto_sha256+0xd8>
   1195a:	440b      	add	r3, r1
   1195c:	f803 2c48 	strb.w	r2, [r3, #-72]
   11960:	0f62      	lsrs	r2, r4, #29
   11962:	0d63      	lsrs	r3, r4, #21
   11964:	4639      	mov	r1, r7
   11966:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
   1196a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
   1196e:	0b62      	lsrs	r2, r4, #13
   11970:	0963      	lsrs	r3, r4, #5
   11972:	4640      	mov	r0, r8
   11974:	00e4      	lsls	r4, r4, #3
   11976:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   1197a:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
   1197e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   11982:	f005 fddd 	bl	17540 <sha256_blocks.constprop.0>
   11986:	e9dd 6400 	ldrd	r6, r4, [sp]
   1198a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1198e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11992:	fa96 fc86 	rev.w	ip, r6
   11996:	ba27      	rev	r7, r4
   11998:	ba06      	rev	r6, r0
   1199a:	ba0c      	rev	r4, r1
   1199c:	ba10      	rev	r0, r2
   1199e:	ba19      	rev	r1, r3
   119a0:	9a06      	ldr	r2, [sp, #24]
   119a2:	9b07      	ldr	r3, [sp, #28]
   119a4:	ba12      	rev	r2, r2
   119a6:	ba1b      	rev	r3, r3
   119a8:	f8c5 c000 	str.w	ip, [r5]
   119ac:	606f      	str	r7, [r5, #4]
   119ae:	60ae      	str	r6, [r5, #8]
   119b0:	60ec      	str	r4, [r5, #12]
   119b2:	6128      	str	r0, [r5, #16]
   119b4:	6169      	str	r1, [r5, #20]
   119b6:	61aa      	str	r2, [r5, #24]
   119b8:	61eb      	str	r3, [r5, #28]
   119ba:	b01b      	add	sp, #108	; 0x6c
   119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119c0:	46e8      	mov	r8, sp
   119c2:	4640      	mov	r0, r8
   119c4:	460f      	mov	r7, r1
   119c6:	f005 fcfb 	bl	173c0 <sha256_blocks>
   119ca:	1a24      	subs	r4, r4, r0
   119cc:	4603      	mov	r3, r0
   119ce:	4427      	add	r7, r4
   119d0:	2800      	cmp	r0, #0
   119d2:	f000 80b9 	beq.w	11b48 <ocrypto_sha256+0x2c0>
   119d6:	1e42      	subs	r2, r0, #1
   119d8:	2a02      	cmp	r2, #2
   119da:	d944      	bls.n	11a66 <ocrypto_sha256+0x1de>
   119dc:	6839      	ldr	r1, [r7, #0]
   119de:	0882      	lsrs	r2, r0, #2
   119e0:	2a01      	cmp	r2, #1
   119e2:	9108      	str	r1, [sp, #32]
   119e4:	d03a      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   119e6:	6879      	ldr	r1, [r7, #4]
   119e8:	2a02      	cmp	r2, #2
   119ea:	9109      	str	r1, [sp, #36]	; 0x24
   119ec:	d036      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   119ee:	68b9      	ldr	r1, [r7, #8]
   119f0:	2a03      	cmp	r2, #3
   119f2:	910a      	str	r1, [sp, #40]	; 0x28
   119f4:	d032      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   119f6:	68f9      	ldr	r1, [r7, #12]
   119f8:	2a04      	cmp	r2, #4
   119fa:	910b      	str	r1, [sp, #44]	; 0x2c
   119fc:	d02e      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   119fe:	6939      	ldr	r1, [r7, #16]
   11a00:	2a05      	cmp	r2, #5
   11a02:	910c      	str	r1, [sp, #48]	; 0x30
   11a04:	d02a      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a06:	6979      	ldr	r1, [r7, #20]
   11a08:	2a06      	cmp	r2, #6
   11a0a:	910d      	str	r1, [sp, #52]	; 0x34
   11a0c:	d026      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a0e:	69b9      	ldr	r1, [r7, #24]
   11a10:	2a07      	cmp	r2, #7
   11a12:	910e      	str	r1, [sp, #56]	; 0x38
   11a14:	d022      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a16:	69f9      	ldr	r1, [r7, #28]
   11a18:	2a08      	cmp	r2, #8
   11a1a:	910f      	str	r1, [sp, #60]	; 0x3c
   11a1c:	d01e      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a1e:	6a39      	ldr	r1, [r7, #32]
   11a20:	2a09      	cmp	r2, #9
   11a22:	9110      	str	r1, [sp, #64]	; 0x40
   11a24:	d01a      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
   11a28:	2a0a      	cmp	r2, #10
   11a2a:	9111      	str	r1, [sp, #68]	; 0x44
   11a2c:	d016      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11a30:	2a0b      	cmp	r2, #11
   11a32:	9112      	str	r1, [sp, #72]	; 0x48
   11a34:	d012      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11a38:	2a0c      	cmp	r2, #12
   11a3a:	9113      	str	r1, [sp, #76]	; 0x4c
   11a3c:	d00e      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   11a40:	2a0d      	cmp	r2, #13
   11a42:	9114      	str	r1, [sp, #80]	; 0x50
   11a44:	d00a      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a46:	6b79      	ldr	r1, [r7, #52]	; 0x34
   11a48:	2a0e      	cmp	r2, #14
   11a4a:	9115      	str	r1, [sp, #84]	; 0x54
   11a4c:	d006      	beq.n	11a5c <ocrypto_sha256+0x1d4>
   11a4e:	2a0f      	cmp	r2, #15
   11a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   11a52:	bf18      	it	ne
   11a54:	6bfa      	ldrne	r2, [r7, #60]	; 0x3c
   11a56:	9116      	str	r1, [sp, #88]	; 0x58
   11a58:	bf18      	it	ne
   11a5a:	9217      	strne	r2, [sp, #92]	; 0x5c
   11a5c:	f023 0603 	bic.w	r6, r3, #3
   11a60:	42b3      	cmp	r3, r6
   11a62:	4437      	add	r7, r6
   11a64:	d013      	beq.n	11a8e <ocrypto_sha256+0x206>
   11a66:	7838      	ldrb	r0, [r7, #0]
   11a68:	1c72      	adds	r2, r6, #1
   11a6a:	a91a      	add	r1, sp, #104	; 0x68
   11a6c:	4431      	add	r1, r6
   11a6e:	4293      	cmp	r3, r2
   11a70:	f801 0c48 	strb.w	r0, [r1, #-72]
   11a74:	d90b      	bls.n	11a8e <ocrypto_sha256+0x206>
   11a76:	7879      	ldrb	r1, [r7, #1]
   11a78:	a81a      	add	r0, sp, #104	; 0x68
   11a7a:	3602      	adds	r6, #2
   11a7c:	4402      	add	r2, r0
   11a7e:	42b3      	cmp	r3, r6
   11a80:	f802 1c48 	strb.w	r1, [r2, #-72]
   11a84:	d903      	bls.n	11a8e <ocrypto_sha256+0x206>
   11a86:	78ba      	ldrb	r2, [r7, #2]
   11a88:	4406      	add	r6, r0
   11a8a:	f806 2c48 	strb.w	r2, [r6, #-72]
   11a8e:	2180      	movs	r1, #128	; 0x80
   11a90:	1c58      	adds	r0, r3, #1
   11a92:	aa1a      	add	r2, sp, #104	; 0x68
   11a94:	441a      	add	r2, r3
   11a96:	2838      	cmp	r0, #56	; 0x38
   11a98:	9318      	str	r3, [sp, #96]	; 0x60
   11a9a:	f802 1c48 	strb.w	r1, [r2, #-72]
   11a9e:	bf98      	it	ls
   11aa0:	af08      	addls	r7, sp, #32
   11aa2:	d935      	bls.n	11b10 <ocrypto_sha256+0x288>
   11aa4:	283f      	cmp	r0, #63	; 0x3f
   11aa6:	d82c      	bhi.n	11b02 <ocrypto_sha256+0x27a>
   11aa8:	2100      	movs	r1, #0
   11aaa:	aa1a      	add	r2, sp, #104	; 0x68
   11aac:	4410      	add	r0, r2
   11aae:	2b3e      	cmp	r3, #62	; 0x3e
   11ab0:	f800 1c48 	strb.w	r1, [r0, #-72]
   11ab4:	f103 0202 	add.w	r2, r3, #2
   11ab8:	d023      	beq.n	11b02 <ocrypto_sha256+0x27a>
   11aba:	a81a      	add	r0, sp, #104	; 0x68
   11abc:	4402      	add	r2, r0
   11abe:	2b3d      	cmp	r3, #61	; 0x3d
   11ac0:	f802 1c48 	strb.w	r1, [r2, #-72]
   11ac4:	f103 0203 	add.w	r2, r3, #3
   11ac8:	d01b      	beq.n	11b02 <ocrypto_sha256+0x27a>
   11aca:	4402      	add	r2, r0
   11acc:	2b3c      	cmp	r3, #60	; 0x3c
   11ace:	f802 1c48 	strb.w	r1, [r2, #-72]
   11ad2:	f103 0204 	add.w	r2, r3, #4
   11ad6:	d014      	beq.n	11b02 <ocrypto_sha256+0x27a>
   11ad8:	4402      	add	r2, r0
   11ada:	2b3b      	cmp	r3, #59	; 0x3b
   11adc:	f802 1c48 	strb.w	r1, [r2, #-72]
   11ae0:	f103 0205 	add.w	r2, r3, #5
   11ae4:	d00d      	beq.n	11b02 <ocrypto_sha256+0x27a>
   11ae6:	4402      	add	r2, r0
   11ae8:	2b3a      	cmp	r3, #58	; 0x3a
   11aea:	f802 1c48 	strb.w	r1, [r2, #-72]
   11aee:	f103 0206 	add.w	r2, r3, #6
   11af2:	d006      	beq.n	11b02 <ocrypto_sha256+0x27a>
   11af4:	4402      	add	r2, r0
   11af6:	2b38      	cmp	r3, #56	; 0x38
   11af8:	f802 1c48 	strb.w	r1, [r2, #-72]
   11afc:	d101      	bne.n	11b02 <ocrypto_sha256+0x27a>
   11afe:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
   11b02:	af08      	add	r7, sp, #32
   11b04:	4639      	mov	r1, r7
   11b06:	4640      	mov	r0, r8
   11b08:	f005 fd1a 	bl	17540 <sha256_blocks.constprop.0>
   11b0c:	283a      	cmp	r0, #58	; 0x3a
   11b0e:	d819      	bhi.n	11b44 <ocrypto_sha256+0x2bc>
   11b10:	1c43      	adds	r3, r0, #1
   11b12:	2b3b      	cmp	r3, #59	; 0x3b
   11b14:	f1c0 023a 	rsb	r2, r0, #58	; 0x3a
   11b18:	f1c0 013b 	rsb	r1, r0, #59	; 0x3b
   11b1c:	bf88      	it	hi
   11b1e:	2101      	movhi	r1, #1
   11b20:	2a02      	cmp	r2, #2
   11b22:	9c19      	ldr	r4, [sp, #100]	; 0x64
   11b24:	f67f af0a 	bls.w	1193c <ocrypto_sha256+0xb4>
   11b28:	2600      	movs	r6, #0
   11b2a:	f100 0320 	add.w	r3, r0, #32
   11b2e:	eb08 0203 	add.w	r2, r8, r3
   11b32:	f848 6003 	str.w	r6, [r8, r3]
   11b36:	088b      	lsrs	r3, r1, #2
   11b38:	2b01      	cmp	r3, #1
   11b3a:	f102 0204 	add.w	r2, r2, #4
   11b3e:	f47f aed1 	bne.w	118e4 <ocrypto_sha256+0x5c>
   11b42:	e6f5      	b.n	11930 <ocrypto_sha256+0xa8>
   11b44:	9c19      	ldr	r4, [sp, #100]	; 0x64
   11b46:	e70b      	b.n	11960 <ocrypto_sha256+0xd8>
   11b48:	2280      	movs	r2, #128	; 0x80
   11b4a:	9018      	str	r0, [sp, #96]	; 0x60
   11b4c:	213a      	movs	r1, #58	; 0x3a
   11b4e:	2001      	movs	r0, #1
   11b50:	9c19      	ldr	r4, [sp, #100]	; 0x64
   11b52:	f88d 2020 	strb.w	r2, [sp, #32]
   11b56:	af08      	add	r7, sp, #32
   11b58:	e7e6      	b.n	11b28 <ocrypto_sha256+0x2a0>
   11b5a:	bf00      	nop
   11b5c:	f3af 8000 	nop.w
   11b60:	6a09e667 	.word	0x6a09e667
   11b64:	bb67ae85 	.word	0xbb67ae85
   11b68:	3c6ef372 	.word	0x3c6ef372
   11b6c:	a54ff53a 	.word	0xa54ff53a
   11b70:	510e527f 	.word	0x510e527f
   11b74:	9b05688c 	.word	0x9b05688c
   11b78:	1f83d9ab 	.word	0x1f83d9ab
   11b7c:	5be0cd19 	.word	0x5be0cd19

00011b80 <__acle_se_get_keystore_size>:
#ifdef NRF
__TZ_NONSECURE_ENTRY_FUNC
#endif
int get_keystore_size(){
        return keystore_size;
}
   11b80:	4b04      	ldr	r3, [pc, #16]	; (11b94 <__acle_se_get_keystore_size+0x14>)
   11b82:	4671      	mov	r1, lr
   11b84:	6818      	ldr	r0, [r3, #0]
   11b86:	4672      	mov	r2, lr
   11b88:	4673      	mov	r3, lr
   11b8a:	46f4      	mov	ip, lr
   11b8c:	f38e 8c00 	msr	CPSR_fs, lr
   11b90:	4774      	bxns	lr
   11b92:	bf00      	nop
   11b94:	20000248 	.word	0x20000248

00011b98 <__acle_se_store_pk>:

#ifdef NRF
__TZ_NONSECURE_ENTRY_FUNC
#endif
void store_pk(char* public_key_hex){
   11b98:	b510      	push	{r4, lr}
   11b9a:	2460      	movs	r4, #96	; 0x60
        int cont = keystore_size - 1;
   11b9c:	4b0b      	ldr	r3, [pc, #44]	; (11bcc <__acle_se_store_pk+0x34>)
   11b9e:	490c      	ldr	r1, [pc, #48]	; (11bd0 <__acle_se_store_pk+0x38>)
   11ba0:	681b      	ldr	r3, [r3, #0]
   11ba2:	1e42      	subs	r2, r0, #1
   11ba4:	3b01      	subs	r3, #1
   11ba6:	fb04 1303 	mla	r3, r4, r3, r1
   11baa:	305f      	adds	r0, #95	; 0x5f
        for(int i = 0; i < 96; i++){
            public_keys_hex_store[cont][i] = public_key_hex[i];
   11bac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
        for(int i = 0; i < 96; i++){
   11bb0:	4282      	cmp	r2, r0
            public_keys_hex_store[cont][i] = public_key_hex[i];
   11bb2:	f803 1b01 	strb.w	r1, [r3], #1
        for(int i = 0; i < 96; i++){
   11bb6:	d1f9      	bne.n	11bac <__acle_se_store_pk+0x14>
        }
}
   11bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11bbc:	4670      	mov	r0, lr
   11bbe:	4671      	mov	r1, lr
   11bc0:	4672      	mov	r2, lr
   11bc2:	4673      	mov	r3, lr
   11bc4:	46f4      	mov	ip, lr
   11bc6:	f38e 8c00 	msr	CPSR_fs, lr
   11bca:	4774      	bxns	lr
   11bcc:	20000248 	.word	0x20000248
   11bd0:	2000137c 	.word	0x2000137c

00011bd4 <__acle_se_getkeys>:

#ifdef NRF
__TZ_NONSECURE_ENTRY_FUNC
#endif
void getkeys(char public_keys_hex_store_ns[keystore_size][96]){
   11bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
        for(int i = 0; i < keystore_size; i++){
   11bd6:	2300      	movs	r3, #0
   11bd8:	2560      	movs	r5, #96	; 0x60
   11bda:	4c0e      	ldr	r4, [pc, #56]	; (11c14 <__acle_se_getkeys+0x40>)
   11bdc:	4e0e      	ldr	r6, [pc, #56]	; (11c18 <__acle_se_getkeys+0x44>)
   11bde:	305f      	adds	r0, #95	; 0x5f
   11be0:	6822      	ldr	r2, [r4, #0]
   11be2:	429a      	cmp	r2, r3
   11be4:	dc09      	bgt.n	11bfa <__acle_se_getkeys+0x26>
            for(int j = 0; j < 96; j++){
                public_keys_hex_store_ns[i][j] = public_keys_hex_store[i][j];
            }
        }
}
   11be6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   11bea:	4670      	mov	r0, lr
   11bec:	4671      	mov	r1, lr
   11bee:	4672      	mov	r2, lr
   11bf0:	4673      	mov	r3, lr
   11bf2:	46f4      	mov	ip, lr
   11bf4:	f38e 8c00 	msr	CPSR_fs, lr
   11bf8:	4774      	bxns	lr
   11bfa:	fb05 6103 	mla	r1, r5, r3, r6
   11bfe:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
                public_keys_hex_store_ns[i][j] = public_keys_hex_store[i][j];
   11c02:	f811 7b01 	ldrb.w	r7, [r1], #1
   11c06:	f802 7f01 	strb.w	r7, [r2, #1]!
            for(int j = 0; j < 96; j++){
   11c0a:	4282      	cmp	r2, r0
   11c0c:	d1f9      	bne.n	11c02 <__acle_se_getkeys+0x2e>
        for(int i = 0; i < keystore_size; i++){
   11c0e:	3301      	adds	r3, #1
   11c10:	3060      	adds	r0, #96	; 0x60
   11c12:	e7e5      	b.n	11be0 <__acle_se_getkeys+0xc>
   11c14:	20000248 	.word	0x20000248
   11c18:	2000137c 	.word	0x2000137c

00011c1c <__acle_se_pk_in_keystore>:

        int ret = 0;

        int c = 0;

        if(keystore_size == 0){
   11c1c:	4b1e      	ldr	r3, [pc, #120]	; (11c98 <__acle_se_pk_in_keystore+0x7c>)
int pk_in_keystore(char * public_key_hex, int offset){
   11c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if(keystore_size == 0){
   11c22:	681c      	ldr	r4, [r3, #0]
   11c24:	2300      	movs	r3, #0
int pk_in_keystore(char * public_key_hex, int offset){
   11c26:	4602      	mov	r2, r0
   11c28:	f04f 0e60 	mov.w	lr, #96	; 0x60
        if(keystore_size == 0){
   11c2c:	fab4 f084 	clz	r0, r4
   11c30:	461f      	mov	r7, r3
   11c32:	0940      	lsrs	r0, r0, #5
   11c34:	eb02 050e 	add.w	r5, r2, lr
   11c38:	f8df 8068 	ldr.w	r8, [pc, #104]	; 11ca4 <__acle_se_pk_in_keystore+0x88>
   11c3c:	4240      	negs	r0, r0
   11c3e:	440d      	add	r5, r1
                ret = -1;
        }

        for(int i = 0; i < keystore_size; i++){
   11c40:	429c      	cmp	r4, r3
   11c42:	dd17      	ble.n	11c74 <__acle_se_pk_in_keystore+0x58>
   11c44:	fb0e 8c03 	mla	ip, lr, r3, r8
   11c48:	1856      	adds	r6, r2, r1
            for(int j = 0; j < 96; j++){
                if(public_key_hex[j + offset] != public_keys_hex_store[i][j]){
   11c4a:	f816 ab01 	ldrb.w	sl, [r6], #1
   11c4e:	f81c 9b01 	ldrb.w	r9, [ip], #1
   11c52:	45ca      	cmp	sl, r9
   11c54:	d117      	bne.n	11c86 <__acle_se_pk_in_keystore+0x6a>
            for(int j = 0; j < 96; j++){
   11c56:	42ae      	cmp	r6, r5
   11c58:	d1f7      	bne.n	11c4a <__acle_se_pk_in_keystore+0x2e>
                    c = 1;
                    break;
                }
            }
            if (c == 0){
   11c5a:	b9a7      	cbnz	r7, 11c86 <__acle_se_pk_in_keystore+0x6a>
                sk_sign = secret_keys_store[i];
   11c5c:	4a0f      	ldr	r2, [pc, #60]	; (11c9c <__acle_se_pk_in_keystore+0x80>)
   11c5e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
   11c62:	4a0f      	ldr	r2, [pc, #60]	; (11ca0 <__acle_se_pk_in_keystore+0x84>)
   11c64:	f103 0120 	add.w	r1, r3, #32
   11c68:	f853 4b04 	ldr.w	r4, [r3], #4
   11c6c:	428b      	cmp	r3, r1
   11c6e:	f842 4b04 	str.w	r4, [r2], #4
   11c72:	d1f9      	bne.n	11c68 <__acle_se_pk_in_keystore+0x4c>
                    ret = -1;
                }
            }
        }
        return ret;
}
   11c74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c78:	4671      	mov	r1, lr
   11c7a:	4672      	mov	r2, lr
   11c7c:	4673      	mov	r3, lr
   11c7e:	46f4      	mov	ip, lr
   11c80:	f38e 8c00 	msr	CPSR_fs, lr
   11c84:	4774      	bxns	lr
                if((i+1) < keystore_size){
   11c86:	3301      	adds	r3, #1
   11c88:	429c      	cmp	r4, r3
   11c8a:	bfce      	itee	gt
   11c8c:	2700      	movgt	r7, #0
   11c8e:	2701      	movle	r7, #1
   11c90:	f04f 30ff 	movle.w	r0, #4294967295
   11c94:	e7d4      	b.n	11c40 <__acle_se_pk_in_keystore+0x24>
   11c96:	bf00      	nop
   11c98:	20000248 	.word	0x20000248
   11c9c:	2000173c 	.word	0x2000173c
   11ca0:	2000189c 	.word	0x2000189c
   11ca4:	2000137c 	.word	0x2000137c

00011ca8 <__acle_se_ikm_sk>:

#ifdef NRF
__TZ_NONSECURE_ENTRY_FUNC
#endif
void ikm_sk(char* info){
   11ca8:	b530      	push	{r4, r5, lr}
        // source of randomness. IKM MUST be at least 32 bytes long, but it MAY be longer.
        unsigned char ikm[32];
#ifdef NRF
	    const int random_number_len = 144;     
        uint8_t random_number[random_number_len];
        size_t olen = random_number_len;
   11caa:	2590      	movs	r5, #144	; 0x90
void ikm_sk(char* info){
   11cac:	b0b1      	sub	sp, #196	; 0xc4
   11cae:	4604      	mov	r4, r0
        int ret;

        ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, random_number, random_number_len, &olen);
   11cb0:	ab03      	add	r3, sp, #12
   11cb2:	462a      	mov	r2, r5
   11cb4:	a90c      	add	r1, sp, #48	; 0x30
   11cb6:	2000      	movs	r0, #0
        size_t olen = random_number_len;
   11cb8:	9503      	str	r5, [sp, #12]
        ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, random_number, random_number_len, &olen);
   11cba:	f005 fd61 	bl	17780 <nrf_cc3xx_platform_ctr_drbg_get>
        
        ocrypto_sha256(ikm, random_number, random_number_len);
   11cbe:	462a      	mov	r2, r5
   11cc0:	a90c      	add	r1, sp, #48	; 0x30
   11cc2:	a804      	add	r0, sp, #16
   11cc4:	f7ff fde0 	bl	11888 <ocrypto_sha256>
        }
#endif

        
        //Secret key (256-bit scalar)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   11cc8:	2304      	movs	r3, #4
   11cca:	2220      	movs	r2, #32
   11ccc:	4810      	ldr	r0, [pc, #64]	; (11d10 <__acle_se_ikm_sk+0x68>)
   11cce:	9300      	str	r3, [sp, #0]
   11cd0:	a904      	add	r1, sp, #16
   11cd2:	4623      	mov	r3, r4
   11cd4:	f7f7 fad8 	bl	9288 <blst_keygen>
        secret_keys_store[keystore_size] = sk;
   11cd8:	4b0e      	ldr	r3, [pc, #56]	; (11d14 <__acle_se_ikm_sk+0x6c>)
   11cda:	490d      	ldr	r1, [pc, #52]	; (11d10 <__acle_se_ikm_sk+0x68>)
   11cdc:	681a      	ldr	r2, [r3, #0]
   11cde:	480e      	ldr	r0, [pc, #56]	; (11d18 <__acle_se_ikm_sk+0x70>)
   11ce0:	f101 0420 	add.w	r4, r1, #32
   11ce4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
   11ce8:	f851 5b04 	ldr.w	r5, [r1], #4
   11cec:	42a1      	cmp	r1, r4
   11cee:	f840 5b04 	str.w	r5, [r0], #4
   11cf2:	d1f9      	bne.n	11ce8 <__acle_se_ikm_sk+0x40>
        keystore_size++;
   11cf4:	3201      	adds	r2, #1
   11cf6:	601a      	str	r2, [r3, #0]
}
   11cf8:	b031      	add	sp, #196	; 0xc4
   11cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   11cfe:	4670      	mov	r0, lr
   11d00:	4671      	mov	r1, lr
   11d02:	4672      	mov	r2, lr
   11d04:	4673      	mov	r3, lr
   11d06:	46f4      	mov	ip, lr
   11d08:	f38e 8c00 	msr	CPSR_fs, lr
   11d0c:	4774      	bxns	lr
   11d0e:	bf00      	nop
   11d10:	2000187c 	.word	0x2000187c
   11d14:	20000248 	.word	0x20000248
   11d18:	2000173c 	.word	0x2000173c

00011d1c <__acle_se_sk_to_pk>:

#ifdef NRF
__TZ_NONSECURE_ENTRY_FUNC
#endif
void sk_to_pk(blst_p1* pk){
   11d1c:	b508      	push	{r3, lr}
        blst_sk_to_pk_in_g1(pk, &sk);
   11d1e:	4906      	ldr	r1, [pc, #24]	; (11d38 <__acle_se_sk_to_pk+0x1c>)
   11d20:	f7f6 fc48 	bl	85b4 <blst_sk_to_pk_in_g1>
}
   11d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11d28:	4670      	mov	r0, lr
   11d2a:	4671      	mov	r1, lr
   11d2c:	4672      	mov	r2, lr
   11d2e:	4673      	mov	r3, lr
   11d30:	46f4      	mov	ip, lr
   11d32:	f38e 8c00 	msr	CPSR_fs, lr
   11d36:	4774      	bxns	lr
   11d38:	2000187c 	.word	0x2000187c

00011d3c <__acle_se_sign_pk>:

#ifdef NRF
__TZ_NONSECURE_ENTRY_FUNC
#endif
void sign_pk(blst_p2* sig, blst_p2* hash){
   11d3c:	b508      	push	{r3, lr}
        blst_sign_pk_in_g1(sig, hash, &sk_sign);
   11d3e:	4a06      	ldr	r2, [pc, #24]	; (11d58 <__acle_se_sign_pk+0x1c>)
   11d40:	f7f9 ff8c 	bl	bc5c <blst_sign_pk_in_g1>
}
   11d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11d48:	4670      	mov	r0, lr
   11d4a:	4671      	mov	r1, lr
   11d4c:	4672      	mov	r2, lr
   11d4e:	4673      	mov	r3, lr
   11d50:	46f4      	mov	ip, lr
   11d52:	f38e 8c00 	msr	CPSR_fs, lr
   11d56:	4774      	bxns	lr
   11d58:	2000189c 	.word	0x2000189c

00011d5c <__acle_se_reset>:

#ifdef NRF
__TZ_NONSECURE_ENTRY_FUNC
#endif
void reset(){
   11d5c:	b508      	push	{r3, lr}
        memset(secret_keys_store, 0, sizeof(secret_keys_store));
   11d5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11d62:	2100      	movs	r1, #0
   11d64:	480a      	ldr	r0, [pc, #40]	; (11d90 <__acle_se_reset+0x34>)
   11d66:	f008 fc9a 	bl	1a69e <memset>
        memset(public_keys_hex_store, 0, 960);
   11d6a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   11d6e:	2100      	movs	r1, #0
   11d70:	4808      	ldr	r0, [pc, #32]	; (11d94 <__acle_se_reset+0x38>)
   11d72:	f008 fc94 	bl	1a69e <memset>
        keystore_size = 0;
   11d76:	2200      	movs	r2, #0
   11d78:	4b07      	ldr	r3, [pc, #28]	; (11d98 <__acle_se_reset+0x3c>)
   11d7a:	601a      	str	r2, [r3, #0]
}
   11d7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11d80:	4670      	mov	r0, lr
   11d82:	4671      	mov	r1, lr
   11d84:	4672      	mov	r2, lr
   11d86:	4673      	mov	r3, lr
   11d88:	46f4      	mov	ip, lr
   11d8a:	f38e 8c00 	msr	CPSR_fs, lr
   11d8e:	4774      	bxns	lr
   11d90:	2000173c 	.word	0x2000173c
   11d94:	2000137c 	.word	0x2000137c
   11d98:	20000248 	.word	0x20000248

00011d9c <__acle_se_import_sk>:
int import_sk(blst_scalar* sk_imp){
        int ret = 0;

        int c = 0;

        if(keystore_size == 0){
   11d9c:	4a28      	ldr	r2, [pc, #160]	; (11e40 <__acle_se_import_sk+0xa4>)
int import_sk(blst_scalar* sk_imp){
   11d9e:	4603      	mov	r3, r0
        if(keystore_size == 0){
   11da0:	6810      	ldr	r0, [r2, #0]
int import_sk(blst_scalar* sk_imp){
   11da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if(keystore_size == 0){
   11da6:	2800      	cmp	r0, #0
   11da8:	d11b      	bne.n	11de2 <__acle_se_import_sk+0x46>
                secret_keys_store[keystore_size] = *sk_imp;
   11daa:	4619      	mov	r1, r3
   11dac:	4d25      	ldr	r5, [pc, #148]	; (11e44 <__acle_se_import_sk+0xa8>)
   11dae:	f103 0420 	add.w	r4, r3, #32
   11db2:	f851 6b04 	ldr.w	r6, [r1], #4
   11db6:	42a1      	cmp	r1, r4
   11db8:	f845 6b04 	str.w	r6, [r5], #4
   11dbc:	d1f9      	bne.n	11db2 <__acle_se_import_sk+0x16>
                keystore_size++;
   11dbe:	2101      	movs	r1, #1
   11dc0:	6011      	str	r1, [r2, #0]
                sk = *sk_imp;
   11dc2:	4a21      	ldr	r2, [pc, #132]	; (11e48 <__acle_se_import_sk+0xac>)
   11dc4:	f853 1b04 	ldr.w	r1, [r3], #4
   11dc8:	42a3      	cmp	r3, r4
   11dca:	f842 1b04 	str.w	r1, [r2], #4
   11dce:	d1f9      	bne.n	11dc4 <__acle_se_import_sk+0x28>
                    }
                }
            }
        }
        return ret;
}
   11dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11dd4:	4671      	mov	r1, lr
   11dd6:	4672      	mov	r2, lr
   11dd8:	4673      	mov	r3, lr
   11dda:	46f4      	mov	ip, lr
   11ddc:	f38e 8c00 	msr	CPSR_fs, lr
   11de0:	4774      	bxns	lr
            for(int i = 0; i < keystore_size; i++){
   11de2:	f04f 0100 	mov.w	r1, #0
   11de6:	dd28      	ble.n	11e3a <__acle_se_import_sk+0x9e>
   11de8:	4e16      	ldr	r6, [pc, #88]	; (11e44 <__acle_se_import_sk+0xa8>)
   11dea:	f103 0c1f 	add.w	ip, r3, #31
   11dee:	4634      	mov	r4, r6
   11df0:	eb06 1741 	add.w	r7, r6, r1, lsl #5
   11df4:	1e5d      	subs	r5, r3, #1
                    if(secret_keys_store[i].b[x] != (*sk_imp).b[x]){
   11df6:	f817 eb01 	ldrb.w	lr, [r7], #1
   11dfa:	f815 8f01 	ldrb.w	r8, [r5, #1]!
   11dfe:	45f0      	cmp	r8, lr
   11e00:	d104      	bne.n	11e0c <__acle_se_import_sk+0x70>
                for(int x = 0; x < 32; x++){
   11e02:	4565      	cmp	r5, ip
   11e04:	d1f7      	bne.n	11df6 <__acle_se_import_sk+0x5a>
                    ret = -1;
   11e06:	f04f 30ff 	mov.w	r0, #4294967295
   11e0a:	e7e1      	b.n	11dd0 <__acle_se_import_sk+0x34>
                    if((i+1) < keystore_size){
   11e0c:	3101      	adds	r1, #1
   11e0e:	4288      	cmp	r0, r1
   11e10:	dcee      	bgt.n	11df0 <__acle_se_import_sk+0x54>
                        secret_keys_store[keystore_size] = *sk_imp;
   11e12:	461d      	mov	r5, r3
   11e14:	eb04 1140 	add.w	r1, r4, r0, lsl #5
   11e18:	f103 0420 	add.w	r4, r3, #32
   11e1c:	f855 6b04 	ldr.w	r6, [r5], #4
   11e20:	42a5      	cmp	r5, r4
   11e22:	f841 6b04 	str.w	r6, [r1], #4
   11e26:	d1f9      	bne.n	11e1c <__acle_se_import_sk+0x80>
                        keystore_size++;
   11e28:	3001      	adds	r0, #1
   11e2a:	6010      	str	r0, [r2, #0]
                        sk = *sk_imp;
   11e2c:	4a06      	ldr	r2, [pc, #24]	; (11e48 <__acle_se_import_sk+0xac>)
   11e2e:	f853 1b04 	ldr.w	r1, [r3], #4
   11e32:	42a3      	cmp	r3, r4
   11e34:	f842 1b04 	str.w	r1, [r2], #4
   11e38:	d1f9      	bne.n	11e2e <__acle_se_import_sk+0x92>
        int ret = 0;
   11e3a:	2000      	movs	r0, #0
                        break;
   11e3c:	e7c8      	b.n	11dd0 <__acle_se_import_sk+0x34>
   11e3e:	bf00      	nop
   11e40:	20000248 	.word	0x20000248
   11e44:	2000173c 	.word	0x2000173c
   11e48:	2000187c 	.word	0x2000187c

00011e4c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11e4c:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11e4e:	6844      	ldr	r4, [r0, #4]
   11e50:	4605      	mov	r5, r0

	return method & SYS_NOTIFY_METHOD_MASK;
   11e52:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11e56:	2c03      	cmp	r4, #3
	notify->result = res;
   11e58:	6081      	str	r1, [r0, #8]
	switch (method) {
   11e5a:	d002      	beq.n	11e62 <sys_notify_finalize+0x16>
   11e5c:	b12c      	cbz	r4, 11e6a <sys_notify_finalize+0x1e>
   11e5e:	2000      	movs	r0, #0
   11e60:	e000      	b.n	11e64 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11e62:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11e64:	2300      	movs	r3, #0
   11e66:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11e68:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
   11e6a:	2245      	movs	r2, #69	; 0x45
   11e6c:	4904      	ldr	r1, [pc, #16]	; (11e80 <sys_notify_finalize+0x34>)
   11e6e:	4805      	ldr	r0, [pc, #20]	; (11e84 <sys_notify_finalize+0x38>)
   11e70:	f008 fa8e 	bl	1a390 <printk>
   11e74:	2145      	movs	r1, #69	; 0x45
   11e76:	4802      	ldr	r0, [pc, #8]	; (11e80 <sys_notify_finalize+0x34>)
   11e78:	f008 fb56 	bl	1a528 <assert_post_action>
   11e7c:	e7ef      	b.n	11e5e <sys_notify_finalize+0x12>
   11e7e:	bf00      	nop
   11e80:	0001d4e3 	.word	0x0001d4e3
   11e84:	0001d506 	.word	0x0001d506

00011e88 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11e88:	680b      	ldr	r3, [r1, #0]
   11e8a:	3301      	adds	r3, #1
   11e8c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11e8e:	4b01      	ldr	r3, [pc, #4]	; (11e94 <char_out+0xc>)
   11e90:	681b      	ldr	r3, [r3, #0]
   11e92:	4718      	bx	r3
   11e94:	20000000 	.word	0x20000000

00011e98 <__printk_hook_install>:
	_char_out = fn;
   11e98:	4b01      	ldr	r3, [pc, #4]	; (11ea0 <__printk_hook_install+0x8>)
   11e9a:	6018      	str	r0, [r3, #0]
}
   11e9c:	4770      	bx	lr
   11e9e:	bf00      	nop
   11ea0:	20000000 	.word	0x20000000

00011ea4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   11ea4:	b507      	push	{r0, r1, r2, lr}
   11ea6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11ea8:	2100      	movs	r1, #0
{
   11eaa:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   11eac:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11eae:	4803      	ldr	r0, [pc, #12]	; (11ebc <vprintk+0x18>)
   11eb0:	a901      	add	r1, sp, #4
   11eb2:	f000 fa6d 	bl	12390 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   11eb6:	b003      	add	sp, #12
   11eb8:	f85d fb04 	ldr.w	pc, [sp], #4
   11ebc:	00011e89 	.word	0x00011e89

00011ec0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11ec4:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
   11ec8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11eca:	f01a 0f08 	tst.w	sl, #8
{
   11ece:	4693      	mov	fp, r2
	if (processing) {
   11ed0:	d01c      	beq.n	11f0c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   11ed2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11ed4:	bf0c      	ite	eq
   11ed6:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11eda:	f04a 0a20 	orrne.w	sl, sl, #32
   11ede:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ee2:	f104 0014 	add.w	r0, r4, #20
   11ee6:	f003 fd47 	bl	15978 <z_spin_unlock_valid>
   11eea:	b940      	cbnz	r0, 11efe <process_event+0x3e>
   11eec:	49ba      	ldr	r1, [pc, #744]	; (121d8 <process_event+0x318>)
   11eee:	48bb      	ldr	r0, [pc, #748]	; (121dc <process_event+0x31c>)
   11ef0:	22ac      	movs	r2, #172	; 0xac
   11ef2:	f008 fa4d 	bl	1a390 <printk>
   11ef6:	21ac      	movs	r1, #172	; 0xac
   11ef8:	48b7      	ldr	r0, [pc, #732]	; (121d8 <process_event+0x318>)
   11efa:	f008 fb15 	bl	1a528 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11efe:	f38b 8811 	msr	BASEPRI, fp
   11f02:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11f06:	b003      	add	sp, #12
   11f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   11f0c:	4fb4      	ldr	r7, [pc, #720]	; (121e0 <process_event+0x320>)
   11f0e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 121dc <process_event+0x31c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11f12:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   11f16:	2902      	cmp	r1, #2
   11f18:	d106      	bne.n	11f28 <process_event+0x68>
			evt = process_recheck(mgr);
   11f1a:	4620      	mov	r0, r4
   11f1c:	f008 fa45 	bl	1a3aa <process_recheck>
		if (evt == EVT_NOP) {
   11f20:	2800      	cmp	r0, #0
   11f22:	d0de      	beq.n	11ee2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   11f24:	2801      	cmp	r0, #1
   11f26:	d165      	bne.n	11ff4 <process_event+0x134>
			res = mgr->last_res;
   11f28:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11f2c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   11f2e:	f1b9 0f00 	cmp.w	r9, #0
   11f32:	da19      	bge.n	11f68 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11f34:	2600      	movs	r6, #0
		*clients = mgr->clients;
   11f36:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11f38:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   11f3c:	e9c4 6600 	strd	r6, r6, [r4]
   11f40:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11f44:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11f46:	8ba3      	ldrh	r3, [r4, #28]
   11f48:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11f4c:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11f4e:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   11f50:	d003      	beq.n	11f5a <process_event+0x9a>
		if (do_monitors
   11f52:	68a2      	ldr	r2, [r4, #8]
   11f54:	2a00      	cmp	r2, #0
   11f56:	f040 80f1 	bne.w	1213c <process_event+0x27c>
		    || !sys_slist_is_empty(&clients)
   11f5a:	b915      	cbnz	r5, 11f62 <process_event+0xa2>
		    || (transit != NULL)) {
   11f5c:	2e00      	cmp	r6, #0
   11f5e:	f000 812b 	beq.w	121b8 <process_event+0x2f8>
   11f62:	f04f 0a00 	mov.w	sl, #0
   11f66:	e0eb      	b.n	12140 <process_event+0x280>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11f68:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11f6c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11f6e:	2901      	cmp	r1, #1
   11f70:	d822      	bhi.n	11fb8 <process_event+0xf8>
	list->head = NULL;
   11f72:	2100      	movs	r1, #0
   11f74:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   11f78:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   11f7a:	6825      	ldr	r5, [r4, #0]
   11f7c:	b29b      	uxth	r3, r3
	list->tail = NULL;
   11f7e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11f82:	d10c      	bne.n	11f9e <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11f84:	428d      	cmp	r5, r1
   11f86:	462a      	mov	r2, r5
   11f88:	bf38      	it	cc
   11f8a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11f8c:	b12a      	cbz	r2, 11f9a <process_event+0xda>
				mgr->refs += 1U;
   11f8e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11f90:	6812      	ldr	r2, [r2, #0]
   11f92:	3101      	adds	r1, #1
   11f94:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11f96:	2a00      	cmp	r2, #0
   11f98:	d1f8      	bne.n	11f8c <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11f9a:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   11f9e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   11fa0:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11fa2:	f008 fa02 	bl	1a3aa <process_recheck>
   11fa6:	4606      	mov	r6, r0
   11fa8:	2800      	cmp	r0, #0
   11faa:	d0cc      	beq.n	11f46 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11fac:	8ba3      	ldrh	r3, [r4, #28]
   11fae:	f043 0320 	orr.w	r3, r3, #32
   11fb2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   11fb4:	2600      	movs	r6, #0
   11fb6:	e7c6      	b.n	11f46 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11fb8:	2a04      	cmp	r2, #4
   11fba:	d10d      	bne.n	11fd8 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11fbc:	f023 0307 	bic.w	r3, r3, #7
   11fc0:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   11fc2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   11fc4:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11fc6:	f008 f9f0 	bl	1a3aa <process_recheck>
   11fca:	4605      	mov	r5, r0
   11fcc:	b180      	cbz	r0, 11ff0 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11fce:	f042 0220 	orr.w	r2, r2, #32
   11fd2:	2500      	movs	r5, #0
   11fd4:	83a2      	strh	r2, [r4, #28]
   11fd6:	e7ed      	b.n	11fb4 <process_event+0xf4>
		__ASSERT_NO_MSG(false);
   11fd8:	f240 121b 	movw	r2, #283	; 0x11b
   11fdc:	4639      	mov	r1, r7
   11fde:	4640      	mov	r0, r8
   11fe0:	f008 f9d6 	bl	1a390 <printk>
   11fe4:	f240 111b 	movw	r1, #283	; 0x11b
   11fe8:	4638      	mov	r0, r7
   11fea:	f008 fa9d 	bl	1a528 <assert_post_action>
   11fee:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11ff0:	462e      	mov	r6, r5
   11ff2:	e7a8      	b.n	11f46 <process_event+0x86>
		} else if (evt == EVT_START) {
   11ff4:	2803      	cmp	r0, #3
   11ff6:	d131      	bne.n	1205c <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11ff8:	f1ba 0f00 	cmp.w	sl, #0
   11ffc:	d00a      	beq.n	12014 <process_event+0x154>
   11ffe:	4639      	mov	r1, r7
   12000:	4640      	mov	r0, r8
   12002:	f44f 72ab 	mov.w	r2, #342	; 0x156
   12006:	f008 f9c3 	bl	1a390 <printk>
   1200a:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1200e:	4638      	mov	r0, r7
   12010:	f008 fa8a 	bl	1a528 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12014:	6823      	ldr	r3, [r4, #0]
   12016:	b953      	cbnz	r3, 1202e <process_event+0x16e>
   12018:	4639      	mov	r1, r7
   1201a:	4640      	mov	r0, r8
   1201c:	f240 1257 	movw	r2, #343	; 0x157
   12020:	f008 f9b6 	bl	1a390 <printk>
   12024:	f240 1157 	movw	r1, #343	; 0x157
   12028:	4638      	mov	r0, r7
   1202a:	f008 fa7d 	bl	1a528 <assert_post_action>
			transit = mgr->transitions->start;
   1202e:	6923      	ldr	r3, [r4, #16]
   12030:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12032:	b956      	cbnz	r6, 1204a <process_event+0x18a>
   12034:	4639      	mov	r1, r7
   12036:	4640      	mov	r0, r8
   12038:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   1203c:	f008 f9a8 	bl	1a390 <printk>
   12040:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   12044:	4638      	mov	r0, r7
   12046:	f008 fa6f 	bl	1a528 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1204a:	8ba3      	ldrh	r3, [r4, #28]
   1204c:	f023 0307 	bic.w	r3, r3, #7
   12050:	f043 0306 	orr.w	r3, r3, #6
}
   12054:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   12056:	83a3      	strh	r3, [r4, #28]
		res = 0;
   12058:	46a9      	mov	r9, r5
}
   1205a:	e774      	b.n	11f46 <process_event+0x86>
		} else if (evt == EVT_STOP) {
   1205c:	2804      	cmp	r0, #4
   1205e:	d12e      	bne.n	120be <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12060:	f1ba 0f02 	cmp.w	sl, #2
   12064:	d00a      	beq.n	1207c <process_event+0x1bc>
   12066:	4639      	mov	r1, r7
   12068:	4640      	mov	r0, r8
   1206a:	f240 125d 	movw	r2, #349	; 0x15d
   1206e:	f008 f98f 	bl	1a390 <printk>
   12072:	f240 115d 	movw	r1, #349	; 0x15d
   12076:	4638      	mov	r0, r7
   12078:	f008 fa56 	bl	1a528 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1207c:	8be3      	ldrh	r3, [r4, #30]
   1207e:	b153      	cbz	r3, 12096 <process_event+0x1d6>
   12080:	4639      	mov	r1, r7
   12082:	4640      	mov	r0, r8
   12084:	f44f 72af 	mov.w	r2, #350	; 0x15e
   12088:	f008 f982 	bl	1a390 <printk>
   1208c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   12090:	4638      	mov	r0, r7
   12092:	f008 fa49 	bl	1a528 <assert_post_action>
			transit = mgr->transitions->stop;
   12096:	6923      	ldr	r3, [r4, #16]
   12098:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1209a:	b956      	cbnz	r6, 120b2 <process_event+0x1f2>
   1209c:	4639      	mov	r1, r7
   1209e:	4640      	mov	r0, r8
   120a0:	f240 1261 	movw	r2, #353	; 0x161
   120a4:	f008 f974 	bl	1a390 <printk>
   120a8:	f240 1161 	movw	r1, #353	; 0x161
   120ac:	4638      	mov	r0, r7
   120ae:	f008 fa3b 	bl	1a528 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   120b2:	8ba3      	ldrh	r3, [r4, #28]
   120b4:	f023 0307 	bic.w	r3, r3, #7
   120b8:	f043 0304 	orr.w	r3, r3, #4
   120bc:	e7ca      	b.n	12054 <process_event+0x194>
		} else if (evt == EVT_RESET) {
   120be:	2805      	cmp	r0, #5
   120c0:	d12e      	bne.n	12120 <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   120c2:	f1ba 0f01 	cmp.w	sl, #1
   120c6:	d00a      	beq.n	120de <process_event+0x21e>
   120c8:	4639      	mov	r1, r7
   120ca:	4640      	mov	r0, r8
   120cc:	f44f 72b2 	mov.w	r2, #356	; 0x164
   120d0:	f008 f95e 	bl	1a390 <printk>
   120d4:	f44f 71b2 	mov.w	r1, #356	; 0x164
   120d8:	4638      	mov	r0, r7
   120da:	f008 fa25 	bl	1a528 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   120de:	6823      	ldr	r3, [r4, #0]
   120e0:	b953      	cbnz	r3, 120f8 <process_event+0x238>
   120e2:	4639      	mov	r1, r7
   120e4:	4640      	mov	r0, r8
   120e6:	f240 1265 	movw	r2, #357	; 0x165
   120ea:	f008 f951 	bl	1a390 <printk>
   120ee:	f240 1165 	movw	r1, #357	; 0x165
   120f2:	4638      	mov	r0, r7
   120f4:	f008 fa18 	bl	1a528 <assert_post_action>
			transit = mgr->transitions->reset;
   120f8:	6923      	ldr	r3, [r4, #16]
   120fa:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   120fc:	b956      	cbnz	r6, 12114 <process_event+0x254>
   120fe:	4639      	mov	r1, r7
   12100:	4640      	mov	r0, r8
   12102:	f44f 72b4 	mov.w	r2, #360	; 0x168
   12106:	f008 f943 	bl	1a390 <printk>
   1210a:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1210e:	4638      	mov	r0, r7
   12110:	f008 fa0a 	bl	1a528 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12114:	8ba3      	ldrh	r3, [r4, #28]
   12116:	f023 0307 	bic.w	r3, r3, #7
   1211a:	f043 0305 	orr.w	r3, r3, #5
   1211e:	e799      	b.n	12054 <process_event+0x194>
			__ASSERT_NO_MSG(false);
   12120:	2500      	movs	r5, #0
   12122:	f240 126b 	movw	r2, #363	; 0x16b
   12126:	4639      	mov	r1, r7
   12128:	4640      	mov	r0, r8
   1212a:	f008 f931 	bl	1a390 <printk>
   1212e:	f240 116b 	movw	r1, #363	; 0x16b
   12132:	4638      	mov	r0, r7
   12134:	f008 f9f8 	bl	1a528 <assert_post_action>
		onoff_transition_fn transit = NULL;
   12138:	462e      	mov	r6, r5
   1213a:	e78d      	b.n	12058 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
   1213c:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12140:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   12144:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   12146:	f104 0314 	add.w	r3, r4, #20
   1214a:	4618      	mov	r0, r3
   1214c:	9301      	str	r3, [sp, #4]
   1214e:	f003 fc13 	bl	15978 <z_spin_unlock_valid>
   12152:	b940      	cbnz	r0, 12166 <process_event+0x2a6>
   12154:	4640      	mov	r0, r8
   12156:	4920      	ldr	r1, [pc, #128]	; (121d8 <process_event+0x318>)
   12158:	22ac      	movs	r2, #172	; 0xac
   1215a:	f008 f919 	bl	1a390 <printk>
   1215e:	21ac      	movs	r1, #172	; 0xac
   12160:	481d      	ldr	r0, [pc, #116]	; (121d8 <process_event+0x318>)
   12162:	f008 f9e1 	bl	1a528 <assert_post_action>
   12166:	f38b 8811 	msr	BASEPRI, fp
   1216a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1216e:	f1ba 0f00 	cmp.w	sl, #0
   12172:	d139      	bne.n	121e8 <process_event+0x328>
	while (!sys_slist_is_empty(list)) {
   12174:	2d00      	cmp	r5, #0
   12176:	d14c      	bne.n	12212 <process_event+0x352>
			if (transit != NULL) {
   12178:	b116      	cbz	r6, 12180 <process_event+0x2c0>
				transit(mgr, transition_complete);
   1217a:	4620      	mov	r0, r4
   1217c:	4919      	ldr	r1, [pc, #100]	; (121e4 <process_event+0x324>)
   1217e:	47b0      	blx	r6
	__asm__ volatile(
   12180:	f04f 0320 	mov.w	r3, #32
   12184:	f3ef 8b11 	mrs	fp, BASEPRI
   12188:	f383 8812 	msr	BASEPRI_MAX, r3
   1218c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12190:	9801      	ldr	r0, [sp, #4]
   12192:	f003 fbe3 	bl	1595c <z_spin_lock_valid>
   12196:	b940      	cbnz	r0, 121aa <process_event+0x2ea>
   12198:	4640      	mov	r0, r8
   1219a:	490f      	ldr	r1, [pc, #60]	; (121d8 <process_event+0x318>)
   1219c:	2281      	movs	r2, #129	; 0x81
   1219e:	f008 f8f7 	bl	1a390 <printk>
   121a2:	2181      	movs	r1, #129	; 0x81
   121a4:	480c      	ldr	r0, [pc, #48]	; (121d8 <process_event+0x318>)
   121a6:	f008 f9bf 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   121aa:	9801      	ldr	r0, [sp, #4]
   121ac:	f003 fbf2 	bl	15994 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   121b0:	8ba3      	ldrh	r3, [r4, #28]
   121b2:	f023 0308 	bic.w	r3, r3, #8
   121b6:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   121b8:	8ba3      	ldrh	r3, [r4, #28]
   121ba:	06da      	lsls	r2, r3, #27
   121bc:	d531      	bpl.n	12222 <process_event+0x362>
			evt = EVT_COMPLETE;
   121be:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   121c0:	f023 0310 	bic.w	r3, r3, #16
   121c4:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   121c6:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   121ca:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   121ce:	2900      	cmp	r1, #0
   121d0:	f47f aea1 	bne.w	11f16 <process_event+0x56>
out:
   121d4:	e685      	b.n	11ee2 <process_event+0x22>
   121d6:	bf00      	nop
   121d8:	0001d540 	.word	0x0001d540
   121dc:	0001d506 	.word	0x0001d506
   121e0:	0001d51e 	.word	0x0001d51e
   121e4:	00012235 	.word	0x00012235
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   121e8:	68a1      	ldr	r1, [r4, #8]
   121ea:	2900      	cmp	r1, #0
   121ec:	d0c2      	beq.n	12174 <process_event+0x2b4>
	return node->next;
   121ee:	680b      	ldr	r3, [r1, #0]
   121f0:	2b00      	cmp	r3, #0
   121f2:	bf38      	it	cc
   121f4:	2300      	movcc	r3, #0
   121f6:	469a      	mov	sl, r3
		mon->callback(mgr, mon, state, res);
   121f8:	4620      	mov	r0, r4
   121fa:	464b      	mov	r3, r9
   121fc:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12200:	9a00      	ldr	r2, [sp, #0]
   12202:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12204:	f1ba 0f00 	cmp.w	sl, #0
   12208:	d0b4      	beq.n	12174 <process_event+0x2b4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1220a:	4651      	mov	r1, sl
   1220c:	f8da 3000 	ldr.w	r3, [sl]
   12210:	e7ee      	b.n	121f0 <process_event+0x330>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12212:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12214:	464b      	mov	r3, r9
   12216:	4620      	mov	r0, r4
   12218:	9a00      	ldr	r2, [sp, #0]
   1221a:	682d      	ldr	r5, [r5, #0]
   1221c:	f008 f8e1 	bl	1a3e2 <notify_one>
   12220:	e7a8      	b.n	12174 <process_event+0x2b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12222:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12226:	bf1e      	ittt	ne
   12228:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1222c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1222e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   12230:	e7c9      	b.n	121c6 <process_event+0x306>
   12232:	bf00      	nop

00012234 <transition_complete>:
{
   12234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12236:	4604      	mov	r4, r0
   12238:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1223a:	f100 0614 	add.w	r6, r0, #20
   1223e:	f04f 0320 	mov.w	r3, #32
   12242:	f3ef 8711 	mrs	r7, BASEPRI
   12246:	f383 8812 	msr	BASEPRI_MAX, r3
   1224a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1224e:	4630      	mov	r0, r6
   12250:	f003 fb84 	bl	1595c <z_spin_lock_valid>
   12254:	b940      	cbnz	r0, 12268 <transition_complete+0x34>
   12256:	490a      	ldr	r1, [pc, #40]	; (12280 <transition_complete+0x4c>)
   12258:	480a      	ldr	r0, [pc, #40]	; (12284 <transition_complete+0x50>)
   1225a:	2281      	movs	r2, #129	; 0x81
   1225c:	f008 f898 	bl	1a390 <printk>
   12260:	2181      	movs	r1, #129	; 0x81
   12262:	4807      	ldr	r0, [pc, #28]	; (12280 <transition_complete+0x4c>)
   12264:	f008 f960 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   12268:	4630      	mov	r0, r6
   1226a:	f003 fb93 	bl	15994 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   1226e:	463a      	mov	r2, r7
   12270:	4620      	mov	r0, r4
	mgr->last_res = res;
   12272:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   12274:	2101      	movs	r1, #1
}
   12276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1227a:	f7ff be21 	b.w	11ec0 <process_event>
   1227e:	bf00      	nop
   12280:	0001d540 	.word	0x0001d540
   12284:	0001d506 	.word	0x0001d506

00012288 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1228c:	4604      	mov	r4, r0
   1228e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12290:	f008 f8bd 	bl	1a40e <validate_args>

	if (rv < 0) {
   12294:	1e05      	subs	r5, r0, #0
   12296:	db54      	blt.n	12342 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12298:	f104 0914 	add.w	r9, r4, #20
   1229c:	f04f 0320 	mov.w	r3, #32
   122a0:	f3ef 8a11 	mrs	sl, BASEPRI
   122a4:	f383 8812 	msr	BASEPRI_MAX, r3
   122a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   122ac:	4648      	mov	r0, r9
   122ae:	f003 fb55 	bl	1595c <z_spin_lock_valid>
   122b2:	b940      	cbnz	r0, 122c6 <onoff_request+0x3e>
   122b4:	4933      	ldr	r1, [pc, #204]	; (12384 <onoff_request+0xfc>)
   122b6:	4834      	ldr	r0, [pc, #208]	; (12388 <onoff_request+0x100>)
   122b8:	2281      	movs	r2, #129	; 0x81
   122ba:	f008 f869 	bl	1a390 <printk>
   122be:	2181      	movs	r1, #129	; 0x81
   122c0:	4830      	ldr	r0, [pc, #192]	; (12384 <onoff_request+0xfc>)
   122c2:	f008 f931 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   122c6:	4648      	mov	r0, r9
   122c8:	f003 fb64 	bl	15994 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   122cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   122d0:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   122d2:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   122d4:	428b      	cmp	r3, r1
   122d6:	f002 0607 	and.w	r6, r2, #7
   122da:	d04a      	beq.n	12372 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   122dc:	2e02      	cmp	r6, #2
   122de:	d11f      	bne.n	12320 <onoff_request+0x98>
	rv = state;
   122e0:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   122e2:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   122e6:	3301      	adds	r3, #1
   122e8:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   122ea:	4648      	mov	r0, r9
   122ec:	f003 fb44 	bl	15978 <z_spin_unlock_valid>
   122f0:	b940      	cbnz	r0, 12304 <onoff_request+0x7c>
   122f2:	4924      	ldr	r1, [pc, #144]	; (12384 <onoff_request+0xfc>)
   122f4:	4824      	ldr	r0, [pc, #144]	; (12388 <onoff_request+0x100>)
   122f6:	22ac      	movs	r2, #172	; 0xac
   122f8:	f008 f84a 	bl	1a390 <printk>
   122fc:	21ac      	movs	r1, #172	; 0xac
   122fe:	4821      	ldr	r0, [pc, #132]	; (12384 <onoff_request+0xfc>)
   12300:	f008 f912 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   12304:	f38a 8811 	msr	BASEPRI, sl
   12308:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1230c:	f1b8 0f00 	cmp.w	r8, #0
   12310:	d017      	beq.n	12342 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   12312:	2300      	movs	r3, #0
   12314:	4632      	mov	r2, r6
   12316:	4639      	mov	r1, r7
   12318:	4620      	mov	r0, r4
   1231a:	f008 f862 	bl	1a3e2 <notify_one>
   1231e:	e010      	b.n	12342 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   12320:	0793      	lsls	r3, r2, #30
   12322:	d001      	beq.n	12328 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   12324:	2e06      	cmp	r6, #6
   12326:	d10f      	bne.n	12348 <onoff_request+0xc0>
	parent->next = child;
   12328:	2300      	movs	r3, #0
   1232a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   1232c:	6863      	ldr	r3, [r4, #4]
   1232e:	b9eb      	cbnz	r3, 1236c <onoff_request+0xe4>
	list->head = node;
   12330:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   12334:	4635      	mov	r5, r6
   12336:	b9f6      	cbnz	r6, 12376 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   12338:	4652      	mov	r2, sl
   1233a:	2102      	movs	r1, #2
   1233c:	4620      	mov	r0, r4
   1233e:	f7ff fdbf 	bl	11ec0 <process_event>
		}
	}

	return rv;
}
   12342:	4628      	mov	r0, r5
   12344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   12348:	2e05      	cmp	r6, #5
   1234a:	d017      	beq.n	1237c <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1234c:	2e01      	cmp	r6, #1
   1234e:	d00a      	beq.n	12366 <onoff_request+0xde>
   12350:	490e      	ldr	r1, [pc, #56]	; (1238c <onoff_request+0x104>)
   12352:	480d      	ldr	r0, [pc, #52]	; (12388 <onoff_request+0x100>)
   12354:	f240 12c9 	movw	r2, #457	; 0x1c9
   12358:	f008 f81a 	bl	1a390 <printk>
   1235c:	f240 11c9 	movw	r1, #457	; 0x1c9
   12360:	480a      	ldr	r0, [pc, #40]	; (1238c <onoff_request+0x104>)
   12362:	f008 f8e1 	bl	1a528 <assert_post_action>
		rv = -EIO;
   12366:	f06f 0504 	mvn.w	r5, #4
   1236a:	e004      	b.n	12376 <onoff_request+0xee>
	parent->next = child;
   1236c:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1236e:	6067      	str	r7, [r4, #4]
}
   12370:	e7e0      	b.n	12334 <onoff_request+0xac>
		rv = -EAGAIN;
   12372:	f06f 050a 	mvn.w	r5, #10
   12376:	f04f 0800 	mov.w	r8, #0
   1237a:	e7b6      	b.n	122ea <onoff_request+0x62>
		rv = -ENOTSUP;
   1237c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   12380:	e7f9      	b.n	12376 <onoff_request+0xee>
   12382:	bf00      	nop
   12384:	0001d540 	.word	0x0001d540
   12388:	0001d506 	.word	0x0001d506
   1238c:	0001d51e 	.word	0x0001d51e

00012390 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   12390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12394:	468b      	mov	fp, r1
   12396:	4692      	mov	sl, r2
   12398:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1239a:	2500      	movs	r5, #0
{
   1239c:	b091      	sub	sp, #68	; 0x44
   1239e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   123a0:	f89a 0000 	ldrb.w	r0, [sl]
   123a4:	b908      	cbnz	r0, 123aa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   123a6:	4628      	mov	r0, r5
   123a8:	e35e      	b.n	12a68 <cbvprintf+0x6d8>
		if (*fp != '%') {
   123aa:	2825      	cmp	r0, #37	; 0x25
   123ac:	f10a 0701 	add.w	r7, sl, #1
   123b0:	d007      	beq.n	123c2 <cbvprintf+0x32>
			OUTC('%');
   123b2:	4659      	mov	r1, fp
   123b4:	9b02      	ldr	r3, [sp, #8]
   123b6:	4798      	blx	r3
   123b8:	2800      	cmp	r0, #0
   123ba:	f2c0 8355 	blt.w	12a68 <cbvprintf+0x6d8>
   123be:	3501      	adds	r5, #1
			break;
   123c0:	e210      	b.n	127e4 <cbvprintf+0x454>
		} state = {
   123c2:	2218      	movs	r2, #24
   123c4:	2100      	movs	r1, #0
   123c6:	a80a      	add	r0, sp, #40	; 0x28
   123c8:	f008 f969 	bl	1a69e <memset>
	if (*sp == '%') {
   123cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
   123d0:	2b25      	cmp	r3, #37	; 0x25
   123d2:	d078      	beq.n	124c6 <cbvprintf+0x136>
   123d4:	2200      	movs	r2, #0
   123d6:	4694      	mov	ip, r2
   123d8:	4616      	mov	r6, r2
   123da:	4696      	mov	lr, r2
   123dc:	4610      	mov	r0, r2
   123de:	4639      	mov	r1, r7
		switch (*sp) {
   123e0:	f817 3b01 	ldrb.w	r3, [r7], #1
   123e4:	2b2b      	cmp	r3, #43	; 0x2b
   123e6:	f000 809d 	beq.w	12524 <cbvprintf+0x194>
   123ea:	f200 8094 	bhi.w	12516 <cbvprintf+0x186>
   123ee:	2b20      	cmp	r3, #32
   123f0:	f000 809b 	beq.w	1252a <cbvprintf+0x19a>
   123f4:	2b23      	cmp	r3, #35	; 0x23
   123f6:	f000 809a 	beq.w	1252e <cbvprintf+0x19e>
   123fa:	b128      	cbz	r0, 12408 <cbvprintf+0x78>
   123fc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12400:	f040 0004 	orr.w	r0, r0, #4
   12404:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12408:	f1be 0f00 	cmp.w	lr, #0
   1240c:	d005      	beq.n	1241a <cbvprintf+0x8a>
   1240e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12412:	f040 0008 	orr.w	r0, r0, #8
   12416:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1241a:	b12e      	cbz	r6, 12428 <cbvprintf+0x98>
   1241c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12420:	f040 0010 	orr.w	r0, r0, #16
   12424:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12428:	f1bc 0f00 	cmp.w	ip, #0
   1242c:	d005      	beq.n	1243a <cbvprintf+0xaa>
   1242e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12432:	f040 0020 	orr.w	r0, r0, #32
   12436:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1243a:	b12a      	cbz	r2, 12448 <cbvprintf+0xb8>
   1243c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12444:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   12448:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1244c:	f002 0044 	and.w	r0, r2, #68	; 0x44
   12450:	2844      	cmp	r0, #68	; 0x44
   12452:	d103      	bne.n	1245c <cbvprintf+0xcc>
		conv->flag_zero = false;
   12454:	f36f 1286 	bfc	r2, #6, #1
   12458:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   1245c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12460:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   12462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12466:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1246a:	d17b      	bne.n	12564 <cbvprintf+0x1d4>
		conv->width_star = true;
   1246c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12470:	1c4b      	adds	r3, r1, #1
   12472:	f042 0201 	orr.w	r2, r2, #1
   12476:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1247a:	781a      	ldrb	r2, [r3, #0]
   1247c:	2a2e      	cmp	r2, #46	; 0x2e
   1247e:	bf0c      	ite	eq
   12480:	2101      	moveq	r1, #1
   12482:	2100      	movne	r1, #0
   12484:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12488:	f361 0241 	bfi	r2, r1, #1, #1
   1248c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   12490:	d174      	bne.n	1257c <cbvprintf+0x1ec>
	if (*sp == '*') {
   12492:	785a      	ldrb	r2, [r3, #1]
   12494:	2a2a      	cmp	r2, #42	; 0x2a
   12496:	d06a      	beq.n	1256e <cbvprintf+0x1de>
	size_t val = 0;
   12498:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   1249a:	260a      	movs	r6, #10
   1249c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1249e:	4618      	mov	r0, r3
   124a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   124a4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   124a8:	2f09      	cmp	r7, #9
   124aa:	f240 808e 	bls.w	125ca <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   124ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   124b2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   124b4:	f3c2 0040 	ubfx	r0, r2, #1, #1
   124b8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   124bc:	f361 0241 	bfi	r2, r1, #1, #1
   124c0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   124c4:	e05a      	b.n	1257c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   124c6:	f10a 0702 	add.w	r7, sl, #2
   124ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   124ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   124d2:	07d9      	lsls	r1, r3, #31
   124d4:	f140 8149 	bpl.w	1276a <cbvprintf+0x3da>
			width = va_arg(ap, int);
   124d8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   124dc:	f1b9 0f00 	cmp.w	r9, #0
   124e0:	da07      	bge.n	124f2 <cbvprintf+0x162>
				conv->flag_dash = true;
   124e2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
   124e6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   124ea:	f042 0204 	orr.w	r2, r2, #4
   124ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
   124f2:	075a      	lsls	r2, r3, #29
   124f4:	f140 8142 	bpl.w	1277c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   124f8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   124fc:	f1b8 0f00 	cmp.w	r8, #0
   12500:	f280 8141 	bge.w	12786 <cbvprintf+0x3f6>
				conv->prec_present = false;
   12504:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12508:	f36f 0341 	bfc	r3, #1, #1
   1250c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12510:	f04f 38ff 	mov.w	r8, #4294967295
   12514:	e137      	b.n	12786 <cbvprintf+0x3f6>
		switch (*sp) {
   12516:	2b2d      	cmp	r3, #45	; 0x2d
   12518:	d00c      	beq.n	12534 <cbvprintf+0x1a4>
   1251a:	2b30      	cmp	r3, #48	; 0x30
   1251c:	f47f af6d 	bne.w	123fa <cbvprintf+0x6a>
			conv->flag_zero = true;
   12520:	2201      	movs	r2, #1
	} while (loop);
   12522:	e75c      	b.n	123de <cbvprintf+0x4e>
			conv->flag_plus = true;
   12524:	f04f 0e01 	mov.w	lr, #1
   12528:	e759      	b.n	123de <cbvprintf+0x4e>
			conv->flag_space = true;
   1252a:	2601      	movs	r6, #1
   1252c:	e757      	b.n	123de <cbvprintf+0x4e>
			conv->flag_hash = true;
   1252e:	f04f 0c01 	mov.w	ip, #1
   12532:	e754      	b.n	123de <cbvprintf+0x4e>
		switch (*sp) {
   12534:	2001      	movs	r0, #1
   12536:	e752      	b.n	123de <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   12538:	4633      	mov	r3, r6
   1253a:	fb0c 0202 	mla	r2, ip, r2, r0
   1253e:	3a30      	subs	r2, #48	; 0x30
   12540:	461e      	mov	r6, r3
   12542:	f816 0b01 	ldrb.w	r0, [r6], #1
   12546:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1254a:	2f09      	cmp	r7, #9
   1254c:	d9f4      	bls.n	12538 <cbvprintf+0x1a8>
	if (sp != wp) {
   1254e:	4299      	cmp	r1, r3
   12550:	d093      	beq.n	1247a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12552:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   12556:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12558:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1255a:	f362 0141 	bfi	r1, r2, #1, #1
   1255e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   12562:	e78a      	b.n	1247a <cbvprintf+0xea>
   12564:	460b      	mov	r3, r1
	size_t val = 0;
   12566:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12568:	f04f 0c0a 	mov.w	ip, #10
   1256c:	e7e8      	b.n	12540 <cbvprintf+0x1b0>
		conv->prec_star = true;
   1256e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   12572:	3302      	adds	r3, #2
		conv->prec_star = true;
   12574:	f042 0204 	orr.w	r2, r2, #4
   12578:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
   1257c:	461f      	mov	r7, r3
   1257e:	f817 2b01 	ldrb.w	r2, [r7], #1
   12582:	2a6c      	cmp	r2, #108	; 0x6c
   12584:	d041      	beq.n	1260a <cbvprintf+0x27a>
   12586:	d825      	bhi.n	125d4 <cbvprintf+0x244>
   12588:	2a68      	cmp	r2, #104	; 0x68
   1258a:	d02b      	beq.n	125e4 <cbvprintf+0x254>
   1258c:	2a6a      	cmp	r2, #106	; 0x6a
   1258e:	d046      	beq.n	1261e <cbvprintf+0x28e>
   12590:	2a4c      	cmp	r2, #76	; 0x4c
   12592:	d04c      	beq.n	1262e <cbvprintf+0x29e>
   12594:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   12596:	f817 2b01 	ldrb.w	r2, [r7], #1
   1259a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
   1259e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   125a0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   125a4:	f200 80d9 	bhi.w	1275a <cbvprintf+0x3ca>
   125a8:	2a57      	cmp	r2, #87	; 0x57
   125aa:	d84d      	bhi.n	12648 <cbvprintf+0x2b8>
   125ac:	2a41      	cmp	r2, #65	; 0x41
   125ae:	d003      	beq.n	125b8 <cbvprintf+0x228>
   125b0:	3a45      	subs	r2, #69	; 0x45
   125b2:	2a02      	cmp	r2, #2
   125b4:	f200 80d1 	bhi.w	1275a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   125b8:	2204      	movs	r2, #4
   125ba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   125be:	f362 0302 	bfi	r3, r2, #0, #3
   125c2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   125c6:	2301      	movs	r3, #1
			break;
   125c8:	e09e      	b.n	12708 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   125ca:	fb06 2101 	mla	r1, r6, r1, r2
   125ce:	4603      	mov	r3, r0
   125d0:	3930      	subs	r1, #48	; 0x30
   125d2:	e764      	b.n	1249e <cbvprintf+0x10e>
	switch (*sp) {
   125d4:	2a74      	cmp	r2, #116	; 0x74
   125d6:	d026      	beq.n	12626 <cbvprintf+0x296>
   125d8:	2a7a      	cmp	r2, #122	; 0x7a
   125da:	d1db      	bne.n	12594 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   125dc:	2206      	movs	r2, #6
   125de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   125e2:	e00d      	b.n	12600 <cbvprintf+0x270>
		if (*++sp == 'h') {
   125e4:	785a      	ldrb	r2, [r3, #1]
   125e6:	2a68      	cmp	r2, #104	; 0x68
   125e8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   125ec:	d106      	bne.n	125fc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   125ee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   125f0:	f361 02c6 	bfi	r2, r1, #3, #4
   125f4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   125f8:	1c9f      	adds	r7, r3, #2
   125fa:	e7cc      	b.n	12596 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   125fc:	4613      	mov	r3, r2
   125fe:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   12600:	f362 03c6 	bfi	r3, r2, #3, #4
   12604:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12608:	e7c5      	b.n	12596 <cbvprintf+0x206>
		if (*++sp == 'l') {
   1260a:	785a      	ldrb	r2, [r3, #1]
   1260c:	2a6c      	cmp	r2, #108	; 0x6c
   1260e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12612:	d101      	bne.n	12618 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   12614:	2104      	movs	r1, #4
   12616:	e7eb      	b.n	125f0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   12618:	4613      	mov	r3, r2
   1261a:	2203      	movs	r2, #3
   1261c:	e7f0      	b.n	12600 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1261e:	2205      	movs	r2, #5
   12620:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12624:	e7ec      	b.n	12600 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   12626:	2207      	movs	r2, #7
   12628:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1262c:	e7e8      	b.n	12600 <cbvprintf+0x270>
		conv->unsupported = true;
   1262e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12632:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12636:	f023 0302 	bic.w	r3, r3, #2
   1263a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1263e:	f043 0302 	orr.w	r3, r3, #2
   12642:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   12646:	e7a6      	b.n	12596 <cbvprintf+0x206>
   12648:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1264c:	2920      	cmp	r1, #32
   1264e:	f200 8084 	bhi.w	1275a <cbvprintf+0x3ca>
   12652:	a001      	add	r0, pc, #4	; (adr r0, 12658 <cbvprintf+0x2c8>)
   12654:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12658:	0001271d 	.word	0x0001271d
   1265c:	0001275b 	.word	0x0001275b
   12660:	0001275b 	.word	0x0001275b
   12664:	0001275b 	.word	0x0001275b
   12668:	0001275b 	.word	0x0001275b
   1266c:	0001275b 	.word	0x0001275b
   12670:	0001275b 	.word	0x0001275b
   12674:	0001275b 	.word	0x0001275b
   12678:	0001275b 	.word	0x0001275b
   1267c:	000125b9 	.word	0x000125b9
   12680:	0001275b 	.word	0x0001275b
   12684:	0001271d 	.word	0x0001271d
   12688:	000126dd 	.word	0x000126dd
   1268c:	000125b9 	.word	0x000125b9
   12690:	000125b9 	.word	0x000125b9
   12694:	000125b9 	.word	0x000125b9
   12698:	0001275b 	.word	0x0001275b
   1269c:	000126dd 	.word	0x000126dd
   126a0:	0001275b 	.word	0x0001275b
   126a4:	0001275b 	.word	0x0001275b
   126a8:	0001275b 	.word	0x0001275b
   126ac:	0001275b 	.word	0x0001275b
   126b0:	00012725 	.word	0x00012725
   126b4:	0001271d 	.word	0x0001271d
   126b8:	00012741 	.word	0x00012741
   126bc:	0001275b 	.word	0x0001275b
   126c0:	0001275b 	.word	0x0001275b
   126c4:	00012741 	.word	0x00012741
   126c8:	0001275b 	.word	0x0001275b
   126cc:	0001271d 	.word	0x0001271d
   126d0:	0001275b 	.word	0x0001275b
   126d4:	0001275b 	.word	0x0001275b
   126d8:	0001271d 	.word	0x0001271d
		conv->specifier_cat = SPECIFIER_SINT;
   126dc:	2001      	movs	r0, #1
   126de:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   126e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   126e6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   126ea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   126ec:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   126f0:	bf02      	ittt	eq
   126f2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   126f6:	f041 0101 	orreq.w	r1, r1, #1
   126fa:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   126fe:	2a63      	cmp	r2, #99	; 0x63
   12700:	d131      	bne.n	12766 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12702:	3b00      	subs	r3, #0
   12704:	bf18      	it	ne
   12706:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12708:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1270c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12710:	430b      	orrs	r3, r1
   12712:	f363 0241 	bfi	r2, r3, #1, #1
   12716:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   1271a:	e6d8      	b.n	124ce <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   1271c:	2002      	movs	r0, #2
   1271e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12722:	e7de      	b.n	126e2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   12724:	2103      	movs	r1, #3
   12726:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1272a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1272e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   12732:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12736:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12738:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1273c:	4143      	adcs	r3, r0
   1273e:	e7e3      	b.n	12708 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   12740:	2103      	movs	r1, #3
   12742:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   12746:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1274a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   1274e:	bf14      	ite	ne
   12750:	2301      	movne	r3, #1
   12752:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   12754:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   12758:	e7d6      	b.n	12708 <cbvprintf+0x378>
		conv->invalid = true;
   1275a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1275e:	f043 0301 	orr.w	r3, r3, #1
   12762:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   12766:	2300      	movs	r3, #0
   12768:	e7ce      	b.n	12708 <cbvprintf+0x378>
		} else if (conv->width_present) {
   1276a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1276e:	2a00      	cmp	r2, #0
		int width = -1;
   12770:	bfac      	ite	ge
   12772:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   12776:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
   1277a:	e6ba      	b.n	124f2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
   1277c:	079b      	lsls	r3, r3, #30
   1277e:	f57f aec7 	bpl.w	12510 <cbvprintf+0x180>
			precision = conv->prec_value;
   12782:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
   12786:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12788:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   1278c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
   12790:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
   12794:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12798:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1279a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1279e:	d136      	bne.n	1280e <cbvprintf+0x47e>
			switch (length_mod) {
   127a0:	1ed3      	subs	r3, r2, #3
   127a2:	2b04      	cmp	r3, #4
   127a4:	d820      	bhi.n	127e8 <cbvprintf+0x458>
   127a6:	e8df f003 	tbb	[pc, r3]
   127aa:	0703      	.short	0x0703
   127ac:	1f07      	.short	0x1f07
   127ae:	1f          	.byte	0x1f
   127af:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   127b0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   127b4:	17c1      	asrs	r1, r0, #31
   127b6:	e004      	b.n	127c2 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   127b8:	3407      	adds	r4, #7
   127ba:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   127be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   127c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   127c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   127ca:	f013 0603 	ands.w	r6, r3, #3
   127ce:	d054      	beq.n	1287a <cbvprintf+0x4ea>
			OUTS(sp, fp);
   127d0:	463b      	mov	r3, r7
   127d2:	4652      	mov	r2, sl
   127d4:	4659      	mov	r1, fp
   127d6:	9802      	ldr	r0, [sp, #8]
   127d8:	f007 fe90 	bl	1a4fc <outs>
   127dc:	2800      	cmp	r0, #0
   127de:	f2c0 8143 	blt.w	12a68 <cbvprintf+0x6d8>
   127e2:	4405      	add	r5, r0
			continue;
   127e4:	46ba      	mov	sl, r7
   127e6:	e5db      	b.n	123a0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   127e8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   127ec:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   127ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
   127f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   127f6:	d105      	bne.n	12804 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   127f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   127fc:	930a      	str	r3, [sp, #40]	; 0x28
   127fe:	2300      	movs	r3, #0
   12800:	930b      	str	r3, [sp, #44]	; 0x2c
   12802:	e7e0      	b.n	127c6 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   12804:	2a02      	cmp	r2, #2
   12806:	d1de      	bne.n	127c6 <cbvprintf+0x436>
				value->sint = (short)value->sint;
   12808:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   1280c:	e7d2      	b.n	127b4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1280e:	2b02      	cmp	r3, #2
   12810:	d123      	bne.n	1285a <cbvprintf+0x4ca>
			switch (length_mod) {
   12812:	1ed3      	subs	r3, r2, #3
   12814:	2b04      	cmp	r3, #4
   12816:	d813      	bhi.n	12840 <cbvprintf+0x4b0>
   12818:	e8df f003 	tbb	[pc, r3]
   1281c:	120a0a03 	.word	0x120a0a03
   12820:	12          	.byte	0x12
   12821:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   12822:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
   12824:	6820      	ldr	r0, [r4, #0]
   12826:	1d23      	adds	r3, r4, #4
   12828:	900a      	str	r0, [sp, #40]	; 0x28
   1282a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   1282c:	461c      	mov	r4, r3
   1282e:	e7ca      	b.n	127c6 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   12830:	3407      	adds	r4, #7
   12832:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   12836:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   1283a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1283e:	e7f5      	b.n	1282c <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   12840:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12844:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   12846:	930a      	str	r3, [sp, #40]	; 0x28
   12848:	f04f 0300 	mov.w	r3, #0
   1284c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1284e:	d0d3      	beq.n	127f8 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   12850:	2a02      	cmp	r2, #2
   12852:	d1b8      	bne.n	127c6 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   12854:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12858:	e7d0      	b.n	127fc <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   1285a:	2b04      	cmp	r3, #4
   1285c:	d107      	bne.n	1286e <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   1285e:	3407      	adds	r4, #7
   12860:	f024 0407 	bic.w	r4, r4, #7
   12864:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   12868:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1286c:	e7ab      	b.n	127c6 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1286e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12870:	bf04      	itt	eq
   12872:	f854 3b04 	ldreq.w	r3, [r4], #4
   12876:	930a      	streq	r3, [sp, #40]	; 0x28
   12878:	e7a5      	b.n	127c6 <cbvprintf+0x436>
		switch (conv->specifier) {
   1287a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1287e:	2878      	cmp	r0, #120	; 0x78
   12880:	d8b0      	bhi.n	127e4 <cbvprintf+0x454>
   12882:	2862      	cmp	r0, #98	; 0x62
   12884:	d822      	bhi.n	128cc <cbvprintf+0x53c>
   12886:	2825      	cmp	r0, #37	; 0x25
   12888:	f43f ad93 	beq.w	123b2 <cbvprintf+0x22>
   1288c:	2858      	cmp	r0, #88	; 0x58
   1288e:	d1a9      	bne.n	127e4 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12894:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12898:	9300      	str	r3, [sp, #0]
   1289a:	aa0c      	add	r2, sp, #48	; 0x30
   1289c:	ab04      	add	r3, sp, #16
   1289e:	f007 fde2 	bl	1a466 <encode_uint>
   128a2:	4682      	mov	sl, r0
			if (precision >= 0) {
   128a4:	f1b8 0f00 	cmp.w	r8, #0
   128a8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   128ac:	db0c      	blt.n	128c8 <cbvprintf+0x538>
				conv->flag_zero = false;
   128ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   128b2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   128b6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   128ba:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   128bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   128c0:	d902      	bls.n	128c8 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   128c2:	eba8 0303 	sub.w	r3, r8, r3
   128c6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   128c8:	4680      	mov	r8, r0
   128ca:	e03d      	b.n	12948 <cbvprintf+0x5b8>
   128cc:	3863      	subs	r0, #99	; 0x63
   128ce:	2815      	cmp	r0, #21
   128d0:	d888      	bhi.n	127e4 <cbvprintf+0x454>
   128d2:	a101      	add	r1, pc, #4	; (adr r1, 128d8 <cbvprintf+0x548>)
   128d4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   128d8:	00012959 	.word	0x00012959
   128dc:	000129bd 	.word	0x000129bd
   128e0:	000127e5 	.word	0x000127e5
   128e4:	000127e5 	.word	0x000127e5
   128e8:	000127e5 	.word	0x000127e5
   128ec:	000127e5 	.word	0x000127e5
   128f0:	000129bd 	.word	0x000129bd
   128f4:	000127e5 	.word	0x000127e5
   128f8:	000127e5 	.word	0x000127e5
   128fc:	000127e5 	.word	0x000127e5
   12900:	000127e5 	.word	0x000127e5
   12904:	00012a1b 	.word	0x00012a1b
   12908:	000129e9 	.word	0x000129e9
   1290c:	000129ed 	.word	0x000129ed
   12910:	000127e5 	.word	0x000127e5
   12914:	000127e5 	.word	0x000127e5
   12918:	00012931 	.word	0x00012931
   1291c:	000127e5 	.word	0x000127e5
   12920:	000129e9 	.word	0x000129e9
   12924:	000127e5 	.word	0x000127e5
   12928:	000127e5 	.word	0x000127e5
   1292c:	000129e9 	.word	0x000129e9
			if (precision >= 0) {
   12930:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   12934:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   12938:	db0a      	blt.n	12950 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   1293a:	4641      	mov	r1, r8
   1293c:	4650      	mov	r0, sl
   1293e:	f007 fe73 	bl	1a628 <strnlen>
		char sign = 0;
   12942:	2600      	movs	r6, #0
			bpe = bps + len;
   12944:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
   12948:	f1ba 0f00 	cmp.w	sl, #0
   1294c:	d10c      	bne.n	12968 <cbvprintf+0x5d8>
   1294e:	e749      	b.n	127e4 <cbvprintf+0x454>
				len = strlen(bps);
   12950:	4650      	mov	r0, sl
   12952:	f007 fe62 	bl	1a61a <strlen>
   12956:	e7f4      	b.n	12942 <cbvprintf+0x5b2>
			break;
   12958:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1295a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
   1295c:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12960:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
   12964:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   12968:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   1296c:	b106      	cbz	r6, 12970 <cbvprintf+0x5e0>
			nj_len += 1U;
   1296e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12970:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12974:	06d0      	lsls	r0, r2, #27
   12976:	d56b      	bpl.n	12a50 <cbvprintf+0x6c0>
			nj_len += 2U;
   12978:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1297a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1297c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   1297e:	bf48      	it	mi
   12980:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   12982:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12984:	bf48      	it	mi
   12986:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12988:	f1b9 0f00 	cmp.w	r9, #0
   1298c:	dd79      	ble.n	12a82 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   1298e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   12992:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   12996:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1299a:	9303      	str	r3, [sp, #12]
   1299c:	0753      	lsls	r3, r2, #29
   1299e:	d470      	bmi.n	12a82 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   129a0:	0650      	lsls	r0, r2, #25
   129a2:	d564      	bpl.n	12a6e <cbvprintf+0x6de>
					if (sign != 0) {
   129a4:	b146      	cbz	r6, 129b8 <cbvprintf+0x628>
						OUTC(sign);
   129a6:	4659      	mov	r1, fp
   129a8:	4630      	mov	r0, r6
   129aa:	9b02      	ldr	r3, [sp, #8]
   129ac:	4798      	blx	r3
   129ae:	2800      	cmp	r0, #0
   129b0:	db5a      	blt.n	12a68 <cbvprintf+0x6d8>
						sign = 0;
   129b2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   129b4:	3501      	adds	r5, #1
						sign = 0;
   129b6:	461e      	mov	r6, r3
					pad = '0';
   129b8:	2330      	movs	r3, #48	; 0x30
   129ba:	e059      	b.n	12a70 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   129bc:	071e      	lsls	r6, r3, #28
   129be:	d411      	bmi.n	129e4 <cbvprintf+0x654>
				sign = ' ';
   129c0:	f013 0610 	ands.w	r6, r3, #16
   129c4:	bf18      	it	ne
   129c6:	2620      	movne	r6, #32
			sint = value->sint;
   129c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   129cc:	2a00      	cmp	r2, #0
   129ce:	f173 0100 	sbcs.w	r1, r3, #0
   129d2:	f6bf af5d 	bge.w	12890 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   129d6:	4252      	negs	r2, r2
   129d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   129dc:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   129de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   129e2:	e755      	b.n	12890 <cbvprintf+0x500>
				sign = '+';
   129e4:	262b      	movs	r6, #43	; 0x2b
   129e6:	e7ef      	b.n	129c8 <cbvprintf+0x638>
		switch (conv->specifier) {
   129e8:	2600      	movs	r6, #0
   129ea:	e751      	b.n	12890 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   129ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   129ee:	b348      	cbz	r0, 12a44 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   129f0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   129f4:	9300      	str	r3, [sp, #0]
   129f6:	2100      	movs	r1, #0
   129f8:	ab04      	add	r3, sp, #16
   129fa:	aa0c      	add	r2, sp, #48	; 0x30
   129fc:	f007 fd33 	bl	1a466 <encode_uint>
				conv->altform_0c = true;
   12a00:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12a04:	4682      	mov	sl, r0
				conv->altform_0c = true;
   12a06:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12a0a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12a0e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   12a12:	2600      	movs	r6, #0
				conv->altform_0c = true;
   12a14:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
   12a18:	e744      	b.n	128a4 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   12a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12a1c:	2a07      	cmp	r2, #7
   12a1e:	f63f aee1 	bhi.w	127e4 <cbvprintf+0x454>
   12a22:	e8df f002 	tbb	[pc, r2]
   12a26:	040d      	.short	0x040d
   12a28:	08080d06 	.word	0x08080d06
   12a2c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   12a2e:	701d      	strb	r5, [r3, #0]
		break;
   12a30:	e6d8      	b.n	127e4 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   12a32:	801d      	strh	r5, [r3, #0]
		break;
   12a34:	e6d6      	b.n	127e4 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   12a36:	4628      	mov	r0, r5
   12a38:	17e9      	asrs	r1, r5, #31
   12a3a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   12a3e:	e6d1      	b.n	127e4 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12a40:	601d      	str	r5, [r3, #0]
		break;
   12a42:	e6cf      	b.n	127e4 <cbvprintf+0x454>
			bpe = bps + 5;
   12a44:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 12b0c <cbvprintf+0x77c>
   12a48:	4606      	mov	r6, r0
			bps = "(nil)";
   12a4a:	f1a8 0a05 	sub.w	sl, r8, #5
   12a4e:	e78b      	b.n	12968 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   12a50:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   12a52:	bf48      	it	mi
   12a54:	3301      	addmi	r3, #1
   12a56:	e790      	b.n	1297a <cbvprintf+0x5ea>
					OUTC(pad);
   12a58:	4618      	mov	r0, r3
   12a5a:	9303      	str	r3, [sp, #12]
   12a5c:	4659      	mov	r1, fp
   12a5e:	9b02      	ldr	r3, [sp, #8]
   12a60:	4798      	blx	r3
   12a62:	2800      	cmp	r0, #0
   12a64:	9b03      	ldr	r3, [sp, #12]
   12a66:	da04      	bge.n	12a72 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   12a68:	b011      	add	sp, #68	; 0x44
   12a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12a6e:	2320      	movs	r3, #32
   12a70:	444d      	add	r5, r9
   12a72:	464a      	mov	r2, r9
				while (width-- > 0) {
   12a74:	2a00      	cmp	r2, #0
   12a76:	eba5 0109 	sub.w	r1, r5, r9
   12a7a:	f109 39ff 	add.w	r9, r9, #4294967295
   12a7e:	dceb      	bgt.n	12a58 <cbvprintf+0x6c8>
   12a80:	460d      	mov	r5, r1
		if (sign != 0) {
   12a82:	b136      	cbz	r6, 12a92 <cbvprintf+0x702>
			OUTC(sign);
   12a84:	4659      	mov	r1, fp
   12a86:	4630      	mov	r0, r6
   12a88:	9b02      	ldr	r3, [sp, #8]
   12a8a:	4798      	blx	r3
   12a8c:	2800      	cmp	r0, #0
   12a8e:	dbeb      	blt.n	12a68 <cbvprintf+0x6d8>
   12a90:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12a92:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12a96:	06d9      	lsls	r1, r3, #27
   12a98:	d401      	bmi.n	12a9e <cbvprintf+0x70e>
   12a9a:	071a      	lsls	r2, r3, #28
   12a9c:	d506      	bpl.n	12aac <cbvprintf+0x71c>
				OUTC('0');
   12a9e:	4659      	mov	r1, fp
   12aa0:	2030      	movs	r0, #48	; 0x30
   12aa2:	9b02      	ldr	r3, [sp, #8]
   12aa4:	4798      	blx	r3
   12aa6:	2800      	cmp	r0, #0
   12aa8:	dbde      	blt.n	12a68 <cbvprintf+0x6d8>
   12aaa:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12aac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12ab0:	06db      	lsls	r3, r3, #27
   12ab2:	d507      	bpl.n	12ac4 <cbvprintf+0x734>
				OUTC(conv->specifier);
   12ab4:	4659      	mov	r1, fp
   12ab6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12aba:	9b02      	ldr	r3, [sp, #8]
   12abc:	4798      	blx	r3
   12abe:	2800      	cmp	r0, #0
   12ac0:	dbd2      	blt.n	12a68 <cbvprintf+0x6d8>
   12ac2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12ac4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   12ac6:	442e      	add	r6, r5
   12ac8:	1b73      	subs	r3, r6, r5
   12aca:	2b00      	cmp	r3, #0
   12acc:	dc16      	bgt.n	12afc <cbvprintf+0x76c>
			OUTS(bps, bpe);
   12ace:	4643      	mov	r3, r8
   12ad0:	4652      	mov	r2, sl
   12ad2:	4659      	mov	r1, fp
   12ad4:	9802      	ldr	r0, [sp, #8]
   12ad6:	f007 fd11 	bl	1a4fc <outs>
   12ada:	2800      	cmp	r0, #0
   12adc:	dbc4      	blt.n	12a68 <cbvprintf+0x6d8>
   12ade:	4405      	add	r5, r0
		while (width > 0) {
   12ae0:	44a9      	add	r9, r5
   12ae2:	eba9 0305 	sub.w	r3, r9, r5
   12ae6:	2b00      	cmp	r3, #0
   12ae8:	f77f ae7c 	ble.w	127e4 <cbvprintf+0x454>
			OUTC(' ');
   12aec:	4659      	mov	r1, fp
   12aee:	2020      	movs	r0, #32
   12af0:	9b02      	ldr	r3, [sp, #8]
   12af2:	4798      	blx	r3
   12af4:	2800      	cmp	r0, #0
   12af6:	dbb7      	blt.n	12a68 <cbvprintf+0x6d8>
   12af8:	3501      	adds	r5, #1
			--width;
   12afa:	e7f2      	b.n	12ae2 <cbvprintf+0x752>
				OUTC('0');
   12afc:	4659      	mov	r1, fp
   12afe:	2030      	movs	r0, #48	; 0x30
   12b00:	9b02      	ldr	r3, [sp, #8]
   12b02:	4798      	blx	r3
   12b04:	2800      	cmp	r0, #0
   12b06:	dbaf      	blt.n	12a68 <cbvprintf+0x6d8>
   12b08:	3501      	adds	r5, #1
   12b0a:	e7dd      	b.n	12ac8 <cbvprintf+0x738>
   12b0c:	0001d56b 	.word	0x0001d56b

00012b10 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
   12b10:	4604      	mov	r4, r0
   12b12:	b508      	push	{r3, lr}
	__asm__ volatile(
   12b14:	f04f 0220 	mov.w	r2, #32
   12b18:	f3ef 8311 	mrs	r3, BASEPRI
   12b1c:	f382 8812 	msr	BASEPRI_MAX, r2
   12b20:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   12b24:	f007 ff41 	bl	1a9aa <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   12b28:	4620      	mov	r0, r4
   12b2a:	f001 f871 	bl	13c10 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12b2e:	4803      	ldr	r0, [pc, #12]	; (12b3c <sys_reboot+0x2c>)
   12b30:	f007 fc2e 	bl	1a390 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12b34:	f000 fc34 	bl	133a0 <arch_cpu_idle>
   12b38:	e7fc      	b.n	12b34 <sys_reboot+0x24>
   12b3a:	bf00      	nop
   12b3c:	0001d56c 	.word	0x0001d56c

00012b40 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12b40:	6802      	ldr	r2, [r0, #0]
{
   12b42:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   12b44:	0953      	lsrs	r3, r2, #5
{
   12b46:	4604      	mov	r4, r0
    switch (port)
   12b48:	d029      	beq.n	12b9e <nrf_gpio_pin_port_decode+0x5e>
   12b4a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   12b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12b50:	bf18      	it	ne
   12b52:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   12b54:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   12b58:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   12b5a:	07db      	lsls	r3, r3, #31
   12b5c:	d40a      	bmi.n	12b74 <nrf_gpio_pin_port_decode+0x34>
   12b5e:	4912      	ldr	r1, [pc, #72]	; (12ba8 <nrf_gpio_pin_port_decode+0x68>)
   12b60:	4812      	ldr	r0, [pc, #72]	; (12bac <nrf_gpio_pin_port_decode+0x6c>)
   12b62:	f44f 7205 	mov.w	r2, #532	; 0x214
   12b66:	f007 fc13 	bl	1a390 <printk>
   12b6a:	f44f 7105 	mov.w	r1, #532	; 0x214
   12b6e:	480e      	ldr	r0, [pc, #56]	; (12ba8 <nrf_gpio_pin_port_decode+0x68>)
   12b70:	f007 fcda 	bl	1a528 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   12b74:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   12b76:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12b7a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   12b7c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12b7e:	d00c      	beq.n	12b9a <nrf_gpio_pin_port_decode+0x5a>
   12b80:	2b01      	cmp	r3, #1
   12b82:	d00f      	beq.n	12ba4 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   12b84:	4908      	ldr	r1, [pc, #32]	; (12ba8 <nrf_gpio_pin_port_decode+0x68>)
   12b86:	4809      	ldr	r0, [pc, #36]	; (12bac <nrf_gpio_pin_port_decode+0x6c>)
   12b88:	f240 2219 	movw	r2, #537	; 0x219
   12b8c:	f007 fc00 	bl	1a390 <printk>
   12b90:	f240 2119 	movw	r1, #537	; 0x219
   12b94:	4804      	ldr	r0, [pc, #16]	; (12ba8 <nrf_gpio_pin_port_decode+0x68>)
   12b96:	f007 fcc7 	bl	1a528 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12b9a:	4805      	ldr	r0, [pc, #20]	; (12bb0 <nrf_gpio_pin_port_decode+0x70>)
}
   12b9c:	bd10      	pop	{r4, pc}
    switch (port)
   12b9e:	f04f 33ff 	mov.w	r3, #4294967295
   12ba2:	e7d7      	b.n	12b54 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   12ba4:	4803      	ldr	r0, [pc, #12]	; (12bb4 <nrf_gpio_pin_port_decode+0x74>)
   12ba6:	e7f9      	b.n	12b9c <nrf_gpio_pin_port_decode+0x5c>
   12ba8:	0001d595 	.word	0x0001d595
   12bac:	0001d506 	.word	0x0001d506
   12bb0:	50842500 	.word	0x50842500
   12bb4:	50842800 	.word	0x50842800

00012bb8 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
   12bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bba:	f04f 0320 	mov.w	r3, #32
   12bbe:	f3ef 8711 	mrs	r7, BASEPRI
   12bc2:	f383 8812 	msr	BASEPRI_MAX, r3
   12bc6:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
   12bca:	2401      	movs	r4, #1
   12bcc:	4b19      	ldr	r3, [pc, #100]	; (12c34 <nordicsemi_nrf53_init+0x7c>)
   12bce:	2600      	movs	r6, #0
   12bd0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   12bd4:	2302      	movs	r3, #2
   12bd6:	4d18      	ldr	r5, [pc, #96]	; (12c38 <nordicsemi_nrf53_init+0x80>)
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12bd8:	a801      	add	r0, sp, #4
   12bda:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
			NRF_OSCILLATORS_LFXO_CAP_7PF :
		IS_ENABLED(CONFIG_SOC_LFXO_CAP_INT_9PF) ?
			NRF_OSCILLATORS_LFXO_CAP_9PF :
			NRF_OSCILLATORS_LFXO_CAP_EXTERNAL);
	/* This can only be done from secure code. */
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
   12bde:	9601      	str	r6, [sp, #4]
   12be0:	f7ff ffae 	bl	12b40 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12bea:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   12bee:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
   12bf2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
   12bf6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12bfa:	a801      	add	r0, sp, #4
   12bfc:	9401      	str	r4, [sp, #4]
   12bfe:	f7ff ff9f 	bl	12b40 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
   12c02:	9b01      	ldr	r3, [sp, #4]
   12c04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12c08:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   12c0c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
   12c10:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
   12c14:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   12c18:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   12c1c:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   12c20:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
   12c24:	f387 8811 	msr	BASEPRI, r7
   12c28:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12c2c:	4630      	mov	r0, r6
   12c2e:	b003      	add	sp, #12
   12c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c32:	bf00      	nop
   12c34:	50001000 	.word	0x50001000
   12c38:	50004000 	.word	0x50004000

00012c3c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12c3c:	b148      	cbz	r0, 12c52 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   12c3e:	4b05      	ldr	r3, [pc, #20]	; (12c54 <arch_busy_wait+0x18>)
   12c40:	681a      	ldr	r2, [r3, #0]
   12c42:	4b05      	ldr	r3, [pc, #20]	; (12c58 <arch_busy_wait+0x1c>)
   12c44:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12c48:	4b04      	ldr	r3, [pc, #16]	; (12c5c <arch_busy_wait+0x20>)
    delay_cycles(cycles);
   12c4a:	4350      	muls	r0, r2
   12c4c:	f043 0301 	orr.w	r3, r3, #1
   12c50:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12c52:	4770      	bx	lr
   12c54:	20000040 	.word	0x20000040
   12c58:	000f4240 	.word	0x000f4240
   12c5c:	0001cfa0 	.word	0x0001cfa0

00012c60 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   12c60:	b084      	sub	sp, #16
   12c62:	ab04      	add	r3, sp, #16
   12c64:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   12c68:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12c6c:	2b06      	cmp	r3, #6
   12c6e:	d107      	bne.n	12c80 <pm_power_state_set+0x20>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   12c70:	2201      	movs	r2, #1
   12c72:	4b04      	ldr	r3, [pc, #16]	; (12c84 <pm_power_state_set+0x24>)
   12c74:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12c78:	f3bf 8f4f 	dsb	sy
        __WFE();
   12c7c:	bf20      	wfe
    while (true)
   12c7e:	e7fd      	b.n	12c7c <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   12c80:	b004      	add	sp, #16
   12c82:	4770      	bx	lr
   12c84:	50004000 	.word	0x50004000

00012c88 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c8a:	4605      	mov	r5, r0
	__asm__ volatile(
   12c8c:	f04f 0320 	mov.w	r3, #32
   12c90:	f3ef 8611 	mrs	r6, BASEPRI
   12c94:	f383 8812 	msr	BASEPRI_MAX, r3
   12c98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12c9c:	4819      	ldr	r0, [pc, #100]	; (12d04 <pm_state_notify+0x7c>)
   12c9e:	f002 fe5d 	bl	1595c <z_spin_lock_valid>
   12ca2:	b940      	cbnz	r0, 12cb6 <pm_state_notify+0x2e>
   12ca4:	4918      	ldr	r1, [pc, #96]	; (12d08 <pm_state_notify+0x80>)
   12ca6:	4819      	ldr	r0, [pc, #100]	; (12d0c <pm_state_notify+0x84>)
   12ca8:	2281      	movs	r2, #129	; 0x81
   12caa:	f007 fb71 	bl	1a390 <printk>
   12cae:	2181      	movs	r1, #129	; 0x81
   12cb0:	4815      	ldr	r0, [pc, #84]	; (12d08 <pm_state_notify+0x80>)
   12cb2:	f007 fc39 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   12cb6:	4813      	ldr	r0, [pc, #76]	; (12d04 <pm_state_notify+0x7c>)
   12cb8:	f002 fe6c 	bl	15994 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12cbc:	4b14      	ldr	r3, [pc, #80]	; (12d10 <pm_state_notify+0x88>)
   12cbe:	681c      	ldr	r4, [r3, #0]
   12cc0:	2c00      	cmp	r4, #0
   12cc2:	bf38      	it	cc
   12cc4:	2400      	movcc	r4, #0
   12cc6:	b15c      	cbz	r4, 12ce0 <pm_state_notify+0x58>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   12cc8:	4f12      	ldr	r7, [pc, #72]	; (12d14 <pm_state_notify+0x8c>)
			callback = notifier->state_exit;
   12cca:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12cce:	2d00      	cmp	r5, #0
   12cd0:	bf08      	it	eq
   12cd2:	4613      	moveq	r3, r2
		if (callback) {
   12cd4:	b10b      	cbz	r3, 12cda <pm_state_notify+0x52>
			callback(z_power_state.state);
   12cd6:	7838      	ldrb	r0, [r7, #0]
   12cd8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12cda:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12cdc:	2c00      	cmp	r4, #0
   12cde:	d1f4      	bne.n	12cca <pm_state_notify+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12ce0:	4808      	ldr	r0, [pc, #32]	; (12d04 <pm_state_notify+0x7c>)
   12ce2:	f002 fe49 	bl	15978 <z_spin_unlock_valid>
   12ce6:	b940      	cbnz	r0, 12cfa <pm_state_notify+0x72>
   12ce8:	4907      	ldr	r1, [pc, #28]	; (12d08 <pm_state_notify+0x80>)
   12cea:	4808      	ldr	r0, [pc, #32]	; (12d0c <pm_state_notify+0x84>)
   12cec:	22ac      	movs	r2, #172	; 0xac
   12cee:	f007 fb4f 	bl	1a390 <printk>
   12cf2:	21ac      	movs	r1, #172	; 0xac
   12cf4:	4804      	ldr	r0, [pc, #16]	; (12d08 <pm_state_notify+0x80>)
   12cf6:	f007 fc17 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   12cfa:	f386 8811 	msr	BASEPRI, r6
   12cfe:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d04:	2000024c 	.word	0x2000024c
   12d08:	0001d540 	.word	0x0001d540
   12d0c:	0001d506 	.word	0x0001d506
   12d10:	20000250 	.word	0x20000250
   12d14:	20000258 	.word	0x20000258

00012d18 <pm_system_resume>:

void pm_system_resume(void)
{
   12d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   12d1a:	4b0f      	ldr	r3, [pc, #60]	; (12d58 <pm_system_resume+0x40>)
   12d1c:	681a      	ldr	r2, [r3, #0]
   12d1e:	b9ba      	cbnz	r2, 12d50 <pm_system_resume+0x38>
		post_ops_done = 1;
   12d20:	2201      	movs	r2, #1
   12d22:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   12d24:	4a0d      	ldr	r2, [pc, #52]	; (12d5c <pm_system_resume+0x44>)
   12d26:	ab01      	add	r3, sp, #4
   12d28:	ca07      	ldmia	r2, {r0, r1, r2}
   12d2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12d2e:	4a0c      	ldr	r2, [pc, #48]	; (12d60 <pm_system_resume+0x48>)
   12d30:	b14a      	cbz	r2, 12d46 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   12d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12d36:	f007 fbff 	bl	1a538 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   12d3a:	2000      	movs	r0, #0
	}
}
   12d3c:	b005      	add	sp, #20
   12d3e:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   12d42:	f7ff bfa1 	b.w	12c88 <pm_state_notify>
   12d46:	f382 8811 	msr	BASEPRI, r2
   12d4a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12d4e:	e7f4      	b.n	12d3a <pm_system_resume+0x22>
}
   12d50:	b005      	add	sp, #20
   12d52:	f85d fb04 	ldr.w	pc, [sp], #4
   12d56:	bf00      	nop
   12d58:	20000004 	.word	0x20000004
   12d5c:	20000258 	.word	0x20000258
   12d60:	0001a539 	.word	0x0001a539

00012d64 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   12d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d66:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   12d68:	466e      	mov	r6, sp
   12d6a:	4c21      	ldr	r4, [pc, #132]	; (12df0 <pm_system_suspend+0x8c>)
   12d6c:	4601      	mov	r1, r0
{
   12d6e:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   12d70:	4630      	mov	r0, r6
   12d72:	f007 fbf9 	bl	1a568 <pm_policy_next_state>
   12d76:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   12d7e:	7820      	ldrb	r0, [r4, #0]
   12d80:	b398      	cbz	r0, 12dea <pm_system_suspend+0x86>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   12d82:	2000      	movs	r0, #0
   12d84:	4b1b      	ldr	r3, [pc, #108]	; (12df4 <pm_system_suspend+0x90>)
   12d86:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   12d88:	1c6b      	adds	r3, r5, #1
   12d8a:	d019      	beq.n	12dc0 <pm_system_suspend+0x5c>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   12d8c:	4291      	cmp	r1, r2
   12d8e:	d208      	bcs.n	12da2 <pm_system_suspend+0x3e>
   12d90:	4919      	ldr	r1, [pc, #100]	; (12df8 <pm_system_suspend+0x94>)
   12d92:	481a      	ldr	r0, [pc, #104]	; (12dfc <pm_system_suspend+0x98>)
   12d94:	22ca      	movs	r2, #202	; 0xca
   12d96:	f007 fafb 	bl	1a390 <printk>
   12d9a:	21ca      	movs	r1, #202	; 0xca
   12d9c:	4816      	ldr	r0, [pc, #88]	; (12df8 <pm_system_suspend+0x94>)
   12d9e:	f007 fbc3 	bl	1a528 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12da2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   12da6:	2100      	movs	r1, #0
   12da8:	68a7      	ldr	r7, [r4, #8]
   12daa:	4815      	ldr	r0, [pc, #84]	; (12e00 <pm_system_suspend+0x9c>)
   12dac:	2300      	movs	r3, #0
   12dae:	fbe6 0107 	umlal	r0, r1, r6, r7
   12db2:	4a14      	ldr	r2, [pc, #80]	; (12e04 <pm_system_suspend+0xa0>)
   12db4:	f7ed fa44 	bl	240 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12db8:	2101      	movs	r1, #1
   12dba:	1a28      	subs	r0, r5, r0
   12dbc:	f004 f91e 	bl	16ffc <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12dc0:	f003 f8cc 	bl	15f5c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   12dc4:	2001      	movs	r0, #1
   12dc6:	f7ff ff5f 	bl	12c88 <pm_state_notify>
	pm_state_set(z_power_state);
   12dca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12dce:	ab05      	add	r3, sp, #20
   12dd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12dd4:	4a0c      	ldr	r2, [pc, #48]	; (12e08 <pm_system_suspend+0xa4>)
   12dd6:	b11a      	cbz	r2, 12de0 <pm_system_suspend+0x7c>
		pm_power_state_set(info);
   12dd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12ddc:	f7ff ff40 	bl	12c60 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   12de0:	f7ff ff9a 	bl	12d18 <pm_system_resume>
	k_sched_unlock();
   12de4:	f003 fcf0 	bl	167c8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   12de8:	7820      	ldrb	r0, [r4, #0]
}
   12dea:	b009      	add	sp, #36	; 0x24
   12dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12dee:	bf00      	nop
   12df0:	20000258 	.word	0x20000258
   12df4:	20000004 	.word	0x20000004
   12df8:	0001d5cc 	.word	0x0001d5cc
   12dfc:	0001d506 	.word	0x0001d506
   12e00:	000f423f 	.word	0x000f423f
   12e04:	000f4240 	.word	0x000f4240
   12e08:	00012c61 	.word	0x00012c61

00012e0c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12e0c:	2800      	cmp	r0, #0
   12e0e:	db0d      	blt.n	12e2c <__NVIC_DisableIRQ+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12e10:	2201      	movs	r2, #1
   12e12:	0943      	lsrs	r3, r0, #5
   12e14:	f000 001f 	and.w	r0, r0, #31
   12e18:	fa02 f000 	lsl.w	r0, r2, r0
   12e1c:	4a04      	ldr	r2, [pc, #16]	; (12e30 <__NVIC_DisableIRQ+0x24>)
   12e1e:	3320      	adds	r3, #32
   12e20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12e24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12e28:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   12e2c:	4770      	bx	lr
   12e2e:	bf00      	nop
   12e30:	e000e100 	.word	0xe000e100

00012e34 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
   12e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   12e36:	2800      	cmp	r0, #0
{
   12e38:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   12e3a:	bf14      	ite	ne
   12e3c:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   12e40:	f44f 4380 	moveq.w	r3, #16384	; 0x4000

	__ASSERT_NO_MSG(end >= start);
	if (end <= start) {
   12e44:	428a      	cmp	r2, r1
{
   12e46:	4615      	mov	r5, r2
	if (end <= start) {
   12e48:	d83f      	bhi.n	12eca <config_regions+0x96>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
   12e4a:	b003      	add	sp, #12
   12e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e4e:	463a      	mov	r2, r7
		if (ram) {
   12e50:	2800      	cmp	r0, #0
   12e52:	d037      	beq.n	12ec4 <config_regions+0x90>
			NRF_SPU->RAMREGION[i].PERM = perm;
   12e54:	f502 77e0 	add.w	r7, r2, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
   12e58:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   12e5c:	1c57      	adds	r7, r2, #1
   12e5e:	42bd      	cmp	r5, r7
   12e60:	d1f5      	bne.n	12e4e <config_regions+0x1a>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   12e62:	435d      	muls	r5, r3
   12e64:	481a      	ldr	r0, [pc, #104]	; (12ed0 <config_regions+0x9c>)
   12e66:	434b      	muls	r3, r1
   12e68:	9500      	str	r5, [sp, #0]
   12e6a:	f007 fa91 	bl	1a390 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   12e6e:	4b19      	ldr	r3, [pc, #100]	; (12ed4 <config_regions+0xa0>)
   12e70:	f014 0f10 	tst.w	r4, #16
   12e74:	4918      	ldr	r1, [pc, #96]	; (12ed8 <config_regions+0xa4>)
   12e76:	4819      	ldr	r0, [pc, #100]	; (12edc <config_regions+0xa8>)
   12e78:	bf08      	it	eq
   12e7a:	4619      	moveq	r1, r3
   12e7c:	f007 fa88 	bl	1a390 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   12e80:	f014 0f04 	tst.w	r4, #4
   12e84:	bf14      	ite	ne
   12e86:	2172      	movne	r1, #114	; 0x72
   12e88:	212d      	moveq	r1, #45	; 0x2d
   12e8a:	4815      	ldr	r0, [pc, #84]	; (12ee0 <config_regions+0xac>)
   12e8c:	f007 fa80 	bl	1a390 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   12e90:	f014 0f02 	tst.w	r4, #2
   12e94:	bf14      	ite	ne
   12e96:	2177      	movne	r1, #119	; 0x77
   12e98:	212d      	moveq	r1, #45	; 0x2d
   12e9a:	4811      	ldr	r0, [pc, #68]	; (12ee0 <config_regions+0xac>)
   12e9c:	f007 fa78 	bl	1a390 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   12ea0:	f014 0f01 	tst.w	r4, #1
   12ea4:	bf0c      	ite	eq
   12ea6:	212d      	moveq	r1, #45	; 0x2d
   12ea8:	2178      	movne	r1, #120	; 0x78
   12eaa:	480d      	ldr	r0, [pc, #52]	; (12ee0 <config_regions+0xac>)
   12eac:	f007 fa70 	bl	1a390 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   12eb0:	216c      	movs	r1, #108	; 0x6c
   12eb2:	480b      	ldr	r0, [pc, #44]	; (12ee0 <config_regions+0xac>)
   12eb4:	f007 fa6c 	bl	1a390 <printk>
	PRINT("\n");
   12eb8:	480a      	ldr	r0, [pc, #40]	; (12ee4 <config_regions+0xb0>)
}
   12eba:	b003      	add	sp, #12
   12ebc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   12ec0:	f007 ba66 	b.w	1a390 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   12ec4:	f502 77c0 	add.w	r7, r2, #384	; 0x180
   12ec8:	e7c6      	b.n	12e58 <config_regions+0x24>
   12eca:	460a      	mov	r2, r1
   12ecc:	4e06      	ldr	r6, [pc, #24]	; (12ee8 <config_regions+0xb4>)
   12ece:	e7bf      	b.n	12e50 <config_regions+0x1c>
   12ed0:	0001d60c 	.word	0x0001d60c
   12ed4:	0001d600 	.word	0x0001d600
   12ed8:	0001d5f7 	.word	0x0001d5f7
   12edc:	0001d7de 	.word	0x0001d7de
   12ee0:	0001d626 	.word	0x0001d626
   12ee4:	0001e346 	.word	0x0001e346
   12ee8:	50003000 	.word	0x50003000

00012eec <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   12eec:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   12eee:	f44f 3400 	mov.w	r4, #131072	; 0x20000
{
   12ef2:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   12ef4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   12ef8:	4825      	ldr	r0, [pc, #148]	; (12f90 <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   12efa:	4d26      	ldr	r5, [pc, #152]	; (12f94 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   12efc:	f007 fa48 	bl	1a390 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   12f00:	6821      	ldr	r1, [r4, #0]
   12f02:	4825      	ldr	r0, [pc, #148]	; (12f98 <spm_jump+0xac>)
   12f04:	f007 fa44 	bl	1a390 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   12f08:	6829      	ldr	r1, [r5, #0]
   12f0a:	4824      	ldr	r0, [pc, #144]	; (12f9c <spm_jump+0xb0>)
   12f0c:	f007 fa40 	bl	1a390 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   12f10:	2210      	movs	r2, #16
   12f12:	2100      	movs	r1, #0
   12f14:	4668      	mov	r0, sp
   12f16:	f007 fbc2 	bl	1a69e <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   12f1a:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
   12f1c:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   12f1e:	9300      	str	r3, [sp, #0]
   12f20:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   12f22:	f000 fecf 	bl	13cc4 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   12f26:	2001      	movs	r0, #1
   12f28:	f000 fefe 	bl	13d28 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   12f2c:	2000      	movs	r0, #0
   12f2e:	f000 fee7 	bl	13d00 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   12f32:	2000      	movs	r0, #0
   12f34:	f000 ff0c 	bl	13d50 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   12f38:	2101      	movs	r1, #1
   12f3a:	2000      	movs	r0, #0
   12f3c:	f000 ff26 	bl	13d8c <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   12f40:	f000 ff1a 	bl	13d78 <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   12f44:	4816      	ldr	r0, [pc, #88]	; (12fa0 <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   12f46:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   12f48:	f007 fa22 	bl	1a390 <printk>
	NVIC_DisableIRQ(id);
   12f4c:	2008      	movs	r0, #8
   12f4e:	f7ff ff5d 	bl	12e0c <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   12f52:	4a14      	ldr	r2, [pc, #80]	; (12fa4 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   12f54:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   12f58:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
   12f5c:	2b00      	cmp	r3, #0
   12f5e:	da07      	bge.n	12f70 <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   12f60:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
   12f64:	3b02      	subs	r3, #2
   12f66:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   12f68:	bf9c      	itt	ls
   12f6a:	4b0f      	ldrls	r3, [pc, #60]	; (12fa8 <spm_jump+0xbc>)
   12f6c:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   12f70:	2101      	movs	r1, #1
   12f72:	2008      	movs	r0, #8
   12f74:	f007 fb09 	bl	1a58a <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
   12f78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12f7c:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   12f80:	0864      	lsrs	r4, r4, #1
   12f82:	0064      	lsls	r4, r4, #1
   12f84:	4620      	mov	r0, r4
   12f86:	4621      	mov	r1, r4
   12f88:	4622      	mov	r2, r4
   12f8a:	4623      	mov	r3, r4
   12f8c:	f7fe fc66 	bl	1185c <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   12f90:	0001d629 	.word	0x0001d629
   12f94:	00020004 	.word	0x00020004
   12f98:	0001d640 	.word	0x0001d640
   12f9c:	0001d655 	.word	0x0001d655
   12fa0:	0001d673 	.word	0x0001d673
   12fa4:	50003000 	.word	0x50003000
   12fa8:	80000100 	.word	0x80000100

00012fac <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
   12fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   12fb0:	4861      	ldr	r0, [pc, #388]	; (13138 <spm_config+0x18c>)
   12fb2:	f007 f9ed 	bl	1a390 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   12fb6:	2100      	movs	r1, #0
   12fb8:	f240 1317 	movw	r3, #279	; 0x117
   12fbc:	4608      	mov	r0, r1
   12fbe:	2208      	movs	r2, #8
   12fc0:	f7ff ff38 	bl	12e34 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   12fc4:	4d5d      	ldr	r5, [pc, #372]	; (1313c <spm_config+0x190>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   12fc6:	f240 1307 	movw	r3, #263	; 0x107
   12fca:	2240      	movs	r2, #64	; 0x40
   12fcc:	2108      	movs	r1, #8
   12fce:	2000      	movs	r0, #0
   12fd0:	f7ff ff30 	bl	12e34 <config_regions>
	PRINT("\n");
   12fd4:	485a      	ldr	r0, [pc, #360]	; (13140 <spm_config+0x194>)
   12fd6:	f007 f9db 	bl	1a390 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   12fda:	f3c5 040d 	ubfx	r4, r5, #0, #14
	__ASSERT((uint32_t)__sg_size <= nsc_size,
   12fde:	4b59      	ldr	r3, [pc, #356]	; (13144 <spm_config+0x198>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   12fe0:	f5c4 4480 	rsb	r4, r4, #16384	; 0x4000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
   12fe4:	429c      	cmp	r4, r3
   12fe6:	d208      	bcs.n	12ffa <spm_config+0x4e>
   12fe8:	4957      	ldr	r1, [pc, #348]	; (13148 <spm_config+0x19c>)
   12fea:	4858      	ldr	r0, [pc, #352]	; (1314c <spm_config+0x1a0>)
   12fec:	2282      	movs	r2, #130	; 0x82
   12fee:	f007 f9cf 	bl	1a390 <printk>
   12ff2:	2182      	movs	r1, #130	; 0x82
   12ff4:	4854      	ldr	r0, [pc, #336]	; (13148 <spm_config+0x19c>)
   12ff6:	f007 fa97 	bl	1a528 <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
   12ffa:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
   12ffe:	4e54      	ldr	r6, [pc, #336]	; (13150 <spm_config+0x1a4>)
   13000:	f1c4 041b 	rsb	r4, r4, #27
   13004:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
   13008:	b2e4      	uxtb	r4, r4
   1300a:	05d2      	lsls	r2, r2, #23
   1300c:	f3c5 3585 	ubfx	r5, r5, #14, #6
   13010:	d50a      	bpl.n	13028 <spm_config+0x7c>
   13012:	4950      	ldr	r1, [pc, #320]	; (13154 <spm_config+0x1a8>)
   13014:	484d      	ldr	r0, [pc, #308]	; (1314c <spm_config+0x1a0>)
   13016:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   1301a:	f007 f9b9 	bl	1a390 <printk>
   1301e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   13022:	484c      	ldr	r0, [pc, #304]	; (13154 <spm_config+0x1a8>)
   13024:	f007 fa80 	bl	1a528 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
   13028:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   1302c:	05db      	lsls	r3, r3, #23
   1302e:	d50a      	bpl.n	13046 <spm_config+0x9a>
   13030:	4948      	ldr	r1, [pc, #288]	; (13154 <spm_config+0x1a8>)
   13032:	4846      	ldr	r0, [pc, #280]	; (1314c <spm_config+0x1a0>)
   13034:	f240 127b 	movw	r2, #379	; 0x17b
   13038:	f007 f9aa 	bl	1a390 <printk>
   1303c:	f240 117b 	movw	r1, #379	; 0x17b
   13040:	4844      	ldr	r0, [pc, #272]	; (13154 <spm_config+0x1a8>)
   13042:	f007 fa71 	bl	1a528 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   13046:	4b42      	ldr	r3, [pc, #264]	; (13150 <spm_config+0x1a4>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   13048:	4843      	ldr	r0, [pc, #268]	; (13158 <spm_config+0x1ac>)
   1304a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   1304e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   13052:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
   13056:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1305a:	0152      	lsls	r2, r2, #5
   1305c:	f007 f998 	bl	1a390 <printk>
	PRINT("\n");
   13060:	4837      	ldr	r0, [pc, #220]	; (13140 <spm_config+0x194>)
   13062:	f007 f995 	bl	1a390 <printk>
	int err = spm_secure_services_init();
   13066:	f000 f88d 	bl	13184 <spm_secure_services_init>
	if (err != 0) {
   1306a:	4601      	mov	r1, r0
   1306c:	b110      	cbz	r0, 13074 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
   1306e:	483b      	ldr	r0, [pc, #236]	; (1315c <spm_config+0x1b0>)
   13070:	f007 f98e 	bl	1a390 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   13074:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   13076:	483a      	ldr	r0, [pc, #232]	; (13160 <spm_config+0x1b4>)
   13078:	f007 f98a 	bl	1a390 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   1307c:	f240 1317 	movw	r3, #279	; 0x117
   13080:	2208      	movs	r2, #8
   13082:	2100      	movs	r1, #0
   13084:	2001      	movs	r0, #1
   13086:	f7ff fed5 	bl	12e34 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   1308a:	4d31      	ldr	r5, [pc, #196]	; (13150 <spm_config+0x1a4>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   1308c:	f240 1307 	movw	r3, #263	; 0x107
   13090:	2240      	movs	r2, #64	; 0x40
   13092:	2108      	movs	r1, #8
   13094:	2001      	movs	r0, #1
   13096:	f7ff fecd 	bl	12e34 <config_regions>
	PRINT("\n");
   1309a:	4829      	ldr	r0, [pc, #164]	; (13140 <spm_config+0x194>)
   1309c:	f007 f978 	bl	1a390 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   130a0:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   130a4:	482f      	ldr	r0, [pc, #188]	; (13164 <spm_config+0x1b8>)
   130a6:	f007 f973 	bl	1a390 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   130aa:	4e2f      	ldr	r6, [pc, #188]	; (13168 <spm_config+0x1bc>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   130ac:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   130b0:	4f2e      	ldr	r7, [pc, #184]	; (1316c <spm_config+0x1c0>)
		NRF_SPU->GPIOPORT[1].PERM = 0;
   130b2:	f8c5 44c8 	str.w	r4, [r5, #1224]	; 0x4c8
		PRINT("%02u %-21s%s", i, periph[i].name,
   130b6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 13180 <spm_config+0x1d4>
   130ba:	4d2d      	ldr	r5, [pc, #180]	; (13170 <spm_config+0x1c4>)
   130bc:	f895 9005 	ldrb.w	r9, [r5, #5]
   130c0:	4621      	mov	r1, r4
   130c2:	f1b9 0f00 	cmp.w	r9, #0
   130c6:	bf14      	ite	ne
   130c8:	4633      	movne	r3, r6
   130ca:	463b      	moveq	r3, r7
   130cc:	4640      	mov	r0, r8
   130ce:	682a      	ldr	r2, [r5, #0]
   130d0:	f007 f95e 	bl	1a390 <printk>
		if (!periph[i].nonsecure) {
   130d4:	f1b9 0f00 	cmp.w	r9, #0
   130d8:	d10c      	bne.n	130f4 <spm_config+0x148>
			PRINT("\tSKIP\n");
   130da:	4826      	ldr	r0, [pc, #152]	; (13174 <spm_config+0x1c8>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   130dc:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   130de:	f007 f957 	bl	1a390 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   130e2:	2c31      	cmp	r4, #49	; 0x31
   130e4:	f105 0508 	add.w	r5, r5, #8
   130e8:	d1e8      	bne.n	130bc <spm_config+0x110>
	PRINT("\n");
   130ea:	4815      	ldr	r0, [pc, #84]	; (13140 <spm_config+0x194>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   130ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   130f0:	f007 b94e 	b.w	1a390 <printk>
		err = spm_config_peripheral(periph[i].id, false);
   130f4:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
   130f8:	f995 0004 	ldrsb.w	r0, [r5, #4]
   130fc:	f7ff fe86 	bl	12e0c <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   13100:	ea4f 0389 	mov.w	r3, r9, lsl #2
   13104:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   13108:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   1310c:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   13110:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   13114:	d006      	beq.n	13124 <spm_config+0x178>
	return present && (usel || split);
   13116:	2a00      	cmp	r2, #0
   13118:	da07      	bge.n	1312a <spm_config+0x17e>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   1311a:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   1311e:	3a02      	subs	r2, #2
   13120:	2a01      	cmp	r2, #1
   13122:	d802      	bhi.n	1312a <spm_config+0x17e>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   13124:	4a14      	ldr	r2, [pc, #80]	; (13178 <spm_config+0x1cc>)
   13126:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   1312a:	2101      	movs	r1, #1
   1312c:	4648      	mov	r0, r9
   1312e:	f007 fa2c 	bl	1a58a <irq_target_state_set>
			PRINT("\tOK\n");
   13132:	4812      	ldr	r0, [pc, #72]	; (1317c <spm_config+0x1d0>)
   13134:	e7d2      	b.n	130dc <spm_config+0x130>
   13136:	bf00      	nop
   13138:	0001d6a9 	.word	0x0001d6a9
   1313c:	0001ff80 	.word	0x0001ff80
   13140:	0001e346 	.word	0x0001e346
   13144:	00000060 	.word	0x00000060
   13148:	0001d6cd 	.word	0x0001d6cd
   1314c:	0001d506 	.word	0x0001d506
   13150:	50003000 	.word	0x50003000
   13154:	0001d6ee 	.word	0x0001d6ee
   13158:	0001d720 	.word	0x0001d720
   1315c:	0001d766 	.word	0x0001d766
   13160:	0001d796 	.word	0x0001d796
   13164:	0001d7b8 	.word	0x0001d7b8
   13168:	0001d69e 	.word	0x0001d69e
   1316c:	0001d604 	.word	0x0001d604
   13170:	0001cfa8 	.word	0x0001cfa8
   13174:	0001d7e1 	.word	0x0001d7e1
   13178:	80000100 	.word	0x80000100
   1317c:	0001d7e8 	.word	0x0001d7e8
   13180:	0001d7d4 	.word	0x0001d7d4

00013184 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
   13184:	2200      	movs	r2, #0
   13186:	4802      	ldr	r0, [pc, #8]	; (13190 <spm_secure_services_init+0xc>)
   13188:	4611      	mov	r1, r2
   1318a:	f004 bac5 	b.w	17718 <nrf_cc3xx_platform_ctr_drbg_init>
   1318e:	bf00      	nop
   13190:	20000264 	.word	0x20000264

00013194 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
   13194:	b570      	push	{r4, r5, r6, lr}
   13196:	4606      	mov	r6, r0
   13198:	460d      	mov	r5, r1
   1319a:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
   1319c:	f007 fa38 	bl	1a610 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
   131a0:	2801      	cmp	r0, #1
   131a2:	d00d      	beq.n	131c0 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
   131a4:	4620      	mov	r0, r4
   131a6:	f007 fa33 	bl	1a610 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
   131aa:	2801      	cmp	r0, #1
   131ac:	d008      	beq.n	131c0 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
   131ae:	4623      	mov	r3, r4
   131b0:	462a      	mov	r2, r5
   131b2:	4631      	mov	r1, r6
   131b4:	4808      	ldr	r0, [pc, #32]	; (131d8 <__acle_se_spm_request_random_number_nse+0x44>)
   131b6:	f004 fae3 	bl	17780 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
   131ba:	6823      	ldr	r3, [r4, #0]
   131bc:	42ab      	cmp	r3, r5
   131be:	d001      	beq.n	131c4 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
   131c0:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
   131c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   131c8:	4671      	mov	r1, lr
   131ca:	4672      	mov	r2, lr
   131cc:	4673      	mov	r3, lr
   131ce:	46f4      	mov	ip, lr
   131d0:	f38e 8c00 	msr	CPSR_fs, lr
   131d4:	4774      	bxns	lr
   131d6:	bf00      	nop
   131d8:	20000264 	.word	0x20000264

000131dc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   131dc:	4801      	ldr	r0, [pc, #4]	; (131e4 <nrf_cc3xx_platform_abort_init+0x8>)
   131de:	f004 ba93 	b.w	17708 <nrf_cc3xx_platform_set_abort>
   131e2:	bf00      	nop
   131e4:	0001d130 	.word	0x0001d130

000131e8 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   131e8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   131ea:	b308      	cbz	r0, 13230 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   131ec:	6843      	ldr	r3, [r0, #4]
   131ee:	2b04      	cmp	r3, #4
   131f0:	d007      	beq.n	13202 <mutex_unlock_platform+0x1a>
   131f2:	2b08      	cmp	r3, #8
   131f4:	d013      	beq.n	1321e <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   131f6:	b1f3      	cbz	r3, 13236 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   131f8:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   131fa:	f002 fcd3 	bl	15ba4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   131fe:	2000      	movs	r0, #0
   13200:	e00c      	b.n	1321c <mutex_unlock_platform+0x34>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13202:	2200      	movs	r2, #0
   13204:	6803      	ldr	r3, [r0, #0]
   13206:	e8d3 1fef 	ldaex	r1, [r3]
   1320a:	2901      	cmp	r1, #1
   1320c:	d103      	bne.n	13216 <mutex_unlock_platform+0x2e>
   1320e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13212:	2800      	cmp	r0, #0
   13214:	d1f7      	bne.n	13206 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13216:	4809      	ldr	r0, [pc, #36]	; (1323c <mutex_unlock_platform+0x54>)
   13218:	bf08      	it	eq
   1321a:	4610      	moveq	r0, r2
    }
}
   1321c:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
   1321e:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
   13220:	2000      	movs	r0, #0
   13222:	781b      	ldrb	r3, [r3, #0]
   13224:	4a06      	ldr	r2, [pc, #24]	; (13240 <mutex_unlock_platform+0x58>)
   13226:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1322a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1322e:	e7f5      	b.n	1321c <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13230:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13234:	e7f2      	b.n	1321c <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13236:	4803      	ldr	r0, [pc, #12]	; (13244 <mutex_unlock_platform+0x5c>)
   13238:	e7f0      	b.n	1321c <mutex_unlock_platform+0x34>
   1323a:	bf00      	nop
   1323c:	ffff8fe9 	.word	0xffff8fe9
   13240:	50030000 	.word	0x50030000
   13244:	ffff8fea 	.word	0xffff8fea

00013248 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13248:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1324a:	4604      	mov	r4, r0
   1324c:	b918      	cbnz	r0, 13256 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1324e:	4b0d      	ldr	r3, [pc, #52]	; (13284 <mutex_free_platform+0x3c>)
   13250:	480d      	ldr	r0, [pc, #52]	; (13288 <mutex_free_platform+0x40>)
   13252:	685b      	ldr	r3, [r3, #4]
   13254:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13256:	6861      	ldr	r1, [r4, #4]
   13258:	2908      	cmp	r1, #8
   1325a:	d00d      	beq.n	13278 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1325c:	f031 0304 	bics.w	r3, r1, #4
   13260:	d00a      	beq.n	13278 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   13262:	f011 0102 	ands.w	r1, r1, #2
   13266:	d008      	beq.n	1327a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13268:	4621      	mov	r1, r4
   1326a:	4808      	ldr	r0, [pc, #32]	; (1328c <mutex_free_platform+0x44>)
   1326c:	f002 fa50 	bl	15710 <k_mem_slab_free>
        mutex->mutex = NULL;
   13270:	2300      	movs	r3, #0
   13272:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13274:	2300      	movs	r3, #0
   13276:	6063      	str	r3, [r4, #4]
}
   13278:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1327a:	2214      	movs	r2, #20
   1327c:	6820      	ldr	r0, [r4, #0]
   1327e:	f007 fa0e 	bl	1a69e <memset>
   13282:	e7f7      	b.n	13274 <mutex_free_platform+0x2c>
   13284:	2000004c 	.word	0x2000004c
   13288:	0001d9c6 	.word	0x0001d9c6
   1328c:	20000420 	.word	0x20000420

00013290 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13290:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13292:	4604      	mov	r4, r0
   13294:	b918      	cbnz	r0, 1329e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   13296:	4b16      	ldr	r3, [pc, #88]	; (132f0 <mutex_init_platform+0x60>)
   13298:	4816      	ldr	r0, [pc, #88]	; (132f4 <mutex_init_platform+0x64>)
   1329a:	685b      	ldr	r3, [r3, #4]
   1329c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1329e:	6863      	ldr	r3, [r4, #4]
   132a0:	2b04      	cmp	r3, #4
   132a2:	d023      	beq.n	132ec <mutex_init_platform+0x5c>
   132a4:	2b08      	cmp	r3, #8
   132a6:	d021      	beq.n	132ec <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   132a8:	b9cb      	cbnz	r3, 132de <mutex_init_platform+0x4e>
   132aa:	6823      	ldr	r3, [r4, #0]
   132ac:	b9bb      	cbnz	r3, 132de <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   132ae:	f04f 32ff 	mov.w	r2, #4294967295
   132b2:	f04f 33ff 	mov.w	r3, #4294967295
   132b6:	4621      	mov	r1, r4
   132b8:	480f      	ldr	r0, [pc, #60]	; (132f8 <mutex_init_platform+0x68>)
   132ba:	f002 f9cf 	bl	1565c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   132be:	b908      	cbnz	r0, 132c4 <mutex_init_platform+0x34>
   132c0:	6823      	ldr	r3, [r4, #0]
   132c2:	b91b      	cbnz	r3, 132cc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   132c4:	4b0a      	ldr	r3, [pc, #40]	; (132f0 <mutex_init_platform+0x60>)
   132c6:	480d      	ldr	r0, [pc, #52]	; (132fc <mutex_init_platform+0x6c>)
   132c8:	685b      	ldr	r3, [r3, #4]
   132ca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   132cc:	2214      	movs	r2, #20
   132ce:	2100      	movs	r1, #0
   132d0:	6820      	ldr	r0, [r4, #0]
   132d2:	f007 f9e4 	bl	1a69e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   132d6:	6863      	ldr	r3, [r4, #4]
   132d8:	f043 0302 	orr.w	r3, r3, #2
   132dc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   132de:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   132e0:	f007 fba8 	bl	1aa34 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   132e4:	6863      	ldr	r3, [r4, #4]
   132e6:	f043 0301 	orr.w	r3, r3, #1
   132ea:	6063      	str	r3, [r4, #4]
}
   132ec:	bd10      	pop	{r4, pc}
   132ee:	bf00      	nop
   132f0:	2000004c 	.word	0x2000004c
   132f4:	0001d9c6 	.word	0x0001d9c6
   132f8:	20000420 	.word	0x20000420
   132fc:	0001d9ec 	.word	0x0001d9ec

00013300 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13300:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   13302:	b340      	cbz	r0, 13356 <mutex_lock_platform+0x56>
    switch (mutex->flags) {
   13304:	6843      	ldr	r3, [r0, #4]
   13306:	2b04      	cmp	r3, #4
   13308:	d00b      	beq.n	13322 <mutex_lock_platform+0x22>
   1330a:	2b08      	cmp	r3, #8
   1330c:	d016      	beq.n	1333c <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1330e:	b303      	cbz	r3, 13352 <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13310:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13312:	f04f 32ff 	mov.w	r2, #4294967295
   13316:	f04f 33ff 	mov.w	r3, #4294967295
   1331a:	f002 fb6b 	bl	159f4 <z_impl_k_mutex_lock>
        if (ret == 0) {
   1331e:	b158      	cbz	r0, 13338 <mutex_lock_platform+0x38>
   13320:	e015      	b.n	1334e <mutex_lock_platform+0x4e>
   13322:	2201      	movs	r2, #1
   13324:	6803      	ldr	r3, [r0, #0]
   13326:	e8d3 1fef 	ldaex	r1, [r3]
   1332a:	2900      	cmp	r1, #0
   1332c:	d103      	bne.n	13336 <mutex_lock_platform+0x36>
   1332e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13332:	2800      	cmp	r0, #0
   13334:	d1f7      	bne.n	13326 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13336:	d10a      	bne.n	1334e <mutex_lock_platform+0x4e>
   13338:	2000      	movs	r0, #0
}
   1333a:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
   1333c:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
   1333e:	4a07      	ldr	r2, [pc, #28]	; (1335c <mutex_lock_platform+0x5c>)
   13340:	781b      	ldrb	r3, [r3, #0]
   13342:	f503 7380 	add.w	r3, r3, #256	; 0x100
   13346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1334a:	2b00      	cmp	r3, #0
   1334c:	d0f4      	beq.n	13338 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1334e:	4804      	ldr	r0, [pc, #16]	; (13360 <mutex_lock_platform+0x60>)
   13350:	e7f3      	b.n	1333a <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13352:	4804      	ldr	r0, [pc, #16]	; (13364 <mutex_lock_platform+0x64>)
   13354:	e7f1      	b.n	1333a <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13356:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1335a:	e7ee      	b.n	1333a <mutex_lock_platform+0x3a>
   1335c:	50030000 	.word	0x50030000
   13360:	ffff8fe9 	.word	0xffff8fe9
   13364:	ffff8fea 	.word	0xffff8fea

00013368 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13368:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1336a:	4906      	ldr	r1, [pc, #24]	; (13384 <nrf_cc3xx_platform_mutex_init+0x1c>)
   1336c:	2340      	movs	r3, #64	; 0x40
   1336e:	2214      	movs	r2, #20
   13370:	4805      	ldr	r0, [pc, #20]	; (13388 <nrf_cc3xx_platform_mutex_init+0x20>)
   13372:	f007 fb34 	bl	1a9de <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   13376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1337a:	4904      	ldr	r1, [pc, #16]	; (1338c <nrf_cc3xx_platform_mutex_init+0x24>)
   1337c:	4804      	ldr	r0, [pc, #16]	; (13390 <nrf_cc3xx_platform_mutex_init+0x28>)
   1337e:	f004 ba77 	b.w	17870 <nrf_cc3xx_platform_set_mutexes>
   13382:	bf00      	nop
   13384:	20000440 	.word	0x20000440
   13388:	20000420 	.word	0x20000420
   1338c:	0001d148 	.word	0x0001d148
   13390:	0001d138 	.word	0x0001d138

00013394 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13394:	4901      	ldr	r1, [pc, #4]	; (1339c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13396:	2210      	movs	r2, #16
	str	r2, [r1]
   13398:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1339a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1339c:	e000ed10 	.word	0xe000ed10

000133a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   133a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   133a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   133a4:	f380 8811 	msr	BASEPRI, r0
	isb
   133a8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   133ac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   133b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   133b2:	b662      	cpsie	i
	isb
   133b4:	f3bf 8f6f 	isb	sy

	bx	lr
   133b8:	4770      	bx	lr
   133ba:	bf00      	nop

000133bc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   133bc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   133be:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   133c0:	f381 8811 	msr	BASEPRI, r1

	wfe
   133c4:	bf20      	wfe

	msr	BASEPRI, r0
   133c6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   133ca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   133cc:	4770      	bx	lr
   133ce:	bf00      	nop

000133d0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   133d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   133d2:	4605      	mov	r5, r0

	if (esf != NULL) {
   133d4:	460c      	mov	r4, r1
   133d6:	b1c9      	cbz	r1, 1340c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   133d8:	688b      	ldr	r3, [r1, #8]
   133da:	4810      	ldr	r0, [pc, #64]	; (1341c <z_arm_fatal_error+0x4c>)
   133dc:	9300      	str	r3, [sp, #0]
   133de:	e9d1 2300 	ldrd	r2, r3, [r1]
   133e2:	2145      	movs	r1, #69	; 0x45
   133e4:	f007 f8b3 	bl	1a54e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   133e8:	6963      	ldr	r3, [r4, #20]
   133ea:	2145      	movs	r1, #69	; 0x45
   133ec:	9300      	str	r3, [sp, #0]
   133ee:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   133f2:	480b      	ldr	r0, [pc, #44]	; (13420 <z_arm_fatal_error+0x50>)
   133f4:	f007 f8ab 	bl	1a54e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   133f8:	2145      	movs	r1, #69	; 0x45
   133fa:	69e2      	ldr	r2, [r4, #28]
   133fc:	4809      	ldr	r0, [pc, #36]	; (13424 <z_arm_fatal_error+0x54>)
   133fe:	f007 f8a6 	bl	1a54e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13402:	2145      	movs	r1, #69	; 0x45
   13404:	69a2      	ldr	r2, [r4, #24]
   13406:	4808      	ldr	r0, [pc, #32]	; (13428 <z_arm_fatal_error+0x58>)
   13408:	f007 f8a1 	bl	1a54e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1340c:	4621      	mov	r1, r4
   1340e:	4628      	mov	r0, r5
}
   13410:	b003      	add	sp, #12
   13412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   13416:	f001 bfc5 	b.w	153a4 <z_fatal_error>
   1341a:	bf00      	nop
   1341c:	0001da19 	.word	0x0001da19
   13420:	0001da4d 	.word	0x0001da4d
   13424:	0001da81 	.word	0x0001da81
   13428:	0001da95 	.word	0x0001da95

0001342c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1342c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1342e:	2b00      	cmp	r3, #0
   13430:	db08      	blt.n	13444 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13432:	2201      	movs	r2, #1
   13434:	f000 001f 	and.w	r0, r0, #31
   13438:	fa02 f000 	lsl.w	r0, r2, r0
   1343c:	4a02      	ldr	r2, [pc, #8]	; (13448 <arch_irq_enable+0x1c>)
   1343e:	095b      	lsrs	r3, r3, #5
   13440:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13444:	4770      	bx	lr
   13446:	bf00      	nop
   13448:	e000e100 	.word	0xe000e100

0001344c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1344c:	4b05      	ldr	r3, [pc, #20]	; (13464 <arch_irq_is_enabled+0x18>)
   1344e:	0942      	lsrs	r2, r0, #5
   13450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13454:	2301      	movs	r3, #1
   13456:	f000 001f 	and.w	r0, r0, #31
   1345a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1345e:	4010      	ands	r0, r2
   13460:	4770      	bx	lr
   13462:	bf00      	nop
   13464:	e000e100 	.word	0xe000e100

00013468 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   13468:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1346a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1346c:	2c07      	cmp	r4, #7
{
   1346e:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   13470:	d908      	bls.n	13484 <z_arm_irq_priority_set+0x1c>
   13472:	490d      	ldr	r1, [pc, #52]	; (134a8 <z_arm_irq_priority_set+0x40>)
   13474:	480d      	ldr	r0, [pc, #52]	; (134ac <z_arm_irq_priority_set+0x44>)
   13476:	2258      	movs	r2, #88	; 0x58
   13478:	f006 ff8a 	bl	1a390 <printk>
   1347c:	2158      	movs	r1, #88	; 0x58
   1347e:	480a      	ldr	r0, [pc, #40]	; (134a8 <z_arm_irq_priority_set+0x40>)
   13480:	f007 f852 	bl	1a528 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13484:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13486:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13488:	bfac      	ite	ge
   1348a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1348e:	4b08      	ldrlt	r3, [pc, #32]	; (134b0 <z_arm_irq_priority_set+0x48>)
   13490:	ea4f 1444 	mov.w	r4, r4, lsl #5
   13494:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13496:	bfab      	itete	ge
   13498:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1349c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   134a0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   134a4:	555c      	strblt	r4, [r3, r5]
}
   134a6:	bd38      	pop	{r3, r4, r5, pc}
   134a8:	0001dac8 	.word	0x0001dac8
   134ac:	0001d506 	.word	0x0001d506
   134b0:	e000ed14 	.word	0xe000ed14

000134b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   134b4:	bf30      	wfi
    b z_SysNmiOnReset
   134b6:	f7ff bffd 	b.w	134b4 <z_SysNmiOnReset>
   134ba:	bf00      	nop

000134bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   134bc:	4a0b      	ldr	r2, [pc, #44]	; (134ec <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   134be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   134c0:	4b0b      	ldr	r3, [pc, #44]	; (134f0 <z_arm_prep_c+0x34>)
   134c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   134c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   134c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   134cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   134d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   134d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   134d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   134dc:	f002 f802 	bl	154e4 <z_bss_zero>
	z_data_copy();
   134e0:	f003 fbf6 	bl	16cd0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   134e4:	f000 fb58 	bl	13b98 <z_arm_interrupt_init>
	z_cstart();
   134e8:	f002 f806 	bl	154f8 <z_cstart>
   134ec:	00000000 	.word	0x00000000
   134f0:	e000ed00 	.word	0xe000ed00

000134f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   134f4:	4a09      	ldr	r2, [pc, #36]	; (1351c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   134f6:	490a      	ldr	r1, [pc, #40]	; (13520 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   134f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   134fa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   134fc:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
   134fe:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13500:	4908      	ldr	r1, [pc, #32]	; (13524 <arch_swap+0x30>)
   13502:	684b      	ldr	r3, [r1, #4]
   13504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13508:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1350a:	2300      	movs	r3, #0
   1350c:	f383 8811 	msr	BASEPRI, r3
   13510:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13514:	6893      	ldr	r3, [r2, #8]
}
   13516:	6f98      	ldr	r0, [r3, #120]	; 0x78
   13518:	4770      	bx	lr
   1351a:	bf00      	nop
   1351c:	20000a34 	.word	0x20000a34
   13520:	0001d22c 	.word	0x0001d22c
   13524:	e000ed00 	.word	0xe000ed00

00013528 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13528:	4913      	ldr	r1, [pc, #76]	; (13578 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1352a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1352c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13530:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13532:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13536:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1353a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1353c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13540:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13544:	4f0d      	ldr	r7, [pc, #52]	; (1357c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13546:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1354a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1354c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1354e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13550:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   13552:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13554:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13556:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1355a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1355e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13562:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   13566:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1356a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1356c:	f007 f843 	bl	1a5f6 <configure_builtin_stack_guard>
    pop {r2, lr}
   13570:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13574:	4770      	bx	lr
   13576:	0000      	.short	0x0000
    ldr r1, =_kernel
   13578:	20000a34 	.word	0x20000a34
    ldr v4, =_SCS_ICSR
   1357c:	e000ed04 	.word	0xe000ed04

00013580 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13580:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13584:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13586:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1358a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1358e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13590:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13594:	2902      	cmp	r1, #2
    beq _oops
   13596:	d0ff      	beq.n	13598 <_oops>

00013598 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13598:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1359a:	f006 ffee 	bl	1a57a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1359e:	bd01      	pop	{r0, pc}

000135a0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   135a0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   135a4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   135a6:	490b      	ldr	r1, [pc, #44]	; (135d4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   135a8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   135ac:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   135ae:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   135b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   135b6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   135b8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   135bc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   135c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   135c4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   135c8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   135ca:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   135cc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   135ce:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   135d0:	4770      	bx	lr
   135d2:	bf00      	nop
   135d4:	0001a453 	.word	0x0001a453

000135d8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   135d8:	4b08      	ldr	r3, [pc, #32]	; (135fc <arch_switch_to_main_thread+0x24>)
   135da:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   135dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
   135de:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   135e2:	4610      	mov	r0, r2
   135e4:	f381 8809 	msr	PSP, r1
   135e8:	2100      	movs	r1, #0
   135ea:	b663      	cpsie	if
   135ec:	f381 8811 	msr	BASEPRI, r1
   135f0:	f3bf 8f6f 	isb	sy
   135f4:	2200      	movs	r2, #0
   135f6:	2300      	movs	r3, #0
   135f8:	f006 ff2b 	bl	1a452 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   135fc:	20000a34 	.word	0x20000a34

00013600 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13600:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13602:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13604:	4a0b      	ldr	r2, [pc, #44]	; (13634 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13606:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13608:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1360a:	bf1e      	ittt	ne
	movne	r1, #0
   1360c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1360e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13610:	f007 fa09 	blne	1aa26 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13614:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13616:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1361a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1361e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13622:	4905      	ldr	r1, [pc, #20]	; (13638 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13624:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13626:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13628:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1362a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1362e:	4903      	ldr	r1, [pc, #12]	; (1363c <_isr_wrapper+0x3c>)
	bx r1
   13630:	4708      	bx	r1
   13632:	0000      	.short	0x0000
	ldr r2, =_kernel
   13634:	20000a34 	.word	0x20000a34
	ldr r1, =_sw_isr_table
   13638:	0001ab50 	.word	0x0001ab50
	ldr r1, =z_arm_int_exit
   1363c:	00013641 	.word	0x00013641

00013640 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13640:	4b04      	ldr	r3, [pc, #16]	; (13654 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13642:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13644:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13646:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13648:	d003      	beq.n	13652 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1364a:	4903      	ldr	r1, [pc, #12]	; (13658 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1364c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13650:	600a      	str	r2, [r1, #0]

00013652 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13652:	4770      	bx	lr
	ldr r3, =_kernel
   13654:	20000a34 	.word	0x20000a34
	ldr r1, =_SCS_ICSR
   13658:	e000ed04 	.word	0xe000ed04

0001365c <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1365c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1365e:	4c2b      	ldr	r4, [pc, #172]	; (1370c <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13660:	4606      	mov	r6, r0
   13662:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13664:	482a      	ldr	r0, [pc, #168]	; (13710 <mem_manage_fault.isra.0+0xb4>)
   13666:	2145      	movs	r1, #69	; 0x45
   13668:	f006 ff71 	bl	1a54e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1366c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1366e:	06d0      	lsls	r0, r2, #27
   13670:	d503      	bpl.n	1367a <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13672:	2145      	movs	r1, #69	; 0x45
   13674:	4827      	ldr	r0, [pc, #156]	; (13714 <mem_manage_fault.isra.0+0xb8>)
   13676:	f006 ff6a 	bl	1a54e <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1367a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1367c:	0719      	lsls	r1, r3, #28
   1367e:	d503      	bpl.n	13688 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   13680:	2145      	movs	r1, #69	; 0x45
   13682:	4825      	ldr	r0, [pc, #148]	; (13718 <mem_manage_fault.isra.0+0xbc>)
   13684:	f006 ff63 	bl	1a54e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13688:	4c20      	ldr	r4, [pc, #128]	; (1370c <mem_manage_fault.isra.0+0xb0>)
   1368a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1368c:	079a      	lsls	r2, r3, #30
   1368e:	d510      	bpl.n	136b2 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   13690:	2145      	movs	r1, #69	; 0x45
   13692:	4822      	ldr	r0, [pc, #136]	; (1371c <mem_manage_fault.isra.0+0xc0>)
   13694:	f006 ff5b 	bl	1a54e <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   13698:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1369a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1369c:	061b      	lsls	r3, r3, #24
   1369e:	d508      	bpl.n	136b2 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   136a0:	2145      	movs	r1, #69	; 0x45
   136a2:	481f      	ldr	r0, [pc, #124]	; (13720 <mem_manage_fault.isra.0+0xc4>)
   136a4:	f006 ff53 	bl	1a54e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   136a8:	b11e      	cbz	r6, 136b2 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   136aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   136ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   136b0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   136b2:	4c16      	ldr	r4, [pc, #88]	; (1370c <mem_manage_fault.isra.0+0xb0>)
   136b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   136b6:	07d6      	lsls	r6, r2, #31
   136b8:	d503      	bpl.n	136c2 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   136ba:	2145      	movs	r1, #69	; 0x45
   136bc:	4819      	ldr	r0, [pc, #100]	; (13724 <mem_manage_fault.isra.0+0xc8>)
   136be:	f006 ff46 	bl	1a54e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   136c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   136c4:	0698      	lsls	r0, r3, #26
   136c6:	d503      	bpl.n	136d0 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
   136c8:	2145      	movs	r1, #69	; 0x45
   136ca:	4817      	ldr	r0, [pc, #92]	; (13728 <mem_manage_fault.isra.0+0xcc>)
   136cc:	f006 ff3f 	bl	1a54e <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   136d0:	4b0e      	ldr	r3, [pc, #56]	; (1370c <mem_manage_fault.isra.0+0xb0>)
   136d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   136d4:	06d1      	lsls	r1, r2, #27
   136d6:	d402      	bmi.n	136de <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   136d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   136da:	0792      	lsls	r2, r2, #30
   136dc:	d50d      	bpl.n	136fa <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   136de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136e0:	06db      	lsls	r3, r3, #27
   136e2:	d50a      	bpl.n	136fa <mem_manage_fault.isra.0+0x9e>
   136e4:	4911      	ldr	r1, [pc, #68]	; (1372c <mem_manage_fault.isra.0+0xd0>)
   136e6:	4812      	ldr	r0, [pc, #72]	; (13730 <mem_manage_fault.isra.0+0xd4>)
   136e8:	f240 124f 	movw	r2, #335	; 0x14f
   136ec:	f006 fe50 	bl	1a390 <printk>
   136f0:	f240 114f 	movw	r1, #335	; 0x14f
   136f4:	480d      	ldr	r0, [pc, #52]	; (1372c <mem_manage_fault.isra.0+0xd0>)
   136f6:	f006 ff17 	bl	1a528 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   136fa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   136fc:	4a03      	ldr	r2, [pc, #12]	; (1370c <mem_manage_fault.isra.0+0xb0>)
   136fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13700:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13704:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13706:	7028      	strb	r0, [r5, #0]

	return reason;
}
   13708:	bd70      	pop	{r4, r5, r6, pc}
   1370a:	bf00      	nop
   1370c:	e000ed00 	.word	0xe000ed00
   13710:	0001dafe 	.word	0x0001dafe
   13714:	0001db19 	.word	0x0001db19
   13718:	0001db51 	.word	0x0001db51
   1371c:	0001db69 	.word	0x0001db69
   13720:	0001db86 	.word	0x0001db86
   13724:	0001dba1 	.word	0x0001dba1
   13728:	0001dbc5 	.word	0x0001dbc5
   1372c:	0001dbf9 	.word	0x0001dbf9
   13730:	0001d506 	.word	0x0001d506

00013734 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13734:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13736:	4c23      	ldr	r4, [pc, #140]	; (137c4 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13738:	4606      	mov	r6, r0
   1373a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1373c:	4822      	ldr	r0, [pc, #136]	; (137c8 <bus_fault.isra.0+0x94>)
   1373e:	2145      	movs	r1, #69	; 0x45
   13740:	f006 ff05 	bl	1a54e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13744:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   13746:	04d1      	lsls	r1, r2, #19
   13748:	d503      	bpl.n	13752 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   1374a:	2145      	movs	r1, #69	; 0x45
   1374c:	481f      	ldr	r0, [pc, #124]	; (137cc <bus_fault.isra.0+0x98>)
   1374e:	f006 fefe 	bl	1a54e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13754:	051a      	lsls	r2, r3, #20
   13756:	d503      	bpl.n	13760 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   13758:	2145      	movs	r1, #69	; 0x45
   1375a:	481d      	ldr	r0, [pc, #116]	; (137d0 <bus_fault.isra.0+0x9c>)
   1375c:	f006 fef7 	bl	1a54e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13760:	4c18      	ldr	r4, [pc, #96]	; (137c4 <bus_fault.isra.0+0x90>)
   13762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13764:	059b      	lsls	r3, r3, #22
   13766:	d510      	bpl.n	1378a <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   13768:	481a      	ldr	r0, [pc, #104]	; (137d4 <bus_fault.isra.0+0xa0>)
   1376a:	2145      	movs	r1, #69	; 0x45
   1376c:	f006 feef 	bl	1a54e <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13770:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13772:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13774:	0418      	lsls	r0, r3, #16
   13776:	d508      	bpl.n	1378a <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13778:	2145      	movs	r1, #69	; 0x45
   1377a:	4817      	ldr	r0, [pc, #92]	; (137d8 <bus_fault.isra.0+0xa4>)
   1377c:	f006 fee7 	bl	1a54e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   13780:	b11e      	cbz	r6, 1378a <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13784:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13788:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1378a:	4c0e      	ldr	r4, [pc, #56]	; (137c4 <bus_fault.isra.0+0x90>)
   1378c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1378e:	0559      	lsls	r1, r3, #21
   13790:	d503      	bpl.n	1379a <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   13792:	2145      	movs	r1, #69	; 0x45
   13794:	4811      	ldr	r0, [pc, #68]	; (137dc <bus_fault.isra.0+0xa8>)
   13796:	f006 feda 	bl	1a54e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1379a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1379c:	05da      	lsls	r2, r3, #23
   1379e:	d50b      	bpl.n	137b8 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   137a0:	2145      	movs	r1, #69	; 0x45
   137a2:	480f      	ldr	r0, [pc, #60]	; (137e0 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   137a4:	f006 fed3 	bl	1a54e <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   137a8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   137aa:	4a06      	ldr	r2, [pc, #24]	; (137c4 <bus_fault.isra.0+0x90>)
   137ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
   137ae:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   137b2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   137b4:	7028      	strb	r0, [r5, #0]

	return reason;
}
   137b6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   137b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   137ba:	049b      	lsls	r3, r3, #18
   137bc:	d5f4      	bpl.n	137a8 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   137be:	2145      	movs	r1, #69	; 0x45
   137c0:	4808      	ldr	r0, [pc, #32]	; (137e4 <bus_fault.isra.0+0xb0>)
   137c2:	e7ef      	b.n	137a4 <bus_fault.isra.0+0x70>
   137c4:	e000ed00 	.word	0xe000ed00
   137c8:	0001dc33 	.word	0x0001dc33
   137cc:	0001dc4e 	.word	0x0001dc4e
   137d0:	0001db51 	.word	0x0001db51
   137d4:	0001dc64 	.word	0x0001dc64
   137d8:	0001dc82 	.word	0x0001dc82
   137dc:	0001dc9c 	.word	0x0001dc9c
   137e0:	0001dcbc 	.word	0x0001dcbc
   137e4:	0001dbc5 	.word	0x0001dbc5

000137e8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   137e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   137ea:	4c21      	ldr	r4, [pc, #132]	; (13870 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   137ec:	2145      	movs	r1, #69	; 0x45
   137ee:	4821      	ldr	r0, [pc, #132]	; (13874 <usage_fault.isra.0+0x8c>)
   137f0:	f006 fead 	bl	1a54e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   137f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   137f6:	0195      	lsls	r5, r2, #6
   137f8:	d503      	bpl.n	13802 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   137fa:	2145      	movs	r1, #69	; 0x45
   137fc:	481e      	ldr	r0, [pc, #120]	; (13878 <usage_fault.isra.0+0x90>)
   137fe:	f006 fea6 	bl	1a54e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13804:	01dc      	lsls	r4, r3, #7
   13806:	d503      	bpl.n	13810 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   13808:	2145      	movs	r1, #69	; 0x45
   1380a:	481c      	ldr	r0, [pc, #112]	; (1387c <usage_fault.isra.0+0x94>)
   1380c:	f006 fe9f 	bl	1a54e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13810:	4d17      	ldr	r5, [pc, #92]	; (13870 <usage_fault.isra.0+0x88>)
   13812:	6aac      	ldr	r4, [r5, #40]	; 0x28
   13814:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   13818:	d004      	beq.n	13824 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1381a:	2145      	movs	r1, #69	; 0x45
   1381c:	4818      	ldr	r0, [pc, #96]	; (13880 <usage_fault.isra.0+0x98>)
   1381e:	f006 fe96 	bl	1a54e <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   13822:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13824:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13826:	0318      	lsls	r0, r3, #12
   13828:	d503      	bpl.n	13832 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   1382a:	2145      	movs	r1, #69	; 0x45
   1382c:	4815      	ldr	r0, [pc, #84]	; (13884 <usage_fault.isra.0+0x9c>)
   1382e:	f006 fe8e 	bl	1a54e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13832:	4d0f      	ldr	r5, [pc, #60]	; (13870 <usage_fault.isra.0+0x88>)
   13834:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13836:	0351      	lsls	r1, r2, #13
   13838:	d503      	bpl.n	13842 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1383a:	2145      	movs	r1, #69	; 0x45
   1383c:	4812      	ldr	r0, [pc, #72]	; (13888 <usage_fault.isra.0+0xa0>)
   1383e:	f006 fe86 	bl	1a54e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13842:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13844:	039a      	lsls	r2, r3, #14
   13846:	d503      	bpl.n	13850 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13848:	2145      	movs	r1, #69	; 0x45
   1384a:	4810      	ldr	r0, [pc, #64]	; (1388c <usage_fault.isra.0+0xa4>)
   1384c:	f006 fe7f 	bl	1a54e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13850:	4d07      	ldr	r5, [pc, #28]	; (13870 <usage_fault.isra.0+0x88>)
   13852:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13854:	03db      	lsls	r3, r3, #15
   13856:	d503      	bpl.n	13860 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13858:	2145      	movs	r1, #69	; 0x45
   1385a:	480d      	ldr	r0, [pc, #52]	; (13890 <usage_fault.isra.0+0xa8>)
   1385c:	f006 fe77 	bl	1a54e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13860:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   13862:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13864:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13868:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1386c:	62ab      	str	r3, [r5, #40]	; 0x28
}
   1386e:	bd38      	pop	{r3, r4, r5, pc}
   13870:	e000ed00 	.word	0xe000ed00
   13874:	0001dcd9 	.word	0x0001dcd9
   13878:	0001dcf6 	.word	0x0001dcf6
   1387c:	0001dd0e 	.word	0x0001dd0e
   13880:	0001dd2d 	.word	0x0001dd2d
   13884:	0001dd5c 	.word	0x0001dd5c
   13888:	0001dd7f 	.word	0x0001dd7f
   1388c:	0001dda9 	.word	0x0001dda9
   13890:	0001ddc8 	.word	0x0001ddc8

00013894 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
   13894:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   13896:	4c1e      	ldr	r4, [pc, #120]	; (13910 <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
   13898:	481e      	ldr	r0, [pc, #120]	; (13914 <secure_fault.isra.0+0x80>)
   1389a:	2145      	movs	r1, #69	; 0x45
   1389c:	f006 fe57 	bl	1a54e <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
   138a0:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   138a2:	6963      	ldr	r3, [r4, #20]
   138a4:	0658      	lsls	r0, r3, #25
   138a6:	d503      	bpl.n	138b0 <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
   138a8:	2145      	movs	r1, #69	; 0x45
   138aa:	481b      	ldr	r0, [pc, #108]	; (13918 <secure_fault.isra.0+0x84>)
   138ac:	f006 fe4f 	bl	1a54e <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   138b0:	6963      	ldr	r3, [r4, #20]
   138b2:	07d9      	lsls	r1, r3, #31
   138b4:	d508      	bpl.n	138c8 <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
   138b6:	2145      	movs	r1, #69	; 0x45
   138b8:	4818      	ldr	r0, [pc, #96]	; (1391c <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
   138ba:	f006 fe48 	bl	1a54e <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   138be:	6963      	ldr	r3, [r4, #20]
   138c0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   138c4:	6163      	str	r3, [r4, #20]
}
   138c6:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   138c8:	6963      	ldr	r3, [r4, #20]
   138ca:	079a      	lsls	r2, r3, #30
   138cc:	d502      	bpl.n	138d4 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
   138ce:	2145      	movs	r1, #69	; 0x45
   138d0:	4813      	ldr	r0, [pc, #76]	; (13920 <secure_fault.isra.0+0x8c>)
   138d2:	e7f2      	b.n	138ba <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   138d4:	6963      	ldr	r3, [r4, #20]
   138d6:	075b      	lsls	r3, r3, #29
   138d8:	d502      	bpl.n	138e0 <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
   138da:	2145      	movs	r1, #69	; 0x45
   138dc:	4811      	ldr	r0, [pc, #68]	; (13924 <secure_fault.isra.0+0x90>)
   138de:	e7ec      	b.n	138ba <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   138e0:	6963      	ldr	r3, [r4, #20]
   138e2:	0718      	lsls	r0, r3, #28
   138e4:	d502      	bpl.n	138ec <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
   138e6:	2145      	movs	r1, #69	; 0x45
   138e8:	480f      	ldr	r0, [pc, #60]	; (13928 <secure_fault.isra.0+0x94>)
   138ea:	e7e6      	b.n	138ba <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   138ec:	6963      	ldr	r3, [r4, #20]
   138ee:	06d9      	lsls	r1, r3, #27
   138f0:	d502      	bpl.n	138f8 <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
   138f2:	2145      	movs	r1, #69	; 0x45
   138f4:	480d      	ldr	r0, [pc, #52]	; (1392c <secure_fault.isra.0+0x98>)
   138f6:	e7e0      	b.n	138ba <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   138f8:	6963      	ldr	r3, [r4, #20]
   138fa:	069a      	lsls	r2, r3, #26
   138fc:	d502      	bpl.n	13904 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
   138fe:	2145      	movs	r1, #69	; 0x45
   13900:	480b      	ldr	r0, [pc, #44]	; (13930 <secure_fault.isra.0+0x9c>)
   13902:	e7da      	b.n	138ba <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   13904:	6963      	ldr	r3, [r4, #20]
   13906:	061b      	lsls	r3, r3, #24
   13908:	d5d9      	bpl.n	138be <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
   1390a:	2145      	movs	r1, #69	; 0x45
   1390c:	4809      	ldr	r0, [pc, #36]	; (13934 <secure_fault.isra.0+0xa0>)
   1390e:	e7d4      	b.n	138ba <secure_fault.isra.0+0x26>
   13910:	e000edd0 	.word	0xe000edd0
   13914:	0001ddf8 	.word	0x0001ddf8
   13918:	0001de16 	.word	0x0001de16
   1391c:	0001de2b 	.word	0x0001de2b
   13920:	0001de46 	.word	0x0001de46
   13924:	0001de69 	.word	0x0001de69
   13928:	0001de89 	.word	0x0001de89
   1392c:	0001deab 	.word	0x0001deab
   13930:	0001dec5 	.word	0x0001dec5
   13934:	0001dee4 	.word	0x0001dee4

00013938 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1393c:	4b7a      	ldr	r3, [pc, #488]	; (13b28 <z_arm_fault+0x1f0>)
{
   1393e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13940:	685c      	ldr	r4, [r3, #4]
   13942:	2600      	movs	r6, #0
{
   13944:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13946:	f3c4 0708 	ubfx	r7, r4, #0, #9
   1394a:	f386 8811 	msr	BASEPRI, r6
   1394e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13952:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13956:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1395a:	d11e      	bne.n	1399a <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   1395c:	f012 0301 	ands.w	r3, r2, #1
   13960:	d03a      	beq.n	139d8 <z_arm_fault+0xa0>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   13962:	f012 0340 	ands.w	r3, r2, #64	; 0x40
   13966:	f002 0808 	and.w	r8, r2, #8
   1396a:	f040 80d6 	bne.w	13b1a <z_arm_fault+0x1e2>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1396e:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
   13970:	bf54      	ite	pl
   13972:	4605      	movpl	r5, r0
	*nested_exc = false;
   13974:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
   13976:	682a      	ldr	r2, [r5, #0]
   13978:	4b6c      	ldr	r3, [pc, #432]	; (13b2c <z_arm_fault+0x1f4>)
			*nested_exc = true;
   1397a:	bf58      	it	pl
   1397c:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
   1397e:	4413      	add	r3, r2
   13980:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
   13982:	bf98      	it	ls
   13984:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
   13986:	2145      	movs	r1, #69	; 0x45
   13988:	4869      	ldr	r0, [pc, #420]	; (13b30 <z_arm_fault+0x1f8>)
   1398a:	f006 fde0 	bl	1a54e <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1398e:	f1b8 0f00 	cmp.w	r8, #0
   13992:	d01e      	beq.n	139d2 <z_arm_fault+0x9a>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   13994:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   13998:	b95d      	cbnz	r5, 139b2 <z_arm_fault+0x7a>
   1399a:	f240 32f2 	movw	r2, #1010	; 0x3f2
   1399e:	4965      	ldr	r1, [pc, #404]	; (13b34 <z_arm_fault+0x1fc>)
   139a0:	4865      	ldr	r0, [pc, #404]	; (13b38 <z_arm_fault+0x200>)
   139a2:	f006 fcf5 	bl	1a390 <printk>
   139a6:	f240 31f2 	movw	r1, #1010	; 0x3f2
   139aa:	4862      	ldr	r0, [pc, #392]	; (13b34 <z_arm_fault+0x1fc>)
   139ac:	f006 fdbc 	bl	1a528 <assert_post_action>
   139b0:	2500      	movs	r5, #0
	*recoverable = false;
   139b2:	2300      	movs	r3, #0
   139b4:	1efa      	subs	r2, r7, #3
   139b6:	4698      	mov	r8, r3
   139b8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   139bc:	4613      	mov	r3, r2
   139be:	2b09      	cmp	r3, #9
   139c0:	f200 8099 	bhi.w	13af6 <z_arm_fault+0x1be>
   139c4:	e8df f003 	tbb	[pc, r3]
   139c8:	6a8c880a 	.word	0x6a8c880a
   139cc:	97979790 	.word	0x97979790
   139d0:	9497      	.short	0x9497
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   139d2:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
   139d6:	e7df      	b.n	13998 <z_arm_fault+0x60>
	*nested_exc = false;
   139d8:	461e      	mov	r6, r3
   139da:	e7de      	b.n	1399a <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
   139dc:	2145      	movs	r1, #69	; 0x45
   139de:	4857      	ldr	r0, [pc, #348]	; (13b3c <z_arm_fault+0x204>)
   139e0:	f006 fdb5 	bl	1a54e <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   139e4:	4b50      	ldr	r3, [pc, #320]	; (13b28 <z_arm_fault+0x1f0>)
	*recoverable = false;
   139e6:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   139ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   139ec:	f014 0402 	ands.w	r4, r4, #2
   139f0:	d004      	beq.n	139fc <z_arm_fault+0xc4>
		PR_EXC("  Bus fault on vector table read");
   139f2:	2145      	movs	r1, #69	; 0x45
   139f4:	4852      	ldr	r0, [pc, #328]	; (13b40 <z_arm_fault+0x208>)
	PR_FAULT_INFO(
   139f6:	f006 fdaa 	bl	1a54e <z_log_minimal_printk>
   139fa:	e077      	b.n	13aec <z_arm_fault+0x1b4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   139fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   139fe:	2a00      	cmp	r2, #0
   13a00:	da1d      	bge.n	13a3e <z_arm_fault+0x106>
		PR_EXC("  Debug event");
   13a02:	2145      	movs	r1, #69	; 0x45
   13a04:	484f      	ldr	r0, [pc, #316]	; (13b44 <z_arm_fault+0x20c>)
   13a06:	f006 fda2 	bl	1a54e <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13a0e:	b99b      	cbnz	r3, 13a38 <z_arm_fault+0x100>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13a10:	2220      	movs	r2, #32
   13a12:	4629      	mov	r1, r5
   13a14:	a802      	add	r0, sp, #8
   13a16:	f006 fe37 	bl	1a688 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13a1c:	2e00      	cmp	r6, #0
   13a1e:	d077      	beq.n	13b10 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13a24:	b922      	cbnz	r2, 13a30 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13a26:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13a2a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13a2e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13a30:	4620      	mov	r0, r4
   13a32:	a902      	add	r1, sp, #8
   13a34:	f7ff fccc 	bl	133d0 <z_arm_fatal_error>
}
   13a38:	b00a      	add	sp, #40	; 0x28
   13a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13a40:	005b      	lsls	r3, r3, #1
   13a42:	d540      	bpl.n	13ac6 <z_arm_fault+0x18e>
		PR_EXC("  Fault escalation (see below)");
   13a44:	2145      	movs	r1, #69	; 0x45
   13a46:	4840      	ldr	r0, [pc, #256]	; (13b48 <z_arm_fault+0x210>)
   13a48:	f006 fd81 	bl	1a54e <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   13a4c:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13a4e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   13a52:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13a56:	429a      	cmp	r2, r3
   13a58:	d00c      	beq.n	13a74 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
   13a5a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13a5e:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13a62:	781b      	ldrb	r3, [r3, #0]
   13a64:	b16b      	cbz	r3, 13a82 <z_arm_fault+0x14a>
			reason = mem_manage_fault(esf, 1, recoverable);
   13a66:	2001      	movs	r0, #1
   13a68:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   13a6c:	f7ff fdf6 	bl	1365c <mem_manage_fault.isra.0>
		reason = bus_fault(esf, 0, recoverable);
   13a70:	4604      	mov	r4, r0
		break;
   13a72:	e7ca      	b.n	13a0a <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13a74:	2145      	movs	r1, #69	; 0x45
   13a76:	682a      	ldr	r2, [r5, #0]
   13a78:	4834      	ldr	r0, [pc, #208]	; (13b4c <z_arm_fault+0x214>)
   13a7a:	f006 fd68 	bl	1a54e <z_log_minimal_printk>
			reason = esf->basic.r0;
   13a7e:	682c      	ldr	r4, [r5, #0]
   13a80:	e7c3      	b.n	13a0a <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
   13a82:	4b33      	ldr	r3, [pc, #204]	; (13b50 <z_arm_fault+0x218>)
   13a84:	781b      	ldrb	r3, [r3, #0]
   13a86:	b12b      	cbz	r3, 13a94 <z_arm_fault+0x15c>
			reason = bus_fault(esf, 1, recoverable);
   13a88:	2001      	movs	r0, #1
   13a8a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   13a8e:	f7ff fe51 	bl	13734 <bus_fault.isra.0>
   13a92:	e7ed      	b.n	13a70 <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
   13a94:	4b2f      	ldr	r3, [pc, #188]	; (13b54 <z_arm_fault+0x21c>)
   13a96:	881b      	ldrh	r3, [r3, #0]
   13a98:	b29b      	uxth	r3, r3
   13a9a:	b113      	cbz	r3, 13aa2 <z_arm_fault+0x16a>
		reason = usage_fault(esf);
   13a9c:	f7ff fea4 	bl	137e8 <usage_fault.isra.0>
   13aa0:	e7e6      	b.n	13a70 <z_arm_fault+0x138>
		} else if (SAU->SFSR != 0) {
   13aa2:	4b2d      	ldr	r3, [pc, #180]	; (13b58 <z_arm_fault+0x220>)
   13aa4:	695b      	ldr	r3, [r3, #20]
   13aa6:	b113      	cbz	r3, 13aae <z_arm_fault+0x176>
			secure_fault(esf);
   13aa8:	f7ff fef4 	bl	13894 <secure_fault.isra.0>
   13aac:	e7ad      	b.n	13a0a <z_arm_fault+0xd2>
			__ASSERT(0,
   13aae:	4921      	ldr	r1, [pc, #132]	; (13b34 <z_arm_fault+0x1fc>)
   13ab0:	f240 22c3 	movw	r2, #707	; 0x2c3
   13ab4:	4820      	ldr	r0, [pc, #128]	; (13b38 <z_arm_fault+0x200>)
   13ab6:	f006 fc6b 	bl	1a390 <printk>
   13aba:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   13abe:	481d      	ldr	r0, [pc, #116]	; (13b34 <z_arm_fault+0x1fc>)
   13ac0:	f006 fd32 	bl	1a528 <assert_post_action>
   13ac4:	e7a1      	b.n	13a0a <z_arm_fault+0xd2>
   13ac6:	491b      	ldr	r1, [pc, #108]	; (13b34 <z_arm_fault+0x1fc>)
   13ac8:	f240 22c7 	movw	r2, #711	; 0x2c7
   13acc:	481a      	ldr	r0, [pc, #104]	; (13b38 <z_arm_fault+0x200>)
   13ace:	f006 fc5f 	bl	1a390 <printk>
   13ad2:	f240 21c7 	movw	r1, #711	; 0x2c7
   13ad6:	e7f2      	b.n	13abe <z_arm_fault+0x186>
		reason = mem_manage_fault(esf, 0, recoverable);
   13ad8:	2000      	movs	r0, #0
   13ada:	f10d 0107 	add.w	r1, sp, #7
   13ade:	e7c5      	b.n	13a6c <z_arm_fault+0x134>
		reason = bus_fault(esf, 0, recoverable);
   13ae0:	2000      	movs	r0, #0
   13ae2:	f10d 0107 	add.w	r1, sp, #7
   13ae6:	e7d2      	b.n	13a8e <z_arm_fault+0x156>
		secure_fault(esf);
   13ae8:	f7ff fed4 	bl	13894 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13aec:	2400      	movs	r4, #0
}
   13aee:	e78c      	b.n	13a0a <z_arm_fault+0xd2>
	PR_FAULT_INFO(
   13af0:	2145      	movs	r1, #69	; 0x45
   13af2:	481a      	ldr	r0, [pc, #104]	; (13b5c <z_arm_fault+0x224>)
   13af4:	e77f      	b.n	139f6 <z_arm_fault+0xbe>
	PR_FAULT_INFO("***** %s %d) *****",
   13af6:	491a      	ldr	r1, [pc, #104]	; (13b60 <z_arm_fault+0x228>)
   13af8:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
   13afc:	4a19      	ldr	r2, [pc, #100]	; (13b64 <z_arm_fault+0x22c>)
   13afe:	481a      	ldr	r0, [pc, #104]	; (13b68 <z_arm_fault+0x230>)
   13b00:	bf08      	it	eq
   13b02:	460a      	moveq	r2, r1
   13b04:	f1a7 0310 	sub.w	r3, r7, #16
   13b08:	2145      	movs	r1, #69	; 0x45
   13b0a:	f006 fd20 	bl	1a54e <z_log_minimal_printk>
   13b0e:	e7ed      	b.n	13aec <z_arm_fault+0x1b4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13b10:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13b14:	f023 0301 	bic.w	r3, r3, #1
   13b18:	e789      	b.n	13a2e <z_arm_fault+0xf6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13b1a:	f1b8 0f00 	cmp.w	r8, #0
   13b1e:	f47f af3b 	bne.w	13998 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
   13b22:	4605      	mov	r5, r0
			*nested_exc = true;
   13b24:	2601      	movs	r6, #1
   13b26:	e737      	b.n	13998 <z_arm_fault+0x60>
   13b28:	e000ed00 	.word	0xe000ed00
   13b2c:	0105eda6 	.word	0x0105eda6
   13b30:	0001df2a 	.word	0x0001df2a
   13b34:	0001dbf9 	.word	0x0001dbf9
   13b38:	0001d506 	.word	0x0001d506
   13b3c:	0001df4e 	.word	0x0001df4e
   13b40:	0001df6a 	.word	0x0001df6a
   13b44:	0001df90 	.word	0x0001df90
   13b48:	0001dfa3 	.word	0x0001dfa3
   13b4c:	0001dfc7 	.word	0x0001dfc7
   13b50:	e000ed29 	.word	0xe000ed29
   13b54:	e000ed2a 	.word	0xe000ed2a
   13b58:	e000edd0 	.word	0xe000edd0
   13b5c:	0001dfe8 	.word	0x0001dfe8
   13b60:	0001defc 	.word	0x0001defc
   13b64:	0001df11 	.word	0x0001df11
   13b68:	0001e011 	.word	0x0001e011

00013b6c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13b6c:	4b04      	ldr	r3, [pc, #16]	; (13b80 <z_arm_fault_init+0x14>)
   13b6e:	695a      	ldr	r2, [r3, #20]
   13b70:	f042 0210 	orr.w	r2, r2, #16
   13b74:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   13b76:	695a      	ldr	r2, [r3, #20]
   13b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   13b7c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13b7e:	4770      	bx	lr
   13b80:	e000ed00 	.word	0xe000ed00

00013b84 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13b84:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13b88:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13b8c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13b8e:	4672      	mov	r2, lr
	bl z_arm_fault
   13b90:	f7ff fed2 	bl	13938 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13b94:	bd01      	pop	{r0, pc}
   13b96:	bf00      	nop

00013b98 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13b98:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13b9a:	2120      	movs	r1, #32
   13b9c:	4803      	ldr	r0, [pc, #12]	; (13bac <z_arm_interrupt_init+0x14>)
   13b9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13ba0:	3301      	adds	r3, #1
   13ba2:	2b45      	cmp	r3, #69	; 0x45
   13ba4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13ba8:	d1f9      	bne.n	13b9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13baa:	4770      	bx	lr
   13bac:	e000e100 	.word	0xe000e100

00013bb0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13bb0:	2000      	movs	r0, #0
    msr CONTROL, r0
   13bb2:	f380 8814 	msr	CONTROL, r0
    isb
   13bb6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   13bba:	2000      	movs	r0, #0
    msr MSPLIM, r0
   13bbc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   13bc0:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13bc4:	f006 ff66 	bl	1aa94 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13bc8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13bca:	490e      	ldr	r1, [pc, #56]	; (13c04 <__start+0x54>)
    str r0, [r1]
   13bcc:	6008      	str	r0, [r1, #0]
    dsb
   13bce:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13bd2:	480d      	ldr	r0, [pc, #52]	; (13c08 <__start+0x58>)
    msr msp, r0
   13bd4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13bd8:	f000 f83c 	bl	13c54 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13bdc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13bde:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13be2:	480a      	ldr	r0, [pc, #40]	; (13c0c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   13be8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13bea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13bee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13bf2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13bf4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13bf6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13bfa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13bfe:	f7ff fc5d 	bl	134bc <z_arm_prep_c>
   13c02:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   13c04:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13c08:	20007e80 	.word	0x20007e80
    ldr r0, =z_interrupt_stacks
   13c0c:	20007fc0 	.word	0x20007fc0

00013c10 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   13c10:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13c14:	4905      	ldr	r1, [pc, #20]	; (13c2c <sys_arch_reboot+0x1c>)
   13c16:	4b06      	ldr	r3, [pc, #24]	; (13c30 <sys_arch_reboot+0x20>)
   13c18:	68ca      	ldr	r2, [r1, #12]
   13c1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13c1e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13c20:	60cb      	str	r3, [r1, #12]
   13c22:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13c26:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13c28:	e7fd      	b.n	13c26 <sys_arch_reboot+0x16>
   13c2a:	bf00      	nop
   13c2c:	e000ed00 	.word	0xe000ed00
   13c30:	05fa0004 	.word	0x05fa0004

00013c34 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   13c34:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   13c36:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13c38:	4a05      	ldr	r2, [pc, #20]	; (13c50 <z_arm_clear_arm_mpu_config+0x1c>)
   13c3a:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   13c3c:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   13c40:	428b      	cmp	r3, r1
   13c42:	d100      	bne.n	13c46 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   13c44:	4770      	bx	lr
  mpu->RNR = rnr;
   13c46:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   13c48:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   13c4a:	3301      	adds	r3, #1
   13c4c:	e7f8      	b.n	13c40 <z_arm_clear_arm_mpu_config+0xc>
   13c4e:	bf00      	nop
   13c50:	e000ed90 	.word	0xe000ed90

00013c54 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13c54:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13c56:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13c58:	2400      	movs	r4, #0
   13c5a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13c5e:	f7ff ffe9 	bl	13c34 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   13c62:	4a0e      	ldr	r2, [pc, #56]	; (13c9c <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   13c64:	4623      	mov	r3, r4
   13c66:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   13c68:	f04f 34ff 	mov.w	r4, #4294967295
   13c6c:	f103 0020 	add.w	r0, r3, #32
   13c70:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13c72:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   13c74:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13c78:	d1f8      	bne.n	13c6c <z_arm_init_arch_hw_at_boot+0x18>
   13c7a:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13c7c:	f04f 30ff 	mov.w	r0, #4294967295
   13c80:	f103 0260 	add.w	r2, r3, #96	; 0x60
   13c84:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13c86:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13c88:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13c8c:	d1f8      	bne.n	13c80 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13c8e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13c94:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13c98:	bd10      	pop	{r4, pc}
   13c9a:	bf00      	nop
   13c9c:	e000e100 	.word	0xe000e100

00013ca0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   13ca0:	4b06      	ldr	r3, [pc, #24]	; (13cbc <z_impl_k_thread_abort+0x1c>)
   13ca2:	689b      	ldr	r3, [r3, #8]
   13ca4:	4283      	cmp	r3, r0
   13ca6:	d107      	bne.n	13cb8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13ca8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13cac:	b123      	cbz	r3, 13cb8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13cae:	4a04      	ldr	r2, [pc, #16]	; (13cc0 <z_impl_k_thread_abort+0x20>)
   13cb0:	6853      	ldr	r3, [r2, #4]
   13cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13cb6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   13cb8:	f002 bf76 	b.w	16ba8 <z_thread_abort>
   13cbc:	20000a34 	.word	0x20000a34
   13cc0:	e000ed00 	.word	0xe000ed00

00013cc4 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   13cc4:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   13cc6:	4b0d      	ldr	r3, [pc, #52]	; (13cfc <tz_nonsecure_state_setup+0x38>)
   13cc8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   13cca:	6803      	ldr	r3, [r0, #0]
   13ccc:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   13cd0:	6843      	ldr	r3, [r0, #4]
   13cd2:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   13cd6:	7b02      	ldrb	r2, [r0, #12]
   13cd8:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   13cdc:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   13ce0:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   13ce4:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   13ce6:	bf48      	it	mi
   13ce8:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   13cec:	b109      	cbz	r1, 13cf2 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   13cee:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   13cf2:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
   13cf6:	f3bf 8f6f 	isb	sy
}
   13cfa:	4770      	bx	lr
   13cfc:	e002ed00 	.word	0xe002ed00

00013d00 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   13d00:	4a08      	ldr	r2, [pc, #32]	; (13d24 <tz_nbanked_exception_target_state_set+0x24>)
   13d02:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   13d04:	b148      	cbz	r0, 13d1a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   13d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   13d0a:	041b      	lsls	r3, r3, #16
   13d0c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   13d0e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   13d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   13d16:	60d3      	str	r3, [r2, #12]
}
   13d18:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   13d1a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   13d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13d20:	e7f5      	b.n	13d0e <tz_nbanked_exception_target_state_set+0xe>
   13d22:	bf00      	nop
   13d24:	e000ed00 	.word	0xe000ed00

00013d28 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   13d28:	4a08      	ldr	r2, [pc, #32]	; (13d4c <tz_nonsecure_exception_prio_config+0x24>)
   13d2a:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   13d2c:	b140      	cbz	r0, 13d40 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   13d2e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   13d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   13d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   13d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   13d3c:	60d3      	str	r3, [r2, #12]
}
   13d3e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   13d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   13d44:	041b      	lsls	r3, r3, #16
   13d46:	0c1b      	lsrs	r3, r3, #16
   13d48:	e7f4      	b.n	13d34 <tz_nonsecure_exception_prio_config+0xc>
   13d4a:	bf00      	nop
   13d4c:	e000ed00 	.word	0xe000ed00

00013d50 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   13d50:	4a08      	ldr	r2, [pc, #32]	; (13d74 <tz_nonsecure_system_reset_req_block+0x24>)
   13d52:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   13d54:	b140      	cbz	r0, 13d68 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   13d56:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   13d58:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   13d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   13d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   13d64:	60d3      	str	r3, [r2, #12]
}
   13d66:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   13d68:	f023 0308 	bic.w	r3, r3, #8
   13d6c:	041b      	lsls	r3, r3, #16
   13d6e:	0c1b      	lsrs	r3, r3, #16
   13d70:	e7f4      	b.n	13d5c <tz_nonsecure_system_reset_req_block+0xc>
   13d72:	bf00      	nop
   13d74:	e000ed00 	.word	0xe000ed00

00013d78 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   13d78:	4a03      	ldr	r2, [pc, #12]	; (13d88 <tz_nonsecure_fpu_access_enable+0x10>)
   13d7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   13d7e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   13d82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   13d86:	4770      	bx	lr
   13d88:	e000ed00 	.word	0xe000ed00

00013d8c <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   13d8c:	4b08      	ldr	r3, [pc, #32]	; (13db0 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   13d8e:	681a      	ldr	r2, [r3, #0]
   13d90:	b118      	cbz	r0, 13d9a <tz_sau_configure+0xe>
   13d92:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   13d96:	601a      	str	r2, [r3, #0]
		}
	}
}
   13d98:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   13d9a:	f022 0201 	bic.w	r2, r2, #1
   13d9e:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   13da0:	681a      	ldr	r2, [r3, #0]
		if (allns) {
   13da2:	b111      	cbz	r1, 13daa <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   13da4:	f042 0202 	orr.w	r2, r2, #2
   13da8:	e7f5      	b.n	13d96 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   13daa:	f022 0202 	bic.w	r2, r2, #2
   13dae:	e7f2      	b.n	13d96 <tz_sau_configure+0xa>
   13db0:	e000edd0 	.word	0xe000edd0

00013db4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13db6:	4c09      	ldr	r4, [pc, #36]	; (13ddc <z_arm_configure_static_mpu_regions+0x28>)
   13db8:	4a09      	ldr	r2, [pc, #36]	; (13de0 <z_arm_configure_static_mpu_regions+0x2c>)
   13dba:	4623      	mov	r3, r4
   13dbc:	2101      	movs	r1, #1
   13dbe:	4809      	ldr	r0, [pc, #36]	; (13de4 <z_arm_configure_static_mpu_regions+0x30>)
   13dc0:	f000 f91a 	bl	13ff8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   13dc4:	2300      	movs	r3, #0
   13dc6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   13dc8:	4b07      	ldr	r3, [pc, #28]	; (13de8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13dca:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   13dcc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13dce:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   13dd0:	9301      	str	r3, [sp, #4]
   13dd2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13dd4:	f000 f92c 	bl	14030 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13dd8:	b004      	add	sp, #16
   13dda:	bd10      	pop	{r4, pc}
   13ddc:	20010000 	.word	0x20010000
   13de0:	20000000 	.word	0x20000000
   13de4:	0001d15c 	.word	0x0001d15c
   13de8:	20000120 	.word	0x20000120

00013dec <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   13dec:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13dee:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   13df0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13df2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   13df6:	f004 031f 	and.w	r3, r4, #31
   13dfa:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13dfc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13dfe:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13e00:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   13e04:	4904      	ldr	r1, [pc, #16]	; (13e18 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13e06:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   13e0a:	f043 0301 	orr.w	r3, r3, #1
   13e0e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   13e10:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   13e12:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   13e14:	bd10      	pop	{r4, pc}
   13e16:	bf00      	nop
   13e18:	e000ed90 	.word	0xe000ed90

00013e1c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   13e1c:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   13e1e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   13e20:	680c      	ldr	r4, [r1, #0]
{
   13e22:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   13e24:	890a      	ldrh	r2, [r1, #8]
   13e26:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   13e28:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13e2a:	3b01      	subs	r3, #1
   13e2c:	f024 041f 	bic.w	r4, r4, #31
   13e30:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   13e32:	f002 021f 	and.w	r2, r2, #31
   13e36:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13e3a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   13e3e:	2807      	cmp	r0, #7
   13e40:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   13e42:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13e46:	9303      	str	r3, [sp, #12]
   13e48:	d909      	bls.n	13e5e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13e4a:	4602      	mov	r2, r0
   13e4c:	2145      	movs	r1, #69	; 0x45
   13e4e:	4806      	ldr	r0, [pc, #24]	; (13e68 <mpu_configure_region+0x4c>)
   13e50:	f006 fb7d 	bl	1a54e <z_log_minimal_printk>
   13e54:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   13e58:	4620      	mov	r0, r4
   13e5a:	b005      	add	sp, #20
   13e5c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   13e5e:	4669      	mov	r1, sp
   13e60:	f7ff ffc4 	bl	13dec <region_init>
	return region_allocate_and_init(index,
   13e64:	e7f8      	b.n	13e58 <mpu_configure_region+0x3c>
   13e66:	bf00      	nop
   13e68:	0001e02d 	.word	0x0001e02d

00013e6c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   13e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e70:	4689      	mov	r9, r1
   13e72:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13e74:	4606      	mov	r6, r0
   13e76:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   13e7a:	4d52      	ldr	r5, [pc, #328]	; (13fc4 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   13e7c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   13e7e:	45c8      	cmp	r8, r9
   13e80:	da23      	bge.n	13eca <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
   13e82:	6877      	ldr	r7, [r6, #4]
   13e84:	2f00      	cmp	r7, #0
   13e86:	d042      	beq.n	13f0e <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
   13e88:	2f1f      	cmp	r7, #31
   13e8a:	d917      	bls.n	13ebc <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
   13e8c:	06fb      	lsls	r3, r7, #27
   13e8e:	d115      	bne.n	13ebc <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
   13e90:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   13e94:	f01a 0f1f 	tst.w	sl, #31
   13e98:	d110      	bne.n	13ebc <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13e9a:	4650      	mov	r0, sl
   13e9c:	f006 fbaf 	bl	1a5fe <arm_cmse_mpu_region_get>
   13ea0:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   13ea2:	eb07 000a 	add.w	r0, r7, sl
   13ea6:	3801      	subs	r0, #1
   13ea8:	f006 fba9 	bl	1a5fe <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   13eac:	4583      	cmp	fp, r0
   13eae:	d010      	beq.n	13ed2 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
   13eb0:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   13eb4:	465a      	mov	r2, fp
   13eb6:	2145      	movs	r1, #69	; 0x45
   13eb8:	4843      	ldr	r0, [pc, #268]	; (13fc8 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
   13eba:	e002      	b.n	13ec2 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
   13ebc:	4642      	mov	r2, r8
   13ebe:	2145      	movs	r1, #69	; 0x45
   13ec0:	4842      	ldr	r0, [pc, #264]	; (13fcc <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13ec2:	f006 fb44 	bl	1a54e <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   13ec6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   13eca:	4620      	mov	r0, r4
   13ecc:	b005      	add	sp, #20
   13ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   13ed2:	f11b 0f16 	cmn.w	fp, #22
   13ed6:	d0ed      	beq.n	13eb4 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
   13ed8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   13eda:	455b      	cmp	r3, fp
   13edc:	dbea      	blt.n	13eb4 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
   13ede:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   13ee2:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   13ee4:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13ee8:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   13eea:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   13eee:	e9d6 3200 	ldrd	r3, r2, [r6]
   13ef2:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   13ef4:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13ef6:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   13efa:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   13efe:	d11c      	bne.n	13f3a <mpu_configure_regions_and_partition.constprop.0+0xce>
   13f00:	4557      	cmp	r7, sl
   13f02:	d108      	bne.n	13f16 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
   13f04:	4631      	mov	r1, r6
   13f06:	fa5f f08b 	uxtb.w	r0, fp
   13f0a:	f7ff ff87 	bl	13e1c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   13f0e:	f108 0801 	add.w	r8, r8, #1
   13f12:	360c      	adds	r6, #12
   13f14:	e7b3      	b.n	13e7e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   13f16:	4631      	mov	r1, r6
	MPU->RNR = index;
   13f18:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f1c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   13f1e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f22:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   13f26:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f28:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   13f2a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   13f2c:	f7ff ff76 	bl	13e1c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13f30:	f110 0f16 	cmn.w	r0, #22
   13f34:	d0c7      	beq.n	13ec6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
   13f36:	1c44      	adds	r4, r0, #1
   13f38:	e7e9      	b.n	13f0e <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
   13f3a:	3b01      	subs	r3, #1
   13f3c:	4557      	cmp	r7, sl
   13f3e:	b2e0      	uxtb	r0, r4
   13f40:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   13f44:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
   13f48:	d106      	bne.n	13f58 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13f4a:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   13f4c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13f4e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   13f52:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13f54:	612b      	str	r3, [r5, #16]
			reg_index =
   13f56:	e7e9      	b.n	13f2c <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13f58:	6929      	ldr	r1, [r5, #16]
   13f5a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   13f5e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13f60:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   13f62:	4631      	mov	r1, r6
   13f64:	f7ff ff5a 	bl	13e1c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13f68:	f110 0f16 	cmn.w	r0, #22
   13f6c:	d0ab      	beq.n	13ec6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
   13f6e:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   13f72:	68ea      	ldr	r2, [r5, #12]
   13f74:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   13f78:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
   13f7a:	f362 0304 	bfi	r3, r2, #0, #5
   13f7e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   13f82:	692b      	ldr	r3, [r5, #16]
   13f84:	f89d 2008 	ldrb.w	r2, [sp, #8]
   13f88:	085b      	lsrs	r3, r3, #1
   13f8a:	f363 1247 	bfi	r2, r3, #5, #3
   13f8e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   13f92:	e9d6 3200 	ldrd	r3, r2, [r6]
   13f96:	4413      	add	r3, r2
   13f98:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   13f9a:	f023 031f 	bic.w	r3, r3, #31
   13f9e:	443b      	add	r3, r7
			reg_index++;
   13fa0:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   13fa2:	eba3 0a0a 	sub.w	sl, r3, sl
   13fa6:	b2e0      	uxtb	r0, r4
   13fa8:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
   13fac:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
   13fae:	9303      	str	r3, [sp, #12]
   13fb0:	d903      	bls.n	13fba <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13fb2:	4602      	mov	r2, r0
   13fb4:	2145      	movs	r1, #69	; 0x45
   13fb6:	4806      	ldr	r0, [pc, #24]	; (13fd0 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   13fb8:	e783      	b.n	13ec2 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
   13fba:	4669      	mov	r1, sp
   13fbc:	f7ff ff16 	bl	13dec <region_init>
   13fc0:	e7b9      	b.n	13f36 <mpu_configure_regions_and_partition.constprop.0+0xca>
   13fc2:	bf00      	nop
   13fc4:	e000ed90 	.word	0xe000ed90
   13fc8:	0001e080 	.word	0x0001e080
   13fcc:	0001e058 	.word	0x0001e058
   13fd0:	0001e02d 	.word	0x0001e02d

00013fd4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13fd4:	2205      	movs	r2, #5
   13fd6:	4b03      	ldr	r3, [pc, #12]	; (13fe4 <arm_core_mpu_enable+0x10>)
   13fd8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13fde:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13fe2:	4770      	bx	lr
   13fe4:	e000ed90 	.word	0xe000ed90

00013fe8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13fe8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13fec:	2200      	movs	r2, #0
   13fee:	4b01      	ldr	r3, [pc, #4]	; (13ff4 <arm_core_mpu_disable+0xc>)
   13ff0:	605a      	str	r2, [r3, #4]
}
   13ff2:	4770      	bx	lr
   13ff4:	e000ed90 	.word	0xe000ed90

00013ff8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13ff8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13ffa:	4c0a      	ldr	r4, [pc, #40]	; (14024 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   13ffc:	7822      	ldrb	r2, [r4, #0]
   13ffe:	f7ff ff35 	bl	13e6c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14002:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14004:	3016      	adds	r0, #22
   14006:	d10c      	bne.n	14022 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14008:	4907      	ldr	r1, [pc, #28]	; (14028 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1400a:	4808      	ldr	r0, [pc, #32]	; (1402c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1400c:	f240 1211 	movw	r2, #273	; 0x111
   14010:	f006 f9be 	bl	1a390 <printk>
			regions_num);
	}
}
   14014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14018:	f240 1111 	movw	r1, #273	; 0x111
   1401c:	4802      	ldr	r0, [pc, #8]	; (14028 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1401e:	f006 ba83 	b.w	1a528 <assert_post_action>
}
   14022:	bd10      	pop	{r4, pc}
   14024:	200018bc 	.word	0x200018bc
   14028:	0001e0a8 	.word	0x0001e0a8
   1402c:	0001d506 	.word	0x0001d506

00014030 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   14030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14034:	4d2d      	ldr	r5, [pc, #180]	; (140ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
   14036:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14038:	4606      	mov	r6, r0
   1403a:	f04f 0800 	mov.w	r8, #0
   1403e:	46ab      	mov	fp, r5
	MPU->RNR = index;
   14040:	4f2b      	ldr	r7, [pc, #172]	; (140f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14042:	45d0      	cmp	r8, sl
   14044:	db02      	blt.n	1404c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   14046:	b003      	add	sp, #12
   14048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1404c:	f8d6 9004 	ldr.w	r9, [r6, #4]
   14050:	f1b9 0f00 	cmp.w	r9, #0
   14054:	d044      	beq.n	140e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   14056:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14058:	4608      	mov	r0, r1
   1405a:	9101      	str	r1, [sp, #4]
   1405c:	f006 facf 	bl	1a5fe <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14060:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14062:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14064:	eb09 0001 	add.w	r0, r9, r1
   14068:	3801      	subs	r0, #1
   1406a:	f006 fac8 	bl	1a5fe <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1406e:	4284      	cmp	r4, r0
   14070:	f04f 0214 	mov.w	r2, #20
   14074:	4b1f      	ldr	r3, [pc, #124]	; (140f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   14076:	d013      	beq.n	140a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   14078:	f06f 0315 	mvn.w	r3, #21
   1407c:	fb02 f808 	mul.w	r8, r2, r8
   14080:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   14084:	f240 1221 	movw	r2, #289	; 0x121
   14088:	491b      	ldr	r1, [pc, #108]	; (140f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   1408a:	481c      	ldr	r0, [pc, #112]	; (140fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1408c:	f006 f980 	bl	1a390 <printk>
   14090:	f240 1121 	movw	r1, #289	; 0x121
   14094:	4818      	ldr	r0, [pc, #96]	; (140f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
   14096:	b003      	add	sp, #12
   14098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1409c:	f006 ba44 	b.w	1a528 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   140a0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   140a4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   140a6:	d0ed      	beq.n	14084 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   140a8:	7819      	ldrb	r1, [r3, #0]
   140aa:	42a1      	cmp	r1, r4
   140ac:	ddea      	ble.n	14084 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   140ae:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   140b2:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   140b4:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   140b6:	68fc      	ldr	r4, [r7, #12]
   140b8:	f100 0108 	add.w	r1, r0, #8
   140bc:	7b00      	ldrb	r0, [r0, #12]
   140be:	f364 0004 	bfi	r0, r4, #0, #5
   140c2:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   140c4:	6938      	ldr	r0, [r7, #16]
   140c6:	790c      	ldrb	r4, [r1, #4]
   140c8:	0840      	lsrs	r0, r0, #1
   140ca:	f360 1447 	bfi	r4, r0, #5, #3
   140ce:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   140d0:	68f9      	ldr	r1, [r7, #12]
   140d2:	f021 011f 	bic.w	r1, r1, #31
   140d6:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   140d8:	6939      	ldr	r1, [r7, #16]
   140da:	f021 011f 	bic.w	r1, r1, #31
   140de:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   140e0:	f108 0801 	add.w	r8, r8, #1
   140e4:	3514      	adds	r5, #20
   140e6:	360c      	adds	r6, #12
   140e8:	e7ab      	b.n	14042 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   140ea:	bf00      	nop
   140ec:	20000940 	.word	0x20000940
   140f0:	e000ed90 	.word	0xe000ed90
   140f4:	200018bc 	.word	0x200018bc
   140f8:	0001e0a8 	.word	0x0001e0a8
   140fc:	0001d506 	.word	0x0001d506

00014100 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   14100:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14102:	4d1b      	ldr	r5, [pc, #108]	; (14170 <z_arm_mpu_init+0x70>)
   14104:	682e      	ldr	r6, [r5, #0]
   14106:	2e08      	cmp	r6, #8
   14108:	d90d      	bls.n	14126 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1410a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1410e:	4919      	ldr	r1, [pc, #100]	; (14174 <z_arm_mpu_init+0x74>)
   14110:	4819      	ldr	r0, [pc, #100]	; (14178 <z_arm_mpu_init+0x78>)
   14112:	f006 f93d 	bl	1a390 <printk>
   14116:	4817      	ldr	r0, [pc, #92]	; (14174 <z_arm_mpu_init+0x74>)
   14118:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1411c:	f006 fa04 	bl	1a528 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   14120:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14124:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   14126:	f7ff ff5f 	bl	13fe8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1412a:	2000      	movs	r0, #0
	MPU->MAIR0 =
   1412c:	4c13      	ldr	r4, [pc, #76]	; (1417c <z_arm_mpu_init+0x7c>)
   1412e:	4a14      	ldr	r2, [pc, #80]	; (14180 <z_arm_mpu_init+0x80>)
   14130:	6322      	str	r2, [r4, #48]	; 0x30
   14132:	4286      	cmp	r6, r0
   14134:	d115      	bne.n	14162 <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
   14136:	4b13      	ldr	r3, [pc, #76]	; (14184 <z_arm_mpu_init+0x84>)
   14138:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   1413a:	f7ff ff4b 	bl	13fd4 <arm_core_mpu_enable>
	__ASSERT(
   1413e:	6823      	ldr	r3, [r4, #0]
   14140:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14144:	2b08      	cmp	r3, #8
   14146:	d00a      	beq.n	1415e <z_arm_mpu_init+0x5e>
   14148:	490a      	ldr	r1, [pc, #40]	; (14174 <z_arm_mpu_init+0x74>)
   1414a:	480b      	ldr	r0, [pc, #44]	; (14178 <z_arm_mpu_init+0x78>)
   1414c:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   14150:	f006 f91e 	bl	1a390 <printk>
   14154:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   14158:	4806      	ldr	r0, [pc, #24]	; (14174 <z_arm_mpu_init+0x74>)
   1415a:	f006 f9e5 	bl	1a528 <assert_post_action>
	return 0;
   1415e:	2000      	movs	r0, #0
   14160:	e7e0      	b.n	14124 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14162:	6869      	ldr	r1, [r5, #4]
   14164:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   14168:	f7ff fe40 	bl	13dec <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1416c:	3001      	adds	r0, #1
   1416e:	e7e0      	b.n	14132 <z_arm_mpu_init+0x32>
   14170:	0001d168 	.word	0x0001d168
   14174:	0001e0a8 	.word	0x0001e0a8
   14178:	0001d506 	.word	0x0001d506
   1417c:	e000ed90 	.word	0xe000ed90
   14180:	0044ffaa 	.word	0x0044ffaa
   14184:	200018bc 	.word	0x200018bc

00014188 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14188:	4b01      	ldr	r3, [pc, #4]	; (14190 <__stdout_hook_install+0x8>)
   1418a:	6018      	str	r0, [r3, #0]
}
   1418c:	4770      	bx	lr
   1418e:	bf00      	nop
   14190:	20000028 	.word	0x20000028

00014194 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   14198:	4c0e      	ldr	r4, [pc, #56]	; (141d4 <onoff_start+0x40>)
{
   1419a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1419c:	1b05      	subs	r5, r0, r4
   1419e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   141a2:	250c      	movs	r5, #12
   141a4:	435d      	muls	r5, r3
   141a6:	f105 0088 	add.w	r0, r5, #136	; 0x88
{
   141aa:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   141ac:	4420      	add	r0, r4
   141ae:	2140      	movs	r1, #64	; 0x40
   141b0:	f006 fa81 	bl	1a6b6 <set_starting_state>
	if (err < 0) {
   141b4:	1e01      	subs	r1, r0, #0
   141b6:	db08      	blt.n	141ca <onoff_start+0x36>
	subdata->cb = cb;
   141b8:	4b07      	ldr	r3, [pc, #28]	; (141d8 <onoff_start+0x44>)
   141ba:	442c      	add	r4, r5
	subdata->user_data = user_data;
   141bc:	e9c4 3620 	strd	r3, r6, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   141c0:	4b06      	ldr	r3, [pc, #24]	; (141dc <onoff_start+0x48>)
   141c2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   141c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   141c8:	4718      	bx	r3
		notify(mgr, err);
   141ca:	4638      	mov	r0, r7
   141cc:	4633      	mov	r3, r6
}
   141ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   141d2:	4718      	bx	r3
   141d4:	20000964 	.word	0x20000964
   141d8:	0001a719 	.word	0x0001a719
   141dc:	0001d1a4 	.word	0x0001d1a4

000141e0 <get_status>:
{
   141e0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   141e2:	b2cc      	uxtb	r4, r1
   141e4:	2c03      	cmp	r4, #3
{
   141e6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   141e8:	d908      	bls.n	141fc <get_status+0x1c>
   141ea:	4909      	ldr	r1, [pc, #36]	; (14210 <get_status+0x30>)
   141ec:	4809      	ldr	r0, [pc, #36]	; (14214 <get_status+0x34>)
   141ee:	227e      	movs	r2, #126	; 0x7e
   141f0:	f006 f8ce 	bl	1a390 <printk>
   141f4:	217e      	movs	r1, #126	; 0x7e
   141f6:	4806      	ldr	r0, [pc, #24]	; (14210 <get_status+0x30>)
   141f8:	f006 f996 	bl	1a528 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   141fc:	210c      	movs	r1, #12
   141fe:	692b      	ldr	r3, [r5, #16]
   14200:	fb04 3401 	mla	r4, r4, r1, r3
   14204:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
   14208:	f000 0007 	and.w	r0, r0, #7
   1420c:	bd38      	pop	{r3, r4, r5, pc}
   1420e:	bf00      	nop
   14210:	0001e0ee 	.word	0x0001e0ee
   14214:	0001d506 	.word	0x0001d506

00014218 <stop>:
{
   14218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1421a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1421c:	2c03      	cmp	r4, #3
{
   1421e:	4605      	mov	r5, r0
   14220:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14222:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   14224:	d90a      	bls.n	1423c <stop+0x24>
   14226:	4919      	ldr	r1, [pc, #100]	; (1428c <stop+0x74>)
   14228:	4819      	ldr	r0, [pc, #100]	; (14290 <stop+0x78>)
   1422a:	f240 1253 	movw	r2, #339	; 0x153
   1422e:	f006 f8af 	bl	1a390 <printk>
   14232:	f240 1153 	movw	r1, #339	; 0x153
   14236:	4815      	ldr	r0, [pc, #84]	; (1428c <stop+0x74>)
   14238:	f006 f976 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   1423c:	f04f 0320 	mov.w	r3, #32
   14240:	f3ef 8211 	mrs	r2, BASEPRI
   14244:	f383 8812 	msr	BASEPRI_MAX, r3
   14248:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1424c:	230c      	movs	r3, #12
   1424e:	fb03 7104 	mla	r1, r3, r4, r7
   14252:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   14256:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   1425a:	d001      	beq.n	14260 <stop+0x48>
   1425c:	428e      	cmp	r6, r1
   1425e:	d112      	bne.n	14286 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   14260:	2101      	movs	r1, #1
	int err = 0;
   14262:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   14264:	fb03 7304 	mla	r3, r3, r4, r7
   14268:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	__asm__ volatile(
   1426c:	f382 8811 	msr	BASEPRI, r2
   14270:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   14274:	b930      	cbnz	r0, 14284 <stop+0x6c>
	get_sub_config(dev, type)->stop();
   14276:	230c      	movs	r3, #12
   14278:	6869      	ldr	r1, [r5, #4]
   1427a:	fb03 1404 	mla	r4, r3, r4, r1
   1427e:	6863      	ldr	r3, [r4, #4]
   14280:	4798      	blx	r3
	return 0;
   14282:	2000      	movs	r0, #0
}
   14284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   14286:	f04f 30ff 	mov.w	r0, #4294967295
   1428a:	e7ef      	b.n	1426c <stop+0x54>
   1428c:	0001e0ee 	.word	0x0001e0ee
   14290:	0001d506 	.word	0x0001d506

00014294 <onoff_stop>:
{
   14294:	b570      	push	{r4, r5, r6, lr}
   14296:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   14298:	4906      	ldr	r1, [pc, #24]	; (142b4 <onoff_stop+0x20>)
{
   1429a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1429c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1429e:	1149      	asrs	r1, r1, #5
   142a0:	2240      	movs	r2, #64	; 0x40
   142a2:	4805      	ldr	r0, [pc, #20]	; (142b8 <onoff_stop+0x24>)
   142a4:	f7ff ffb8 	bl	14218 <stop>
	notify(mgr, res);
   142a8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   142aa:	4601      	mov	r1, r0
	notify(mgr, res);
   142ac:	4620      	mov	r0, r4
}
   142ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   142b2:	4718      	bx	r3
   142b4:	20000964 	.word	0x20000964
   142b8:	0001aaf0 	.word	0x0001aaf0

000142bc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   142bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   142c0:	2200      	movs	r2, #0
   142c2:	2101      	movs	r1, #1
{
   142c4:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   142c6:	2005      	movs	r0, #5
   142c8:	f7ff f8ce 	bl	13468 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   142cc:	2005      	movs	r0, #5
   142ce:	f7ff f8ad 	bl	1342c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   142d2:	4811      	ldr	r0, [pc, #68]	; (14318 <clk_init+0x5c>)
   142d4:	f000 fe9a 	bl	1500c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   142d8:	4b10      	ldr	r3, [pc, #64]	; (1431c <clk_init+0x60>)
   142da:	4298      	cmp	r0, r3
   142dc:	d119      	bne.n	14312 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   142de:	f000 feb5 	bl	1504c <nrfx_clock_enable>
   142e2:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   142e4:	f04f 080c 	mov.w	r8, #12
   142e8:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   142ea:	f8df 9034 	ldr.w	r9, [pc, #52]	; 14320 <clk_init+0x64>
						get_sub_data(dev, i);
   142ee:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   142f0:	4649      	mov	r1, r9
   142f2:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   142f6:	f006 f899 	bl	1a42c <onoff_manager_init>
		if (err < 0) {
   142fa:	2800      	cmp	r0, #0
   142fc:	db07      	blt.n	1430e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   142fe:	fb08 5504 	mla	r5, r8, r4, r5
   14302:	3401      	adds	r4, #1
	for (enum clock_control_nrf_type i = 0;
   14304:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14306:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
   1430a:	d1f0      	bne.n	142ee <clk_init+0x32>
	}

	return 0;
   1430c:	2000      	movs	r0, #0
}
   1430e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   14312:	f06f 0004 	mvn.w	r0, #4
   14316:	e7fa      	b.n	1430e <clk_init+0x52>
   14318:	0001435d 	.word	0x0001435d
   1431c:	0bad0000 	.word	0x0bad0000
   14320:	0001d1d4 	.word	0x0001d1d4

00014324 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14324:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   14326:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   14328:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1432a:	434b      	muls	r3, r1
   1432c:	4809      	ldr	r0, [pc, #36]	; (14354 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
   1432e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   14330:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   14332:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   14334:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   14338:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1433a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1433e:	f006 f9d8 	bl	1a6f2 <set_on_state>
	if (callback) {
   14342:	b12d      	cbz	r5, 14350 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14344:	4632      	mov	r2, r6
   14346:	462b      	mov	r3, r5
}
   14348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1434c:	4802      	ldr	r0, [pc, #8]	; (14358 <clkstarted_handle.constprop.0+0x34>)
   1434e:	4718      	bx	r3
}
   14350:	bd70      	pop	{r4, r5, r6, pc}
   14352:	bf00      	nop
   14354:	20000964 	.word	0x20000964
   14358:	0001aaf0 	.word	0x0001aaf0

0001435c <clock_event_handler>:
{
   1435c:	b508      	push	{r3, lr}
   1435e:	2805      	cmp	r0, #5
   14360:	d821      	bhi.n	143a6 <clock_event_handler+0x4a>
   14362:	e8df f000 	tbb	[pc, r0]
   14366:	1103      	.short	0x1103
   14368:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1436c:	4b13      	ldr	r3, [pc, #76]	; (143bc <clock_event_handler+0x60>)
   1436e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   14372:	f010 0007 	ands.w	r0, r0, #7
   14376:	d11f      	bne.n	143b8 <clock_event_handler+0x5c>
}
   14378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1437c:	f7ff bfd2 	b.w	14324 <clkstarted_handle.constprop.0>
   14380:	2002      	movs	r0, #2
   14382:	e7f9      	b.n	14378 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   14384:	2003      	movs	r0, #3
   14386:	e7f7      	b.n	14378 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14388:	2001      	movs	r0, #1
   1438a:	e7f5      	b.n	14378 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1438c:	490c      	ldr	r1, [pc, #48]	; (143c0 <clock_event_handler+0x64>)
   1438e:	f240 2266 	movw	r2, #614	; 0x266
   14392:	480c      	ldr	r0, [pc, #48]	; (143c4 <clock_event_handler+0x68>)
   14394:	f005 fffc 	bl	1a390 <printk>
   14398:	f240 2166 	movw	r1, #614	; 0x266
}
   1439c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   143a0:	4807      	ldr	r0, [pc, #28]	; (143c0 <clock_event_handler+0x64>)
   143a2:	f006 b8c1 	b.w	1a528 <assert_post_action>
   143a6:	4906      	ldr	r1, [pc, #24]	; (143c0 <clock_event_handler+0x64>)
   143a8:	f240 226a 	movw	r2, #618	; 0x26a
   143ac:	4805      	ldr	r0, [pc, #20]	; (143c4 <clock_event_handler+0x68>)
   143ae:	f005 ffef 	bl	1a390 <printk>
   143b2:	f240 216a 	movw	r1, #618	; 0x26a
   143b6:	e7f1      	b.n	1439c <clock_event_handler+0x40>
}
   143b8:	bd08      	pop	{r3, pc}
   143ba:	bf00      	nop
   143bc:	20000964 	.word	0x20000964
   143c0:	0001e0ee 	.word	0x0001e0ee
   143c4:	0001d506 	.word	0x0001d506

000143c8 <generic_hfclk_start>:
{
   143c8:	b508      	push	{r3, lr}
	__asm__ volatile(
   143ca:	f04f 0320 	mov.w	r3, #32
   143ce:	f3ef 8111 	mrs	r1, BASEPRI
   143d2:	f383 8812 	msr	BASEPRI_MAX, r3
   143d6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   143da:	4a12      	ldr	r2, [pc, #72]	; (14424 <generic_hfclk_start+0x5c>)
   143dc:	6813      	ldr	r3, [r2, #0]
   143de:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   143e2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   143e6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   143e8:	d00c      	beq.n	14404 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   143ea:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   143ee:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   143f2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   143f6:	f013 0301 	ands.w	r3, r3, #1
   143fa:	d003      	beq.n	14404 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   143fc:	480a      	ldr	r0, [pc, #40]	; (14428 <generic_hfclk_start+0x60>)
   143fe:	f006 f978 	bl	1a6f2 <set_on_state>
			already_started = true;
   14402:	2301      	movs	r3, #1
	__asm__ volatile(
   14404:	f381 8811 	msr	BASEPRI, r1
   14408:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1440c:	b123      	cbz	r3, 14418 <generic_hfclk_start+0x50>
}
   1440e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   14412:	2000      	movs	r0, #0
   14414:	f7ff bf86 	b.w	14324 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14418:	2001      	movs	r0, #1
}
   1441a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1441e:	f000 be37 	b.w	15090 <nrfx_clock_start>
   14422:	bf00      	nop
   14424:	20000a14 	.word	0x20000a14
   14428:	200009ec 	.word	0x200009ec

0001442c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1442c:	4b07      	ldr	r3, [pc, #28]	; (1444c <generic_hfclk_stop+0x20>)
   1442e:	e8d3 2fef 	ldaex	r2, [r3]
   14432:	f022 0102 	bic.w	r1, r2, #2
   14436:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1443a:	2800      	cmp	r0, #0
   1443c:	d1f7      	bne.n	1442e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1443e:	07d3      	lsls	r3, r2, #31
   14440:	d402      	bmi.n	14448 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14442:	2001      	movs	r0, #1
   14444:	f000 be9a 	b.w	1517c <nrfx_clock_stop>
}
   14448:	4770      	bx	lr
   1444a:	bf00      	nop
   1444c:	20000a14 	.word	0x20000a14

00014450 <api_blocking_start>:
{
   14450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14452:	2200      	movs	r2, #0
   14454:	2301      	movs	r3, #1
   14456:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1445a:	466b      	mov	r3, sp
   1445c:	4a08      	ldr	r2, [pc, #32]	; (14480 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1445e:	f8cd d000 	str.w	sp, [sp]
   14462:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14466:	f006 f975 	bl	1a754 <api_start>
	if (err < 0) {
   1446a:	2800      	cmp	r0, #0
   1446c:	db05      	blt.n	1447a <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1446e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14472:	2300      	movs	r3, #0
   14474:	4668      	mov	r0, sp
   14476:	f001 fc67 	bl	15d48 <z_impl_k_sem_take>
}
   1447a:	b005      	add	sp, #20
   1447c:	f85d fb04 	ldr.w	pc, [sp], #4
   14480:	0001a74f 	.word	0x0001a74f

00014484 <z_nrf_clock_control_lf_on>:
{
   14484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14488:	2201      	movs	r2, #1
   1448a:	4605      	mov	r5, r0
   1448c:	4946      	ldr	r1, [pc, #280]	; (145a8 <z_nrf_clock_control_lf_on+0x124>)
   1448e:	e8d1 3fef 	ldaex	r3, [r1]
   14492:	e8c1 2fe0 	stlex	r0, r2, [r1]
   14496:	2800      	cmp	r0, #0
   14498:	d1f9      	bne.n	1448e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1449a:	b99b      	cbnz	r3, 144c4 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1449c:	4943      	ldr	r1, [pc, #268]	; (145ac <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
   1449e:	4844      	ldr	r0, [pc, #272]	; (145b0 <z_nrf_clock_control_lf_on+0x12c>)
   144a0:	604b      	str	r3, [r1, #4]
   144a2:	60cb      	str	r3, [r1, #12]
   144a4:	608a      	str	r2, [r1, #8]
   144a6:	f7fd feef 	bl	12288 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   144aa:	2800      	cmp	r0, #0
   144ac:	da0a      	bge.n	144c4 <z_nrf_clock_control_lf_on+0x40>
   144ae:	4941      	ldr	r1, [pc, #260]	; (145b4 <z_nrf_clock_control_lf_on+0x130>)
   144b0:	4841      	ldr	r0, [pc, #260]	; (145b8 <z_nrf_clock_control_lf_on+0x134>)
   144b2:	f240 2226 	movw	r2, #550	; 0x226
   144b6:	f005 ff6b 	bl	1a390 <printk>
   144ba:	f240 2126 	movw	r1, #550	; 0x226
   144be:	483d      	ldr	r0, [pc, #244]	; (145b4 <z_nrf_clock_control_lf_on+0x130>)
   144c0:	f006 f832 	bl	1a528 <assert_post_action>
	switch (start_mode) {
   144c4:	b3ad      	cbz	r5, 14532 <z_nrf_clock_control_lf_on+0xae>
   144c6:	1e6b      	subs	r3, r5, #1
   144c8:	2b01      	cmp	r3, #1
   144ca:	d859      	bhi.n	14580 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   144cc:	2d01      	cmp	r5, #1
   144ce:	d107      	bne.n	144e0 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   144d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   144d4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   144d8:	f003 0303 	and.w	r3, r3, #3
   144dc:	2b02      	cmp	r3, #2
   144de:	d028      	beq.n	14532 <z_nrf_clock_control_lf_on+0xae>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   144e0:	f006 fa99 	bl	1aa16 <k_is_in_isr>
   144e4:	4604      	mov	r4, r0
   144e6:	b918      	cbnz	r0, 144f0 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   144e8:	4b34      	ldr	r3, [pc, #208]	; (145bc <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   144ea:	781b      	ldrb	r3, [r3, #0]
   144ec:	2b00      	cmp	r3, #0
   144ee:	d154      	bne.n	1459a <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
   144f0:	f04f 0320 	mov.w	r3, #32
   144f4:	f3ef 8611 	mrs	r6, BASEPRI
   144f8:	f383 8812 	msr	BASEPRI_MAX, r3
   144fc:	f3bf 8f6f 	isb	sy
   14500:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14502:	4f2f      	ldr	r7, [pc, #188]	; (145c0 <z_nrf_clock_control_lf_on+0x13c>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14504:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 145c4 <z_nrf_clock_control_lf_on+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14508:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 145c8 <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1450c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   14510:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14514:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   14518:	03d2      	lsls	r2, r2, #15
   1451a:	d50c      	bpl.n	14536 <z_nrf_clock_control_lf_on+0xb2>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1451c:	f003 0303 	and.w	r3, r3, #3
   14520:	2b02      	cmp	r3, #2
   14522:	d001      	beq.n	14528 <z_nrf_clock_control_lf_on+0xa4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14524:	2d01      	cmp	r5, #1
   14526:	d106      	bne.n	14536 <z_nrf_clock_control_lf_on+0xb2>
	if (isr_mode) {
   14528:	b324      	cbz	r4, 14574 <z_nrf_clock_control_lf_on+0xf0>
	__asm__ volatile(
   1452a:	f386 8811 	msr	BASEPRI, r6
   1452e:	f3bf 8f6f 	isb	sy
}
   14532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14536:	b1c4      	cbz	r4, 1456a <z_nrf_clock_control_lf_on+0xe6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14538:	4630      	mov	r0, r6
   1453a:	f7fe ff3f 	bl	133bc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1453e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   14542:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14546:	b2db      	uxtb	r3, r3
   14548:	2b01      	cmp	r3, #1
   1454a:	d1df      	bne.n	1450c <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1454c:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1454e:	2900      	cmp	r1, #0
   14550:	d0dc      	beq.n	1450c <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14552:	2100      	movs	r1, #0
   14554:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   14556:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   14558:	2102      	movs	r1, #2
   1455a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   1455e:	2220      	movs	r2, #32
   14560:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14564:	f8c9 3000 	str.w	r3, [r9]
}
   14568:	e7d0      	b.n	1450c <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
   1456a:	2100      	movs	r1, #0
   1456c:	2021      	movs	r0, #33	; 0x21
   1456e:	f002 fae5 	bl	16b3c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14572:	e7e4      	b.n	1453e <z_nrf_clock_control_lf_on+0xba>
    p_reg->INTENSET = mask;
   14574:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14578:	2202      	movs	r2, #2
   1457a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1457e:	e7d8      	b.n	14532 <z_nrf_clock_control_lf_on+0xae>
		__ASSERT_NO_MSG(false);
   14580:	490c      	ldr	r1, [pc, #48]	; (145b4 <z_nrf_clock_control_lf_on+0x130>)
   14582:	480d      	ldr	r0, [pc, #52]	; (145b8 <z_nrf_clock_control_lf_on+0x134>)
   14584:	f44f 720e 	mov.w	r2, #568	; 0x238
   14588:	f005 ff02 	bl	1a390 <printk>
}
   1458c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   14590:	f44f 710e 	mov.w	r1, #568	; 0x238
   14594:	4807      	ldr	r0, [pc, #28]	; (145b4 <z_nrf_clock_control_lf_on+0x130>)
   14596:	f005 bfc7 	b.w	1a528 <assert_post_action>
    p_reg->INTENCLR = mask;
   1459a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1459e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   145a0:	4606      	mov	r6, r0
   145a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   145a6:	e7ac      	b.n	14502 <z_nrf_clock_control_lf_on+0x7e>
   145a8:	20000a18 	.word	0x20000a18
   145ac:	20000954 	.word	0x20000954
   145b0:	20000984 	.word	0x20000984
   145b4:	0001e0ee 	.word	0x0001e0ee
   145b8:	0001d506 	.word	0x0001d506
   145bc:	200018bd 	.word	0x200018bd
   145c0:	50005104 	.word	0x50005104
   145c4:	e000e100 	.word	0xe000e100
   145c8:	50005008 	.word	0x50005008

000145cc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   145cc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   145ce:	4808      	ldr	r0, [pc, #32]	; (145f0 <uart_console_init+0x24>)
   145d0:	4b08      	ldr	r3, [pc, #32]	; (145f4 <uart_console_init+0x28>)
   145d2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   145d4:	f006 f9f9 	bl	1a9ca <z_device_ready>
   145d8:	b138      	cbz	r0, 145ea <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   145da:	4807      	ldr	r0, [pc, #28]	; (145f8 <uart_console_init+0x2c>)
   145dc:	f7ff fdd4 	bl	14188 <__stdout_hook_install>
	__printk_hook_install(console_out);
   145e0:	4805      	ldr	r0, [pc, #20]	; (145f8 <uart_console_init+0x2c>)
   145e2:	f7fd fc59 	bl	11e98 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   145e6:	2000      	movs	r0, #0
}
   145e8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   145ea:	f06f 0012 	mvn.w	r0, #18
   145ee:	e7fb      	b.n	145e8 <uart_console_init+0x1c>
   145f0:	0001ab08 	.word	0x0001ab08
   145f4:	20000a1c 	.word	0x20000a1c
   145f8:	000145fd 	.word	0x000145fd

000145fc <console_out>:
	if ('\n' == c) {
   145fc:	280a      	cmp	r0, #10
{
   145fe:	b538      	push	{r3, r4, r5, lr}
   14600:	4604      	mov	r4, r0
   14602:	4d07      	ldr	r5, [pc, #28]	; (14620 <console_out+0x24>)
	if ('\n' == c) {
   14604:	d104      	bne.n	14610 <console_out+0x14>
   14606:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   14608:	6883      	ldr	r3, [r0, #8]
   1460a:	210d      	movs	r1, #13
   1460c:	685b      	ldr	r3, [r3, #4]
   1460e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   14610:	6828      	ldr	r0, [r5, #0]
   14612:	6883      	ldr	r3, [r0, #8]
   14614:	b2e1      	uxtb	r1, r4
   14616:	685b      	ldr	r3, [r3, #4]
   14618:	4798      	blx	r3
}
   1461a:	4620      	mov	r0, r4
   1461c:	bd38      	pop	{r3, r4, r5, pc}
   1461e:	bf00      	nop
   14620:	20000a1c 	.word	0x20000a1c

00014624 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   14624:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   14626:	794b      	ldrb	r3, [r1, #5]
   14628:	2b01      	cmp	r3, #1
   1462a:	d02c      	beq.n	14686 <uarte_nrfx_configure+0x62>
   1462c:	2b03      	cmp	r3, #3
   1462e:	d127      	bne.n	14680 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14630:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14632:	798b      	ldrb	r3, [r1, #6]
   14634:	2b03      	cmp	r3, #3
   14636:	d123      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14638:	79cd      	ldrb	r5, [r1, #7]
   1463a:	b12d      	cbz	r5, 14648 <uarte_nrfx_configure+0x24>
   1463c:	2d01      	cmp	r5, #1
   1463e:	d11f      	bne.n	14680 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   14640:	6843      	ldr	r3, [r0, #4]
   14642:	685b      	ldr	r3, [r3, #4]
   14644:	079b      	lsls	r3, r3, #30
   14646:	d01b      	beq.n	14680 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14648:	790a      	ldrb	r2, [r1, #4]
   1464a:	2a01      	cmp	r2, #1
   1464c:	d01d      	beq.n	1468a <uarte_nrfx_configure+0x66>
   1464e:	2a02      	cmp	r2, #2
   14650:	d01f      	beq.n	14692 <uarte_nrfx_configure+0x6e>
   14652:	b9aa      	cbnz	r2, 14680 <uarte_nrfx_configure+0x5c>
   14654:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14656:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14658:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1465a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1465e:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   14660:	d06e      	beq.n	14740 <uarte_nrfx_configure+0x11c>
   14662:	d833      	bhi.n	146cc <uarte_nrfx_configure+0xa8>
   14664:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14668:	d06d      	beq.n	14746 <uarte_nrfx_configure+0x122>
   1466a:	d81c      	bhi.n	146a6 <uarte_nrfx_configure+0x82>
   1466c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14670:	d06b      	beq.n	1474a <uarte_nrfx_configure+0x126>
   14672:	d810      	bhi.n	14696 <uarte_nrfx_configure+0x72>
   14674:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14678:	d06a      	beq.n	14750 <uarte_nrfx_configure+0x12c>
   1467a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1467e:	d06a      	beq.n	14756 <uarte_nrfx_configure+0x132>
   14680:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14684:	e05b      	b.n	1473e <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
   14686:	2700      	movs	r7, #0
   14688:	e7d3      	b.n	14632 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1468a:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1468e:	220e      	movs	r2, #14
   14690:	e7e1      	b.n	14656 <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   14692:	2400      	movs	r4, #0
   14694:	e7fb      	b.n	1468e <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
   14696:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1469a:	d05f      	beq.n	1475c <uarte_nrfx_configure+0x138>
   1469c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   146a0:	d1ee      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   146a2:	4b39      	ldr	r3, [pc, #228]	; (14788 <uarte_nrfx_configure+0x164>)
   146a4:	e03e      	b.n	14724 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   146a6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   146aa:	d05a      	beq.n	14762 <uarte_nrfx_configure+0x13e>
   146ac:	d807      	bhi.n	146be <uarte_nrfx_configure+0x9a>
   146ae:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   146b2:	d058      	beq.n	14766 <uarte_nrfx_configure+0x142>
   146b4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   146b8:	d1e2      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   146ba:	4b34      	ldr	r3, [pc, #208]	; (1478c <uarte_nrfx_configure+0x168>)
   146bc:	e032      	b.n	14724 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   146be:	f647 2c12 	movw	ip, #31250	; 0x7a12
   146c2:	4563      	cmp	r3, ip
   146c4:	d1dc      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   146c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   146ca:	e02b      	b.n	14724 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   146cc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   146d0:	d04b      	beq.n	1476a <uarte_nrfx_configure+0x146>
   146d2:	d813      	bhi.n	146fc <uarte_nrfx_configure+0xd8>
   146d4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   146d8:	d04a      	beq.n	14770 <uarte_nrfx_configure+0x14c>
   146da:	d809      	bhi.n	146f0 <uarte_nrfx_configure+0xcc>
   146dc:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   146e0:	4563      	cmp	r3, ip
   146e2:	d047      	beq.n	14774 <uarte_nrfx_configure+0x150>
   146e4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   146e8:	d1ca      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   146ea:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   146ee:	e019      	b.n	14724 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   146f0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   146f4:	d1c4      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   146f6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   146fa:	e013      	b.n	14724 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   146fc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   14700:	d03b      	beq.n	1477a <uarte_nrfx_configure+0x156>
   14702:	d809      	bhi.n	14718 <uarte_nrfx_configure+0xf4>
   14704:	f8df c098 	ldr.w	ip, [pc, #152]	; 147a0 <uarte_nrfx_configure+0x17c>
   14708:	4563      	cmp	r3, ip
   1470a:	d039      	beq.n	14780 <uarte_nrfx_configure+0x15c>
   1470c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   14710:	d1b6      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14712:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14716:	e005      	b.n	14724 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   14718:	f8df c088 	ldr.w	ip, [pc, #136]	; 147a4 <uarte_nrfx_configure+0x180>
   1471c:	4563      	cmp	r3, ip
   1471e:	d1af      	bne.n	14680 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14724:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   14728:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   1472a:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1472c:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   1472e:	4322      	orrs	r2, r4
   14730:	3304      	adds	r3, #4
   14732:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14734:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   14738:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1473c:	2000      	movs	r0, #0
}
   1473e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   14740:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   14744:	e7ee      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   14746:	4b12      	ldr	r3, [pc, #72]	; (14790 <uarte_nrfx_configure+0x16c>)
   14748:	e7ec      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1474a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1474e:	e7e9      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
   14750:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   14754:	e7e6      	b.n	14724 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   14756:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1475a:	e7e3      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1475c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14760:	e7e0      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14762:	4b0c      	ldr	r3, [pc, #48]	; (14794 <uarte_nrfx_configure+0x170>)
   14764:	e7de      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14766:	4b0c      	ldr	r3, [pc, #48]	; (14798 <uarte_nrfx_configure+0x174>)
   14768:	e7dc      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1476a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1476e:	e7d9      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14770:	4b0a      	ldr	r3, [pc, #40]	; (1479c <uarte_nrfx_configure+0x178>)
   14772:	e7d7      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   14774:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14778:	e7d4      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1477a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1477e:	e7d1      	b.n	14724 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14784:	e7ce      	b.n	14724 <uarte_nrfx_configure+0x100>
   14786:	bf00      	nop
   14788:	0013b000 	.word	0x0013b000
   1478c:	004ea000 	.word	0x004ea000
   14790:	00275000 	.word	0x00275000
   14794:	0075c000 	.word	0x0075c000
   14798:	003af000 	.word	0x003af000
   1479c:	013a9000 	.word	0x013a9000
   147a0:	0003d090 	.word	0x0003d090
   147a4:	000f4240 	.word	0x000f4240

000147a8 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   147a8:	6802      	ldr	r2, [r0, #0]
{
   147aa:	b510      	push	{r4, lr}
    switch (port)
   147ac:	0953      	lsrs	r3, r2, #5
{
   147ae:	4604      	mov	r4, r0
    switch (port)
   147b0:	d029      	beq.n	14806 <nrf_gpio_pin_port_decode+0x5e>
   147b2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   147b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   147b8:	bf18      	it	ne
   147ba:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   147bc:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   147c0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   147c2:	07db      	lsls	r3, r3, #31
   147c4:	d40a      	bmi.n	147dc <nrf_gpio_pin_port_decode+0x34>
   147c6:	4912      	ldr	r1, [pc, #72]	; (14810 <nrf_gpio_pin_port_decode+0x68>)
   147c8:	4812      	ldr	r0, [pc, #72]	; (14814 <nrf_gpio_pin_port_decode+0x6c>)
   147ca:	f44f 7205 	mov.w	r2, #532	; 0x214
   147ce:	f005 fddf 	bl	1a390 <printk>
   147d2:	f44f 7105 	mov.w	r1, #532	; 0x214
   147d6:	480e      	ldr	r0, [pc, #56]	; (14810 <nrf_gpio_pin_port_decode+0x68>)
   147d8:	f005 fea6 	bl	1a528 <assert_post_action>
    uint32_t pin_number = *p_pin;
   147dc:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   147de:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   147e2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   147e4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   147e6:	d00c      	beq.n	14802 <nrf_gpio_pin_port_decode+0x5a>
   147e8:	2b01      	cmp	r3, #1
   147ea:	d00f      	beq.n	1480c <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   147ec:	4908      	ldr	r1, [pc, #32]	; (14810 <nrf_gpio_pin_port_decode+0x68>)
   147ee:	4809      	ldr	r0, [pc, #36]	; (14814 <nrf_gpio_pin_port_decode+0x6c>)
   147f0:	f240 2219 	movw	r2, #537	; 0x219
   147f4:	f005 fdcc 	bl	1a390 <printk>
   147f8:	f240 2119 	movw	r1, #537	; 0x219
   147fc:	4804      	ldr	r0, [pc, #16]	; (14810 <nrf_gpio_pin_port_decode+0x68>)
   147fe:	f005 fe93 	bl	1a528 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14802:	4805      	ldr	r0, [pc, #20]	; (14818 <nrf_gpio_pin_port_decode+0x70>)
}
   14804:	bd10      	pop	{r4, pc}
    switch (port)
   14806:	f04f 33ff 	mov.w	r3, #4294967295
   1480a:	e7d7      	b.n	147bc <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1480c:	4803      	ldr	r0, [pc, #12]	; (1481c <nrf_gpio_pin_port_decode+0x74>)
   1480e:	e7f9      	b.n	14804 <nrf_gpio_pin_port_decode+0x5c>
   14810:	0001d595 	.word	0x0001d595
   14814:	0001d506 	.word	0x0001d506
   14818:	50842500 	.word	0x50842500
   1481c:	50842800 	.word	0x50842800

00014820 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   14820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14822:	4605      	mov	r5, r0
   14824:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14826:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14828:	f006 f8f5 	bl	1aa16 <k_is_in_isr>
   1482c:	b910      	cbnz	r0, 14834 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1482e:	4b2c      	ldr	r3, [pc, #176]	; (148e0 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   14830:	781b      	ldrb	r3, [r3, #0]
   14832:	b983      	cbnz	r3, 14856 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   14834:	f04f 0320 	mov.w	r3, #32
   14838:	f3ef 8411 	mrs	r4, BASEPRI
   1483c:	f383 8812 	msr	BASEPRI_MAX, r3
   14840:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   14844:	4628      	mov	r0, r5
   14846:	f005 ffe8 	bl	1a81a <is_tx_ready>
   1484a:	bb28      	cbnz	r0, 14898 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1484c:	f384 8811 	msr	BASEPRI, r4
   14850:	f3bf 8f6f 	isb	sy
}
   14854:	e7ee      	b.n	14834 <uarte_nrfx_poll_out+0x14>
{
   14856:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   14858:	4628      	mov	r0, r5
   1485a:	f005 ffde 	bl	1a81a <is_tx_ready>
   1485e:	b970      	cbnz	r0, 1487e <uarte_nrfx_poll_out+0x5e>
   14860:	2001      	movs	r0, #1
   14862:	f006 f8af 	bl	1a9c4 <nrfx_busy_wait>
   14866:	3c01      	subs	r4, #1
   14868:	d1f6      	bne.n	14858 <uarte_nrfx_poll_out+0x38>
   1486a:	2100      	movs	r1, #0
   1486c:	2021      	movs	r0, #33	; 0x21
   1486e:	f002 f965 	bl	16b3c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14872:	e7f0      	b.n	14856 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   14874:	f384 8811 	msr	BASEPRI, r4
   14878:	f3bf 8f6f 	isb	sy
}
   1487c:	e7f5      	b.n	1486a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1487e:	f04f 0320 	mov.w	r3, #32
   14882:	f3ef 8411 	mrs	r4, BASEPRI
   14886:	f383 8812 	msr	BASEPRI_MAX, r3
   1488a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1488e:	4628      	mov	r0, r5
   14890:	f005 ffc3 	bl	1a81a <is_tx_ready>
   14894:	2800      	cmp	r0, #0
   14896:	d0ed      	beq.n	14874 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   14898:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1489a:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1489e:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   148a0:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   148a2:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   148a6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   148aa:	2200      	movs	r2, #0
   148ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   148b0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   148b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   148b8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   148bc:	684a      	ldr	r2, [r1, #4]
   148be:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   148c0:	bf41      	itttt	mi
   148c2:	2208      	movmi	r2, #8
   148c4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   148c8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   148cc:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   148d0:	2201      	movs	r2, #1
   148d2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   148d4:	f384 8811 	msr	BASEPRI, r4
   148d8:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
   148dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148de:	bf00      	nop
   148e0:	200018bd 	.word	0x200018bd

000148e4 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   148e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   148e6:	460f      	mov	r7, r1
   148e8:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   148ea:	b940      	cbnz	r0, 148fe <entropy_cc3xx_rng_get_entropy+0x1a>
   148ec:	4918      	ldr	r1, [pc, #96]	; (14950 <entropy_cc3xx_rng_get_entropy+0x6c>)
   148ee:	4819      	ldr	r0, [pc, #100]	; (14954 <entropy_cc3xx_rng_get_entropy+0x70>)
   148f0:	2224      	movs	r2, #36	; 0x24
   148f2:	f005 fd4d 	bl	1a390 <printk>
   148f6:	2124      	movs	r1, #36	; 0x24
   148f8:	4815      	ldr	r0, [pc, #84]	; (14950 <entropy_cc3xx_rng_get_entropy+0x6c>)
   148fa:	f005 fe15 	bl	1a528 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   148fe:	b947      	cbnz	r7, 14912 <entropy_cc3xx_rng_get_entropy+0x2e>
   14900:	4913      	ldr	r1, [pc, #76]	; (14950 <entropy_cc3xx_rng_get_entropy+0x6c>)
   14902:	4814      	ldr	r0, [pc, #80]	; (14954 <entropy_cc3xx_rng_get_entropy+0x70>)
   14904:	2225      	movs	r2, #37	; 0x25
   14906:	f005 fd43 	bl	1a390 <printk>
   1490a:	2125      	movs	r1, #37	; 0x25
   1490c:	4810      	ldr	r0, [pc, #64]	; (14950 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1490e:	f005 fe0b 	bl	1a528 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   14912:	f44f 6580 	mov.w	r5, #1024	; 0x400
   14916:	2400      	movs	r4, #0
   14918:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   1491c:	42a6      	cmp	r6, r4
   1491e:	d801      	bhi.n	14924 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
   14920:	b003      	add	sp, #12
   14922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   14924:	1b33      	subs	r3, r6, r4
   14926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1492a:	bf38      	it	cc
   1492c:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1492e:	2000      	movs	r0, #0
   14930:	ab01      	add	r3, sp, #4
   14932:	462a      	mov	r2, r5
   14934:	1939      	adds	r1, r7, r4
   14936:	f002 ff23 	bl	17780 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   1493a:	9b01      	ldr	r3, [sp, #4]
   1493c:	42ab      	cmp	r3, r5
   1493e:	d103      	bne.n	14948 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
   14940:	2800      	cmp	r0, #0
   14942:	d1ed      	bne.n	14920 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   14944:	442c      	add	r4, r5
   14946:	e7e9      	b.n	1491c <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
   14948:	f06f 0015 	mvn.w	r0, #21
   1494c:	e7e8      	b.n	14920 <entropy_cc3xx_rng_get_entropy+0x3c>
   1494e:	bf00      	nop
   14950:	0001e171 	.word	0x0001e171
   14954:	0001d506 	.word	0x0001d506

00014958 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   14958:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1495a:	4c06      	ldr	r4, [pc, #24]	; (14974 <sys_clock_isr+0x1c>)
   1495c:	4806      	ldr	r0, [pc, #24]	; (14978 <sys_clock_isr+0x20>)
   1495e:	4621      	mov	r1, r4
   14960:	2217      	movs	r2, #23
   14962:	f005 fd15 	bl	1a390 <printk>
   14966:	4620      	mov	r0, r4
}
   14968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1496c:	2117      	movs	r1, #23
   1496e:	f005 bddb 	b.w	1a528 <assert_post_action>
   14972:	bf00      	nop
   14974:	0001e1ac 	.word	0x0001e1ac
   14978:	0001d506 	.word	0x0001d506

0001497c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1497c:	4919      	ldr	r1, [pc, #100]	; (149e4 <sys_clock_timeout_handler+0x68>)
{
   1497e:	b570      	push	{r4, r5, r6, lr}
   14980:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   14982:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14986:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   14988:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1498c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14990:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   14992:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14996:	f04f 0500 	mov.w	r5, #0
   1499a:	d20a      	bcs.n	149b2 <sys_clock_timeout_handler+0x36>
		return true;
   1499c:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1499e:	4b12      	ldr	r3, [pc, #72]	; (149e8 <sys_clock_timeout_handler+0x6c>)
   149a0:	6819      	ldr	r1, [r3, #0]
   149a2:	060a      	lsls	r2, r1, #24
   149a4:	0a0b      	lsrs	r3, r1, #8
   149a6:	1992      	adds	r2, r2, r6
   149a8:	4910      	ldr	r1, [pc, #64]	; (149ec <sys_clock_timeout_handler+0x70>)
   149aa:	f143 0300 	adc.w	r3, r3, #0
   149ae:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   149b2:	f002 fb61 	bl	17078 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   149b6:	00a3      	lsls	r3, r4, #2
   149b8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   149bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   149c0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   149c4:	42b2      	cmp	r2, r6
   149c6:	d10b      	bne.n	149e0 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   149c8:	b91d      	cbnz	r5, 149d2 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   149ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   149ce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   149d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   149d6:	4b06      	ldr	r3, [pc, #24]	; (149f0 <sys_clock_timeout_handler+0x74>)
   149d8:	fa00 f404 	lsl.w	r4, r0, r4
   149dc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   149e0:	bd70      	pop	{r4, r5, r6, pc}
   149e2:	bf00      	nop
   149e4:	20000138 	.word	0x20000138
   149e8:	20000a28 	.word	0x20000a28
   149ec:	20000120 	.word	0x20000120
   149f0:	50015000 	.word	0x50015000

000149f4 <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   149f4:	2301      	movs	r3, #1
   149f6:	4083      	lsls	r3, r0
{
   149f8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   149fa:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   149fc:	4a0d      	ldr	r2, [pc, #52]	; (14a34 <compare_int_lock+0x40>)
   149fe:	e8d2 1fef 	ldaex	r1, [r2]
   14a02:	ea01 0c04 	and.w	ip, r1, r4
   14a06:	e8c2 cfee 	stlex	lr, ip, [r2]
   14a0a:	f1be 0f00 	cmp.w	lr, #0
   14a0e:	d1f6      	bne.n	149fe <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14a10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14a14:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   14a18:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
   14a1c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   14a20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14a24:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   14a28:	420b      	tst	r3, r1
}
   14a2a:	bf14      	ite	ne
   14a2c:	2001      	movne	r0, #1
   14a2e:	2000      	moveq	r0, #0
   14a30:	bd10      	pop	{r4, pc}
   14a32:	bf00      	nop
   14a34:	20000a24 	.word	0x20000a24

00014a38 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   14a38:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14a3a:	4a0e      	ldr	r2, [pc, #56]	; (14a74 <compare_int_unlock.part.0+0x3c>)
   14a3c:	4083      	lsls	r3, r0
   14a3e:	e8d2 1fef 	ldaex	r1, [r2]
   14a42:	4319      	orrs	r1, r3
   14a44:	e8c2 1fec 	stlex	ip, r1, [r2]
   14a48:	f1bc 0f00 	cmp.w	ip, #0
   14a4c:	d1f7      	bne.n	14a3e <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   14a52:	4a09      	ldr	r2, [pc, #36]	; (14a78 <compare_int_unlock.part.0+0x40>)
   14a54:	4083      	lsls	r3, r0
   14a56:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a5a:	4b08      	ldr	r3, [pc, #32]	; (14a7c <compare_int_unlock.part.0+0x44>)
   14a5c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   14a60:	fa23 f000 	lsr.w	r0, r3, r0
   14a64:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14a66:	bf42      	ittt	mi
   14a68:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   14a6c:	4b04      	ldrmi	r3, [pc, #16]	; (14a80 <compare_int_unlock.part.0+0x48>)
   14a6e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   14a72:	4770      	bx	lr
   14a74:	20000a24 	.word	0x20000a24
   14a78:	50015000 	.word	0x50015000
   14a7c:	20000a20 	.word	0x20000a20
   14a80:	e000e100 	.word	0xe000e100

00014a84 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   14a84:	4b0d      	ldr	r3, [pc, #52]	; (14abc <z_nrf_rtc_timer_read+0x38>)
   14a86:	681b      	ldr	r3, [r3, #0]
   14a88:	0a19      	lsrs	r1, r3, #8
   14a8a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   14a8c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   14a90:	4b0b      	ldr	r3, [pc, #44]	; (14ac0 <z_nrf_rtc_timer_read+0x3c>)
   14a92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   14a96:	18c0      	adds	r0, r0, r3
   14a98:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   14a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14aa0:	d20a      	bcs.n	14ab8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   14aa2:	4b08      	ldr	r3, [pc, #32]	; (14ac4 <z_nrf_rtc_timer_read+0x40>)
   14aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14aa8:	4299      	cmp	r1, r3
   14aaa:	bf08      	it	eq
   14aac:	4290      	cmpeq	r0, r2
   14aae:	d203      	bcs.n	14ab8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   14ab0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   14ab4:	f141 0100 	adc.w	r1, r1, #0
}
   14ab8:	4770      	bx	lr
   14aba:	bf00      	nop
   14abc:	20000a28 	.word	0x20000a28
   14ac0:	50015000 	.word	0x50015000
   14ac4:	20000120 	.word	0x20000120

00014ac8 <compare_set>:
{
   14ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14acc:	4616      	mov	r6, r2
   14ace:	461f      	mov	r7, r3
   14ad0:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   14ad2:	f7ff ff8f 	bl	149f4 <compare_int_lock>
   14ad6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   14ad8:	f7ff ffd4 	bl	14a84 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   14adc:	42b9      	cmp	r1, r7
   14ade:	bf08      	it	eq
   14ae0:	42b0      	cmpeq	r0, r6
   14ae2:	d27b      	bcs.n	14bdc <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
   14ae4:	2300      	movs	r3, #0
   14ae6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   14aea:	ebb6 0800 	subs.w	r8, r6, r0
   14aee:	eb67 0901 	sbc.w	r9, r7, r1
   14af2:	454b      	cmp	r3, r9
   14af4:	bf08      	it	eq
   14af6:	4542      	cmpeq	r2, r8
   14af8:	d37d      	bcc.n	14bf6 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
   14afa:	4b40      	ldr	r3, [pc, #256]	; (14bfc <compare_set+0x134>)
   14afc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   14b00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   14b04:	429f      	cmp	r7, r3
   14b06:	bf08      	it	eq
   14b08:	4296      	cmpeq	r6, r2
   14b0a:	d051      	beq.n	14bb0 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14b0c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   14b10:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   14b14:	4614      	mov	r4, r2
   14b16:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14b1a:	f105 0850 	add.w	r8, r5, #80	; 0x50
   14b1e:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
   14b22:	ea4f 0888 	mov.w	r8, r8, lsl #2
   14b26:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14b2a:	fa1f f888 	uxth.w	r8, r8
   14b2e:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    return p_reg->CC[ch];
   14b32:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14b36:	4b32      	ldr	r3, [pc, #200]	; (14c00 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14b38:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14b3c:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
   14b40:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14b44:	eba0 000a 	sub.w	r0, r0, sl
   14b48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14b4c:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   14b50:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   14b52:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   14b56:	d105      	bne.n	14b64 <compare_set+0x9c>
   14b58:	9201      	str	r2, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   14b5a:	2013      	movs	r0, #19
   14b5c:	f005 ff95 	bl	1aa8a <z_impl_k_busy_wait>
   14b60:	4b27      	ldr	r3, [pc, #156]	; (14c00 <compare_set+0x138>)
   14b62:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   14b64:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   14b68:	eba4 000c 	sub.w	r0, r4, ip
   14b6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14b70:	2100      	movs	r1, #0
			cc_val = now + 2;
   14b72:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14b76:	bf88      	it	hi
   14b78:	4664      	movhi	r4, ip
   14b7a:	f8c8 1000 	str.w	r1, [r8]
   14b7e:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14b82:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
   14b86:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   14b8a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14b8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   14b92:	4582      	cmp	sl, r0
   14b94:	d006      	beq.n	14ba4 <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
   14b96:	1a20      	subs	r0, r4, r0
   14b98:	3802      	subs	r0, #2
   14b9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   14b9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14ba2:	d819      	bhi.n	14bd8 <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
   14ba4:	1aa4      	subs	r4, r4, r2
   14ba6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   14baa:	1932      	adds	r2, r6, r4
   14bac:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   14bb0:	4c12      	ldr	r4, [pc, #72]	; (14bfc <compare_set+0x134>)
   14bb2:	0129      	lsls	r1, r5, #4
   14bb4:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   14bb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   14bbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
   14bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
   14bc0:	5062      	str	r2, [r4, r1]
	return ret;
   14bc2:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
   14bc4:	6043      	str	r3, [r0, #4]
	if (key) {
   14bc6:	9b00      	ldr	r3, [sp, #0]
   14bc8:	b113      	cbz	r3, 14bd0 <compare_set+0x108>
   14bca:	4628      	mov	r0, r5
   14bcc:	f7ff ff34 	bl	14a38 <compare_int_unlock.part.0>
}
   14bd0:	4620      	mov	r0, r4
   14bd2:	b003      	add	sp, #12
   14bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bd8:	4620      	mov	r0, r4
   14bda:	e7b1      	b.n	14b40 <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
   14bdc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14bde:	4a09      	ldr	r2, [pc, #36]	; (14c04 <compare_set+0x13c>)
   14be0:	40ab      	lsls	r3, r5
   14be2:	e8d2 1fef 	ldaex	r1, [r2]
   14be6:	4319      	orrs	r1, r3
   14be8:	e8c2 1fe0 	stlex	r0, r1, [r2]
   14bec:	2800      	cmp	r0, #0
   14bee:	d1f8      	bne.n	14be2 <compare_set+0x11a>
   14bf0:	4632      	mov	r2, r6
   14bf2:	463b      	mov	r3, r7
   14bf4:	e7dc      	b.n	14bb0 <compare_set+0xe8>
			return -EINVAL;
   14bf6:	f06f 0415 	mvn.w	r4, #21
   14bfa:	e7e4      	b.n	14bc6 <compare_set+0xfe>
   14bfc:	20000128 	.word	0x20000128
   14c00:	50015000 	.word	0x50015000
   14c04:	20000a20 	.word	0x20000a20

00014c08 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   14c08:	4b33      	ldr	r3, [pc, #204]	; (14cd8 <rtc_nrf_isr+0xd0>)
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   14c0a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   14c0e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   14c12:	079a      	lsls	r2, r3, #30
   14c14:	d509      	bpl.n	14c2a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c16:	4b31      	ldr	r3, [pc, #196]	; (14cdc <rtc_nrf_isr+0xd4>)
   14c18:	681a      	ldr	r2, [r3, #0]
   14c1a:	b132      	cbz	r2, 14c2a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14c1c:	2200      	movs	r2, #0
   14c1e:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   14c20:	4a2f      	ldr	r2, [pc, #188]	; (14ce0 <rtc_nrf_isr+0xd8>)
   14c22:	681b      	ldr	r3, [r3, #0]
   14c24:	6813      	ldr	r3, [r2, #0]
   14c26:	3301      	adds	r3, #1
   14c28:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   14c2a:	f04f 0320 	mov.w	r3, #32
   14c2e:	f3ef 8211 	mrs	r2, BASEPRI
   14c32:	f383 8812 	msr	BASEPRI_MAX, r3
   14c36:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   14c3a:	4b27      	ldr	r3, [pc, #156]	; (14cd8 <rtc_nrf_isr+0xd0>)
   14c3c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   14c40:	03db      	lsls	r3, r3, #15
   14c42:	d50e      	bpl.n	14c62 <rtc_nrf_isr+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14c44:	4b27      	ldr	r3, [pc, #156]	; (14ce4 <rtc_nrf_isr+0xdc>)
   14c46:	e8d3 1fef 	ldaex	r1, [r3]
   14c4a:	f021 0001 	bic.w	r0, r1, #1
   14c4e:	e8c3 0fe4 	stlex	r4, r0, [r3]
   14c52:	2c00      	cmp	r4, #0
   14c54:	d1f7      	bne.n	14c46 <rtc_nrf_isr+0x3e>
   14c56:	4b24      	ldr	r3, [pc, #144]	; (14ce8 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14c58:	2900      	cmp	r1, #0
   14c5a:	d136      	bne.n	14cca <rtc_nrf_isr+0xc2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c5c:	6819      	ldr	r1, [r3, #0]
		if (result) {
   14c5e:	2900      	cmp	r1, #0
   14c60:	d133      	bne.n	14cca <rtc_nrf_isr+0xc2>
{
   14c62:	2300      	movs	r3, #0
	__asm__ volatile(
   14c64:	f382 8811 	msr	BASEPRI, r2
   14c68:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   14c6c:	b353      	cbz	r3, 14cc4 <rtc_nrf_isr+0xbc>
		curr_time = z_nrf_rtc_timer_read();
   14c6e:	f7ff ff09 	bl	14a84 <z_nrf_rtc_timer_read>
   14c72:	4604      	mov	r4, r0
	__asm__ volatile(
   14c74:	f04f 0320 	mov.w	r3, #32
   14c78:	f3ef 8011 	mrs	r0, BASEPRI
   14c7c:	f383 8812 	msr	BASEPRI_MAX, r3
   14c80:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   14c84:	4b19      	ldr	r3, [pc, #100]	; (14cec <rtc_nrf_isr+0xe4>)
   14c86:	2200      	movs	r2, #0
   14c88:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   14c8c:	4549      	cmp	r1, r9
   14c8e:	bf08      	it	eq
   14c90:	4544      	cmpeq	r4, r8
   14c92:	d31f      	bcc.n	14cd4 <rtc_nrf_isr+0xcc>
			user_context = cc_data[chan].user_context;
   14c94:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   14c98:	f04f 34ff 	mov.w	r4, #4294967295
   14c9c:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
   14ca0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   14ca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   14ca6:	e9c3 4502 	strd	r4, r5, [r3, #8]
   14caa:	4b0b      	ldr	r3, [pc, #44]	; (14cd8 <rtc_nrf_isr+0xd0>)
   14cac:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   14cb0:	f380 8811 	msr	BASEPRI, r0
   14cb4:	f3bf 8f6f 	isb	sy
		if (handler) {
   14cb8:	b121      	cbz	r1, 14cc4 <rtc_nrf_isr+0xbc>
			handler(chan, expire_time, user_context);
   14cba:	4642      	mov	r2, r8
   14cbc:	464b      	mov	r3, r9
   14cbe:	2000      	movs	r0, #0
   14cc0:	9600      	str	r6, [sp, #0]
   14cc2:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   14cc4:	b002      	add	sp, #8
   14cc6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14cca:	2100      	movs	r1, #0
   14ccc:	6019      	str	r1, [r3, #0]
   14cce:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14cd0:	2301      	movs	r3, #1
}
   14cd2:	e7c7      	b.n	14c64 <rtc_nrf_isr+0x5c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   14cd4:	4611      	mov	r1, r2
   14cd6:	e7eb      	b.n	14cb0 <rtc_nrf_isr+0xa8>
   14cd8:	50015000 	.word	0x50015000
   14cdc:	50015104 	.word	0x50015104
   14ce0:	20000a28 	.word	0x20000a28
   14ce4:	20000a20 	.word	0x20000a20
   14ce8:	50015140 	.word	0x50015140
   14cec:	20000128 	.word	0x20000128

00014cf0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   14cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   14cf2:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   14cf4:	f04f 30ff 	mov.w	r0, #4294967295
   14cf8:	f04f 31ff 	mov.w	r1, #4294967295
   14cfc:	4d17      	ldr	r5, [pc, #92]	; (14d5c <sys_clock_driver_init+0x6c>)
   14cfe:	4b18      	ldr	r3, [pc, #96]	; (14d60 <sys_clock_driver_init+0x70>)
   14d00:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   14d04:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   14d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14d0c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14d0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   14d12:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   14d16:	4b13      	ldr	r3, [pc, #76]	; (14d64 <sys_clock_driver_init+0x74>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   14d18:	2101      	movs	r1, #1
   14d1a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   14d1e:	2015      	movs	r0, #21
   14d20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14d24:	4622      	mov	r2, r4
   14d26:	f7fe fb9f 	bl	13468 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   14d2a:	2015      	movs	r0, #21
   14d2c:	f7fe fb7e 	bl	1342c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14d30:	2301      	movs	r3, #1
   14d32:	4a0d      	ldr	r2, [pc, #52]	; (14d68 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
   14d34:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14d38:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   14d3a:	4a0c      	ldr	r2, [pc, #48]	; (14d6c <sys_clock_driver_init+0x7c>)
   14d3c:	602b      	str	r3, [r5, #0]
   14d3e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   14d40:	4b0b      	ldr	r3, [pc, #44]	; (14d70 <sys_clock_driver_init+0x80>)
   14d42:	4a0c      	ldr	r2, [pc, #48]	; (14d74 <sys_clock_driver_init+0x84>)
   14d44:	9300      	str	r3, [sp, #0]
   14d46:	4620      	mov	r0, r4
   14d48:	2300      	movs	r3, #0
   14d4a:	9401      	str	r4, [sp, #4]
   14d4c:	f7ff febc 	bl	14ac8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   14d50:	4630      	mov	r0, r6
   14d52:	f7ff fb97 	bl	14484 <z_nrf_clock_control_lf_on>

	return 0;
}
   14d56:	4620      	mov	r0, r4
   14d58:	b002      	add	sp, #8
   14d5a:	bd70      	pop	{r4, r5, r6, pc}
   14d5c:	50015000 	.word	0x50015000
   14d60:	20000128 	.word	0x20000128
   14d64:	e000e100 	.word	0xe000e100
   14d68:	50015008 	.word	0x50015008
   14d6c:	20000a24 	.word	0x20000a24
   14d70:	0001497d 	.word	0x0001497d
   14d74:	007fffff 	.word	0x007fffff

00014d78 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14d78:	4b14      	ldr	r3, [pc, #80]	; (14dcc <sys_clock_set_timeout+0x54>)
{
   14d7a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14d7c:	f1b0 3fff 	cmp.w	r0, #4294967295
   14d80:	bf08      	it	eq
   14d82:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   14d84:	1e44      	subs	r4, r0, #1
   14d86:	2c00      	cmp	r4, #0
   14d88:	dd1d      	ble.n	14dc6 <sys_clock_set_timeout+0x4e>
   14d8a:	429c      	cmp	r4, r3
   14d8c:	bfa8      	it	ge
   14d8e:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   14d90:	f7ff fe78 	bl	14a84 <z_nrf_rtc_timer_read>
   14d94:	4b0e      	ldr	r3, [pc, #56]	; (14dd0 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   14d96:	490f      	ldr	r1, [pc, #60]	; (14dd4 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   14d98:	e9d3 2300 	ldrd	r2, r3, [r3]
   14d9c:	1a80      	subs	r0, r0, r2
		ticks = 0;
   14d9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14da2:	bf28      	it	cs
   14da4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   14da6:	3001      	adds	r0, #1
   14da8:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   14daa:	4808      	ldr	r0, [pc, #32]	; (14dcc <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   14dac:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   14dae:	4284      	cmp	r4, r0
   14db0:	bf28      	it	cs
   14db2:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   14db4:	2000      	movs	r0, #0
   14db6:	1912      	adds	r2, r2, r4
   14db8:	9001      	str	r0, [sp, #4]
   14dba:	f143 0300 	adc.w	r3, r3, #0
   14dbe:	f7ff fe83 	bl	14ac8 <compare_set>
}
   14dc2:	b002      	add	sp, #8
   14dc4:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   14dc6:	2400      	movs	r4, #0
   14dc8:	e7e2      	b.n	14d90 <sys_clock_set_timeout+0x18>
   14dca:	bf00      	nop
   14dcc:	007fffff 	.word	0x007fffff
   14dd0:	20000138 	.word	0x20000138
   14dd4:	0001497d 	.word	0x0001497d

00014dd8 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   14dd8:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   14dda:	f7ff fe53 	bl	14a84 <z_nrf_rtc_timer_read>
   14dde:	4b02      	ldr	r3, [pc, #8]	; (14de8 <sys_clock_elapsed+0x10>)
   14de0:	681b      	ldr	r3, [r3, #0]
}
   14de2:	1ac0      	subs	r0, r0, r3
   14de4:	bd08      	pop	{r3, pc}
   14de6:	bf00      	nop
   14de8:	20000138 	.word	0x20000138

00014dec <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   14dec:	4803      	ldr	r0, [pc, #12]	; (14dfc <k_sys_fatal_error_handler+0x10>)
   14dee:	2145      	movs	r1, #69	; 0x45
{
   14df0:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   14df2:	f005 fbac 	bl	1a54e <z_log_minimal_printk>
		sys_arch_reboot(0);
   14df6:	2000      	movs	r0, #0
   14df8:	f7fe ff0a 	bl	13c10 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   14dfc:	0001e1e8 	.word	0x0001e1e8

00014e00 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   14e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14e04:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   14e06:	4c21      	ldr	r4, [pc, #132]	; (14e8c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   14e08:	4e21      	ldr	r6, [pc, #132]	; (14e90 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14e0a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   14e0e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 14e98 <check_ext_api_requests+0x98>
{
   14e12:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14e14:	45a8      	cmp	r8, r5
   14e16:	d803      	bhi.n	14e20 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   14e18:	2000      	movs	r0, #0
   14e1a:	b005      	add	sp, #20
   14e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   14e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14e22:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14e26:	681f      	ldr	r7, [r3, #0]
   14e28:	ab01      	add	r3, sp, #4
   14e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   14e2e:	220c      	movs	r2, #12
   14e30:	4619      	mov	r1, r3
   14e32:	4638      	mov	r0, r7
   14e34:	f005 fc01 	bl	1a63a <memcmp>
   14e38:	b990      	cbnz	r0, 14e60 <check_ext_api_requests+0x60>
   14e3a:	b18f      	cbz	r7, 14e60 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   14e3e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14e40:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   14e42:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   14e44:	4291      	cmp	r1, r2
   14e46:	d10b      	bne.n	14e60 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   14e48:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   14e4a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   14e4c:	4291      	cmp	r1, r2
   14e4e:	d807      	bhi.n	14e60 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   14e50:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   14e52:	4291      	cmp	r1, r2
   14e54:	d904      	bls.n	14e60 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   14e56:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   14e58:	695b      	ldr	r3, [r3, #20]
   14e5a:	ea32 0303 	bics.w	r3, r2, r3
   14e5e:	d00a      	beq.n	14e76 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   14e60:	6a27      	ldr	r7, [r4, #32]
   14e62:	b167      	cbz	r7, 14e7e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   14e64:	480b      	ldr	r0, [pc, #44]	; (14e94 <check_ext_api_requests+0x94>)
   14e66:	f005 fa93 	bl	1a390 <printk>
			k_panic();
   14e6a:	4040      	eors	r0, r0
   14e6c:	f380 8811 	msr	BASEPRI, r0
   14e70:	f04f 0004 	mov.w	r0, #4
   14e74:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   14e76:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14e78:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   14e7a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14e7c:	e7ca      	b.n	14e14 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   14e7e:	4648      	mov	r0, r9
   14e80:	f005 fa86 	bl	1a390 <printk>
			*ext_api_req->ext_api = NULL;
   14e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14e86:	601f      	str	r7, [r3, #0]
   14e88:	e7f5      	b.n	14e76 <check_ext_api_requests+0x76>
   14e8a:	bf00      	nop
   14e8c:	0000023c 	.word	0x0000023c
   14e90:	0001add0 	.word	0x0001add0
   14e94:	0001e20a 	.word	0x0001e20a
   14e98:	0001e233 	.word	0x0001e233

00014e9c <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   14e9c:	4b06      	ldr	r3, [pc, #24]	; (14eb8 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   14e9e:	681b      	ldr	r3, [r3, #0]
   14ea0:	2b07      	cmp	r3, #7
   14ea2:	d107      	bne.n	14eb4 <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   14ea4:	4b05      	ldr	r3, [pc, #20]	; (14ebc <nrf53_errata_42+0x20>)
   14ea6:	681b      	ldr	r3, [r3, #0]
   14ea8:	3b02      	subs	r3, #2
   14eaa:	2b03      	cmp	r3, #3
   14eac:	d802      	bhi.n	14eb4 <nrf53_errata_42+0x18>
   14eae:	4a04      	ldr	r2, [pc, #16]	; (14ec0 <nrf53_errata_42+0x24>)
   14eb0:	5cd0      	ldrb	r0, [r2, r3]
   14eb2:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   14eb4:	2000      	movs	r0, #0
    #endif
}
   14eb6:	4770      	bx	lr
   14eb8:	00ff0130 	.word	0x00ff0130
   14ebc:	00ff0134 	.word	0x00ff0134
   14ec0:	0001e266 	.word	0x0001e266

00014ec4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   14ec4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14ec8:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   14ecc:	4b03      	ldr	r3, [pc, #12]	; (14edc <SystemCoreClockUpdate+0x18>)
   14ece:	f002 0203 	and.w	r2, r2, #3
   14ed2:	40d3      	lsrs	r3, r2
   14ed4:	4a02      	ldr	r2, [pc, #8]	; (14ee0 <SystemCoreClockUpdate+0x1c>)
   14ed6:	6013      	str	r3, [r2, #0]
#endif
}
   14ed8:	4770      	bx	lr
   14eda:	bf00      	nop
   14edc:	07a12000 	.word	0x07a12000
   14ee0:	20000040 	.word	0x20000040

00014ee4 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   14ee4:	4a3d      	ldr	r2, [pc, #244]	; (14fdc <SystemInit+0xf8>)
{
   14ee6:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   14ee8:	6813      	ldr	r3, [r2, #0]
   14eea:	f043 0302 	orr.w	r3, r3, #2
   14eee:	6013      	str	r3, [r2, #0]
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
   14ef0:	f7ff ffd4 	bl	14e9c <nrf53_errata_42>
   14ef4:	b148      	cbz	r0, 14f0a <SystemInit+0x26>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
   14ef6:	4b3a      	ldr	r3, [pc, #232]	; (14fe0 <SystemInit+0xfc>)
   14ef8:	681a      	ldr	r2, [r3, #0]
   14efa:	b932      	cbnz	r2, 14f0a <SystemInit+0x26>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
   14efc:	210d      	movs	r1, #13
   14efe:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
   14f00:	2101      	movs	r1, #1
   14f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
   14f06:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
   14f08:	601a      	str	r2, [r3, #0]
{
   14f0a:	2200      	movs	r2, #0
   14f0c:	00d3      	lsls	r3, r2, #3
   14f0e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   14f12:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   14f16:	3101      	adds	r1, #1
   14f18:	d007      	beq.n	14f2a <SystemInit+0x46>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   14f1a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   14f1e:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   14f20:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   14f24:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   14f26:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   14f28:	d1f0      	bne.n	14f0c <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
   14f2a:	f7ff ffb7 	bl	14e9c <nrf53_errata_42>
   14f2e:	2800      	cmp	r0, #0
   14f30:	d14e      	bne.n	14fd0 <SystemInit+0xec>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
   14f32:	f7ff ffb3 	bl	14e9c <nrf53_errata_42>
   14f36:	b138      	cbz	r0, 14f48 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
   14f38:	4b2a      	ldr	r3, [pc, #168]	; (14fe4 <SystemInit+0x100>)
   14f3a:	4a2b      	ldr	r2, [pc, #172]	; (14fe8 <SystemInit+0x104>)
   14f3c:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
   14f3e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14f42:	2201      	movs	r2, #1
   14f44:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   14f48:	4b28      	ldr	r3, [pc, #160]	; (14fec <SystemInit+0x108>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   14f4a:	681b      	ldr	r3, [r3, #0]
   14f4c:	2b07      	cmp	r3, #7
   14f4e:	d10a      	bne.n	14f66 <SystemInit+0x82>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   14f50:	4b27      	ldr	r3, [pc, #156]	; (14ff0 <SystemInit+0x10c>)
   14f52:	681b      	ldr	r3, [r3, #0]
   14f54:	3b02      	subs	r3, #2
   14f56:	2b03      	cmp	r3, #3
   14f58:	d805      	bhi.n	14f66 <SystemInit+0x82>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
   14f5a:	4a26      	ldr	r2, [pc, #152]	; (14ff4 <SystemInit+0x110>)
   14f5c:	5cd3      	ldrb	r3, [r2, r3]
   14f5e:	b113      	cbz	r3, 14f66 <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
   14f60:	2200      	movs	r2, #0
   14f62:	4b25      	ldr	r3, [pc, #148]	; (14ff8 <SystemInit+0x114>)
   14f64:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
   14f66:	f7ff ff99 	bl	14e9c <nrf53_errata_42>
   14f6a:	b150      	cbz	r0, 14f82 <SystemInit+0x9e>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
   14f6c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14f70:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14f74:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
   14f76:	bf42      	ittt	mi
   14f78:	2200      	movmi	r2, #0
   14f7a:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
   14f7e:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   14f82:	4b1a      	ldr	r3, [pc, #104]	; (14fec <SystemInit+0x108>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   14f84:	681b      	ldr	r3, [r3, #0]
   14f86:	2b07      	cmp	r3, #7
   14f88:	d109      	bne.n	14f9e <SystemInit+0xba>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
   14f8a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   14f8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14f92:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
   14f94:	bf44      	itt	mi
   14f96:	f06f 0201 	mvnmi.w	r2, #1
   14f9a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
   14f9e:	f7ff ff7d 	bl	14e9c <nrf53_errata_42>
   14fa2:	b110      	cbz	r0, 14faa <SystemInit+0xc6>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
   14fa4:	2265      	movs	r2, #101	; 0x65
   14fa6:	4b15      	ldr	r3, [pc, #84]	; (14ffc <SystemInit+0x118>)
   14fa8:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
   14faa:	4a15      	ldr	r2, [pc, #84]	; (15000 <SystemInit+0x11c>)
   14fac:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   14fb0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   14fb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
   14fb8:	4a12      	ldr	r2, [pc, #72]	; (15004 <SystemInit+0x120>)
   14fba:	4b13      	ldr	r3, [pc, #76]	; (15008 <SystemInit+0x124>)
   14fbc:	6811      	ldr	r1, [r2, #0]
   14fbe:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
   14fc2:	69d2      	ldr	r2, [r2, #28]
   14fc4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
   14fc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
   14fcc:	f7ff bf7a 	b.w	14ec4 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
   14fd0:	2229      	movs	r2, #41	; 0x29
   14fd2:	4b0a      	ldr	r3, [pc, #40]	; (14ffc <SystemInit+0x118>)
   14fd4:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
   14fd6:	2203      	movs	r2, #3
   14fd8:	631a      	str	r2, [r3, #48]	; 0x30
   14fda:	e7aa      	b.n	14f32 <SystemInit+0x4e>
   14fdc:	e000edd0 	.word	0xe000edd0
   14fe0:	50004a20 	.word	0x50004a20
   14fe4:	50039530 	.word	0x50039530
   14fe8:	beef0044 	.word	0xbeef0044
   14fec:	00ff0130 	.word	0x00ff0130
   14ff0:	00ff0134 	.word	0x00ff0134
   14ff4:	0001e26a 	.word	0x0001e26a
   14ff8:	5003254c 	.word	0x5003254c
   14ffc:	5000470c 	.word	0x5000470c
   15000:	e000ed00 	.word	0xe000ed00
   15004:	00ff8000 	.word	0x00ff8000
   15008:	50006000 	.word	0x50006000

0001500c <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1500c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   1500e:	4604      	mov	r4, r0
   15010:	b940      	cbnz	r0, 15024 <nrfx_clock_init+0x18>
   15012:	4909      	ldr	r1, [pc, #36]	; (15038 <nrfx_clock_init+0x2c>)
   15014:	4809      	ldr	r0, [pc, #36]	; (1503c <nrfx_clock_init+0x30>)
   15016:	22b5      	movs	r2, #181	; 0xb5
   15018:	f005 f9ba 	bl	1a390 <printk>
   1501c:	21b5      	movs	r1, #181	; 0xb5
   1501e:	4806      	ldr	r0, [pc, #24]	; (15038 <nrfx_clock_init+0x2c>)
   15020:	f005 fa82 	bl	1a528 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15024:	4b06      	ldr	r3, [pc, #24]	; (15040 <nrfx_clock_init+0x34>)
   15026:	791a      	ldrb	r2, [r3, #4]
   15028:	b922      	cbnz	r2, 15034 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1502a:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   1502c:	4805      	ldr	r0, [pc, #20]	; (15044 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   1502e:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   15030:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15032:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15034:	4804      	ldr	r0, [pc, #16]	; (15048 <nrfx_clock_init+0x3c>)
    return err_code;
   15036:	e7fc      	b.n	15032 <nrfx_clock_init+0x26>
   15038:	0001e26e 	.word	0x0001e26e
   1503c:	0001d506 	.word	0x0001d506
   15040:	20000a2c 	.word	0x20000a2c
   15044:	0bad0000 	.word	0x0bad0000
   15048:	0bad000c 	.word	0x0bad000c

0001504c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1504c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1504e:	4b0d      	ldr	r3, [pc, #52]	; (15084 <nrfx_clock_enable+0x38>)
   15050:	791b      	ldrb	r3, [r3, #4]
   15052:	b943      	cbnz	r3, 15066 <nrfx_clock_enable+0x1a>
   15054:	490c      	ldr	r1, [pc, #48]	; (15088 <nrfx_clock_enable+0x3c>)
   15056:	480d      	ldr	r0, [pc, #52]	; (1508c <nrfx_clock_enable+0x40>)
   15058:	22ce      	movs	r2, #206	; 0xce
   1505a:	f005 f999 	bl	1a390 <printk>
   1505e:	21ce      	movs	r1, #206	; 0xce
   15060:	4809      	ldr	r0, [pc, #36]	; (15088 <nrfx_clock_enable+0x3c>)
   15062:	f005 fa61 	bl	1a528 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15066:	2005      	movs	r0, #5
   15068:	f7fe f9f0 	bl	1344c <arch_irq_is_enabled>
   1506c:	b910      	cbnz	r0, 15074 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1506e:	2005      	movs	r0, #5
   15070:	f7fe f9dc 	bl	1342c <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   15074:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   15078:	2201      	movs	r2, #1
   1507a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1507e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15082:	bd08      	pop	{r3, pc}
   15084:	20000a2c 	.word	0x20000a2c
   15088:	0001e26e 	.word	0x0001e26e
   1508c:	0001d506 	.word	0x0001d506

00015090 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15090:	4b33      	ldr	r3, [pc, #204]	; (15160 <nrfx_clock_start+0xd0>)
{
   15092:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15094:	791b      	ldrb	r3, [r3, #4]
{
   15096:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15098:	b953      	cbnz	r3, 150b0 <nrfx_clock_start+0x20>
   1509a:	4932      	ldr	r1, [pc, #200]	; (15164 <nrfx_clock_start+0xd4>)
   1509c:	4832      	ldr	r0, [pc, #200]	; (15168 <nrfx_clock_start+0xd8>)
   1509e:	f44f 7285 	mov.w	r2, #266	; 0x10a
   150a2:	f005 f975 	bl	1a390 <printk>
   150a6:	f44f 7185 	mov.w	r1, #266	; 0x10a
   150aa:	482e      	ldr	r0, [pc, #184]	; (15164 <nrfx_clock_start+0xd4>)
   150ac:	f005 fa3c 	bl	1a528 <assert_post_action>
    switch (domain)
   150b0:	2c03      	cmp	r4, #3
   150b2:	d848      	bhi.n	15146 <nrfx_clock_start+0xb6>
   150b4:	e8df f004 	tbb	[pc, r4]
   150b8:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   150bc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   150c0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   150c4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   150c8:	03c9      	lsls	r1, r1, #15
   150ca:	d511      	bpl.n	150f0 <nrfx_clock_start+0x60>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   150cc:	f003 0303 	and.w	r3, r3, #3
   150d0:	2b02      	cmp	r3, #2
   150d2:	d10d      	bne.n	150f0 <nrfx_clock_start+0x60>
    p_reg->LFCLKSRC = (uint32_t)(source);
   150d4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   150d8:	2200      	movs	r2, #0
   150da:	4b24      	ldr	r3, [pc, #144]	; (1516c <nrfx_clock_start+0xdc>)
   150dc:	601a      	str	r2, [r3, #0]
   150de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   150e0:	2202      	movs	r2, #2
   150e2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   150e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   150ea:	2201      	movs	r2, #1
   150ec:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   150ee:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   150f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   150f4:	2201      	movs	r2, #1
   150f6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   150fa:	e7ed      	b.n	150d8 <nrfx_clock_start+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   150fc:	2200      	movs	r2, #0
   150fe:	4b1c      	ldr	r3, [pc, #112]	; (15170 <nrfx_clock_start+0xe0>)
   15100:	601a      	str	r2, [r3, #0]
   15102:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15104:	2201      	movs	r2, #1
   15106:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1510a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1510e:	601a      	str	r2, [r3, #0]
}
   15110:	e7ed      	b.n	150ee <nrfx_clock_start+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15112:	2200      	movs	r2, #0
   15114:	4b17      	ldr	r3, [pc, #92]	; (15174 <nrfx_clock_start+0xe4>)
   15116:	601a      	str	r2, [r3, #0]
   15118:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1511a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1511e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   15122:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15126:	2201      	movs	r2, #1
   15128:	621a      	str	r2, [r3, #32]
}
   1512a:	e7e0      	b.n	150ee <nrfx_clock_start+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1512c:	2200      	movs	r2, #0
   1512e:	4b12      	ldr	r3, [pc, #72]	; (15178 <nrfx_clock_start+0xe8>)
   15130:	601a      	str	r2, [r3, #0]
   15132:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15134:	f44f 7280 	mov.w	r2, #256	; 0x100
   15138:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1513c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15140:	2201      	movs	r2, #1
   15142:	619a      	str	r2, [r3, #24]
}
   15144:	e7d3      	b.n	150ee <nrfx_clock_start+0x5e>
            NRFX_ASSERT(0);
   15146:	4907      	ldr	r1, [pc, #28]	; (15164 <nrfx_clock_start+0xd4>)
   15148:	4807      	ldr	r0, [pc, #28]	; (15168 <nrfx_clock_start+0xd8>)
   1514a:	f44f 729e 	mov.w	r2, #316	; 0x13c
   1514e:	f005 f91f 	bl	1a390 <printk>
}
   15152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   15156:	f44f 719e 	mov.w	r1, #316	; 0x13c
   1515a:	4802      	ldr	r0, [pc, #8]	; (15164 <nrfx_clock_start+0xd4>)
   1515c:	f005 b9e4 	b.w	1a528 <assert_post_action>
   15160:	20000a2c 	.word	0x20000a2c
   15164:	0001e26e 	.word	0x0001e26e
   15168:	0001d506 	.word	0x0001d506
   1516c:	50005104 	.word	0x50005104
   15170:	50005100 	.word	0x50005100
   15174:	50005124 	.word	0x50005124
   15178:	50005120 	.word	0x50005120

0001517c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1517c:	4b44      	ldr	r3, [pc, #272]	; (15290 <nrfx_clock_stop+0x114>)
{
   1517e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15180:	791b      	ldrb	r3, [r3, #4]
{
   15182:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15184:	b953      	cbnz	r3, 1519c <nrfx_clock_stop+0x20>
   15186:	4943      	ldr	r1, [pc, #268]	; (15294 <nrfx_clock_stop+0x118>)
   15188:	4843      	ldr	r0, [pc, #268]	; (15298 <nrfx_clock_stop+0x11c>)
   1518a:	f240 1243 	movw	r2, #323	; 0x143
   1518e:	f005 f8ff 	bl	1a390 <printk>
   15192:	f240 1143 	movw	r1, #323	; 0x143
   15196:	483f      	ldr	r0, [pc, #252]	; (15294 <nrfx_clock_stop+0x118>)
   15198:	f005 f9c6 	bl	1a528 <assert_post_action>
    switch (domain)
   1519c:	2c03      	cmp	r4, #3
   1519e:	d85a      	bhi.n	15256 <nrfx_clock_stop+0xda>
   151a0:	e8df f004 	tbb	[pc, r4]
   151a4:	4c3f2302 	.word	0x4c3f2302
    p_reg->INTENCLR = mask;
   151a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   151ac:	2202      	movs	r2, #2
   151ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151b2:	2200      	movs	r2, #0
   151b4:	f503 7382 	add.w	r3, r3, #260	; 0x104
   151b8:	601a      	str	r2, [r3, #0]
   151ba:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151bc:	4b37      	ldr	r3, [pc, #220]	; (1529c <nrfx_clock_stop+0x120>)
   151be:	2201      	movs	r2, #1
   151c0:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   151c4:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151c8:	601a      	str	r2, [r3, #0]
    switch (domain)
   151ca:	2c02      	cmp	r4, #2
   151cc:	d050      	beq.n	15270 <nrfx_clock_stop+0xf4>
   151ce:	2c03      	cmp	r4, #3
   151d0:	d051      	beq.n	15276 <nrfx_clock_stop+0xfa>
   151d2:	2c00      	cmp	r4, #0
   151d4:	d152      	bne.n	1527c <nrfx_clock_stop+0x100>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   151d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   151da:	03db      	lsls	r3, r3, #15
   151dc:	d520      	bpl.n	15220 <nrfx_clock_stop+0xa4>
   151de:	2001      	movs	r0, #1
   151e0:	f005 fbf0 	bl	1a9c4 <nrfx_busy_wait>
   151e4:	3d01      	subs	r5, #1
   151e6:	d1f0      	bne.n	151ca <nrfx_clock_stop+0x4e>
   151e8:	e01a      	b.n	15220 <nrfx_clock_stop+0xa4>
    p_reg->INTENCLR = mask;
   151ea:	2301      	movs	r3, #1
   151ec:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151f0:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151f2:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151f6:	4a2a      	ldr	r2, [pc, #168]	; (152a0 <nrfx_clock_stop+0x124>)
    p_reg->INTENCLR = mask;
   151f8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151fc:	6011      	str	r1, [r2, #0]
   151fe:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15200:	4a28      	ldr	r2, [pc, #160]	; (152a4 <nrfx_clock_stop+0x128>)
   15202:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15204:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15208:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1520c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15210:	03d2      	lsls	r2, r2, #15
   15212:	d505      	bpl.n	15220 <nrfx_clock_stop+0xa4>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15214:	b123      	cbz	r3, 15220 <nrfx_clock_stop+0xa4>
   15216:	2001      	movs	r0, #1
   15218:	f005 fbd4 	bl	1a9c4 <nrfx_busy_wait>
   1521c:	3d01      	subs	r5, #1
   1521e:	d1f1      	bne.n	15204 <nrfx_clock_stop+0x88>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15220:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   15222:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   15226:	f44f 7200 	mov.w	r2, #512	; 0x200
   1522a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1522e:	2200      	movs	r2, #0
   15230:	f503 7392 	add.w	r3, r3, #292	; 0x124
   15234:	601a      	str	r2, [r3, #0]
   15236:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15238:	4b1b      	ldr	r3, [pc, #108]	; (152a8 <nrfx_clock_stop+0x12c>)
   1523a:	e7c0      	b.n	151be <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   1523c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   15240:	f44f 7280 	mov.w	r2, #256	; 0x100
   15244:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15248:	2200      	movs	r2, #0
   1524a:	f503 7390 	add.w	r3, r3, #288	; 0x120
   1524e:	601a      	str	r2, [r3, #0]
   15250:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15252:	4b16      	ldr	r3, [pc, #88]	; (152ac <nrfx_clock_stop+0x130>)
   15254:	e7b3      	b.n	151be <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   15256:	490f      	ldr	r1, [pc, #60]	; (15294 <nrfx_clock_stop+0x118>)
   15258:	480f      	ldr	r0, [pc, #60]	; (15298 <nrfx_clock_stop+0x11c>)
   1525a:	f240 125f 	movw	r2, #351	; 0x15f
   1525e:	f005 f897 	bl	1a390 <printk>
   15262:	f240 115f 	movw	r1, #351	; 0x15f
   15266:	480b      	ldr	r0, [pc, #44]	; (15294 <nrfx_clock_stop+0x118>)
}
   15268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   1526c:	f005 b95c 	b.w	1a528 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15270:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15274:	e7b1      	b.n	151da <nrfx_clock_stop+0x5e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   15276:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1527a:	e7ae      	b.n	151da <nrfx_clock_stop+0x5e>
            NRFX_ASSERT(0);
   1527c:	490c      	ldr	r1, [pc, #48]	; (152b0 <nrfx_clock_stop+0x134>)
   1527e:	4806      	ldr	r0, [pc, #24]	; (15298 <nrfx_clock_stop+0x11c>)
   15280:	f44f 724f 	mov.w	r2, #828	; 0x33c
   15284:	f005 f884 	bl	1a390 <printk>
   15288:	f44f 714f 	mov.w	r1, #828	; 0x33c
   1528c:	4808      	ldr	r0, [pc, #32]	; (152b0 <nrfx_clock_stop+0x134>)
   1528e:	e7eb      	b.n	15268 <nrfx_clock_stop+0xec>
   15290:	20000a2c 	.word	0x20000a2c
   15294:	0001e26e 	.word	0x0001e26e
   15298:	0001d506 	.word	0x0001d506
   1529c:	5000500c 	.word	0x5000500c
   152a0:	50005100 	.word	0x50005100
   152a4:	50005004 	.word	0x50005004
   152a8:	50005024 	.word	0x50005024
   152ac:	5000501c 	.word	0x5000501c
   152b0:	0001e2ab 	.word	0x0001e2ab

000152b4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   152b4:	4b26      	ldr	r3, [pc, #152]	; (15350 <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   152b6:	b510      	push	{r4, lr}
   152b8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   152ba:	b152      	cbz	r2, 152d2 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   152bc:	2000      	movs	r0, #0
   152be:	6018      	str	r0, [r3, #0]
   152c0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   152c2:	2201      	movs	r2, #1
   152c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   152c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   152cc:	4b21      	ldr	r3, [pc, #132]	; (15354 <nrfx_power_clock_irq_handler+0xa0>)
   152ce:	681b      	ldr	r3, [r3, #0]
   152d0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   152d2:	4b21      	ldr	r3, [pc, #132]	; (15358 <nrfx_power_clock_irq_handler+0xa4>)
   152d4:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   152d6:	b18a      	cbz	r2, 152fc <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   152d8:	2200      	movs	r2, #0
   152da:	601a      	str	r2, [r3, #0]
   152dc:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   152de:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   152e2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   152e6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   152ea:	f002 0203 	and.w	r2, r2, #3
   152ee:	2a01      	cmp	r2, #1
   152f0:	f04f 0102 	mov.w	r1, #2
   152f4:	d124      	bne.n	15340 <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   152f6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   152fa:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   152fc:	4b17      	ldr	r3, [pc, #92]	; (1535c <nrfx_power_clock_irq_handler+0xa8>)
   152fe:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   15300:	b162      	cbz	r2, 1531c <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15302:	2200      	movs	r2, #0
   15304:	601a      	str	r2, [r3, #0]
   15306:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15308:	f44f 7280 	mov.w	r2, #256	; 0x100
   1530c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   15310:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   15314:	4b0f      	ldr	r3, [pc, #60]	; (15354 <nrfx_power_clock_irq_handler+0xa0>)
   15316:	2004      	movs	r0, #4
   15318:	681b      	ldr	r3, [r3, #0]
   1531a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1531c:	4b10      	ldr	r3, [pc, #64]	; (15360 <nrfx_power_clock_irq_handler+0xac>)
   1531e:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   15320:	b1aa      	cbz	r2, 1534e <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   15322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15326:	2200      	movs	r2, #0
   15328:	601a      	str	r2, [r3, #0]
   1532a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1532c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15330:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   15334:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   15338:	4b06      	ldr	r3, [pc, #24]	; (15354 <nrfx_power_clock_irq_handler+0xa0>)
   1533a:	2005      	movs	r0, #5
   1533c:	681b      	ldr	r3, [r3, #0]
   1533e:	4718      	bx	r3
   15340:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   15344:	4b03      	ldr	r3, [pc, #12]	; (15354 <nrfx_power_clock_irq_handler+0xa0>)
   15346:	2001      	movs	r0, #1
   15348:	681b      	ldr	r3, [r3, #0]
   1534a:	4798      	blx	r3
   1534c:	e7d6      	b.n	152fc <nrfx_power_clock_irq_handler+0x48>
}
   1534e:	bd10      	pop	{r4, pc}
   15350:	50005100 	.word	0x50005100
   15354:	20000a2c 	.word	0x20000a2c
   15358:	50005104 	.word	0x50005104
   1535c:	50005120 	.word	0x50005120
   15360:	50005124 	.word	0x50005124

00015364 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15364:	4b0e      	ldr	r3, [pc, #56]	; (153a0 <z_sys_init_run_level+0x3c>)
{
   15366:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15368:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1536c:	3001      	adds	r0, #1
   1536e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   15372:	42a6      	cmp	r6, r4
   15374:	d800      	bhi.n	15378 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   15376:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   15378:	e9d4 3500 	ldrd	r3, r5, [r4]
   1537c:	4628      	mov	r0, r5
   1537e:	4798      	blx	r3
		if (dev != NULL) {
   15380:	b165      	cbz	r5, 1539c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   15382:	68eb      	ldr	r3, [r5, #12]
   15384:	b130      	cbz	r0, 15394 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   15386:	2800      	cmp	r0, #0
   15388:	bfb8      	it	lt
   1538a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1538c:	28ff      	cmp	r0, #255	; 0xff
   1538e:	bfa8      	it	ge
   15390:	20ff      	movge	r0, #255	; 0xff
   15392:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   15394:	785a      	ldrb	r2, [r3, #1]
   15396:	f042 0201 	orr.w	r2, r2, #1
   1539a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1539c:	3408      	adds	r4, #8
   1539e:	e7e8      	b.n	15372 <z_sys_init_run_level+0xe>
   153a0:	0001d218 	.word	0x0001d218

000153a4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   153a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   153a6:	4604      	mov	r4, r0
   153a8:	460e      	mov	r6, r1
	__asm__ volatile(
   153aa:	f04f 0320 	mov.w	r3, #32
   153ae:	f3ef 8711 	mrs	r7, BASEPRI
   153b2:	f383 8812 	msr	BASEPRI_MAX, r3
   153b6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   153ba:	f001 fbef 	bl	16b9c <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   153be:	2200      	movs	r2, #0
   153c0:	2c04      	cmp	r4, #4
   153c2:	bf98      	it	ls
   153c4:	4b1d      	ldrls	r3, [pc, #116]	; (1543c <z_fatal_error+0x98>)
   153c6:	4605      	mov	r5, r0
	switch (reason) {
   153c8:	bf94      	ite	ls
   153ca:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   153ce:	4b1c      	ldrhi	r3, [pc, #112]	; (15440 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   153d0:	9200      	str	r2, [sp, #0]
   153d2:	2145      	movs	r1, #69	; 0x45
   153d4:	4622      	mov	r2, r4
   153d6:	481b      	ldr	r0, [pc, #108]	; (15444 <z_fatal_error+0xa0>)
   153d8:	f005 f8b9 	bl	1a54e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   153dc:	b13e      	cbz	r6, 153ee <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   153de:	69f3      	ldr	r3, [r6, #28]
   153e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   153e4:	b11b      	cbz	r3, 153ee <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   153e6:	2145      	movs	r1, #69	; 0x45
   153e8:	4817      	ldr	r0, [pc, #92]	; (15448 <z_fatal_error+0xa4>)
   153ea:	f005 f8b0 	bl	1a54e <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   153ee:	b135      	cbz	r5, 153fe <z_fatal_error+0x5a>
   153f0:	4628      	mov	r0, r5
   153f2:	f005 fb16 	bl	1aa22 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   153f6:	4603      	mov	r3, r0
   153f8:	b108      	cbz	r0, 153fe <z_fatal_error+0x5a>
   153fa:	7802      	ldrb	r2, [r0, #0]
   153fc:	b902      	cbnz	r2, 15400 <z_fatal_error+0x5c>
		thread_name = "unknown";
   153fe:	4b13      	ldr	r3, [pc, #76]	; (1544c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   15400:	462a      	mov	r2, r5
   15402:	2145      	movs	r1, #69	; 0x45
   15404:	4812      	ldr	r0, [pc, #72]	; (15450 <z_fatal_error+0xac>)
   15406:	f005 f8a2 	bl	1a54e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1540a:	4631      	mov	r1, r6
   1540c:	4620      	mov	r0, r4
   1540e:	f7ff fced 	bl	14dec <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   15412:	2c04      	cmp	r4, #4
   15414:	d108      	bne.n	15428 <z_fatal_error+0x84>
   15416:	490f      	ldr	r1, [pc, #60]	; (15454 <z_fatal_error+0xb0>)
   15418:	480f      	ldr	r0, [pc, #60]	; (15458 <z_fatal_error+0xb4>)
   1541a:	228f      	movs	r2, #143	; 0x8f
   1541c:	f004 ffb8 	bl	1a390 <printk>
   15420:	218f      	movs	r1, #143	; 0x8f
   15422:	480c      	ldr	r0, [pc, #48]	; (15454 <z_fatal_error+0xb0>)
   15424:	f005 f880 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   15428:	f387 8811 	msr	BASEPRI, r7
   1542c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15430:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15432:	b003      	add	sp, #12
   15434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15438:	f7fe bc32 	b.w	13ca0 <z_impl_k_thread_abort>
   1543c:	0001d230 	.word	0x0001d230
   15440:	0001e2df 	.word	0x0001e2df
   15444:	0001e2f5 	.word	0x0001e2f5
   15448:	0001e322 	.word	0x0001e322
   1544c:	0001e2ed 	.word	0x0001e2ed
   15450:	0001e348 	.word	0x0001e348
   15454:	0001e365 	.word	0x0001e365
   15458:	0001d506 	.word	0x0001d506

0001545c <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1545c:	2300      	movs	r3, #0
   1545e:	2201      	movs	r2, #1
{
   15460:	b510      	push	{r4, lr}
   15462:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   15464:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15468:	220f      	movs	r2, #15
   1546a:	9301      	str	r3, [sp, #4]
   1546c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15470:	2318      	movs	r3, #24
   15472:	4a0b      	ldr	r2, [pc, #44]	; (154a0 <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
   15474:	4c0b      	ldr	r4, [pc, #44]	; (154a4 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15476:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   1547a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1547e:	490a      	ldr	r1, [pc, #40]	; (154a8 <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
   15480:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
   15484:	fb02 1100 	mla	r1, r2, r0, r1
   15488:	9300      	str	r3, [sp, #0]
   1548a:	4620      	mov	r0, r4
   1548c:	4b07      	ldr	r3, [pc, #28]	; (154ac <init_idle_thread+0x50>)
   1548e:	f000 f991 	bl	157b4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15492:	7b63      	ldrb	r3, [r4, #13]
   15494:	f023 0304 	bic.w	r3, r3, #4
   15498:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1549a:	b006      	add	sp, #24
   1549c:	bd10      	pop	{r4, pc}
   1549e:	bf00      	nop
   154a0:	20000a34 	.word	0x20000a34
   154a4:	20000140 	.word	0x20000140
   154a8:	20007e80 	.word	0x20007e80
   154ac:	000159a5 	.word	0x000159a5

000154b0 <bg_thread_main>:
	z_sys_post_kernel = true;
   154b0:	2201      	movs	r2, #1
{
   154b2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   154b4:	4b09      	ldr	r3, [pc, #36]	; (154dc <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   154b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   154b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   154ba:	f7ff ff53 	bl	15364 <z_sys_init_run_level>
	boot_banner();
   154be:	f001 fecd 	bl	1725c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   154c2:	2003      	movs	r0, #3
   154c4:	f7ff ff4e 	bl	15364 <z_sys_init_run_level>
	z_init_static_threads();
   154c8:	f000 f9c8 	bl	1585c <z_init_static_threads>
	main();
   154cc:	f004 ff46 	bl	1a35c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   154d0:	4a03      	ldr	r2, [pc, #12]	; (154e0 <bg_thread_main+0x30>)
   154d2:	7b13      	ldrb	r3, [r2, #12]
   154d4:	f023 0301 	bic.w	r3, r3, #1
   154d8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   154da:	bd08      	pop	{r3, pc}
   154dc:	200018bd 	.word	0x200018bd
   154e0:	200001c0 	.word	0x200001c0

000154e4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   154e4:	4802      	ldr	r0, [pc, #8]	; (154f0 <z_bss_zero+0xc>)
   154e6:	4a03      	ldr	r2, [pc, #12]	; (154f4 <z_bss_zero+0x10>)
   154e8:	2100      	movs	r1, #0
   154ea:	1a12      	subs	r2, r2, r0
   154ec:	f005 b8d7 	b.w	1a69e <memset>
   154f0:	20000120 	.word	0x20000120
   154f4:	20001a7c 	.word	0x20001a7c

000154f8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   154f8:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   154fa:	4b36      	ldr	r3, [pc, #216]	; (155d4 <z_cstart+0xdc>)
   154fc:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   154fe:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15502:	f387 8808 	msr	MSP, r7
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   15506:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1550a:	2400      	movs	r4, #0
   1550c:	23e0      	movs	r3, #224	; 0xe0
   1550e:	4d32      	ldr	r5, [pc, #200]	; (155d8 <z_cstart+0xe0>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   15510:	4e32      	ldr	r6, [pc, #200]	; (155dc <z_cstart+0xe4>)
   15512:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15516:	77ec      	strb	r4, [r5, #31]
   15518:	762c      	strb	r4, [r5, #24]
   1551a:	766c      	strb	r4, [r5, #25]
   1551c:	76ac      	strb	r4, [r5, #26]
   1551e:	f885 4020 	strb.w	r4, [r5, #32]
   15522:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15524:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15526:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 155f0 <z_cstart+0xf8>
   1552a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1552e:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   15530:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15536:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   15538:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
   1553a:	68eb      	ldr	r3, [r5, #12]
   1553c:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
   1553e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   15542:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
   15546:	60eb      	str	r3, [r5, #12]
   15548:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1554c:	f7fe fb0e 	bl	13b6c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15550:	f7fd ff20 	bl	13394 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15554:	f04f 33ff 	mov.w	r3, #4294967295
   15558:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1555a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1555c:	f7fe fdd0 	bl	14100 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   15560:	f7fe fc28 	bl	13db4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   15564:	f240 1301 	movw	r3, #257	; 0x101
   15568:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1556c:	ab06      	add	r3, sp, #24
   1556e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   15570:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15574:	f005 fa28 	bl	1a9c8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   15578:	4620      	mov	r0, r4
   1557a:	f7ff fef3 	bl	15364 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1557e:	2001      	movs	r0, #1
   15580:	f7ff fef0 	bl	15364 <z_sys_init_run_level>
	z_sched_init();
   15584:	f001 f9ba 	bl	168fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15588:	4b15      	ldr	r3, [pc, #84]	; (155e0 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   1558a:	4d16      	ldr	r5, [pc, #88]	; (155e4 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1558c:	9305      	str	r3, [sp, #20]
   1558e:	2301      	movs	r3, #1
   15590:	4915      	ldr	r1, [pc, #84]	; (155e8 <z_cstart+0xf0>)
   15592:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
   15596:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1559a:	4628      	mov	r0, r5
   1559c:	464b      	mov	r3, r9
   1559e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   155a2:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
   155a4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   155a6:	f000 f905 	bl	157b4 <z_setup_new_thread>
   155aa:	4680      	mov	r8, r0
   155ac:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   155ae:	4628      	mov	r0, r5
   155b0:	f022 0204 	bic.w	r2, r2, #4
   155b4:	736a      	strb	r2, [r5, #13]
   155b6:	f000 fe99 	bl	162ec <z_ready_thread>
		init_idle_thread(i);
   155ba:	4620      	mov	r0, r4
   155bc:	f7ff ff4e 	bl	1545c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   155c0:	4b0a      	ldr	r3, [pc, #40]	; (155ec <z_cstart+0xf4>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   155c2:	464a      	mov	r2, r9
   155c4:	4641      	mov	r1, r8
   155c6:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   155c8:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
   155ca:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   155cc:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   155ce:	f7fe f803 	bl	135d8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   155d2:	bf00      	nop
   155d4:	20007fc0 	.word	0x20007fc0
   155d8:	e000ed00 	.word	0xe000ed00
   155dc:	20000a34 	.word	0x20000a34
   155e0:	0001e3d1 	.word	0x0001e3d1
   155e4:	200001c0 	.word	0x200001c0
   155e8:	20001a80 	.word	0x20001a80
   155ec:	20000140 	.word	0x20000140
   155f0:	000154b1 	.word	0x000154b1

000155f4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   155f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   155f8:	4d14      	ldr	r5, [pc, #80]	; (1564c <init_mem_slab_module+0x58>)
   155fa:	4c15      	ldr	r4, [pc, #84]	; (15650 <init_mem_slab_module+0x5c>)
   155fc:	46a8      	mov	r8, r5
   155fe:	4e15      	ldr	r6, [pc, #84]	; (15654 <init_mem_slab_module+0x60>)
   15600:	42ac      	cmp	r4, r5
   15602:	d908      	bls.n	15616 <init_mem_slab_module+0x22>
   15604:	4631      	mov	r1, r6
   15606:	4814      	ldr	r0, [pc, #80]	; (15658 <init_mem_slab_module+0x64>)
   15608:	223c      	movs	r2, #60	; 0x3c
   1560a:	f004 fec1 	bl	1a390 <printk>
   1560e:	213c      	movs	r1, #60	; 0x3c
   15610:	4630      	mov	r0, r6
   15612:	f004 ff89 	bl	1a528 <assert_post_action>
   15616:	4544      	cmp	r4, r8
   15618:	d302      	bcc.n	15620 <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1561a:	2000      	movs	r0, #0
	return rc;
}
   1561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15620:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   15624:	ea42 0301 	orr.w	r3, r2, r1
   15628:	f013 0303 	ands.w	r3, r3, #3
   1562c:	d10b      	bne.n	15646 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   1562e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   15630:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15632:	4283      	cmp	r3, r0
   15634:	d101      	bne.n	1563a <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15636:	3420      	adds	r4, #32
   15638:	e7e2      	b.n	15600 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   1563a:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1563c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1563e:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   15640:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   15642:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   15644:	e7f5      	b.n	15632 <init_mem_slab_module+0x3e>
		return -EINVAL;
   15646:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1564a:	e7e7      	b.n	1561c <init_mem_slab_module+0x28>
   1564c:	200000cc 	.word	0x200000cc
   15650:	200000cc 	.word	0x200000cc
   15654:	0001e3d9 	.word	0x0001e3d9
   15658:	0001d506 	.word	0x0001d506

0001565c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1565c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15660:	4604      	mov	r4, r0
   15662:	460d      	mov	r5, r1
   15664:	4690      	mov	r8, r2
   15666:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   15668:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1566c:	f04f 0320 	mov.w	r3, #32
   15670:	f3ef 8711 	mrs	r7, BASEPRI
   15674:	f383 8812 	msr	BASEPRI_MAX, r3
   15678:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1567c:	4630      	mov	r0, r6
   1567e:	f000 f96d 	bl	1595c <z_spin_lock_valid>
   15682:	b940      	cbnz	r0, 15696 <k_mem_slab_alloc+0x3a>
   15684:	491f      	ldr	r1, [pc, #124]	; (15704 <k_mem_slab_alloc+0xa8>)
   15686:	4820      	ldr	r0, [pc, #128]	; (15708 <k_mem_slab_alloc+0xac>)
   15688:	2281      	movs	r2, #129	; 0x81
   1568a:	f004 fe81 	bl	1a390 <printk>
   1568e:	2181      	movs	r1, #129	; 0x81
   15690:	481c      	ldr	r0, [pc, #112]	; (15704 <k_mem_slab_alloc+0xa8>)
   15692:	f004 ff49 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15696:	4630      	mov	r0, r6
   15698:	f000 f97c 	bl	15994 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1569c:	69a3      	ldr	r3, [r4, #24]
   1569e:	b1c3      	cbz	r3, 156d2 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   156a0:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   156a2:	681b      	ldr	r3, [r3, #0]
   156a4:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   156a6:	69e3      	ldr	r3, [r4, #28]
   156a8:	3301      	adds	r3, #1
   156aa:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   156ac:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   156ae:	4630      	mov	r0, r6
   156b0:	f000 f962 	bl	15978 <z_spin_unlock_valid>
   156b4:	b940      	cbnz	r0, 156c8 <k_mem_slab_alloc+0x6c>
   156b6:	4913      	ldr	r1, [pc, #76]	; (15704 <k_mem_slab_alloc+0xa8>)
   156b8:	4813      	ldr	r0, [pc, #76]	; (15708 <k_mem_slab_alloc+0xac>)
   156ba:	22ac      	movs	r2, #172	; 0xac
   156bc:	f004 fe68 	bl	1a390 <printk>
   156c0:	21ac      	movs	r1, #172	; 0xac
   156c2:	4810      	ldr	r0, [pc, #64]	; (15704 <k_mem_slab_alloc+0xa8>)
   156c4:	f004 ff30 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   156c8:	f387 8811 	msr	BASEPRI, r7
   156cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   156d0:	e013      	b.n	156fa <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   156d2:	ea58 0209 	orrs.w	r2, r8, r9
   156d6:	d103      	bne.n	156e0 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   156d8:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   156dc:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   156de:	e7e6      	b.n	156ae <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   156e0:	4622      	mov	r2, r4
   156e2:	4639      	mov	r1, r7
   156e4:	4630      	mov	r0, r6
   156e6:	e9cd 8900 	strd	r8, r9, [sp]
   156ea:	f000 ff67 	bl	165bc <z_pend_curr>
		if (result == 0) {
   156ee:	4604      	mov	r4, r0
   156f0:	b918      	cbnz	r0, 156fa <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   156f2:	4b06      	ldr	r3, [pc, #24]	; (1570c <k_mem_slab_alloc+0xb0>)
   156f4:	689b      	ldr	r3, [r3, #8]
   156f6:	695b      	ldr	r3, [r3, #20]
   156f8:	602b      	str	r3, [r5, #0]
}
   156fa:	4620      	mov	r0, r4
   156fc:	b003      	add	sp, #12
   156fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15702:	bf00      	nop
   15704:	0001d540 	.word	0x0001d540
   15708:	0001d506 	.word	0x0001d506
   1570c:	20000a34 	.word	0x20000a34

00015710 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15714:	4604      	mov	r4, r0
   15716:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   15718:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1571c:	f04f 0320 	mov.w	r3, #32
   15720:	f3ef 8711 	mrs	r7, BASEPRI
   15724:	f383 8812 	msr	BASEPRI_MAX, r3
   15728:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1572c:	4630      	mov	r0, r6
   1572e:	f000 f915 	bl	1595c <z_spin_lock_valid>
   15732:	b940      	cbnz	r0, 15746 <k_mem_slab_free+0x36>
   15734:	491d      	ldr	r1, [pc, #116]	; (157ac <k_mem_slab_free+0x9c>)
   15736:	481e      	ldr	r0, [pc, #120]	; (157b0 <k_mem_slab_free+0xa0>)
   15738:	2281      	movs	r2, #129	; 0x81
   1573a:	f004 fe29 	bl	1a390 <printk>
   1573e:	2181      	movs	r1, #129	; 0x81
   15740:	481a      	ldr	r0, [pc, #104]	; (157ac <k_mem_slab_free+0x9c>)
   15742:	f004 fef1 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15746:	4630      	mov	r0, r6
   15748:	f000 f924 	bl	15994 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1574c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   15750:	f1b8 0f00 	cmp.w	r8, #0
   15754:	d10f      	bne.n	15776 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15756:	4620      	mov	r0, r4
   15758:	f001 f892 	bl	16880 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1575c:	b158      	cbz	r0, 15776 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1575e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15760:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15764:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   15766:	f000 fdc1 	bl	162ec <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1576a:	4639      	mov	r1, r7
   1576c:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1576e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   15772:	f000 bbbd 	b.w	15ef0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   15776:	682b      	ldr	r3, [r5, #0]
   15778:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1577a:	4630      	mov	r0, r6
   1577c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1577e:	682b      	ldr	r3, [r5, #0]
   15780:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   15782:	69e3      	ldr	r3, [r4, #28]
   15784:	3b01      	subs	r3, #1
   15786:	61e3      	str	r3, [r4, #28]
   15788:	f000 f8f6 	bl	15978 <z_spin_unlock_valid>
   1578c:	b940      	cbnz	r0, 157a0 <k_mem_slab_free+0x90>
   1578e:	4907      	ldr	r1, [pc, #28]	; (157ac <k_mem_slab_free+0x9c>)
   15790:	4807      	ldr	r0, [pc, #28]	; (157b0 <k_mem_slab_free+0xa0>)
   15792:	22ac      	movs	r2, #172	; 0xac
   15794:	f004 fdfc 	bl	1a390 <printk>
   15798:	21ac      	movs	r1, #172	; 0xac
   1579a:	4804      	ldr	r0, [pc, #16]	; (157ac <k_mem_slab_free+0x9c>)
   1579c:	f004 fec4 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   157a0:	f387 8811 	msr	BASEPRI, r7
   157a4:	f3bf 8f6f 	isb	sy
}
   157a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   157ac:	0001d540 	.word	0x0001d540
   157b0:	0001d506 	.word	0x0001d506

000157b4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   157b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   157b8:	b085      	sub	sp, #20
   157ba:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   157be:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   157c0:	f1b9 0f0f 	cmp.w	r9, #15
{
   157c4:	460f      	mov	r7, r1
   157c6:	4615      	mov	r5, r2
   157c8:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   157ca:	d12e      	bne.n	1582a <z_setup_new_thread+0x76>
   157cc:	4b1f      	ldr	r3, [pc, #124]	; (1584c <z_setup_new_thread+0x98>)
   157ce:	4598      	cmp	r8, r3
   157d0:	d12f      	bne.n	15832 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   157d2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   157d6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   157da:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   157dc:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   157de:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   157e0:	2304      	movs	r3, #4
   157e2:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   157e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   157e6:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   157e8:	9302      	str	r3, [sp, #8]
   157ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   157ec:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   157f0:	9301      	str	r3, [sp, #4]
   157f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   157f4:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   157f6:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   157fa:	9300      	str	r3, [sp, #0]
   157fc:	462a      	mov	r2, r5
   157fe:	4643      	mov	r3, r8
   15800:	4639      	mov	r1, r7
   15802:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   15804:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   15808:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   1580a:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   1580e:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   15810:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15812:	f7fd fec5 	bl	135a0 <arch_new_thread>
	if (!_current) {
   15816:	4b0e      	ldr	r3, [pc, #56]	; (15850 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   15818:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   1581a:	689b      	ldr	r3, [r3, #8]
   1581c:	b103      	cbz	r3, 15820 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   1581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   15820:	4628      	mov	r0, r5
   15822:	6723      	str	r3, [r4, #112]	; 0x70
   15824:	b005      	add	sp, #20
   15826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1582a:	f109 0310 	add.w	r3, r9, #16
   1582e:	2b1e      	cmp	r3, #30
   15830:	d9cf      	bls.n	157d2 <z_setup_new_thread+0x1e>
   15832:	f240 2205 	movw	r2, #517	; 0x205
   15836:	4907      	ldr	r1, [pc, #28]	; (15854 <z_setup_new_thread+0xa0>)
   15838:	4807      	ldr	r0, [pc, #28]	; (15858 <z_setup_new_thread+0xa4>)
   1583a:	f004 fda9 	bl	1a390 <printk>
   1583e:	f240 2105 	movw	r1, #517	; 0x205
   15842:	4804      	ldr	r0, [pc, #16]	; (15854 <z_setup_new_thread+0xa0>)
   15844:	f004 fe70 	bl	1a528 <assert_post_action>
   15848:	e7c3      	b.n	157d2 <z_setup_new_thread+0x1e>
   1584a:	bf00      	nop
   1584c:	000159a5 	.word	0x000159a5
   15850:	20000a34 	.word	0x20000a34
   15854:	0001e3fe 	.word	0x0001e3fe
   15858:	0001d506 	.word	0x0001d506

0001585c <z_init_static_threads>:
{
   1585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   15860:	4f39      	ldr	r7, [pc, #228]	; (15948 <z_init_static_threads+0xec>)
   15862:	4d3a      	ldr	r5, [pc, #232]	; (1594c <z_init_static_threads+0xf0>)
   15864:	463e      	mov	r6, r7
   15866:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 15954 <z_init_static_threads+0xf8>
{
   1586a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1586c:	42bd      	cmp	r5, r7
   1586e:	d90a      	bls.n	15886 <z_init_static_threads+0x2a>
   15870:	4641      	mov	r1, r8
   15872:	4837      	ldr	r0, [pc, #220]	; (15950 <z_init_static_threads+0xf4>)
   15874:	f240 22d5 	movw	r2, #725	; 0x2d5
   15878:	f004 fd8a 	bl	1a390 <printk>
   1587c:	f240 21d5 	movw	r1, #725	; 0x2d5
   15880:	4640      	mov	r0, r8
   15882:	f004 fe51 	bl	1a528 <assert_post_action>
   15886:	42b5      	cmp	r5, r6
   15888:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1588c:	d31d      	bcc.n	158ca <z_init_static_threads+0x6e>
	k_sched_lock();
   1588e:	f000 fb65 	bl	15f5c <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
   15892:	f240 38e7 	movw	r8, #999	; 0x3e7
   15896:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1589a:	4c2c      	ldr	r4, [pc, #176]	; (1594c <z_init_static_threads+0xf0>)
   1589c:	4d2d      	ldr	r5, [pc, #180]	; (15954 <z_init_static_threads+0xf8>)
   1589e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 15950 <z_init_static_threads+0xf4>
   158a2:	42b4      	cmp	r4, r6
   158a4:	d90a      	bls.n	158bc <z_init_static_threads+0x60>
   158a6:	4629      	mov	r1, r5
   158a8:	4650      	mov	r0, sl
   158aa:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   158ae:	f004 fd6f 	bl	1a390 <printk>
   158b2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   158b6:	4628      	mov	r0, r5
   158b8:	f004 fe36 	bl	1a528 <assert_post_action>
   158bc:	42b4      	cmp	r4, r6
   158be:	d321      	bcc.n	15904 <z_init_static_threads+0xa8>
}
   158c0:	b006      	add	sp, #24
   158c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   158c6:	f000 bf7f 	b.w	167c8 <k_sched_unlock>
		z_setup_new_thread(
   158ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   158ce:	9305      	str	r3, [sp, #20]
   158d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   158d4:	9304      	str	r3, [sp, #16]
   158d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   158da:	9303      	str	r3, [sp, #12]
   158dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   158e0:	9302      	str	r3, [sp, #8]
   158e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   158e6:	9301      	str	r3, [sp, #4]
   158e8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   158ec:	9300      	str	r3, [sp, #0]
   158ee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   158f2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   158f6:	f7ff ff5d 	bl	157b4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   158fa:	f854 3c30 	ldr.w	r3, [r4, #-48]
   158fe:	655d      	str	r5, [r3, #84]	; 0x54
   15900:	4625      	mov	r5, r4
   15902:	e7b3      	b.n	1586c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15904:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15906:	1c5a      	adds	r2, r3, #1
   15908:	d00f      	beq.n	1592a <z_init_static_threads+0xce>
   1590a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1590e:	4640      	mov	r0, r8
   15910:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
   15912:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15916:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1591a:	4549      	cmp	r1, r9
   1591c:	bf08      	it	eq
   1591e:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   15920:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15922:	d104      	bne.n	1592e <z_init_static_threads+0xd2>
	z_sched_start(thread);
   15924:	4638      	mov	r0, r7
   15926:	f000 fd17 	bl	16358 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1592a:	3430      	adds	r4, #48	; 0x30
   1592c:	e7b9      	b.n	158a2 <z_init_static_threads+0x46>
   1592e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15932:	2300      	movs	r3, #0
   15934:	f7ea fc84 	bl	240 <__aeabi_uldivmod>
   15938:	4602      	mov	r2, r0
   1593a:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1593c:	f107 0018 	add.w	r0, r7, #24
   15940:	4905      	ldr	r1, [pc, #20]	; (15958 <z_init_static_threads+0xfc>)
   15942:	f001 fa2f 	bl	16da4 <z_add_timeout>
   15946:	e7f0      	b.n	1592a <z_init_static_threads+0xce>
   15948:	200000cc 	.word	0x200000cc
   1594c:	200000cc 	.word	0x200000cc
   15950:	0001d506 	.word	0x0001d506
   15954:	0001e3fe 	.word	0x0001e3fe
   15958:	000163dd 	.word	0x000163dd

0001595c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1595c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1595e:	b138      	cbz	r0, 15970 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   15960:	4b04      	ldr	r3, [pc, #16]	; (15974 <z_spin_lock_valid+0x18>)
   15962:	f000 0003 	and.w	r0, r0, #3
   15966:	7d1b      	ldrb	r3, [r3, #20]
   15968:	1ac0      	subs	r0, r0, r3
   1596a:	bf18      	it	ne
   1596c:	2001      	movne	r0, #1
   1596e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   15970:	2001      	movs	r0, #1
}
   15972:	4770      	bx	lr
   15974:	20000a34 	.word	0x20000a34

00015978 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   15978:	4905      	ldr	r1, [pc, #20]	; (15990 <z_spin_unlock_valid+0x18>)
{
   1597a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1597c:	688a      	ldr	r2, [r1, #8]
   1597e:	7d08      	ldrb	r0, [r1, #20]
   15980:	6819      	ldr	r1, [r3, #0]
   15982:	4302      	orrs	r2, r0
   15984:	2000      	movs	r0, #0
   15986:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   15988:	bf04      	itt	eq
   1598a:	6018      	streq	r0, [r3, #0]
	return true;
   1598c:	2001      	moveq	r0, #1
}
   1598e:	4770      	bx	lr
   15990:	20000a34 	.word	0x20000a34

00015994 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   15994:	4a02      	ldr	r2, [pc, #8]	; (159a0 <z_spin_lock_set_owner+0xc>)
   15996:	7d11      	ldrb	r1, [r2, #20]
   15998:	6893      	ldr	r3, [r2, #8]
   1599a:	430b      	orrs	r3, r1
   1599c:	6003      	str	r3, [r0, #0]
}
   1599e:	4770      	bx	lr
   159a0:	20000a34 	.word	0x20000a34

000159a4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   159a4:	4c10      	ldr	r4, [pc, #64]	; (159e8 <idle+0x44>)
{
   159a6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   159a8:	68a2      	ldr	r2, [r4, #8]
   159aa:	f992 200e 	ldrsb.w	r2, [r2, #14]
   159ae:	2a00      	cmp	r2, #0
   159b0:	da08      	bge.n	159c4 <idle+0x20>
   159b2:	490e      	ldr	r1, [pc, #56]	; (159ec <idle+0x48>)
   159b4:	480e      	ldr	r0, [pc, #56]	; (159f0 <idle+0x4c>)
   159b6:	2246      	movs	r2, #70	; 0x46
   159b8:	f004 fcea 	bl	1a390 <printk>
   159bc:	2146      	movs	r1, #70	; 0x46
   159be:	480b      	ldr	r0, [pc, #44]	; (159ec <idle+0x48>)
   159c0:	f004 fdb2 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   159c4:	f04f 0220 	mov.w	r2, #32
   159c8:	f3ef 8311 	mrs	r3, BASEPRI
   159cc:	f382 8812 	msr	BASEPRI_MAX, r2
   159d0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   159d4:	f001 fadc 	bl	16f90 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   159d8:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   159da:	f7fd f9c3 	bl	12d64 <pm_system_suspend>
   159de:	2800      	cmp	r0, #0
   159e0:	d1f0      	bne.n	159c4 <idle+0x20>
	arch_cpu_idle();
   159e2:	f7fd fcdd 	bl	133a0 <arch_cpu_idle>
}
   159e6:	e7ed      	b.n	159c4 <idle+0x20>
   159e8:	20000a34 	.word	0x20000a34
   159ec:	0001e421 	.word	0x0001e421
   159f0:	0001d506 	.word	0x0001d506

000159f4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   159f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   159f8:	4604      	mov	r4, r0
   159fa:	4616      	mov	r6, r2
   159fc:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   159fe:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   15a02:	b143      	cbz	r3, 15a16 <z_impl_k_mutex_lock+0x22>
   15a04:	4962      	ldr	r1, [pc, #392]	; (15b90 <z_impl_k_mutex_lock+0x19c>)
   15a06:	4863      	ldr	r0, [pc, #396]	; (15b94 <z_impl_k_mutex_lock+0x1a0>)
   15a08:	2265      	movs	r2, #101	; 0x65
   15a0a:	f004 fcc1 	bl	1a390 <printk>
   15a0e:	2165      	movs	r1, #101	; 0x65
   15a10:	485f      	ldr	r0, [pc, #380]	; (15b90 <z_impl_k_mutex_lock+0x19c>)
   15a12:	f004 fd89 	bl	1a528 <assert_post_action>
   15a16:	f04f 0320 	mov.w	r3, #32
   15a1a:	f3ef 8811 	mrs	r8, BASEPRI
   15a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   15a22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15a26:	485c      	ldr	r0, [pc, #368]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15a28:	f7ff ff98 	bl	1595c <z_spin_lock_valid>
   15a2c:	b940      	cbnz	r0, 15a40 <z_impl_k_mutex_lock+0x4c>
   15a2e:	495b      	ldr	r1, [pc, #364]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15a30:	4858      	ldr	r0, [pc, #352]	; (15b94 <z_impl_k_mutex_lock+0x1a0>)
   15a32:	2281      	movs	r2, #129	; 0x81
   15a34:	f004 fcac 	bl	1a390 <printk>
   15a38:	2181      	movs	r1, #129	; 0x81
   15a3a:	4858      	ldr	r0, [pc, #352]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15a3c:	f004 fd74 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15a40:	4855      	ldr	r0, [pc, #340]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15a42:	f7ff ffa7 	bl	15994 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   15a46:	68e3      	ldr	r3, [r4, #12]
   15a48:	4a55      	ldr	r2, [pc, #340]	; (15ba0 <z_impl_k_mutex_lock+0x1ac>)
   15a4a:	b1d3      	cbz	r3, 15a82 <z_impl_k_mutex_lock+0x8e>
   15a4c:	68a0      	ldr	r0, [r4, #8]
   15a4e:	6891      	ldr	r1, [r2, #8]
   15a50:	4288      	cmp	r0, r1
   15a52:	d033      	beq.n	15abc <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   15a54:	ea56 0307 	orrs.w	r3, r6, r7
   15a58:	d132      	bne.n	15ac0 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15a5a:	484f      	ldr	r0, [pc, #316]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15a5c:	f7ff ff8c 	bl	15978 <z_spin_unlock_valid>
   15a60:	b940      	cbnz	r0, 15a74 <z_impl_k_mutex_lock+0x80>
   15a62:	494e      	ldr	r1, [pc, #312]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15a64:	484b      	ldr	r0, [pc, #300]	; (15b94 <z_impl_k_mutex_lock+0x1a0>)
   15a66:	22ac      	movs	r2, #172	; 0xac
   15a68:	f004 fc92 	bl	1a390 <printk>
   15a6c:	21ac      	movs	r1, #172	; 0xac
   15a6e:	484b      	ldr	r0, [pc, #300]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15a70:	f004 fd5a 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   15a74:	f388 8811 	msr	BASEPRI, r8
   15a78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   15a7c:	f06f 000f 	mvn.w	r0, #15
   15a80:	e019      	b.n	15ab6 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   15a82:	6891      	ldr	r1, [r2, #8]
   15a84:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   15a88:	3301      	adds	r3, #1
   15a8a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   15a8c:	6893      	ldr	r3, [r2, #8]
   15a8e:	4842      	ldr	r0, [pc, #264]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   15a90:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   15a92:	60a3      	str	r3, [r4, #8]
   15a94:	f7ff ff70 	bl	15978 <z_spin_unlock_valid>
   15a98:	b940      	cbnz	r0, 15aac <z_impl_k_mutex_lock+0xb8>
   15a9a:	4940      	ldr	r1, [pc, #256]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15a9c:	483d      	ldr	r0, [pc, #244]	; (15b94 <z_impl_k_mutex_lock+0x1a0>)
   15a9e:	22ac      	movs	r2, #172	; 0xac
   15aa0:	f004 fc76 	bl	1a390 <printk>
   15aa4:	21ac      	movs	r1, #172	; 0xac
   15aa6:	483d      	ldr	r0, [pc, #244]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15aa8:	f004 fd3e 	bl	1a528 <assert_post_action>
   15aac:	f388 8811 	msr	BASEPRI, r8
   15ab0:	f3bf 8f6f 	isb	sy
		return 0;
   15ab4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   15ab6:	b002      	add	sp, #8
   15ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   15abc:	6921      	ldr	r1, [r4, #16]
   15abe:	e7e3      	b.n	15a88 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15ac0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   15ac4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   15ac8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   15acc:	4299      	cmp	r1, r3
   15ace:	bfa8      	it	ge
   15ad0:	4619      	movge	r1, r3
   15ad2:	4291      	cmp	r1, r2
   15ad4:	bfb8      	it	lt
   15ad6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   15ad8:	428b      	cmp	r3, r1
   15ada:	dd3f      	ble.n	15b5c <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
   15adc:	f000 fd94 	bl	16608 <z_set_prio>
   15ae0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   15ae2:	4622      	mov	r2, r4
   15ae4:	4641      	mov	r1, r8
   15ae6:	e9cd 6700 	strd	r6, r7, [sp]
   15aea:	482b      	ldr	r0, [pc, #172]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15aec:	f000 fd66 	bl	165bc <z_pend_curr>
	if (got_mutex == 0) {
   15af0:	2800      	cmp	r0, #0
   15af2:	d0e0      	beq.n	15ab6 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   15af4:	f04f 0320 	mov.w	r3, #32
   15af8:	f3ef 8611 	mrs	r6, BASEPRI
   15afc:	f383 8812 	msr	BASEPRI_MAX, r3
   15b00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15b04:	4824      	ldr	r0, [pc, #144]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15b06:	f7ff ff29 	bl	1595c <z_spin_lock_valid>
   15b0a:	b940      	cbnz	r0, 15b1e <z_impl_k_mutex_lock+0x12a>
   15b0c:	4923      	ldr	r1, [pc, #140]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15b0e:	4821      	ldr	r0, [pc, #132]	; (15b94 <z_impl_k_mutex_lock+0x1a0>)
   15b10:	2281      	movs	r2, #129	; 0x81
   15b12:	f004 fc3d 	bl	1a390 <printk>
   15b16:	2181      	movs	r1, #129	; 0x81
   15b18:	4820      	ldr	r0, [pc, #128]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15b1a:	f004 fd05 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15b1e:	481e      	ldr	r0, [pc, #120]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15b20:	f7ff ff38 	bl	15994 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   15b24:	6823      	ldr	r3, [r4, #0]
   15b26:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15b28:	429c      	cmp	r4, r3
   15b2a:	d00a      	beq.n	15b42 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   15b2c:	b14b      	cbz	r3, 15b42 <z_impl_k_mutex_lock+0x14e>
   15b2e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   15b32:	4299      	cmp	r1, r3
   15b34:	bfa8      	it	ge
   15b36:	4619      	movge	r1, r3
   15b38:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   15b3c:	4299      	cmp	r1, r3
   15b3e:	bfb8      	it	lt
   15b40:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   15b42:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   15b44:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15b48:	4299      	cmp	r1, r3
   15b4a:	d109      	bne.n	15b60 <z_impl_k_mutex_lock+0x16c>
	if (resched) {
   15b4c:	b16d      	cbz	r5, 15b6a <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
   15b4e:	4631      	mov	r1, r6
   15b50:	4811      	ldr	r0, [pc, #68]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15b52:	f000 f9cd 	bl	15ef0 <z_reschedule>
	return -EAGAIN;
   15b56:	f06f 000a 	mvn.w	r0, #10
   15b5a:	e7ac      	b.n	15ab6 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   15b5c:	2500      	movs	r5, #0
   15b5e:	e7c0      	b.n	15ae2 <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
   15b60:	f000 fd52 	bl	16608 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   15b64:	2800      	cmp	r0, #0
   15b66:	d1f2      	bne.n	15b4e <z_impl_k_mutex_lock+0x15a>
   15b68:	e7f0      	b.n	15b4c <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15b6a:	480b      	ldr	r0, [pc, #44]	; (15b98 <z_impl_k_mutex_lock+0x1a4>)
   15b6c:	f7ff ff04 	bl	15978 <z_spin_unlock_valid>
   15b70:	b940      	cbnz	r0, 15b84 <z_impl_k_mutex_lock+0x190>
   15b72:	490a      	ldr	r1, [pc, #40]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15b74:	4807      	ldr	r0, [pc, #28]	; (15b94 <z_impl_k_mutex_lock+0x1a0>)
   15b76:	22ac      	movs	r2, #172	; 0xac
   15b78:	f004 fc0a 	bl	1a390 <printk>
   15b7c:	21ac      	movs	r1, #172	; 0xac
   15b7e:	4807      	ldr	r0, [pc, #28]	; (15b9c <z_impl_k_mutex_lock+0x1a8>)
   15b80:	f004 fcd2 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   15b84:	f386 8811 	msr	BASEPRI, r6
   15b88:	f3bf 8f6f 	isb	sy
   15b8c:	e7e3      	b.n	15b56 <z_impl_k_mutex_lock+0x162>
   15b8e:	bf00      	nop
   15b90:	0001e442 	.word	0x0001e442
   15b94:	0001d506 	.word	0x0001d506
   15b98:	20000a5c 	.word	0x20000a5c
   15b9c:	0001d540 	.word	0x0001d540
   15ba0:	20000a34 	.word	0x20000a34

00015ba4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   15ba4:	b538      	push	{r3, r4, r5, lr}
   15ba6:	4604      	mov	r4, r0
   15ba8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   15bac:	b143      	cbz	r3, 15bc0 <z_impl_k_mutex_unlock+0x1c>
   15bae:	4945      	ldr	r1, [pc, #276]	; (15cc4 <z_impl_k_mutex_unlock+0x120>)
   15bb0:	4845      	ldr	r0, [pc, #276]	; (15cc8 <z_impl_k_mutex_unlock+0x124>)
   15bb2:	22c7      	movs	r2, #199	; 0xc7
   15bb4:	f004 fbec 	bl	1a390 <printk>
   15bb8:	21c7      	movs	r1, #199	; 0xc7
   15bba:	4842      	ldr	r0, [pc, #264]	; (15cc4 <z_impl_k_mutex_unlock+0x120>)
   15bbc:	f004 fcb4 	bl	1a528 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   15bc0:	68a3      	ldr	r3, [r4, #8]
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	d078      	beq.n	15cb8 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   15bc6:	4d41      	ldr	r5, [pc, #260]	; (15ccc <z_impl_k_mutex_unlock+0x128>)
   15bc8:	68aa      	ldr	r2, [r5, #8]
   15bca:	4293      	cmp	r3, r2
   15bcc:	d177      	bne.n	15cbe <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   15bce:	68e3      	ldr	r3, [r4, #12]
   15bd0:	b943      	cbnz	r3, 15be4 <z_impl_k_mutex_unlock+0x40>
   15bd2:	493c      	ldr	r1, [pc, #240]	; (15cc4 <z_impl_k_mutex_unlock+0x120>)
   15bd4:	483c      	ldr	r0, [pc, #240]	; (15cc8 <z_impl_k_mutex_unlock+0x124>)
   15bd6:	22df      	movs	r2, #223	; 0xdf
   15bd8:	f004 fbda 	bl	1a390 <printk>
   15bdc:	21df      	movs	r1, #223	; 0xdf
   15bde:	4839      	ldr	r0, [pc, #228]	; (15cc4 <z_impl_k_mutex_unlock+0x120>)
   15be0:	f004 fca2 	bl	1a528 <assert_post_action>
   15be4:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   15be8:	b143      	cbz	r3, 15bfc <z_impl_k_mutex_unlock+0x58>
   15bea:	4939      	ldr	r1, [pc, #228]	; (15cd0 <z_impl_k_mutex_unlock+0x12c>)
   15bec:	4836      	ldr	r0, [pc, #216]	; (15cc8 <z_impl_k_mutex_unlock+0x124>)
   15bee:	22fd      	movs	r2, #253	; 0xfd
   15bf0:	f004 fbce 	bl	1a390 <printk>
   15bf4:	21fd      	movs	r1, #253	; 0xfd
   15bf6:	4836      	ldr	r0, [pc, #216]	; (15cd0 <z_impl_k_mutex_unlock+0x12c>)
   15bf8:	f004 fc96 	bl	1a528 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   15bfc:	68ab      	ldr	r3, [r5, #8]
   15bfe:	7bdb      	ldrb	r3, [r3, #15]
   15c00:	2b01      	cmp	r3, #1
   15c02:	d108      	bne.n	15c16 <z_impl_k_mutex_unlock+0x72>
   15c04:	4932      	ldr	r1, [pc, #200]	; (15cd0 <z_impl_k_mutex_unlock+0x12c>)
   15c06:	4830      	ldr	r0, [pc, #192]	; (15cc8 <z_impl_k_mutex_unlock+0x124>)
   15c08:	22fe      	movs	r2, #254	; 0xfe
   15c0a:	f004 fbc1 	bl	1a390 <printk>
   15c0e:	21fe      	movs	r1, #254	; 0xfe
   15c10:	482f      	ldr	r0, [pc, #188]	; (15cd0 <z_impl_k_mutex_unlock+0x12c>)
   15c12:	f004 fc89 	bl	1a528 <assert_post_action>

	--_current->base.sched_locked;
   15c16:	68aa      	ldr	r2, [r5, #8]
   15c18:	7bd3      	ldrb	r3, [r2, #15]
   15c1a:	3b01      	subs	r3, #1
   15c1c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   15c1e:	68e3      	ldr	r3, [r4, #12]
   15c20:	2b01      	cmp	r3, #1
   15c22:	d905      	bls.n	15c30 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   15c24:	3b01      	subs	r3, #1
   15c26:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   15c28:	f000 fdce 	bl	167c8 <k_sched_unlock>

	return 0;
   15c2c:	2000      	movs	r0, #0
}
   15c2e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15c30:	f04f 0320 	mov.w	r3, #32
   15c34:	f3ef 8511 	mrs	r5, BASEPRI
   15c38:	f383 8812 	msr	BASEPRI_MAX, r3
   15c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15c40:	4824      	ldr	r0, [pc, #144]	; (15cd4 <z_impl_k_mutex_unlock+0x130>)
   15c42:	f7ff fe8b 	bl	1595c <z_spin_lock_valid>
   15c46:	b940      	cbnz	r0, 15c5a <z_impl_k_mutex_unlock+0xb6>
   15c48:	4923      	ldr	r1, [pc, #140]	; (15cd8 <z_impl_k_mutex_unlock+0x134>)
   15c4a:	481f      	ldr	r0, [pc, #124]	; (15cc8 <z_impl_k_mutex_unlock+0x124>)
   15c4c:	2281      	movs	r2, #129	; 0x81
   15c4e:	f004 fb9f 	bl	1a390 <printk>
   15c52:	2181      	movs	r1, #129	; 0x81
   15c54:	4820      	ldr	r0, [pc, #128]	; (15cd8 <z_impl_k_mutex_unlock+0x134>)
   15c56:	f004 fc67 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15c5a:	481e      	ldr	r0, [pc, #120]	; (15cd4 <z_impl_k_mutex_unlock+0x130>)
   15c5c:	f7ff fe9a 	bl	15994 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   15c60:	68a0      	ldr	r0, [r4, #8]
   15c62:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   15c64:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15c68:	4299      	cmp	r1, r3
   15c6a:	d001      	beq.n	15c70 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
   15c6c:	f000 fccc 	bl	16608 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   15c70:	4620      	mov	r0, r4
   15c72:	f000 fe05 	bl	16880 <z_unpend_first_thread>
	mutex->owner = new_owner;
   15c76:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   15c78:	b158      	cbz	r0, 15c92 <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
   15c7a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   15c7e:	6122      	str	r2, [r4, #16]
   15c80:	2200      	movs	r2, #0
   15c82:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   15c84:	f000 fb32 	bl	162ec <z_ready_thread>
		z_reschedule(&lock, key);
   15c88:	4629      	mov	r1, r5
   15c8a:	4812      	ldr	r0, [pc, #72]	; (15cd4 <z_impl_k_mutex_unlock+0x130>)
   15c8c:	f000 f930 	bl	15ef0 <z_reschedule>
   15c90:	e7ca      	b.n	15c28 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   15c92:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15c94:	480f      	ldr	r0, [pc, #60]	; (15cd4 <z_impl_k_mutex_unlock+0x130>)
   15c96:	f7ff fe6f 	bl	15978 <z_spin_unlock_valid>
   15c9a:	b940      	cbnz	r0, 15cae <z_impl_k_mutex_unlock+0x10a>
   15c9c:	490e      	ldr	r1, [pc, #56]	; (15cd8 <z_impl_k_mutex_unlock+0x134>)
   15c9e:	480a      	ldr	r0, [pc, #40]	; (15cc8 <z_impl_k_mutex_unlock+0x124>)
   15ca0:	22ac      	movs	r2, #172	; 0xac
   15ca2:	f004 fb75 	bl	1a390 <printk>
   15ca6:	21ac      	movs	r1, #172	; 0xac
   15ca8:	480b      	ldr	r0, [pc, #44]	; (15cd8 <z_impl_k_mutex_unlock+0x134>)
   15caa:	f004 fc3d 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   15cae:	f385 8811 	msr	BASEPRI, r5
   15cb2:	f3bf 8f6f 	isb	sy
   15cb6:	e7b7      	b.n	15c28 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   15cb8:	f06f 0015 	mvn.w	r0, #21
   15cbc:	e7b7      	b.n	15c2e <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   15cbe:	f04f 30ff 	mov.w	r0, #4294967295
   15cc2:	e7b4      	b.n	15c2e <z_impl_k_mutex_unlock+0x8a>
   15cc4:	0001e442 	.word	0x0001e442
   15cc8:	0001d506 	.word	0x0001d506
   15ccc:	20000a34 	.word	0x20000a34
   15cd0:	0001e464 	.word	0x0001e464
   15cd4:	20000a5c 	.word	0x20000a5c
   15cd8:	0001d540 	.word	0x0001d540

00015cdc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   15cdc:	b538      	push	{r3, r4, r5, lr}
   15cde:	4604      	mov	r4, r0
	__asm__ volatile(
   15ce0:	f04f 0320 	mov.w	r3, #32
   15ce4:	f3ef 8511 	mrs	r5, BASEPRI
   15ce8:	f383 8812 	msr	BASEPRI_MAX, r3
   15cec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15cf0:	4812      	ldr	r0, [pc, #72]	; (15d3c <z_impl_k_sem_give+0x60>)
   15cf2:	f7ff fe33 	bl	1595c <z_spin_lock_valid>
   15cf6:	b940      	cbnz	r0, 15d0a <z_impl_k_sem_give+0x2e>
   15cf8:	4911      	ldr	r1, [pc, #68]	; (15d40 <z_impl_k_sem_give+0x64>)
   15cfa:	4812      	ldr	r0, [pc, #72]	; (15d44 <z_impl_k_sem_give+0x68>)
   15cfc:	2281      	movs	r2, #129	; 0x81
   15cfe:	f004 fb47 	bl	1a390 <printk>
   15d02:	2181      	movs	r1, #129	; 0x81
   15d04:	480e      	ldr	r0, [pc, #56]	; (15d40 <z_impl_k_sem_give+0x64>)
   15d06:	f004 fc0f 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15d0a:	480c      	ldr	r0, [pc, #48]	; (15d3c <z_impl_k_sem_give+0x60>)
   15d0c:	f7ff fe42 	bl	15994 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   15d10:	4620      	mov	r0, r4
   15d12:	f000 fdb5 	bl	16880 <z_unpend_first_thread>

	if (thread != NULL) {
   15d16:	b148      	cbz	r0, 15d2c <z_impl_k_sem_give+0x50>
   15d18:	2200      	movs	r2, #0
   15d1a:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15d1c:	f000 fae6 	bl	162ec <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   15d20:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   15d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   15d26:	4805      	ldr	r0, [pc, #20]	; (15d3c <z_impl_k_sem_give+0x60>)
   15d28:	f000 b8e2 	b.w	15ef0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15d2c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   15d30:	429a      	cmp	r2, r3
   15d32:	bf18      	it	ne
   15d34:	3301      	addne	r3, #1
   15d36:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   15d38:	e7f2      	b.n	15d20 <z_impl_k_sem_give+0x44>
   15d3a:	bf00      	nop
   15d3c:	20000a60 	.word	0x20000a60
   15d40:	0001d540 	.word	0x0001d540
   15d44:	0001d506 	.word	0x0001d506

00015d48 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15d4a:	4604      	mov	r4, r0
   15d4c:	4616      	mov	r6, r2
   15d4e:	461f      	mov	r7, r3
   15d50:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   15d54:	b15b      	cbz	r3, 15d6e <z_impl_k_sem_take+0x26>
   15d56:	ea56 0307 	orrs.w	r3, r6, r7
   15d5a:	d008      	beq.n	15d6e <z_impl_k_sem_take+0x26>
   15d5c:	492b      	ldr	r1, [pc, #172]	; (15e0c <z_impl_k_sem_take+0xc4>)
   15d5e:	482c      	ldr	r0, [pc, #176]	; (15e10 <z_impl_k_sem_take+0xc8>)
   15d60:	2279      	movs	r2, #121	; 0x79
   15d62:	f004 fb15 	bl	1a390 <printk>
   15d66:	2179      	movs	r1, #121	; 0x79
   15d68:	4828      	ldr	r0, [pc, #160]	; (15e0c <z_impl_k_sem_take+0xc4>)
   15d6a:	f004 fbdd 	bl	1a528 <assert_post_action>
   15d6e:	f04f 0320 	mov.w	r3, #32
   15d72:	f3ef 8511 	mrs	r5, BASEPRI
   15d76:	f383 8812 	msr	BASEPRI_MAX, r3
   15d7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15d7e:	4825      	ldr	r0, [pc, #148]	; (15e14 <z_impl_k_sem_take+0xcc>)
   15d80:	f7ff fdec 	bl	1595c <z_spin_lock_valid>
   15d84:	b940      	cbnz	r0, 15d98 <z_impl_k_sem_take+0x50>
   15d86:	4924      	ldr	r1, [pc, #144]	; (15e18 <z_impl_k_sem_take+0xd0>)
   15d88:	4821      	ldr	r0, [pc, #132]	; (15e10 <z_impl_k_sem_take+0xc8>)
   15d8a:	2281      	movs	r2, #129	; 0x81
   15d8c:	f004 fb00 	bl	1a390 <printk>
   15d90:	2181      	movs	r1, #129	; 0x81
   15d92:	4821      	ldr	r0, [pc, #132]	; (15e18 <z_impl_k_sem_take+0xd0>)
   15d94:	f004 fbc8 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15d98:	481e      	ldr	r0, [pc, #120]	; (15e14 <z_impl_k_sem_take+0xcc>)
   15d9a:	f7ff fdfb 	bl	15994 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   15d9e:	68a3      	ldr	r3, [r4, #8]
   15da0:	b1ab      	cbz	r3, 15dce <z_impl_k_sem_take+0x86>
		sem->count--;
   15da2:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15da4:	481b      	ldr	r0, [pc, #108]	; (15e14 <z_impl_k_sem_take+0xcc>)
   15da6:	60a3      	str	r3, [r4, #8]
   15da8:	f7ff fde6 	bl	15978 <z_spin_unlock_valid>
   15dac:	b940      	cbnz	r0, 15dc0 <z_impl_k_sem_take+0x78>
   15dae:	491a      	ldr	r1, [pc, #104]	; (15e18 <z_impl_k_sem_take+0xd0>)
   15db0:	4817      	ldr	r0, [pc, #92]	; (15e10 <z_impl_k_sem_take+0xc8>)
   15db2:	22ac      	movs	r2, #172	; 0xac
   15db4:	f004 faec 	bl	1a390 <printk>
   15db8:	21ac      	movs	r1, #172	; 0xac
   15dba:	4817      	ldr	r0, [pc, #92]	; (15e18 <z_impl_k_sem_take+0xd0>)
   15dbc:	f004 fbb4 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   15dc0:	f385 8811 	msr	BASEPRI, r5
   15dc4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15dc8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   15dca:	b003      	add	sp, #12
   15dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15dce:	ea56 0307 	orrs.w	r3, r6, r7
   15dd2:	d113      	bne.n	15dfc <z_impl_k_sem_take+0xb4>
   15dd4:	480f      	ldr	r0, [pc, #60]	; (15e14 <z_impl_k_sem_take+0xcc>)
   15dd6:	f7ff fdcf 	bl	15978 <z_spin_unlock_valid>
   15dda:	b940      	cbnz	r0, 15dee <z_impl_k_sem_take+0xa6>
   15ddc:	490e      	ldr	r1, [pc, #56]	; (15e18 <z_impl_k_sem_take+0xd0>)
   15dde:	480c      	ldr	r0, [pc, #48]	; (15e10 <z_impl_k_sem_take+0xc8>)
   15de0:	22ac      	movs	r2, #172	; 0xac
   15de2:	f004 fad5 	bl	1a390 <printk>
   15de6:	21ac      	movs	r1, #172	; 0xac
   15de8:	480b      	ldr	r0, [pc, #44]	; (15e18 <z_impl_k_sem_take+0xd0>)
   15dea:	f004 fb9d 	bl	1a528 <assert_post_action>
   15dee:	f385 8811 	msr	BASEPRI, r5
   15df2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   15df6:	f06f 000f 	mvn.w	r0, #15
   15dfa:	e7e6      	b.n	15dca <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   15dfc:	4622      	mov	r2, r4
   15dfe:	4629      	mov	r1, r5
   15e00:	e9cd 6700 	strd	r6, r7, [sp]
   15e04:	4803      	ldr	r0, [pc, #12]	; (15e14 <z_impl_k_sem_take+0xcc>)
   15e06:	f000 fbd9 	bl	165bc <z_pend_curr>
	return ret;
   15e0a:	e7de      	b.n	15dca <z_impl_k_sem_take+0x82>
   15e0c:	0001e48f 	.word	0x0001e48f
   15e10:	0001d506 	.word	0x0001d506
   15e14:	20000a60 	.word	0x20000a60
   15e18:	0001d540 	.word	0x0001d540

00015e1c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   15e1c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   15e1e:	4c08      	ldr	r4, [pc, #32]	; (15e40 <z_reset_time_slice+0x24>)
   15e20:	6823      	ldr	r3, [r4, #0]
   15e22:	b15b      	cbz	r3, 15e3c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   15e24:	f7fe ffd8 	bl	14dd8 <sys_clock_elapsed>
   15e28:	4603      	mov	r3, r0
   15e2a:	6820      	ldr	r0, [r4, #0]
   15e2c:	4a05      	ldr	r2, [pc, #20]	; (15e44 <z_reset_time_slice+0x28>)
   15e2e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   15e30:	2100      	movs	r1, #0
	}
}
   15e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   15e36:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   15e38:	f001 b8e0 	b.w	16ffc <z_set_timeout_expiry>
}
   15e3c:	bd10      	pop	{r4, pc}
   15e3e:	bf00      	nop
   15e40:	20000a70 	.word	0x20000a70
   15e44:	20000a34 	.word	0x20000a34

00015e48 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   15e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e4a:	4604      	mov	r4, r0
   15e4c:	460d      	mov	r5, r1
	__asm__ volatile(
   15e4e:	f04f 0320 	mov.w	r3, #32
   15e52:	f3ef 8611 	mrs	r6, BASEPRI
   15e56:	f383 8812 	msr	BASEPRI_MAX, r3
   15e5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15e5e:	481e      	ldr	r0, [pc, #120]	; (15ed8 <k_sched_time_slice_set+0x90>)
   15e60:	f7ff fd7c 	bl	1595c <z_spin_lock_valid>
   15e64:	b940      	cbnz	r0, 15e78 <k_sched_time_slice_set+0x30>
   15e66:	491d      	ldr	r1, [pc, #116]	; (15edc <k_sched_time_slice_set+0x94>)
   15e68:	481d      	ldr	r0, [pc, #116]	; (15ee0 <k_sched_time_slice_set+0x98>)
   15e6a:	2281      	movs	r2, #129	; 0x81
   15e6c:	f004 fa90 	bl	1a390 <printk>
   15e70:	2181      	movs	r1, #129	; 0x81
   15e72:	481a      	ldr	r0, [pc, #104]	; (15edc <k_sched_time_slice_set+0x94>)
   15e74:	f004 fb58 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15e78:	4817      	ldr	r0, [pc, #92]	; (15ed8 <k_sched_time_slice_set+0x90>)
   15e7a:	f7ff fd8b 	bl	15994 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   15e7e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   15e82:	2200      	movs	r2, #0
   15e84:	f240 30e7 	movw	r0, #999	; 0x3e7
   15e88:	2100      	movs	r1, #0
   15e8a:	4b16      	ldr	r3, [pc, #88]	; (15ee4 <k_sched_time_slice_set+0x9c>)
   15e8c:	fbe7 0104 	umlal	r0, r1, r7, r4
   15e90:	611a      	str	r2, [r3, #16]
   15e92:	2300      	movs	r3, #0
   15e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15e98:	f7ea f9d2 	bl	240 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   15e9c:	2c00      	cmp	r4, #0
   15e9e:	4b12      	ldr	r3, [pc, #72]	; (15ee8 <k_sched_time_slice_set+0xa0>)
   15ea0:	dc16      	bgt.n	15ed0 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   15ea2:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   15ea4:	4b11      	ldr	r3, [pc, #68]	; (15eec <k_sched_time_slice_set+0xa4>)
   15ea6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   15ea8:	f7ff ffb8 	bl	15e1c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15eac:	480a      	ldr	r0, [pc, #40]	; (15ed8 <k_sched_time_slice_set+0x90>)
   15eae:	f7ff fd63 	bl	15978 <z_spin_unlock_valid>
   15eb2:	b940      	cbnz	r0, 15ec6 <k_sched_time_slice_set+0x7e>
   15eb4:	4909      	ldr	r1, [pc, #36]	; (15edc <k_sched_time_slice_set+0x94>)
   15eb6:	480a      	ldr	r0, [pc, #40]	; (15ee0 <k_sched_time_slice_set+0x98>)
   15eb8:	22ac      	movs	r2, #172	; 0xac
   15eba:	f004 fa69 	bl	1a390 <printk>
   15ebe:	21ac      	movs	r1, #172	; 0xac
   15ec0:	4806      	ldr	r0, [pc, #24]	; (15edc <k_sched_time_slice_set+0x94>)
   15ec2:	f004 fb31 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   15ec6:	f386 8811 	msr	BASEPRI, r6
   15eca:	f3bf 8f6f 	isb	sy
	}
}
   15ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   15ed0:	2802      	cmp	r0, #2
   15ed2:	bfb8      	it	lt
   15ed4:	2002      	movlt	r0, #2
   15ed6:	e7e4      	b.n	15ea2 <k_sched_time_slice_set+0x5a>
   15ed8:	20000a68 	.word	0x20000a68
   15edc:	0001d540 	.word	0x0001d540
   15ee0:	0001d506 	.word	0x0001d506
   15ee4:	20000a34 	.word	0x20000a34
   15ee8:	20000a70 	.word	0x20000a70
   15eec:	20000a6c 	.word	0x20000a6c

00015ef0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   15ef0:	b510      	push	{r4, lr}
   15ef2:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15ef4:	460c      	mov	r4, r1
   15ef6:	b9c1      	cbnz	r1, 15f2a <z_reschedule+0x3a>
   15ef8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   15efc:	b9aa      	cbnz	r2, 15f2a <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   15efe:	4a14      	ldr	r2, [pc, #80]	; (15f50 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   15f00:	69d1      	ldr	r1, [r2, #28]
   15f02:	6892      	ldr	r2, [r2, #8]
   15f04:	4291      	cmp	r1, r2
   15f06:	d010      	beq.n	15f2a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f08:	f7ff fd36 	bl	15978 <z_spin_unlock_valid>
   15f0c:	b940      	cbnz	r0, 15f20 <z_reschedule+0x30>
   15f0e:	4911      	ldr	r1, [pc, #68]	; (15f54 <z_reschedule+0x64>)
   15f10:	4811      	ldr	r0, [pc, #68]	; (15f58 <z_reschedule+0x68>)
   15f12:	22c3      	movs	r2, #195	; 0xc3
   15f14:	f004 fa3c 	bl	1a390 <printk>
   15f18:	21c3      	movs	r1, #195	; 0xc3
   15f1a:	480e      	ldr	r0, [pc, #56]	; (15f54 <z_reschedule+0x64>)
   15f1c:	f004 fb04 	bl	1a528 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   15f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   15f24:	2000      	movs	r0, #0
   15f26:	f7fd bae5 	b.w	134f4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15f2a:	4618      	mov	r0, r3
   15f2c:	f7ff fd24 	bl	15978 <z_spin_unlock_valid>
   15f30:	b940      	cbnz	r0, 15f44 <z_reschedule+0x54>
   15f32:	4908      	ldr	r1, [pc, #32]	; (15f54 <z_reschedule+0x64>)
   15f34:	4808      	ldr	r0, [pc, #32]	; (15f58 <z_reschedule+0x68>)
   15f36:	22ac      	movs	r2, #172	; 0xac
   15f38:	f004 fa2a 	bl	1a390 <printk>
   15f3c:	21ac      	movs	r1, #172	; 0xac
   15f3e:	4805      	ldr	r0, [pc, #20]	; (15f54 <z_reschedule+0x64>)
   15f40:	f004 faf2 	bl	1a528 <assert_post_action>
   15f44:	f384 8811 	msr	BASEPRI, r4
   15f48:	f3bf 8f6f 	isb	sy
   15f4c:	bd10      	pop	{r4, pc}
   15f4e:	bf00      	nop
   15f50:	20000a34 	.word	0x20000a34
   15f54:	0001d540 	.word	0x0001d540
   15f58:	0001d506 	.word	0x0001d506

00015f5c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   15f5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15f5e:	f04f 0320 	mov.w	r3, #32
   15f62:	f3ef 8511 	mrs	r5, BASEPRI
   15f66:	f383 8812 	msr	BASEPRI_MAX, r3
   15f6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15f6e:	4820      	ldr	r0, [pc, #128]	; (15ff0 <k_sched_lock+0x94>)
   15f70:	f7ff fcf4 	bl	1595c <z_spin_lock_valid>
   15f74:	b940      	cbnz	r0, 15f88 <k_sched_lock+0x2c>
   15f76:	491f      	ldr	r1, [pc, #124]	; (15ff4 <k_sched_lock+0x98>)
   15f78:	481f      	ldr	r0, [pc, #124]	; (15ff8 <k_sched_lock+0x9c>)
   15f7a:	2281      	movs	r2, #129	; 0x81
   15f7c:	f004 fa08 	bl	1a390 <printk>
   15f80:	2181      	movs	r1, #129	; 0x81
   15f82:	481c      	ldr	r0, [pc, #112]	; (15ff4 <k_sched_lock+0x98>)
   15f84:	f004 fad0 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   15f88:	4819      	ldr	r0, [pc, #100]	; (15ff0 <k_sched_lock+0x94>)
   15f8a:	f7ff fd03 	bl	15994 <z_spin_lock_set_owner>
   15f8e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   15f92:	b143      	cbz	r3, 15fa6 <k_sched_lock+0x4a>
   15f94:	4919      	ldr	r1, [pc, #100]	; (15ffc <k_sched_lock+0xa0>)
   15f96:	4818      	ldr	r0, [pc, #96]	; (15ff8 <k_sched_lock+0x9c>)
   15f98:	22fd      	movs	r2, #253	; 0xfd
   15f9a:	f004 f9f9 	bl	1a390 <printk>
   15f9e:	21fd      	movs	r1, #253	; 0xfd
   15fa0:	4816      	ldr	r0, [pc, #88]	; (15ffc <k_sched_lock+0xa0>)
   15fa2:	f004 fac1 	bl	1a528 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   15fa6:	4c16      	ldr	r4, [pc, #88]	; (16000 <k_sched_lock+0xa4>)
   15fa8:	68a2      	ldr	r2, [r4, #8]
   15faa:	7bd2      	ldrb	r2, [r2, #15]
   15fac:	2a01      	cmp	r2, #1
   15fae:	d108      	bne.n	15fc2 <k_sched_lock+0x66>
   15fb0:	4912      	ldr	r1, [pc, #72]	; (15ffc <k_sched_lock+0xa0>)
   15fb2:	4811      	ldr	r0, [pc, #68]	; (15ff8 <k_sched_lock+0x9c>)
   15fb4:	22fe      	movs	r2, #254	; 0xfe
   15fb6:	f004 f9eb 	bl	1a390 <printk>
   15fba:	21fe      	movs	r1, #254	; 0xfe
   15fbc:	480f      	ldr	r0, [pc, #60]	; (15ffc <k_sched_lock+0xa0>)
   15fbe:	f004 fab3 	bl	1a528 <assert_post_action>
	--_current->base.sched_locked;
   15fc2:	68a2      	ldr	r2, [r4, #8]
   15fc4:	7bd3      	ldrb	r3, [r2, #15]
   15fc6:	3b01      	subs	r3, #1
   15fc8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15fca:	4809      	ldr	r0, [pc, #36]	; (15ff0 <k_sched_lock+0x94>)
   15fcc:	f7ff fcd4 	bl	15978 <z_spin_unlock_valid>
   15fd0:	b940      	cbnz	r0, 15fe4 <k_sched_lock+0x88>
   15fd2:	4908      	ldr	r1, [pc, #32]	; (15ff4 <k_sched_lock+0x98>)
   15fd4:	4808      	ldr	r0, [pc, #32]	; (15ff8 <k_sched_lock+0x9c>)
   15fd6:	22ac      	movs	r2, #172	; 0xac
   15fd8:	f004 f9da 	bl	1a390 <printk>
   15fdc:	21ac      	movs	r1, #172	; 0xac
   15fde:	4805      	ldr	r0, [pc, #20]	; (15ff4 <k_sched_lock+0x98>)
   15fe0:	f004 faa2 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   15fe4:	f385 8811 	msr	BASEPRI, r5
   15fe8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   15fec:	bd38      	pop	{r3, r4, r5, pc}
   15fee:	bf00      	nop
   15ff0:	20000a68 	.word	0x20000a68
   15ff4:	0001d540 	.word	0x0001d540
   15ff8:	0001d506 	.word	0x0001d506
   15ffc:	0001e464 	.word	0x0001e464
   16000:	20000a34 	.word	0x20000a34

00016004 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   16004:	4b0b      	ldr	r3, [pc, #44]	; (16034 <z_priq_dumb_remove+0x30>)
{
   16006:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   16008:	4299      	cmp	r1, r3
{
   1600a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1600c:	d10a      	bne.n	16024 <z_priq_dumb_remove+0x20>
   1600e:	490a      	ldr	r1, [pc, #40]	; (16038 <z_priq_dumb_remove+0x34>)
   16010:	480a      	ldr	r0, [pc, #40]	; (1603c <z_priq_dumb_remove+0x38>)
   16012:	f240 32b5 	movw	r2, #949	; 0x3b5
   16016:	f004 f9bb 	bl	1a390 <printk>
   1601a:	f240 31b5 	movw	r1, #949	; 0x3b5
   1601e:	4806      	ldr	r0, [pc, #24]	; (16038 <z_priq_dumb_remove+0x34>)
   16020:	f004 fa82 	bl	1a528 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   16024:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   16028:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1602a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1602c:	2300      	movs	r3, #0
	node->prev = NULL;
   1602e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   16032:	bd10      	pop	{r4, pc}
   16034:	20000140 	.word	0x20000140
   16038:	0001e4af 	.word	0x0001e4af
   1603c:	0001d506 	.word	0x0001d506

00016040 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   16040:	6883      	ldr	r3, [r0, #8]
{
   16042:	b510      	push	{r4, lr}
   16044:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   16046:	b953      	cbnz	r3, 1605e <unpend_thread_no_timeout+0x1e>
   16048:	490a      	ldr	r1, [pc, #40]	; (16074 <unpend_thread_no_timeout+0x34>)
   1604a:	480b      	ldr	r0, [pc, #44]	; (16078 <unpend_thread_no_timeout+0x38>)
   1604c:	f240 2253 	movw	r2, #595	; 0x253
   16050:	f004 f99e 	bl	1a390 <printk>
   16054:	f240 2153 	movw	r1, #595	; 0x253
   16058:	4806      	ldr	r0, [pc, #24]	; (16074 <unpend_thread_no_timeout+0x34>)
   1605a:	f004 fa65 	bl	1a528 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1605e:	4621      	mov	r1, r4
   16060:	68a0      	ldr	r0, [r4, #8]
   16062:	f7ff ffcf 	bl	16004 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16066:	7b63      	ldrb	r3, [r4, #13]
   16068:	f023 0302 	bic.w	r3, r3, #2
   1606c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1606e:	2300      	movs	r3, #0
   16070:	60a3      	str	r3, [r4, #8]
}
   16072:	bd10      	pop	{r4, pc}
   16074:	0001e4af 	.word	0x0001e4af
   16078:	0001d506 	.word	0x0001d506

0001607c <update_cache>:
{
   1607c:	b538      	push	{r3, r4, r5, lr}
   1607e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   16080:	4812      	ldr	r0, [pc, #72]	; (160cc <update_cache+0x50>)
   16082:	f004 fcf4 	bl	1aa6e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   16086:	4d12      	ldr	r5, [pc, #72]	; (160d0 <update_cache+0x54>)
   16088:	4604      	mov	r4, r0
   1608a:	b900      	cbnz	r0, 1608e <update_cache+0x12>
   1608c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1608e:	b9aa      	cbnz	r2, 160bc <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   16090:	68ab      	ldr	r3, [r5, #8]
   16092:	b943      	cbnz	r3, 160a6 <update_cache+0x2a>
   16094:	490f      	ldr	r1, [pc, #60]	; (160d4 <update_cache+0x58>)
   16096:	4810      	ldr	r0, [pc, #64]	; (160d8 <update_cache+0x5c>)
   16098:	2281      	movs	r2, #129	; 0x81
   1609a:	f004 f979 	bl	1a390 <printk>
   1609e:	2181      	movs	r1, #129	; 0x81
   160a0:	480c      	ldr	r0, [pc, #48]	; (160d4 <update_cache+0x58>)
   160a2:	f004 fa41 	bl	1a528 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   160a6:	68ab      	ldr	r3, [r5, #8]
   160a8:	7b5a      	ldrb	r2, [r3, #13]
   160aa:	06d2      	lsls	r2, r2, #27
   160ac:	d106      	bne.n	160bc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   160ae:	69a2      	ldr	r2, [r4, #24]
   160b0:	b922      	cbnz	r2, 160bc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   160b2:	89da      	ldrh	r2, [r3, #14]
   160b4:	2a7f      	cmp	r2, #127	; 0x7f
   160b6:	d901      	bls.n	160bc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   160b8:	61eb      	str	r3, [r5, #28]
}
   160ba:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   160bc:	68ab      	ldr	r3, [r5, #8]
   160be:	42a3      	cmp	r3, r4
   160c0:	d001      	beq.n	160c6 <update_cache+0x4a>
			z_reset_time_slice();
   160c2:	f7ff feab 	bl	15e1c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   160c6:	61ec      	str	r4, [r5, #28]
}
   160c8:	e7f7      	b.n	160ba <update_cache+0x3e>
   160ca:	bf00      	nop
   160cc:	20000a54 	.word	0x20000a54
   160d0:	20000a34 	.word	0x20000a34
   160d4:	0001e4af 	.word	0x0001e4af
   160d8:	0001d506 	.word	0x0001d506

000160dc <move_thread_to_end_of_prio_q>:
{
   160dc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   160de:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   160e2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   160e4:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   160e6:	7b43      	ldrb	r3, [r0, #13]
   160e8:	da06      	bge.n	160f8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   160ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   160ee:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   160f0:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   160f2:	481f      	ldr	r0, [pc, #124]	; (16170 <move_thread_to_end_of_prio_q+0x94>)
   160f4:	f7ff ff86 	bl	16004 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   160f8:	7b63      	ldrb	r3, [r4, #13]
   160fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   160fe:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   16100:	4b1c      	ldr	r3, [pc, #112]	; (16174 <move_thread_to_end_of_prio_q+0x98>)
   16102:	429c      	cmp	r4, r3
   16104:	d108      	bne.n	16118 <move_thread_to_end_of_prio_q+0x3c>
   16106:	491c      	ldr	r1, [pc, #112]	; (16178 <move_thread_to_end_of_prio_q+0x9c>)
   16108:	481c      	ldr	r0, [pc, #112]	; (1617c <move_thread_to_end_of_prio_q+0xa0>)
   1610a:	22b1      	movs	r2, #177	; 0xb1
   1610c:	f004 f940 	bl	1a390 <printk>
   16110:	21b1      	movs	r1, #177	; 0xb1
   16112:	4819      	ldr	r0, [pc, #100]	; (16178 <move_thread_to_end_of_prio_q+0x9c>)
   16114:	f004 fa08 	bl	1a528 <assert_post_action>
	return list->head == list;
   16118:	4a19      	ldr	r2, [pc, #100]	; (16180 <move_thread_to_end_of_prio_q+0xa4>)
   1611a:	4611      	mov	r1, r2
   1611c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16120:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16122:	428b      	cmp	r3, r1
   16124:	bf08      	it	eq
   16126:	2300      	moveq	r3, #0
   16128:	2b00      	cmp	r3, #0
   1612a:	bf38      	it	cc
   1612c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1612e:	b1cb      	cbz	r3, 16164 <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
   16130:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   16134:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   16138:	4286      	cmp	r6, r0
   1613a:	d00f      	beq.n	1615c <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
   1613c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1613e:	2800      	cmp	r0, #0
   16140:	dd0c      	ble.n	1615c <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
   16142:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   16144:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   16148:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1614a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1614c:	6890      	ldr	r0, [r2, #8]
   1614e:	1b03      	subs	r3, r0, r4
   16150:	4258      	negs	r0, r3
   16152:	4158      	adcs	r0, r3
}
   16154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   16158:	f7ff bf90 	b.w	1607c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1615c:	42ab      	cmp	r3, r5
   1615e:	d001      	beq.n	16164 <move_thread_to_end_of_prio_q+0x88>
   16160:	681b      	ldr	r3, [r3, #0]
   16162:	e7e4      	b.n	1612e <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
   16164:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   16168:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1616a:	6254      	str	r4, [r2, #36]	; 0x24
}
   1616c:	e7ee      	b.n	1614c <move_thread_to_end_of_prio_q+0x70>
   1616e:	bf00      	nop
   16170:	20000a54 	.word	0x20000a54
   16174:	20000140 	.word	0x20000140
   16178:	0001e4af 	.word	0x0001e4af
   1617c:	0001d506 	.word	0x0001d506
   16180:	20000a34 	.word	0x20000a34

00016184 <z_time_slice>:
{
   16184:	b570      	push	{r4, r5, r6, lr}
   16186:	4604      	mov	r4, r0
	__asm__ volatile(
   16188:	f04f 0320 	mov.w	r3, #32
   1618c:	f3ef 8511 	mrs	r5, BASEPRI
   16190:	f383 8812 	msr	BASEPRI_MAX, r3
   16194:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16198:	4825      	ldr	r0, [pc, #148]	; (16230 <z_time_slice+0xac>)
   1619a:	f7ff fbdf 	bl	1595c <z_spin_lock_valid>
   1619e:	b940      	cbnz	r0, 161b2 <z_time_slice+0x2e>
   161a0:	4924      	ldr	r1, [pc, #144]	; (16234 <z_time_slice+0xb0>)
   161a2:	4825      	ldr	r0, [pc, #148]	; (16238 <z_time_slice+0xb4>)
   161a4:	2281      	movs	r2, #129	; 0x81
   161a6:	f004 f8f3 	bl	1a390 <printk>
   161aa:	2181      	movs	r1, #129	; 0x81
   161ac:	4821      	ldr	r0, [pc, #132]	; (16234 <z_time_slice+0xb0>)
   161ae:	f004 f9bb 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   161b2:	481f      	ldr	r0, [pc, #124]	; (16230 <z_time_slice+0xac>)
   161b4:	f7ff fbee 	bl	15994 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   161b8:	4b20      	ldr	r3, [pc, #128]	; (1623c <z_time_slice+0xb8>)
   161ba:	4a21      	ldr	r2, [pc, #132]	; (16240 <z_time_slice+0xbc>)
   161bc:	6898      	ldr	r0, [r3, #8]
   161be:	6811      	ldr	r1, [r2, #0]
   161c0:	4288      	cmp	r0, r1
   161c2:	4619      	mov	r1, r3
   161c4:	d113      	bne.n	161ee <z_time_slice+0x6a>
			z_reset_time_slice();
   161c6:	f7ff fe29 	bl	15e1c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   161ca:	4819      	ldr	r0, [pc, #100]	; (16230 <z_time_slice+0xac>)
   161cc:	f7ff fbd4 	bl	15978 <z_spin_unlock_valid>
   161d0:	b940      	cbnz	r0, 161e4 <z_time_slice+0x60>
   161d2:	4918      	ldr	r1, [pc, #96]	; (16234 <z_time_slice+0xb0>)
   161d4:	4818      	ldr	r0, [pc, #96]	; (16238 <z_time_slice+0xb4>)
   161d6:	22ac      	movs	r2, #172	; 0xac
   161d8:	f004 f8da 	bl	1a390 <printk>
   161dc:	21ac      	movs	r1, #172	; 0xac
   161de:	4815      	ldr	r0, [pc, #84]	; (16234 <z_time_slice+0xb0>)
   161e0:	f004 f9a2 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   161e4:	f385 8811 	msr	BASEPRI, r5
   161e8:	f3bf 8f6f 	isb	sy
}
   161ec:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   161ee:	2600      	movs	r6, #0
   161f0:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   161f2:	4a14      	ldr	r2, [pc, #80]	; (16244 <z_time_slice+0xc0>)
   161f4:	6812      	ldr	r2, [r2, #0]
   161f6:	b1ba      	cbz	r2, 16228 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   161f8:	89c2      	ldrh	r2, [r0, #14]
   161fa:	2a7f      	cmp	r2, #127	; 0x7f
   161fc:	d814      	bhi.n	16228 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   161fe:	7b42      	ldrb	r2, [r0, #13]
   16200:	06d2      	lsls	r2, r2, #27
   16202:	d111      	bne.n	16228 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   16204:	4a10      	ldr	r2, [pc, #64]	; (16248 <z_time_slice+0xc4>)
   16206:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1620a:	6812      	ldr	r2, [r2, #0]
   1620c:	4296      	cmp	r6, r2
   1620e:	db0b      	blt.n	16228 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   16210:	4a0e      	ldr	r2, [pc, #56]	; (1624c <z_time_slice+0xc8>)
   16212:	4290      	cmp	r0, r2
   16214:	d008      	beq.n	16228 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   16216:	691a      	ldr	r2, [r3, #16]
   16218:	42a2      	cmp	r2, r4
   1621a:	dc02      	bgt.n	16222 <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   1621c:	f7ff ff5e 	bl	160dc <move_thread_to_end_of_prio_q>
   16220:	e7d1      	b.n	161c6 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   16222:	1b12      	subs	r2, r2, r4
   16224:	611a      	str	r2, [r3, #16]
   16226:	e7d0      	b.n	161ca <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   16228:	2300      	movs	r3, #0
   1622a:	610b      	str	r3, [r1, #16]
   1622c:	e7cd      	b.n	161ca <z_time_slice+0x46>
   1622e:	bf00      	nop
   16230:	20000a68 	.word	0x20000a68
   16234:	0001d540 	.word	0x0001d540
   16238:	0001d506 	.word	0x0001d506
   1623c:	20000a34 	.word	0x20000a34
   16240:	20000a64 	.word	0x20000a64
   16244:	20000a70 	.word	0x20000a70
   16248:	20000a6c 	.word	0x20000a6c
   1624c:	20000140 	.word	0x20000140

00016250 <ready_thread>:
{
   16250:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16252:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   16256:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16258:	2a00      	cmp	r2, #0
   1625a:	7b43      	ldrb	r3, [r0, #13]
   1625c:	db3d      	blt.n	162da <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1625e:	06da      	lsls	r2, r3, #27
   16260:	d13b      	bne.n	162da <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
   16262:	6985      	ldr	r5, [r0, #24]
   16264:	2d00      	cmp	r5, #0
   16266:	d138      	bne.n	162da <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
   16268:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1626c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1626e:	4b1b      	ldr	r3, [pc, #108]	; (162dc <ready_thread+0x8c>)
   16270:	4298      	cmp	r0, r3
   16272:	d108      	bne.n	16286 <ready_thread+0x36>
   16274:	491a      	ldr	r1, [pc, #104]	; (162e0 <ready_thread+0x90>)
   16276:	481b      	ldr	r0, [pc, #108]	; (162e4 <ready_thread+0x94>)
   16278:	22b1      	movs	r2, #177	; 0xb1
   1627a:	f004 f889 	bl	1a390 <printk>
   1627e:	21b1      	movs	r1, #177	; 0xb1
   16280:	4817      	ldr	r0, [pc, #92]	; (162e0 <ready_thread+0x90>)
   16282:	f004 f951 	bl	1a528 <assert_post_action>
	return list->head == list;
   16286:	4918      	ldr	r1, [pc, #96]	; (162e8 <ready_thread+0x98>)
   16288:	460b      	mov	r3, r1
   1628a:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1628e:	4298      	cmp	r0, r3
   16290:	bf18      	it	ne
   16292:	4605      	movne	r5, r0
   16294:	2d00      	cmp	r5, #0
   16296:	461a      	mov	r2, r3
   16298:	462b      	mov	r3, r5
   1629a:	bf38      	it	cc
   1629c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1629e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   162a0:	b1b3      	cbz	r3, 162d0 <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
   162a2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   162a6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   162aa:	4286      	cmp	r6, r0
   162ac:	d00c      	beq.n	162c8 <ready_thread+0x78>
		return b2 - b1;
   162ae:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   162b0:	2800      	cmp	r0, #0
   162b2:	dd09      	ble.n	162c8 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
   162b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   162b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   162ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   162bc:	605c      	str	r4, [r3, #4]
		update_cache(0);
   162be:	2000      	movs	r0, #0
}
   162c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   162c4:	f7ff beda 	b.w	1607c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   162c8:	42ab      	cmp	r3, r5
   162ca:	d001      	beq.n	162d0 <ready_thread+0x80>
   162cc:	681b      	ldr	r3, [r3, #0]
   162ce:	e7e7      	b.n	162a0 <ready_thread+0x50>
	node->prev = tail;
   162d0:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   162d4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   162d6:	624c      	str	r4, [r1, #36]	; 0x24
}
   162d8:	e7f1      	b.n	162be <ready_thread+0x6e>
}
   162da:	bd70      	pop	{r4, r5, r6, pc}
   162dc:	20000140 	.word	0x20000140
   162e0:	0001e4af 	.word	0x0001e4af
   162e4:	0001d506 	.word	0x0001d506
   162e8:	20000a34 	.word	0x20000a34

000162ec <z_ready_thread>:
{
   162ec:	b538      	push	{r3, r4, r5, lr}
   162ee:	4604      	mov	r4, r0
	__asm__ volatile(
   162f0:	f04f 0320 	mov.w	r3, #32
   162f4:	f3ef 8511 	mrs	r5, BASEPRI
   162f8:	f383 8812 	msr	BASEPRI_MAX, r3
   162fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16300:	4812      	ldr	r0, [pc, #72]	; (1634c <z_ready_thread+0x60>)
   16302:	f7ff fb2b 	bl	1595c <z_spin_lock_valid>
   16306:	b940      	cbnz	r0, 1631a <z_ready_thread+0x2e>
   16308:	4911      	ldr	r1, [pc, #68]	; (16350 <z_ready_thread+0x64>)
   1630a:	4812      	ldr	r0, [pc, #72]	; (16354 <z_ready_thread+0x68>)
   1630c:	2281      	movs	r2, #129	; 0x81
   1630e:	f004 f83f 	bl	1a390 <printk>
   16312:	2181      	movs	r1, #129	; 0x81
   16314:	480e      	ldr	r0, [pc, #56]	; (16350 <z_ready_thread+0x64>)
   16316:	f004 f907 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   1631a:	480c      	ldr	r0, [pc, #48]	; (1634c <z_ready_thread+0x60>)
   1631c:	f7ff fb3a 	bl	15994 <z_spin_lock_set_owner>
			ready_thread(thread);
   16320:	4620      	mov	r0, r4
   16322:	f7ff ff95 	bl	16250 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16326:	4809      	ldr	r0, [pc, #36]	; (1634c <z_ready_thread+0x60>)
   16328:	f7ff fb26 	bl	15978 <z_spin_unlock_valid>
   1632c:	b940      	cbnz	r0, 16340 <z_ready_thread+0x54>
   1632e:	4908      	ldr	r1, [pc, #32]	; (16350 <z_ready_thread+0x64>)
   16330:	4808      	ldr	r0, [pc, #32]	; (16354 <z_ready_thread+0x68>)
   16332:	22ac      	movs	r2, #172	; 0xac
   16334:	f004 f82c 	bl	1a390 <printk>
   16338:	21ac      	movs	r1, #172	; 0xac
   1633a:	4805      	ldr	r0, [pc, #20]	; (16350 <z_ready_thread+0x64>)
   1633c:	f004 f8f4 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16340:	f385 8811 	msr	BASEPRI, r5
   16344:	f3bf 8f6f 	isb	sy
}
   16348:	bd38      	pop	{r3, r4, r5, pc}
   1634a:	bf00      	nop
   1634c:	20000a68 	.word	0x20000a68
   16350:	0001d540 	.word	0x0001d540
   16354:	0001d506 	.word	0x0001d506

00016358 <z_sched_start>:
{
   16358:	b538      	push	{r3, r4, r5, lr}
   1635a:	4604      	mov	r4, r0
	__asm__ volatile(
   1635c:	f04f 0320 	mov.w	r3, #32
   16360:	f3ef 8511 	mrs	r5, BASEPRI
   16364:	f383 8812 	msr	BASEPRI_MAX, r3
   16368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1636c:	4818      	ldr	r0, [pc, #96]	; (163d0 <z_sched_start+0x78>)
   1636e:	f7ff faf5 	bl	1595c <z_spin_lock_valid>
   16372:	b940      	cbnz	r0, 16386 <z_sched_start+0x2e>
   16374:	4917      	ldr	r1, [pc, #92]	; (163d4 <z_sched_start+0x7c>)
   16376:	4818      	ldr	r0, [pc, #96]	; (163d8 <z_sched_start+0x80>)
   16378:	2281      	movs	r2, #129	; 0x81
   1637a:	f004 f809 	bl	1a390 <printk>
   1637e:	2181      	movs	r1, #129	; 0x81
   16380:	4814      	ldr	r0, [pc, #80]	; (163d4 <z_sched_start+0x7c>)
   16382:	f004 f8d1 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   16386:	4812      	ldr	r0, [pc, #72]	; (163d0 <z_sched_start+0x78>)
   16388:	f7ff fb04 	bl	15994 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1638c:	7b63      	ldrb	r3, [r4, #13]
   1638e:	075a      	lsls	r2, r3, #29
   16390:	d411      	bmi.n	163b6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16392:	480f      	ldr	r0, [pc, #60]	; (163d0 <z_sched_start+0x78>)
   16394:	f7ff faf0 	bl	15978 <z_spin_unlock_valid>
   16398:	b940      	cbnz	r0, 163ac <z_sched_start+0x54>
   1639a:	490e      	ldr	r1, [pc, #56]	; (163d4 <z_sched_start+0x7c>)
   1639c:	480e      	ldr	r0, [pc, #56]	; (163d8 <z_sched_start+0x80>)
   1639e:	22ac      	movs	r2, #172	; 0xac
   163a0:	f003 fff6 	bl	1a390 <printk>
   163a4:	21ac      	movs	r1, #172	; 0xac
   163a6:	480b      	ldr	r0, [pc, #44]	; (163d4 <z_sched_start+0x7c>)
   163a8:	f004 f8be 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   163ac:	f385 8811 	msr	BASEPRI, r5
   163b0:	f3bf 8f6f 	isb	sy
}
   163b4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   163b6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   163ba:	4620      	mov	r0, r4
   163bc:	7363      	strb	r3, [r4, #13]
   163be:	f7ff ff47 	bl	16250 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   163c2:	4629      	mov	r1, r5
}
   163c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   163c8:	4801      	ldr	r0, [pc, #4]	; (163d0 <z_sched_start+0x78>)
   163ca:	f7ff bd91 	b.w	15ef0 <z_reschedule>
   163ce:	bf00      	nop
   163d0:	20000a68 	.word	0x20000a68
   163d4:	0001d540 	.word	0x0001d540
   163d8:	0001d506 	.word	0x0001d506

000163dc <z_thread_timeout>:
{
   163dc:	b570      	push	{r4, r5, r6, lr}
   163de:	4604      	mov	r4, r0
	__asm__ volatile(
   163e0:	f04f 0320 	mov.w	r3, #32
   163e4:	f3ef 8611 	mrs	r6, BASEPRI
   163e8:	f383 8812 	msr	BASEPRI_MAX, r3
   163ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   163f0:	481b      	ldr	r0, [pc, #108]	; (16460 <z_thread_timeout+0x84>)
   163f2:	f7ff fab3 	bl	1595c <z_spin_lock_valid>
   163f6:	b940      	cbnz	r0, 1640a <z_thread_timeout+0x2e>
   163f8:	491a      	ldr	r1, [pc, #104]	; (16464 <z_thread_timeout+0x88>)
   163fa:	481b      	ldr	r0, [pc, #108]	; (16468 <z_thread_timeout+0x8c>)
   163fc:	2281      	movs	r2, #129	; 0x81
   163fe:	f003 ffc7 	bl	1a390 <printk>
   16402:	2181      	movs	r1, #129	; 0x81
   16404:	4817      	ldr	r0, [pc, #92]	; (16464 <z_thread_timeout+0x88>)
   16406:	f004 f88f 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   1640a:	4815      	ldr	r0, [pc, #84]	; (16460 <z_thread_timeout+0x84>)
   1640c:	f7ff fac2 	bl	15994 <z_spin_lock_set_owner>
		if (!killed) {
   16410:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   16414:	f013 0f28 	tst.w	r3, #40	; 0x28
   16418:	d110      	bne.n	1643c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   1641a:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1641e:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   16422:	b113      	cbz	r3, 1642a <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   16424:	4628      	mov	r0, r5
   16426:	f7ff fe0b 	bl	16040 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1642a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   1642e:	4628      	mov	r0, r5
   16430:	f023 0314 	bic.w	r3, r3, #20
   16434:	f804 3c0b 	strb.w	r3, [r4, #-11]
   16438:	f7ff ff0a 	bl	16250 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1643c:	4808      	ldr	r0, [pc, #32]	; (16460 <z_thread_timeout+0x84>)
   1643e:	f7ff fa9b 	bl	15978 <z_spin_unlock_valid>
   16442:	b940      	cbnz	r0, 16456 <z_thread_timeout+0x7a>
   16444:	4907      	ldr	r1, [pc, #28]	; (16464 <z_thread_timeout+0x88>)
   16446:	4808      	ldr	r0, [pc, #32]	; (16468 <z_thread_timeout+0x8c>)
   16448:	22ac      	movs	r2, #172	; 0xac
   1644a:	f003 ffa1 	bl	1a390 <printk>
   1644e:	21ac      	movs	r1, #172	; 0xac
   16450:	4804      	ldr	r0, [pc, #16]	; (16464 <z_thread_timeout+0x88>)
   16452:	f004 f869 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16456:	f386 8811 	msr	BASEPRI, r6
   1645a:	f3bf 8f6f 	isb	sy
}
   1645e:	bd70      	pop	{r4, r5, r6, pc}
   16460:	20000a68 	.word	0x20000a68
   16464:	0001d540 	.word	0x0001d540
   16468:	0001d506 	.word	0x0001d506

0001646c <unready_thread>:
{
   1646c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1646e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   16472:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   16474:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   16476:	7b43      	ldrb	r3, [r0, #13]
   16478:	da06      	bge.n	16488 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   1647e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16480:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   16482:	4806      	ldr	r0, [pc, #24]	; (1649c <unready_thread+0x30>)
   16484:	f7ff fdbe 	bl	16004 <z_priq_dumb_remove>
	update_cache(thread == _current);
   16488:	4b05      	ldr	r3, [pc, #20]	; (164a0 <unready_thread+0x34>)
   1648a:	6898      	ldr	r0, [r3, #8]
   1648c:	1b03      	subs	r3, r0, r4
   1648e:	4258      	negs	r0, r3
   16490:	4158      	adcs	r0, r3
}
   16492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   16496:	f7ff bdf1 	b.w	1607c <update_cache>
   1649a:	bf00      	nop
   1649c:	20000a54 	.word	0x20000a54
   164a0:	20000a34 	.word	0x20000a34

000164a4 <add_to_waitq_locked>:
{
   164a4:	b538      	push	{r3, r4, r5, lr}
   164a6:	4604      	mov	r4, r0
   164a8:	460d      	mov	r5, r1
	unready_thread(thread);
   164aa:	f7ff ffdf 	bl	1646c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   164ae:	7b63      	ldrb	r3, [r4, #13]
   164b0:	f043 0302 	orr.w	r3, r3, #2
   164b4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   164b6:	b315      	cbz	r5, 164fe <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   164b8:	4b17      	ldr	r3, [pc, #92]	; (16518 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   164ba:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   164bc:	429c      	cmp	r4, r3
   164be:	d108      	bne.n	164d2 <add_to_waitq_locked+0x2e>
   164c0:	4916      	ldr	r1, [pc, #88]	; (1651c <add_to_waitq_locked+0x78>)
   164c2:	4817      	ldr	r0, [pc, #92]	; (16520 <add_to_waitq_locked+0x7c>)
   164c4:	22b1      	movs	r2, #177	; 0xb1
   164c6:	f003 ff63 	bl	1a390 <printk>
   164ca:	21b1      	movs	r1, #177	; 0xb1
   164cc:	4813      	ldr	r0, [pc, #76]	; (1651c <add_to_waitq_locked+0x78>)
   164ce:	f004 f82b 	bl	1a528 <assert_post_action>
	return list->head == list;
   164d2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   164d4:	429d      	cmp	r5, r3
   164d6:	bf08      	it	eq
   164d8:	2300      	moveq	r3, #0
   164da:	2b00      	cmp	r3, #0
   164dc:	bf38      	it	cc
   164de:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   164e0:	b19b      	cbz	r3, 1650a <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
   164e2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   164e6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   164ea:	4291      	cmp	r1, r2
   164ec:	d008      	beq.n	16500 <add_to_waitq_locked+0x5c>
		return b2 - b1;
   164ee:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   164f0:	2a00      	cmp	r2, #0
   164f2:	dd05      	ble.n	16500 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
   164f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   164f6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   164fa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   164fc:	605c      	str	r4, [r3, #4]
}
   164fe:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   16500:	686a      	ldr	r2, [r5, #4]
   16502:	4293      	cmp	r3, r2
   16504:	d001      	beq.n	1650a <add_to_waitq_locked+0x66>
   16506:	681b      	ldr	r3, [r3, #0]
   16508:	e7ea      	b.n	164e0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
   1650a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1650c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   16510:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16512:	606c      	str	r4, [r5, #4]
   16514:	e7f3      	b.n	164fe <add_to_waitq_locked+0x5a>
   16516:	bf00      	nop
   16518:	20000140 	.word	0x20000140
   1651c:	0001e4af 	.word	0x0001e4af
   16520:	0001d506 	.word	0x0001d506

00016524 <pend>:
{
   16524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16528:	4604      	mov	r4, r0
   1652a:	460d      	mov	r5, r1
   1652c:	4616      	mov	r6, r2
   1652e:	461f      	mov	r7, r3
	__asm__ volatile(
   16530:	f04f 0320 	mov.w	r3, #32
   16534:	f3ef 8811 	mrs	r8, BASEPRI
   16538:	f383 8812 	msr	BASEPRI_MAX, r3
   1653c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16540:	481a      	ldr	r0, [pc, #104]	; (165ac <pend+0x88>)
   16542:	f7ff fa0b 	bl	1595c <z_spin_lock_valid>
   16546:	b940      	cbnz	r0, 1655a <pend+0x36>
   16548:	4919      	ldr	r1, [pc, #100]	; (165b0 <pend+0x8c>)
   1654a:	481a      	ldr	r0, [pc, #104]	; (165b4 <pend+0x90>)
   1654c:	2281      	movs	r2, #129	; 0x81
   1654e:	f003 ff1f 	bl	1a390 <printk>
   16552:	2181      	movs	r1, #129	; 0x81
   16554:	4816      	ldr	r0, [pc, #88]	; (165b0 <pend+0x8c>)
   16556:	f003 ffe7 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   1655a:	4814      	ldr	r0, [pc, #80]	; (165ac <pend+0x88>)
   1655c:	f7ff fa1a 	bl	15994 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   16560:	4620      	mov	r0, r4
   16562:	4629      	mov	r1, r5
   16564:	f7ff ff9e 	bl	164a4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16568:	4810      	ldr	r0, [pc, #64]	; (165ac <pend+0x88>)
   1656a:	f7ff fa05 	bl	15978 <z_spin_unlock_valid>
   1656e:	b940      	cbnz	r0, 16582 <pend+0x5e>
   16570:	490f      	ldr	r1, [pc, #60]	; (165b0 <pend+0x8c>)
   16572:	4810      	ldr	r0, [pc, #64]	; (165b4 <pend+0x90>)
   16574:	22ac      	movs	r2, #172	; 0xac
   16576:	f003 ff0b 	bl	1a390 <printk>
   1657a:	21ac      	movs	r1, #172	; 0xac
   1657c:	480c      	ldr	r0, [pc, #48]	; (165b0 <pend+0x8c>)
   1657e:	f003 ffd3 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16582:	f388 8811 	msr	BASEPRI, r8
   16586:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1658a:	1c7b      	adds	r3, r7, #1
   1658c:	bf08      	it	eq
   1658e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   16592:	d008      	beq.n	165a6 <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16594:	4632      	mov	r2, r6
   16596:	463b      	mov	r3, r7
   16598:	f104 0018 	add.w	r0, r4, #24
   1659c:	4906      	ldr	r1, [pc, #24]	; (165b8 <pend+0x94>)
}
   1659e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   165a2:	f000 bbff 	b.w	16da4 <z_add_timeout>
   165a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   165aa:	bf00      	nop
   165ac:	20000a68 	.word	0x20000a68
   165b0:	0001d540 	.word	0x0001d540
   165b4:	0001d506 	.word	0x0001d506
   165b8:	000163dd 	.word	0x000163dd

000165bc <z_pend_curr>:
{
   165bc:	b538      	push	{r3, r4, r5, lr}
   165be:	4605      	mov	r5, r0
	pending_current = _current;
   165c0:	4b0d      	ldr	r3, [pc, #52]	; (165f8 <z_pend_curr+0x3c>)
{
   165c2:	460c      	mov	r4, r1
	pending_current = _current;
   165c4:	6898      	ldr	r0, [r3, #8]
   165c6:	4b0d      	ldr	r3, [pc, #52]	; (165fc <z_pend_curr+0x40>)
{
   165c8:	4611      	mov	r1, r2
	pending_current = _current;
   165ca:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   165cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   165d0:	f7ff ffa8 	bl	16524 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   165d4:	4628      	mov	r0, r5
   165d6:	f7ff f9cf 	bl	15978 <z_spin_unlock_valid>
   165da:	b940      	cbnz	r0, 165ee <z_pend_curr+0x32>
   165dc:	4908      	ldr	r1, [pc, #32]	; (16600 <z_pend_curr+0x44>)
   165de:	4809      	ldr	r0, [pc, #36]	; (16604 <z_pend_curr+0x48>)
   165e0:	22c3      	movs	r2, #195	; 0xc3
   165e2:	f003 fed5 	bl	1a390 <printk>
   165e6:	21c3      	movs	r1, #195	; 0xc3
   165e8:	4805      	ldr	r0, [pc, #20]	; (16600 <z_pend_curr+0x44>)
   165ea:	f003 ff9d 	bl	1a528 <assert_post_action>
   165ee:	4620      	mov	r0, r4
}
   165f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   165f4:	f7fc bf7e 	b.w	134f4 <arch_swap>
   165f8:	20000a34 	.word	0x20000a34
   165fc:	20000a64 	.word	0x20000a64
   16600:	0001d540 	.word	0x0001d540
   16604:	0001d506 	.word	0x0001d506

00016608 <z_set_prio>:
{
   16608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1660a:	4604      	mov	r4, r0
   1660c:	460e      	mov	r6, r1
	__asm__ volatile(
   1660e:	f04f 0320 	mov.w	r3, #32
   16612:	f3ef 8711 	mrs	r7, BASEPRI
   16616:	f383 8812 	msr	BASEPRI_MAX, r3
   1661a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1661e:	4837      	ldr	r0, [pc, #220]	; (166fc <z_set_prio+0xf4>)
   16620:	f7ff f99c 	bl	1595c <z_spin_lock_valid>
   16624:	b940      	cbnz	r0, 16638 <z_set_prio+0x30>
   16626:	4936      	ldr	r1, [pc, #216]	; (16700 <z_set_prio+0xf8>)
   16628:	4836      	ldr	r0, [pc, #216]	; (16704 <z_set_prio+0xfc>)
   1662a:	2281      	movs	r2, #129	; 0x81
   1662c:	f003 feb0 	bl	1a390 <printk>
   16630:	2181      	movs	r1, #129	; 0x81
   16632:	4833      	ldr	r0, [pc, #204]	; (16700 <z_set_prio+0xf8>)
   16634:	f003 ff78 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   16638:	4830      	ldr	r0, [pc, #192]	; (166fc <z_set_prio+0xf4>)
   1663a:	f7ff f9ab 	bl	15994 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1663e:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   16640:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16642:	06da      	lsls	r2, r3, #27
   16644:	d156      	bne.n	166f4 <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
   16646:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   16648:	2d00      	cmp	r5, #0
   1664a:	d153      	bne.n	166f4 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1664c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16650:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   16652:	4621      	mov	r1, r4
   16654:	482c      	ldr	r0, [pc, #176]	; (16708 <z_set_prio+0x100>)
   16656:	f7ff fcd5 	bl	16004 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1665a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1665c:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1665e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16662:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   16664:	4b29      	ldr	r3, [pc, #164]	; (1670c <z_set_prio+0x104>)
   16666:	429c      	cmp	r4, r3
   16668:	d108      	bne.n	1667c <z_set_prio+0x74>
   1666a:	4929      	ldr	r1, [pc, #164]	; (16710 <z_set_prio+0x108>)
   1666c:	4825      	ldr	r0, [pc, #148]	; (16704 <z_set_prio+0xfc>)
   1666e:	22b1      	movs	r2, #177	; 0xb1
   16670:	f003 fe8e 	bl	1a390 <printk>
   16674:	21b1      	movs	r1, #177	; 0xb1
   16676:	4826      	ldr	r0, [pc, #152]	; (16710 <z_set_prio+0x108>)
   16678:	f003 ff56 	bl	1a528 <assert_post_action>
	return list->head == list;
   1667c:	4925      	ldr	r1, [pc, #148]	; (16714 <z_set_prio+0x10c>)
   1667e:	460b      	mov	r3, r1
   16680:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16684:	4298      	cmp	r0, r3
   16686:	bf18      	it	ne
   16688:	4605      	movne	r5, r0
   1668a:	2d00      	cmp	r5, #0
   1668c:	461a      	mov	r2, r3
   1668e:	462b      	mov	r3, r5
   16690:	bf38      	it	cc
   16692:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16694:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16696:	b343      	cbz	r3, 166ea <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
   16698:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1669c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   166a0:	4286      	cmp	r6, r0
   166a2:	d01e      	beq.n	166e2 <z_set_prio+0xda>
		return b2 - b1;
   166a4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   166a6:	2800      	cmp	r0, #0
   166a8:	dd1b      	ble.n	166e2 <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
   166aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   166ac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   166b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   166b2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   166b4:	2001      	movs	r0, #1
   166b6:	f7ff fce1 	bl	1607c <update_cache>
   166ba:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   166bc:	480f      	ldr	r0, [pc, #60]	; (166fc <z_set_prio+0xf4>)
   166be:	f7ff f95b 	bl	15978 <z_spin_unlock_valid>
   166c2:	b940      	cbnz	r0, 166d6 <z_set_prio+0xce>
   166c4:	490e      	ldr	r1, [pc, #56]	; (16700 <z_set_prio+0xf8>)
   166c6:	480f      	ldr	r0, [pc, #60]	; (16704 <z_set_prio+0xfc>)
   166c8:	22ac      	movs	r2, #172	; 0xac
   166ca:	f003 fe61 	bl	1a390 <printk>
   166ce:	21ac      	movs	r1, #172	; 0xac
   166d0:	480b      	ldr	r0, [pc, #44]	; (16700 <z_set_prio+0xf8>)
   166d2:	f003 ff29 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   166d6:	f387 8811 	msr	BASEPRI, r7
   166da:	f3bf 8f6f 	isb	sy
}
   166de:	4620      	mov	r0, r4
   166e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   166e2:	42ab      	cmp	r3, r5
   166e4:	d001      	beq.n	166ea <z_set_prio+0xe2>
   166e6:	681b      	ldr	r3, [r3, #0]
   166e8:	e7d5      	b.n	16696 <z_set_prio+0x8e>
	node->prev = tail;
   166ea:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   166ee:	602c      	str	r4, [r5, #0]
	list->tail = node;
   166f0:	624c      	str	r4, [r1, #36]	; 0x24
}
   166f2:	e7df      	b.n	166b4 <z_set_prio+0xac>
			thread->base.prio = prio;
   166f4:	73a6      	strb	r6, [r4, #14]
   166f6:	2400      	movs	r4, #0
   166f8:	e7e0      	b.n	166bc <z_set_prio+0xb4>
   166fa:	bf00      	nop
   166fc:	20000a68 	.word	0x20000a68
   16700:	0001d540 	.word	0x0001d540
   16704:	0001d506 	.word	0x0001d506
   16708:	20000a54 	.word	0x20000a54
   1670c:	20000140 	.word	0x20000140
   16710:	0001e4af 	.word	0x0001e4af
   16714:	20000a34 	.word	0x20000a34

00016718 <z_impl_k_thread_suspend>:
{
   16718:	b570      	push	{r4, r5, r6, lr}
   1671a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1671c:	3018      	adds	r0, #24
   1671e:	f000 fbfb 	bl	16f18 <z_abort_timeout>
	__asm__ volatile(
   16722:	f04f 0320 	mov.w	r3, #32
   16726:	f3ef 8611 	mrs	r6, BASEPRI
   1672a:	f383 8812 	msr	BASEPRI_MAX, r3
   1672e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16732:	4820      	ldr	r0, [pc, #128]	; (167b4 <z_impl_k_thread_suspend+0x9c>)
   16734:	f7ff f912 	bl	1595c <z_spin_lock_valid>
   16738:	b940      	cbnz	r0, 1674c <z_impl_k_thread_suspend+0x34>
   1673a:	491f      	ldr	r1, [pc, #124]	; (167b8 <z_impl_k_thread_suspend+0xa0>)
   1673c:	481f      	ldr	r0, [pc, #124]	; (167bc <z_impl_k_thread_suspend+0xa4>)
   1673e:	2281      	movs	r2, #129	; 0x81
   16740:	f003 fe26 	bl	1a390 <printk>
   16744:	2181      	movs	r1, #129	; 0x81
   16746:	481c      	ldr	r0, [pc, #112]	; (167b8 <z_impl_k_thread_suspend+0xa0>)
   16748:	f003 feee 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   1674c:	4819      	ldr	r0, [pc, #100]	; (167b4 <z_impl_k_thread_suspend+0x9c>)
   1674e:	f7ff f921 	bl	15994 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   16752:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   16756:	7b63      	ldrb	r3, [r4, #13]
   16758:	2a00      	cmp	r2, #0
   1675a:	da06      	bge.n	1676a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1675c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   16760:	4621      	mov	r1, r4
   16762:	4817      	ldr	r0, [pc, #92]	; (167c0 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16764:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   16766:	f7ff fc4d 	bl	16004 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1676a:	4d16      	ldr	r5, [pc, #88]	; (167c4 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1676c:	7b63      	ldrb	r3, [r4, #13]
   1676e:	68a8      	ldr	r0, [r5, #8]
   16770:	f043 0310 	orr.w	r3, r3, #16
   16774:	7363      	strb	r3, [r4, #13]
   16776:	1b03      	subs	r3, r0, r4
   16778:	4258      	negs	r0, r3
   1677a:	4158      	adcs	r0, r3
   1677c:	f7ff fc7e 	bl	1607c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16780:	480c      	ldr	r0, [pc, #48]	; (167b4 <z_impl_k_thread_suspend+0x9c>)
   16782:	f7ff f8f9 	bl	15978 <z_spin_unlock_valid>
   16786:	b940      	cbnz	r0, 1679a <z_impl_k_thread_suspend+0x82>
   16788:	490b      	ldr	r1, [pc, #44]	; (167b8 <z_impl_k_thread_suspend+0xa0>)
   1678a:	480c      	ldr	r0, [pc, #48]	; (167bc <z_impl_k_thread_suspend+0xa4>)
   1678c:	22ac      	movs	r2, #172	; 0xac
   1678e:	f003 fdff 	bl	1a390 <printk>
   16792:	21ac      	movs	r1, #172	; 0xac
   16794:	4808      	ldr	r0, [pc, #32]	; (167b8 <z_impl_k_thread_suspend+0xa0>)
   16796:	f003 fec7 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   1679a:	f386 8811 	msr	BASEPRI, r6
   1679e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   167a2:	68ab      	ldr	r3, [r5, #8]
   167a4:	42a3      	cmp	r3, r4
   167a6:	d103      	bne.n	167b0 <z_impl_k_thread_suspend+0x98>
}
   167a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   167ac:	f004 b955 	b.w	1aa5a <z_reschedule_unlocked>
}
   167b0:	bd70      	pop	{r4, r5, r6, pc}
   167b2:	bf00      	nop
   167b4:	20000a68 	.word	0x20000a68
   167b8:	0001d540 	.word	0x0001d540
   167bc:	0001d506 	.word	0x0001d506
   167c0:	20000a54 	.word	0x20000a54
   167c4:	20000a34 	.word	0x20000a34

000167c8 <k_sched_unlock>:
{
   167c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   167ca:	f04f 0320 	mov.w	r3, #32
   167ce:	f3ef 8511 	mrs	r5, BASEPRI
   167d2:	f383 8812 	msr	BASEPRI_MAX, r3
   167d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   167da:	4824      	ldr	r0, [pc, #144]	; (1686c <k_sched_unlock+0xa4>)
   167dc:	f7ff f8be 	bl	1595c <z_spin_lock_valid>
   167e0:	b940      	cbnz	r0, 167f4 <k_sched_unlock+0x2c>
   167e2:	4923      	ldr	r1, [pc, #140]	; (16870 <k_sched_unlock+0xa8>)
   167e4:	4823      	ldr	r0, [pc, #140]	; (16874 <k_sched_unlock+0xac>)
   167e6:	2281      	movs	r2, #129	; 0x81
   167e8:	f003 fdd2 	bl	1a390 <printk>
   167ec:	2181      	movs	r1, #129	; 0x81
   167ee:	4820      	ldr	r0, [pc, #128]	; (16870 <k_sched_unlock+0xa8>)
   167f0:	f003 fe9a 	bl	1a528 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   167f4:	4c20      	ldr	r4, [pc, #128]	; (16878 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   167f6:	481d      	ldr	r0, [pc, #116]	; (1686c <k_sched_unlock+0xa4>)
   167f8:	f7ff f8cc 	bl	15994 <z_spin_lock_set_owner>
   167fc:	68a2      	ldr	r2, [r4, #8]
   167fe:	7bd2      	ldrb	r2, [r2, #15]
   16800:	b952      	cbnz	r2, 16818 <k_sched_unlock+0x50>
   16802:	491e      	ldr	r1, [pc, #120]	; (1687c <k_sched_unlock+0xb4>)
   16804:	481b      	ldr	r0, [pc, #108]	; (16874 <k_sched_unlock+0xac>)
   16806:	f240 3255 	movw	r2, #853	; 0x355
   1680a:	f003 fdc1 	bl	1a390 <printk>
   1680e:	f240 3155 	movw	r1, #853	; 0x355
   16812:	481a      	ldr	r0, [pc, #104]	; (1687c <k_sched_unlock+0xb4>)
   16814:	f003 fe88 	bl	1a528 <assert_post_action>
   16818:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1681c:	b153      	cbz	r3, 16834 <k_sched_unlock+0x6c>
   1681e:	4917      	ldr	r1, [pc, #92]	; (1687c <k_sched_unlock+0xb4>)
   16820:	4814      	ldr	r0, [pc, #80]	; (16874 <k_sched_unlock+0xac>)
   16822:	f240 3256 	movw	r2, #854	; 0x356
   16826:	f003 fdb3 	bl	1a390 <printk>
   1682a:	f240 3156 	movw	r1, #854	; 0x356
   1682e:	4813      	ldr	r0, [pc, #76]	; (1687c <k_sched_unlock+0xb4>)
   16830:	f003 fe7a 	bl	1a528 <assert_post_action>
		++_current->base.sched_locked;
   16834:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   16836:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   16838:	7bd3      	ldrb	r3, [r2, #15]
   1683a:	3301      	adds	r3, #1
   1683c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1683e:	f7ff fc1d 	bl	1607c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16842:	480a      	ldr	r0, [pc, #40]	; (1686c <k_sched_unlock+0xa4>)
   16844:	f7ff f898 	bl	15978 <z_spin_unlock_valid>
   16848:	b940      	cbnz	r0, 1685c <k_sched_unlock+0x94>
   1684a:	4909      	ldr	r1, [pc, #36]	; (16870 <k_sched_unlock+0xa8>)
   1684c:	4809      	ldr	r0, [pc, #36]	; (16874 <k_sched_unlock+0xac>)
   1684e:	22ac      	movs	r2, #172	; 0xac
   16850:	f003 fd9e 	bl	1a390 <printk>
   16854:	21ac      	movs	r1, #172	; 0xac
   16856:	4806      	ldr	r0, [pc, #24]	; (16870 <k_sched_unlock+0xa8>)
   16858:	f003 fe66 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   1685c:	f385 8811 	msr	BASEPRI, r5
   16860:	f3bf 8f6f 	isb	sy
}
   16864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   16868:	f004 b8f7 	b.w	1aa5a <z_reschedule_unlocked>
   1686c:	20000a68 	.word	0x20000a68
   16870:	0001d540 	.word	0x0001d540
   16874:	0001d506 	.word	0x0001d506
   16878:	20000a34 	.word	0x20000a34
   1687c:	0001e4af 	.word	0x0001e4af

00016880 <z_unpend_first_thread>:
{
   16880:	b538      	push	{r3, r4, r5, lr}
   16882:	4604      	mov	r4, r0
	__asm__ volatile(
   16884:	f04f 0320 	mov.w	r3, #32
   16888:	f3ef 8511 	mrs	r5, BASEPRI
   1688c:	f383 8812 	msr	BASEPRI_MAX, r3
   16890:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16894:	4816      	ldr	r0, [pc, #88]	; (168f0 <z_unpend_first_thread+0x70>)
   16896:	f7ff f861 	bl	1595c <z_spin_lock_valid>
   1689a:	b940      	cbnz	r0, 168ae <z_unpend_first_thread+0x2e>
   1689c:	4915      	ldr	r1, [pc, #84]	; (168f4 <z_unpend_first_thread+0x74>)
   1689e:	4816      	ldr	r0, [pc, #88]	; (168f8 <z_unpend_first_thread+0x78>)
   168a0:	2281      	movs	r2, #129	; 0x81
   168a2:	f003 fd75 	bl	1a390 <printk>
   168a6:	2181      	movs	r1, #129	; 0x81
   168a8:	4812      	ldr	r0, [pc, #72]	; (168f4 <z_unpend_first_thread+0x74>)
   168aa:	f003 fe3d 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   168ae:	4810      	ldr	r0, [pc, #64]	; (168f0 <z_unpend_first_thread+0x70>)
   168b0:	f7ff f870 	bl	15994 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   168b4:	4620      	mov	r0, r4
   168b6:	f004 f8da 	bl	1aa6e <z_priq_dumb_best>
		if (thread != NULL) {
   168ba:	4604      	mov	r4, r0
   168bc:	b128      	cbz	r0, 168ca <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   168be:	f7ff fbbf 	bl	16040 <unpend_thread_no_timeout>
   168c2:	f104 0018 	add.w	r0, r4, #24
   168c6:	f000 fb27 	bl	16f18 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   168ca:	4809      	ldr	r0, [pc, #36]	; (168f0 <z_unpend_first_thread+0x70>)
   168cc:	f7ff f854 	bl	15978 <z_spin_unlock_valid>
   168d0:	b940      	cbnz	r0, 168e4 <z_unpend_first_thread+0x64>
   168d2:	4908      	ldr	r1, [pc, #32]	; (168f4 <z_unpend_first_thread+0x74>)
   168d4:	4808      	ldr	r0, [pc, #32]	; (168f8 <z_unpend_first_thread+0x78>)
   168d6:	22ac      	movs	r2, #172	; 0xac
   168d8:	f003 fd5a 	bl	1a390 <printk>
   168dc:	21ac      	movs	r1, #172	; 0xac
   168de:	4805      	ldr	r0, [pc, #20]	; (168f4 <z_unpend_first_thread+0x74>)
   168e0:	f003 fe22 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   168e4:	f385 8811 	msr	BASEPRI, r5
   168e8:	f3bf 8f6f 	isb	sy
}
   168ec:	4620      	mov	r0, r4
   168ee:	bd38      	pop	{r3, r4, r5, pc}
   168f0:	20000a68 	.word	0x20000a68
   168f4:	0001d540 	.word	0x0001d540
   168f8:	0001d506 	.word	0x0001d506

000168fc <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   168fc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   168fe:	4b04      	ldr	r3, [pc, #16]	; (16910 <z_sched_init+0x14>)
   16900:	4608      	mov	r0, r1
   16902:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   16906:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1690a:	f7ff ba9d 	b.w	15e48 <k_sched_time_slice_set>
   1690e:	bf00      	nop
   16910:	20000a34 	.word	0x20000a34

00016914 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   16914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16916:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1691a:	b153      	cbz	r3, 16932 <z_impl_k_yield+0x1e>
   1691c:	4939      	ldr	r1, [pc, #228]	; (16a04 <z_impl_k_yield+0xf0>)
   1691e:	483a      	ldr	r0, [pc, #232]	; (16a08 <z_impl_k_yield+0xf4>)
   16920:	f240 42a1 	movw	r2, #1185	; 0x4a1
   16924:	f003 fd34 	bl	1a390 <printk>
   16928:	f240 41a1 	movw	r1, #1185	; 0x4a1
   1692c:	4835      	ldr	r0, [pc, #212]	; (16a04 <z_impl_k_yield+0xf0>)
   1692e:	f003 fdfb 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16932:	f04f 0320 	mov.w	r3, #32
   16936:	f3ef 8611 	mrs	r6, BASEPRI
   1693a:	f383 8812 	msr	BASEPRI_MAX, r3
   1693e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16942:	4832      	ldr	r0, [pc, #200]	; (16a0c <z_impl_k_yield+0xf8>)
   16944:	f7ff f80a 	bl	1595c <z_spin_lock_valid>
   16948:	b940      	cbnz	r0, 1695c <z_impl_k_yield+0x48>
   1694a:	4931      	ldr	r1, [pc, #196]	; (16a10 <z_impl_k_yield+0xfc>)
   1694c:	482e      	ldr	r0, [pc, #184]	; (16a08 <z_impl_k_yield+0xf4>)
   1694e:	2281      	movs	r2, #129	; 0x81
   16950:	f003 fd1e 	bl	1a390 <printk>
   16954:	2181      	movs	r1, #129	; 0x81
   16956:	482e      	ldr	r0, [pc, #184]	; (16a10 <z_impl_k_yield+0xfc>)
   16958:	f003 fde6 	bl	1a528 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1695c:	4d2d      	ldr	r5, [pc, #180]	; (16a14 <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
   1695e:	482b      	ldr	r0, [pc, #172]	; (16a0c <z_impl_k_yield+0xf8>)
   16960:	f7ff f818 	bl	15994 <z_spin_lock_set_owner>
   16964:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   16966:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1696a:	7b4b      	ldrb	r3, [r1, #13]
   1696c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16970:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   16972:	f7ff fb47 	bl	16004 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   16976:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   16978:	7b63      	ldrb	r3, [r4, #13]
   1697a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1697e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   16980:	4b25      	ldr	r3, [pc, #148]	; (16a18 <z_impl_k_yield+0x104>)
   16982:	429c      	cmp	r4, r3
   16984:	d108      	bne.n	16998 <z_impl_k_yield+0x84>
   16986:	491f      	ldr	r1, [pc, #124]	; (16a04 <z_impl_k_yield+0xf0>)
   16988:	481f      	ldr	r0, [pc, #124]	; (16a08 <z_impl_k_yield+0xf4>)
   1698a:	22b1      	movs	r2, #177	; 0xb1
   1698c:	f003 fd00 	bl	1a390 <printk>
   16990:	21b1      	movs	r1, #177	; 0xb1
   16992:	481c      	ldr	r0, [pc, #112]	; (16a04 <z_impl_k_yield+0xf0>)
   16994:	f003 fdc8 	bl	1a528 <assert_post_action>
	return list->head == list;
   16998:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1699a:	4820      	ldr	r0, [pc, #128]	; (16a1c <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1699c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1699e:	4283      	cmp	r3, r0
   169a0:	bf08      	it	eq
   169a2:	2300      	moveq	r3, #0
   169a4:	2b00      	cmp	r3, #0
   169a6:	bf38      	it	cc
   169a8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   169aa:	b333      	cbz	r3, 169fa <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
   169ac:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   169b0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   169b4:	4297      	cmp	r7, r2
   169b6:	d01c      	beq.n	169f2 <z_impl_k_yield+0xde>
		return b2 - b1;
   169b8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   169ba:	2a00      	cmp	r2, #0
   169bc:	dd19      	ble.n	169f2 <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
   169be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   169c0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   169c4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   169c6:	605c      	str	r4, [r3, #4]
	update_cache(1);
   169c8:	2001      	movs	r0, #1
   169ca:	f7ff fb57 	bl	1607c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   169ce:	480f      	ldr	r0, [pc, #60]	; (16a0c <z_impl_k_yield+0xf8>)
   169d0:	f7fe ffd2 	bl	15978 <z_spin_unlock_valid>
   169d4:	b940      	cbnz	r0, 169e8 <z_impl_k_yield+0xd4>
   169d6:	490e      	ldr	r1, [pc, #56]	; (16a10 <z_impl_k_yield+0xfc>)
   169d8:	480b      	ldr	r0, [pc, #44]	; (16a08 <z_impl_k_yield+0xf4>)
   169da:	22c3      	movs	r2, #195	; 0xc3
   169dc:	f003 fcd8 	bl	1a390 <printk>
   169e0:	21c3      	movs	r1, #195	; 0xc3
   169e2:	480b      	ldr	r0, [pc, #44]	; (16a10 <z_impl_k_yield+0xfc>)
   169e4:	f003 fda0 	bl	1a528 <assert_post_action>
   169e8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   169ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   169ee:	f7fc bd81 	b.w	134f4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   169f2:	428b      	cmp	r3, r1
   169f4:	d001      	beq.n	169fa <z_impl_k_yield+0xe6>
   169f6:	681b      	ldr	r3, [r3, #0]
   169f8:	e7d7      	b.n	169aa <z_impl_k_yield+0x96>
	node->prev = tail;
   169fa:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   169fe:	600c      	str	r4, [r1, #0]
	list->tail = node;
   16a00:	626c      	str	r4, [r5, #36]	; 0x24
}
   16a02:	e7e1      	b.n	169c8 <z_impl_k_yield+0xb4>
   16a04:	0001e4af 	.word	0x0001e4af
   16a08:	0001d506 	.word	0x0001d506
   16a0c:	20000a68 	.word	0x20000a68
   16a10:	0001d540 	.word	0x0001d540
   16a14:	20000a34 	.word	0x20000a34
   16a18:	20000140 	.word	0x20000140
   16a1c:	20000a54 	.word	0x20000a54

00016a20 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   16a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a24:	4604      	mov	r4, r0
   16a26:	460d      	mov	r5, r1
   16a28:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   16a2c:	b153      	cbz	r3, 16a44 <z_tick_sleep+0x24>
   16a2e:	493c      	ldr	r1, [pc, #240]	; (16b20 <z_tick_sleep+0x100>)
   16a30:	483c      	ldr	r0, [pc, #240]	; (16b24 <z_tick_sleep+0x104>)
   16a32:	f240 42be 	movw	r2, #1214	; 0x4be
   16a36:	f003 fcab 	bl	1a390 <printk>
   16a3a:	f240 41be 	movw	r1, #1214	; 0x4be
   16a3e:	4838      	ldr	r0, [pc, #224]	; (16b20 <z_tick_sleep+0x100>)
   16a40:	f003 fd72 	bl	1a528 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   16a44:	ea54 0305 	orrs.w	r3, r4, r5
   16a48:	d104      	bne.n	16a54 <z_tick_sleep+0x34>
	z_impl_k_yield();
   16a4a:	f7ff ff63 	bl	16914 <z_impl_k_yield>
		k_yield();
		return 0;
   16a4e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   16a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   16a54:	f06f 0301 	mvn.w	r3, #1
   16a58:	1b1e      	subs	r6, r3, r4
   16a5a:	f04f 33ff 	mov.w	r3, #4294967295
   16a5e:	eb63 0705 	sbc.w	r7, r3, r5
   16a62:	2e01      	cmp	r6, #1
   16a64:	f177 0300 	sbcs.w	r3, r7, #0
   16a68:	da56      	bge.n	16b18 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   16a6a:	f004 f80a 	bl	1aa82 <sys_clock_tick_get_32>
   16a6e:	1906      	adds	r6, r0, r4
   16a70:	f04f 0320 	mov.w	r3, #32
   16a74:	f3ef 8811 	mrs	r8, BASEPRI
   16a78:	f383 8812 	msr	BASEPRI_MAX, r3
   16a7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16a80:	4829      	ldr	r0, [pc, #164]	; (16b28 <z_tick_sleep+0x108>)
   16a82:	f7fe ff6b 	bl	1595c <z_spin_lock_valid>
   16a86:	b940      	cbnz	r0, 16a9a <z_tick_sleep+0x7a>
   16a88:	4928      	ldr	r1, [pc, #160]	; (16b2c <z_tick_sleep+0x10c>)
   16a8a:	4826      	ldr	r0, [pc, #152]	; (16b24 <z_tick_sleep+0x104>)
   16a8c:	2281      	movs	r2, #129	; 0x81
   16a8e:	f003 fc7f 	bl	1a390 <printk>
   16a92:	2181      	movs	r1, #129	; 0x81
   16a94:	4825      	ldr	r0, [pc, #148]	; (16b2c <z_tick_sleep+0x10c>)
   16a96:	f003 fd47 	bl	1a528 <assert_post_action>
	pending_current = _current;
   16a9a:	4f25      	ldr	r7, [pc, #148]	; (16b30 <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
   16a9c:	4822      	ldr	r0, [pc, #136]	; (16b28 <z_tick_sleep+0x108>)
   16a9e:	f7fe ff79 	bl	15994 <z_spin_lock_set_owner>
   16aa2:	68b8      	ldr	r0, [r7, #8]
   16aa4:	4b23      	ldr	r3, [pc, #140]	; (16b34 <z_tick_sleep+0x114>)
   16aa6:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   16aa8:	f7ff fce0 	bl	1646c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   16aac:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16aae:	4622      	mov	r2, r4
   16ab0:	462b      	mov	r3, r5
   16ab2:	3018      	adds	r0, #24
   16ab4:	4920      	ldr	r1, [pc, #128]	; (16b38 <z_tick_sleep+0x118>)
   16ab6:	f000 f975 	bl	16da4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   16aba:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16abc:	481a      	ldr	r0, [pc, #104]	; (16b28 <z_tick_sleep+0x108>)
   16abe:	7b53      	ldrb	r3, [r2, #13]
   16ac0:	f043 0310 	orr.w	r3, r3, #16
   16ac4:	7353      	strb	r3, [r2, #13]
   16ac6:	f7fe ff57 	bl	15978 <z_spin_unlock_valid>
   16aca:	b940      	cbnz	r0, 16ade <z_tick_sleep+0xbe>
   16acc:	4917      	ldr	r1, [pc, #92]	; (16b2c <z_tick_sleep+0x10c>)
   16ace:	4815      	ldr	r0, [pc, #84]	; (16b24 <z_tick_sleep+0x104>)
   16ad0:	22c3      	movs	r2, #195	; 0xc3
   16ad2:	f003 fc5d 	bl	1a390 <printk>
   16ad6:	21c3      	movs	r1, #195	; 0xc3
   16ad8:	4814      	ldr	r0, [pc, #80]	; (16b2c <z_tick_sleep+0x10c>)
   16ada:	f003 fd25 	bl	1a528 <assert_post_action>
   16ade:	4640      	mov	r0, r8
   16ae0:	f7fc fd08 	bl	134f4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   16ae4:	68bb      	ldr	r3, [r7, #8]
   16ae6:	7b5b      	ldrb	r3, [r3, #13]
   16ae8:	06db      	lsls	r3, r3, #27
   16aea:	d50a      	bpl.n	16b02 <z_tick_sleep+0xe2>
   16aec:	490c      	ldr	r1, [pc, #48]	; (16b20 <z_tick_sleep+0x100>)
   16aee:	480d      	ldr	r0, [pc, #52]	; (16b24 <z_tick_sleep+0x104>)
   16af0:	f240 42df 	movw	r2, #1247	; 0x4df
   16af4:	f003 fc4c 	bl	1a390 <printk>
   16af8:	f240 41df 	movw	r1, #1247	; 0x4df
   16afc:	4808      	ldr	r0, [pc, #32]	; (16b20 <z_tick_sleep+0x100>)
   16afe:	f003 fd13 	bl	1a528 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   16b02:	f003 ffbe 	bl	1aa82 <sys_clock_tick_get_32>
   16b06:	1a30      	subs	r0, r6, r0
   16b08:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   16b0c:	2801      	cmp	r0, #1
   16b0e:	f171 0300 	sbcs.w	r3, r1, #0
   16b12:	bfb8      	it	lt
   16b14:	2000      	movlt	r0, #0
   16b16:	e79b      	b.n	16a50 <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   16b18:	f06f 0601 	mvn.w	r6, #1
   16b1c:	1b36      	subs	r6, r6, r4
   16b1e:	e7a7      	b.n	16a70 <z_tick_sleep+0x50>
   16b20:	0001e4af 	.word	0x0001e4af
   16b24:	0001d506 	.word	0x0001d506
   16b28:	20000a68 	.word	0x20000a68
   16b2c:	0001d540 	.word	0x0001d540
   16b30:	20000a34 	.word	0x20000a34
   16b34:	20000a64 	.word	0x20000a64
   16b38:	000163dd 	.word	0x000163dd

00016b3c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   16b3c:	b538      	push	{r3, r4, r5, lr}
   16b3e:	4604      	mov	r4, r0
   16b40:	460d      	mov	r5, r1
   16b42:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   16b46:	b153      	cbz	r3, 16b5e <z_impl_k_sleep+0x22>
   16b48:	4911      	ldr	r1, [pc, #68]	; (16b90 <z_impl_k_sleep+0x54>)
   16b4a:	4812      	ldr	r0, [pc, #72]	; (16b94 <z_impl_k_sleep+0x58>)
   16b4c:	f240 42ee 	movw	r2, #1262	; 0x4ee
   16b50:	f003 fc1e 	bl	1a390 <printk>
   16b54:	f240 41ee 	movw	r1, #1262	; 0x4ee
   16b58:	480d      	ldr	r0, [pc, #52]	; (16b90 <z_impl_k_sleep+0x54>)
   16b5a:	f003 fce5 	bl	1a528 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16b5e:	1c6b      	adds	r3, r5, #1
   16b60:	bf08      	it	eq
   16b62:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   16b66:	d106      	bne.n	16b76 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   16b68:	4b0b      	ldr	r3, [pc, #44]	; (16b98 <z_impl_k_sleep+0x5c>)
   16b6a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   16b6c:	f7ff fdd4 	bl	16718 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   16b70:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   16b74:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   16b76:	4620      	mov	r0, r4
   16b78:	4629      	mov	r1, r5
   16b7a:	f7ff ff51 	bl	16a20 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   16b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16b82:	fb80 3403 	smull	r3, r4, r0, r3
   16b86:	0bd8      	lsrs	r0, r3, #15
   16b88:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   16b8c:	e7f2      	b.n	16b74 <z_impl_k_sleep+0x38>
   16b8e:	bf00      	nop
   16b90:	0001e4af 	.word	0x0001e4af
   16b94:	0001d506 	.word	0x0001d506
   16b98:	20000a34 	.word	0x20000a34

00016b9c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   16b9c:	4b01      	ldr	r3, [pc, #4]	; (16ba4 <z_impl_z_current_get+0x8>)
   16b9e:	6898      	ldr	r0, [r3, #8]
   16ba0:	4770      	bx	lr
   16ba2:	bf00      	nop
   16ba4:	20000a34 	.word	0x20000a34

00016ba8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   16ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bac:	4604      	mov	r4, r0
   16bae:	f04f 0320 	mov.w	r3, #32
   16bb2:	f3ef 8611 	mrs	r6, BASEPRI
   16bb6:	f383 8812 	msr	BASEPRI_MAX, r3
   16bba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16bbe:	483e      	ldr	r0, [pc, #248]	; (16cb8 <z_thread_abort+0x110>)
   16bc0:	f7fe fecc 	bl	1595c <z_spin_lock_valid>
   16bc4:	b940      	cbnz	r0, 16bd8 <z_thread_abort+0x30>
   16bc6:	493d      	ldr	r1, [pc, #244]	; (16cbc <z_thread_abort+0x114>)
   16bc8:	483d      	ldr	r0, [pc, #244]	; (16cc0 <z_thread_abort+0x118>)
   16bca:	2281      	movs	r2, #129	; 0x81
   16bcc:	f003 fbe0 	bl	1a390 <printk>
   16bd0:	2181      	movs	r1, #129	; 0x81
   16bd2:	483a      	ldr	r0, [pc, #232]	; (16cbc <z_thread_abort+0x114>)
   16bd4:	f003 fca8 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   16bd8:	4837      	ldr	r0, [pc, #220]	; (16cb8 <z_thread_abort+0x110>)
   16bda:	f7fe fedb 	bl	15994 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   16bde:	7b63      	ldrb	r3, [r4, #13]
   16be0:	071a      	lsls	r2, r3, #28
   16be2:	d512      	bpl.n	16c0a <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16be4:	4834      	ldr	r0, [pc, #208]	; (16cb8 <z_thread_abort+0x110>)
   16be6:	f7fe fec7 	bl	15978 <z_spin_unlock_valid>
   16bea:	b940      	cbnz	r0, 16bfe <z_thread_abort+0x56>
   16bec:	4933      	ldr	r1, [pc, #204]	; (16cbc <z_thread_abort+0x114>)
   16bee:	4834      	ldr	r0, [pc, #208]	; (16cc0 <z_thread_abort+0x118>)
   16bf0:	22ac      	movs	r2, #172	; 0xac
   16bf2:	f003 fbcd 	bl	1a390 <printk>
   16bf6:	21ac      	movs	r1, #172	; 0xac
   16bf8:	4830      	ldr	r0, [pc, #192]	; (16cbc <z_thread_abort+0x114>)
   16bfa:	f003 fc95 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16bfe:	f386 8811 	msr	BASEPRI, r6
   16c02:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   16c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16c0a:	f023 0220 	bic.w	r2, r3, #32
   16c0e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   16c12:	09d2      	lsrs	r2, r2, #7
   16c14:	d138      	bne.n	16c88 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16c16:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   16c18:	68a3      	ldr	r3, [r4, #8]
   16c1a:	b113      	cbz	r3, 16c22 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   16c1c:	4620      	mov	r0, r4
   16c1e:	f7ff fa0f 	bl	16040 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   16c22:	f104 0018 	add.w	r0, r4, #24
   16c26:	f000 f977 	bl	16f18 <z_abort_timeout>
   16c2a:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16c2e:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   16c32:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c34:	42bd      	cmp	r5, r7
   16c36:	d000      	beq.n	16c3a <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16c38:	bb85      	cbnz	r5, 16c9c <z_thread_abort+0xf4>
		update_cache(1);
   16c3a:	2001      	movs	r0, #1
   16c3c:	f7ff fa1e 	bl	1607c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   16c40:	4b20      	ldr	r3, [pc, #128]	; (16cc4 <z_thread_abort+0x11c>)
   16c42:	689b      	ldr	r3, [r3, #8]
   16c44:	42a3      	cmp	r3, r4
   16c46:	d1cd      	bne.n	16be4 <z_thread_abort+0x3c>
   16c48:	f3ef 8305 	mrs	r3, IPSR
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d1c9      	bne.n	16be4 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16c50:	4819      	ldr	r0, [pc, #100]	; (16cb8 <z_thread_abort+0x110>)
   16c52:	f7fe fe91 	bl	15978 <z_spin_unlock_valid>
   16c56:	b940      	cbnz	r0, 16c6a <z_thread_abort+0xc2>
   16c58:	4918      	ldr	r1, [pc, #96]	; (16cbc <z_thread_abort+0x114>)
   16c5a:	4819      	ldr	r0, [pc, #100]	; (16cc0 <z_thread_abort+0x118>)
   16c5c:	22c3      	movs	r2, #195	; 0xc3
   16c5e:	f003 fb97 	bl	1a390 <printk>
   16c62:	21c3      	movs	r1, #195	; 0xc3
   16c64:	4815      	ldr	r0, [pc, #84]	; (16cbc <z_thread_abort+0x114>)
   16c66:	f003 fc5f 	bl	1a528 <assert_post_action>
   16c6a:	4630      	mov	r0, r6
   16c6c:	f7fc fc42 	bl	134f4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   16c70:	f240 6209 	movw	r2, #1545	; 0x609
   16c74:	4914      	ldr	r1, [pc, #80]	; (16cc8 <z_thread_abort+0x120>)
   16c76:	4812      	ldr	r0, [pc, #72]	; (16cc0 <z_thread_abort+0x118>)
   16c78:	f003 fb8a 	bl	1a390 <printk>
   16c7c:	f240 6109 	movw	r1, #1545	; 0x609
   16c80:	4811      	ldr	r0, [pc, #68]	; (16cc8 <z_thread_abort+0x120>)
   16c82:	f003 fc51 	bl	1a528 <assert_post_action>
   16c86:	e7ad      	b.n	16be4 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16c88:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   16c8c:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   16c90:	4621      	mov	r1, r4
   16c92:	480e      	ldr	r0, [pc, #56]	; (16ccc <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16c94:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   16c96:	f7ff f9b5 	bl	16004 <z_priq_dumb_remove>
}
   16c9a:	e7bd      	b.n	16c18 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   16c9c:	4628      	mov	r0, r5
   16c9e:	f7ff f9cf 	bl	16040 <unpend_thread_no_timeout>
   16ca2:	f105 0018 	add.w	r0, r5, #24
   16ca6:	f000 f937 	bl	16f18 <z_abort_timeout>
		ready_thread(thread);
   16caa:	4628      	mov	r0, r5
   16cac:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   16cb0:	f7ff face 	bl	16250 <ready_thread>
   16cb4:	e7bd      	b.n	16c32 <z_thread_abort+0x8a>
   16cb6:	bf00      	nop
   16cb8:	20000a68 	.word	0x20000a68
   16cbc:	0001d540 	.word	0x0001d540
   16cc0:	0001d506 	.word	0x0001d506
   16cc4:	20000a34 	.word	0x20000a34
   16cc8:	0001e4af 	.word	0x0001e4af
   16ccc:	20000a54 	.word	0x20000a54

00016cd0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   16cd0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   16cd2:	4806      	ldr	r0, [pc, #24]	; (16cec <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   16cd4:	4a06      	ldr	r2, [pc, #24]	; (16cf0 <z_data_copy+0x20>)
   16cd6:	4907      	ldr	r1, [pc, #28]	; (16cf4 <z_data_copy+0x24>)
   16cd8:	1a12      	subs	r2, r2, r0
   16cda:	f003 fcd5 	bl	1a688 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   16ce2:	4a05      	ldr	r2, [pc, #20]	; (16cf8 <z_data_copy+0x28>)
   16ce4:	4905      	ldr	r1, [pc, #20]	; (16cfc <z_data_copy+0x2c>)
   16ce6:	4806      	ldr	r0, [pc, #24]	; (16d00 <z_data_copy+0x30>)
   16ce8:	f003 bcce 	b.w	1a688 <memcpy>
   16cec:	20000000 	.word	0x20000000
   16cf0:	2000011c 	.word	0x2000011c
   16cf4:	0001e52c 	.word	0x0001e52c
   16cf8:	00000000 	.word	0x00000000
   16cfc:	0001e52c 	.word	0x0001e52c
   16d00:	20000000 	.word	0x20000000

00016d04 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16d04:	4b03      	ldr	r3, [pc, #12]	; (16d14 <elapsed+0x10>)
   16d06:	681b      	ldr	r3, [r3, #0]
   16d08:	b90b      	cbnz	r3, 16d0e <elapsed+0xa>
   16d0a:	f7fe b865 	b.w	14dd8 <sys_clock_elapsed>
}
   16d0e:	2000      	movs	r0, #0
   16d10:	4770      	bx	lr
   16d12:	bf00      	nop
   16d14:	20000a74 	.word	0x20000a74

00016d18 <remove_timeout>:
{
   16d18:	b530      	push	{r4, r5, lr}
   16d1a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16d1c:	b168      	cbz	r0, 16d3a <remove_timeout+0x22>
   16d1e:	4a0a      	ldr	r2, [pc, #40]	; (16d48 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   16d20:	6852      	ldr	r2, [r2, #4]
   16d22:	4290      	cmp	r0, r2
   16d24:	d009      	beq.n	16d3a <remove_timeout+0x22>
	if (next(t) != NULL) {
   16d26:	b143      	cbz	r3, 16d3a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   16d28:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   16d2c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   16d30:	1912      	adds	r2, r2, r4
   16d32:	eb45 0101 	adc.w	r1, r5, r1
   16d36:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   16d3a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   16d3c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16d3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16d40:	2300      	movs	r3, #0
	node->prev = NULL;
   16d42:	e9c0 3300 	strd	r3, r3, [r0]
}
   16d46:	bd30      	pop	{r4, r5, pc}
   16d48:	20000044 	.word	0x20000044

00016d4c <next_timeout>:

static int32_t next_timeout(void)
{
   16d4c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   16d4e:	4b13      	ldr	r3, [pc, #76]	; (16d9c <next_timeout+0x50>)
   16d50:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16d52:	429c      	cmp	r4, r3
   16d54:	bf08      	it	eq
   16d56:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   16d58:	f7ff ffd4 	bl	16d04 <elapsed>
   16d5c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   16d5e:	b1bc      	cbz	r4, 16d90 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16d60:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   16d64:	1b40      	subs	r0, r0, r5
   16d66:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   16d6a:	2801      	cmp	r0, #1
   16d6c:	f171 0300 	sbcs.w	r3, r1, #0
   16d70:	db11      	blt.n	16d96 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16d72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   16d76:	2300      	movs	r3, #0
   16d78:	4282      	cmp	r2, r0
   16d7a:	eb73 0401 	sbcs.w	r4, r3, r1
   16d7e:	da00      	bge.n	16d82 <next_timeout+0x36>
   16d80:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   16d82:	4b07      	ldr	r3, [pc, #28]	; (16da0 <next_timeout+0x54>)
   16d84:	691b      	ldr	r3, [r3, #16]
   16d86:	b113      	cbz	r3, 16d8e <next_timeout+0x42>
   16d88:	4298      	cmp	r0, r3
   16d8a:	bfa8      	it	ge
   16d8c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   16d8e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   16d90:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   16d94:	e7f5      	b.n	16d82 <next_timeout+0x36>
   16d96:	2000      	movs	r0, #0
   16d98:	e7f3      	b.n	16d82 <next_timeout+0x36>
   16d9a:	bf00      	nop
   16d9c:	20000044 	.word	0x20000044
   16da0:	20000a34 	.word	0x20000a34

00016da4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   16da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16daa:	1c6b      	adds	r3, r5, #1
   16dac:	bf08      	it	eq
   16dae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   16db2:	4682      	mov	sl, r0
   16db4:	468b      	mov	fp, r1
   16db6:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16db8:	f000 809c 	beq.w	16ef4 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   16dbc:	6803      	ldr	r3, [r0, #0]
   16dbe:	b143      	cbz	r3, 16dd2 <z_add_timeout+0x2e>
   16dc0:	494e      	ldr	r1, [pc, #312]	; (16efc <z_add_timeout+0x158>)
   16dc2:	484f      	ldr	r0, [pc, #316]	; (16f00 <z_add_timeout+0x15c>)
   16dc4:	225d      	movs	r2, #93	; 0x5d
   16dc6:	f003 fae3 	bl	1a390 <printk>
   16dca:	215d      	movs	r1, #93	; 0x5d
   16dcc:	484b      	ldr	r0, [pc, #300]	; (16efc <z_add_timeout+0x158>)
   16dce:	f003 fbab 	bl	1a528 <assert_post_action>
	to->fn = fn;
   16dd2:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   16dd6:	f04f 0320 	mov.w	r3, #32
   16dda:	f3ef 8b11 	mrs	fp, BASEPRI
   16dde:	f383 8812 	msr	BASEPRI_MAX, r3
   16de2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16de6:	4847      	ldr	r0, [pc, #284]	; (16f04 <z_add_timeout+0x160>)
   16de8:	f7fe fdb8 	bl	1595c <z_spin_lock_valid>
   16dec:	b940      	cbnz	r0, 16e00 <z_add_timeout+0x5c>
   16dee:	4946      	ldr	r1, [pc, #280]	; (16f08 <z_add_timeout+0x164>)
   16df0:	4843      	ldr	r0, [pc, #268]	; (16f00 <z_add_timeout+0x15c>)
   16df2:	2281      	movs	r2, #129	; 0x81
   16df4:	f003 facc 	bl	1a390 <printk>
   16df8:	2181      	movs	r1, #129	; 0x81
   16dfa:	4843      	ldr	r0, [pc, #268]	; (16f08 <z_add_timeout+0x164>)
   16dfc:	f003 fb94 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   16e00:	4840      	ldr	r0, [pc, #256]	; (16f04 <z_add_timeout+0x160>)
   16e02:	f7fe fdc7 	bl	15994 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   16e06:	f06f 0301 	mvn.w	r3, #1
   16e0a:	f04f 32ff 	mov.w	r2, #4294967295
   16e0e:	ebb3 0804 	subs.w	r8, r3, r4
   16e12:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   16e16:	f1b8 0f00 	cmp.w	r8, #0
   16e1a:	f179 0100 	sbcs.w	r1, r9, #0
   16e1e:	db1c      	blt.n	16e5a <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16e20:	483a      	ldr	r0, [pc, #232]	; (16f0c <z_add_timeout+0x168>)
   16e22:	e9d0 1000 	ldrd	r1, r0, [r0]
   16e26:	1a5b      	subs	r3, r3, r1
   16e28:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   16e2c:	1b1e      	subs	r6, r3, r4
   16e2e:	eb62 0705 	sbc.w	r7, r2, r5
   16e32:	2e01      	cmp	r6, #1
   16e34:	f177 0300 	sbcs.w	r3, r7, #0
   16e38:	bfbc      	itt	lt
   16e3a:	2601      	movlt	r6, #1
   16e3c:	2700      	movlt	r7, #0
   16e3e:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   16e42:	4a33      	ldr	r2, [pc, #204]	; (16f10 <z_add_timeout+0x16c>)
   16e44:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e48:	4293      	cmp	r3, r2
   16e4a:	d11d      	bne.n	16e88 <z_add_timeout+0xe4>
	node->prev = tail;
   16e4c:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   16e50:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   16e54:	f8c2 a004 	str.w	sl, [r2, #4]
}
   16e58:	e02c      	b.n	16eb4 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   16e5a:	f7ff ff53 	bl	16d04 <elapsed>
   16e5e:	1c63      	adds	r3, r4, #1
   16e60:	9300      	str	r3, [sp, #0]
   16e62:	f145 0300 	adc.w	r3, r5, #0
   16e66:	9301      	str	r3, [sp, #4]
   16e68:	e9dd 2300 	ldrd	r2, r3, [sp]
   16e6c:	1812      	adds	r2, r2, r0
   16e6e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   16e72:	e9ca 2304 	strd	r2, r3, [sl, #16]
   16e76:	e7e4      	b.n	16e42 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   16e78:	1be0      	subs	r0, r4, r7
   16e7a:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   16e7e:	42b3      	cmp	r3, r6
   16e80:	e9ca 0104 	strd	r0, r1, [sl, #16]
   16e84:	d0e2      	beq.n	16e4c <z_add_timeout+0xa8>
   16e86:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   16e88:	2b00      	cmp	r3, #0
   16e8a:	d0df      	beq.n	16e4c <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
   16e8c:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   16e90:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   16e94:	42bc      	cmp	r4, r7
   16e96:	eb75 0108 	sbcs.w	r1, r5, r8
   16e9a:	daed      	bge.n	16e78 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
   16e9c:	1b38      	subs	r0, r7, r4
   16e9e:	eb68 0105 	sbc.w	r1, r8, r5
   16ea2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   16ea6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   16ea8:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   16eac:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   16eb0:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   16eb4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16eb6:	4293      	cmp	r3, r2
   16eb8:	d00b      	beq.n	16ed2 <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   16eba:	459a      	cmp	sl, r3
   16ebc:	d109      	bne.n	16ed2 <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   16ebe:	f7ff ff45 	bl	16d4c <next_timeout>

			if (next_time == 0 ||
   16ec2:	b118      	cbz	r0, 16ecc <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
   16ec4:	4b13      	ldr	r3, [pc, #76]	; (16f14 <z_add_timeout+0x170>)
			if (next_time == 0 ||
   16ec6:	691b      	ldr	r3, [r3, #16]
   16ec8:	4283      	cmp	r3, r0
   16eca:	d002      	beq.n	16ed2 <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
   16ecc:	2100      	movs	r1, #0
   16ece:	f7fd ff53 	bl	14d78 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16ed2:	480c      	ldr	r0, [pc, #48]	; (16f04 <z_add_timeout+0x160>)
   16ed4:	f7fe fd50 	bl	15978 <z_spin_unlock_valid>
   16ed8:	b940      	cbnz	r0, 16eec <z_add_timeout+0x148>
   16eda:	490b      	ldr	r1, [pc, #44]	; (16f08 <z_add_timeout+0x164>)
   16edc:	4808      	ldr	r0, [pc, #32]	; (16f00 <z_add_timeout+0x15c>)
   16ede:	22ac      	movs	r2, #172	; 0xac
   16ee0:	f003 fa56 	bl	1a390 <printk>
   16ee4:	21ac      	movs	r1, #172	; 0xac
   16ee6:	4808      	ldr	r0, [pc, #32]	; (16f08 <z_add_timeout+0x164>)
   16ee8:	f003 fb1e 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16eec:	f38b 8811 	msr	BASEPRI, fp
   16ef0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   16ef4:	b003      	add	sp, #12
   16ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16efa:	bf00      	nop
   16efc:	0001e4d1 	.word	0x0001e4d1
   16f00:	0001d506 	.word	0x0001d506
   16f04:	20000a78 	.word	0x20000a78
   16f08:	0001d540 	.word	0x0001d540
   16f0c:	20000240 	.word	0x20000240
   16f10:	20000044 	.word	0x20000044
   16f14:	20000a34 	.word	0x20000a34

00016f18 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   16f18:	b538      	push	{r3, r4, r5, lr}
   16f1a:	4604      	mov	r4, r0
	__asm__ volatile(
   16f1c:	f04f 0320 	mov.w	r3, #32
   16f20:	f3ef 8511 	mrs	r5, BASEPRI
   16f24:	f383 8812 	msr	BASEPRI_MAX, r3
   16f28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16f2c:	4815      	ldr	r0, [pc, #84]	; (16f84 <z_abort_timeout+0x6c>)
   16f2e:	f7fe fd15 	bl	1595c <z_spin_lock_valid>
   16f32:	b940      	cbnz	r0, 16f46 <z_abort_timeout+0x2e>
   16f34:	4914      	ldr	r1, [pc, #80]	; (16f88 <z_abort_timeout+0x70>)
   16f36:	4815      	ldr	r0, [pc, #84]	; (16f8c <z_abort_timeout+0x74>)
   16f38:	2281      	movs	r2, #129	; 0x81
   16f3a:	f003 fa29 	bl	1a390 <printk>
   16f3e:	2181      	movs	r1, #129	; 0x81
   16f40:	4811      	ldr	r0, [pc, #68]	; (16f88 <z_abort_timeout+0x70>)
   16f42:	f003 faf1 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   16f46:	480f      	ldr	r0, [pc, #60]	; (16f84 <z_abort_timeout+0x6c>)
   16f48:	f7fe fd24 	bl	15994 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   16f4c:	6823      	ldr	r3, [r4, #0]
   16f4e:	b1b3      	cbz	r3, 16f7e <z_abort_timeout+0x66>
			remove_timeout(to);
   16f50:	4620      	mov	r0, r4
   16f52:	f7ff fee1 	bl	16d18 <remove_timeout>
			ret = 0;
   16f56:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f58:	480a      	ldr	r0, [pc, #40]	; (16f84 <z_abort_timeout+0x6c>)
   16f5a:	f7fe fd0d 	bl	15978 <z_spin_unlock_valid>
   16f5e:	b940      	cbnz	r0, 16f72 <z_abort_timeout+0x5a>
   16f60:	4909      	ldr	r1, [pc, #36]	; (16f88 <z_abort_timeout+0x70>)
   16f62:	480a      	ldr	r0, [pc, #40]	; (16f8c <z_abort_timeout+0x74>)
   16f64:	22ac      	movs	r2, #172	; 0xac
   16f66:	f003 fa13 	bl	1a390 <printk>
   16f6a:	21ac      	movs	r1, #172	; 0xac
   16f6c:	4806      	ldr	r0, [pc, #24]	; (16f88 <z_abort_timeout+0x70>)
   16f6e:	f003 fadb 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16f72:	f385 8811 	msr	BASEPRI, r5
   16f76:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   16f7a:	4620      	mov	r0, r4
   16f7c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   16f7e:	f06f 0415 	mvn.w	r4, #21
   16f82:	e7e9      	b.n	16f58 <z_abort_timeout+0x40>
   16f84:	20000a78 	.word	0x20000a78
   16f88:	0001d540 	.word	0x0001d540
   16f8c:	0001d506 	.word	0x0001d506

00016f90 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   16f90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16f92:	f04f 0320 	mov.w	r3, #32
   16f96:	f3ef 8511 	mrs	r5, BASEPRI
   16f9a:	f383 8812 	msr	BASEPRI_MAX, r3
   16f9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16fa2:	4813      	ldr	r0, [pc, #76]	; (16ff0 <z_get_next_timeout_expiry+0x60>)
   16fa4:	f7fe fcda 	bl	1595c <z_spin_lock_valid>
   16fa8:	b940      	cbnz	r0, 16fbc <z_get_next_timeout_expiry+0x2c>
   16faa:	4912      	ldr	r1, [pc, #72]	; (16ff4 <z_get_next_timeout_expiry+0x64>)
   16fac:	4812      	ldr	r0, [pc, #72]	; (16ff8 <z_get_next_timeout_expiry+0x68>)
   16fae:	2281      	movs	r2, #129	; 0x81
   16fb0:	f003 f9ee 	bl	1a390 <printk>
   16fb4:	2181      	movs	r1, #129	; 0x81
   16fb6:	480f      	ldr	r0, [pc, #60]	; (16ff4 <z_get_next_timeout_expiry+0x64>)
   16fb8:	f003 fab6 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   16fbc:	480c      	ldr	r0, [pc, #48]	; (16ff0 <z_get_next_timeout_expiry+0x60>)
   16fbe:	f7fe fce9 	bl	15994 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   16fc2:	f7ff fec3 	bl	16d4c <next_timeout>
   16fc6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16fc8:	4809      	ldr	r0, [pc, #36]	; (16ff0 <z_get_next_timeout_expiry+0x60>)
   16fca:	f7fe fcd5 	bl	15978 <z_spin_unlock_valid>
   16fce:	b940      	cbnz	r0, 16fe2 <z_get_next_timeout_expiry+0x52>
   16fd0:	4908      	ldr	r1, [pc, #32]	; (16ff4 <z_get_next_timeout_expiry+0x64>)
   16fd2:	4809      	ldr	r0, [pc, #36]	; (16ff8 <z_get_next_timeout_expiry+0x68>)
   16fd4:	22ac      	movs	r2, #172	; 0xac
   16fd6:	f003 f9db 	bl	1a390 <printk>
   16fda:	21ac      	movs	r1, #172	; 0xac
   16fdc:	4805      	ldr	r0, [pc, #20]	; (16ff4 <z_get_next_timeout_expiry+0x64>)
   16fde:	f003 faa3 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   16fe2:	f385 8811 	msr	BASEPRI, r5
   16fe6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   16fea:	4620      	mov	r0, r4
   16fec:	bd38      	pop	{r3, r4, r5, pc}
   16fee:	bf00      	nop
   16ff0:	20000a78 	.word	0x20000a78
   16ff4:	0001d540 	.word	0x0001d540
   16ff8:	0001d506 	.word	0x0001d506

00016ffc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   16ffc:	b570      	push	{r4, r5, r6, lr}
   16ffe:	4604      	mov	r4, r0
   17000:	460d      	mov	r5, r1
	__asm__ volatile(
   17002:	f04f 0320 	mov.w	r3, #32
   17006:	f3ef 8611 	mrs	r6, BASEPRI
   1700a:	f383 8812 	msr	BASEPRI_MAX, r3
   1700e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17012:	4816      	ldr	r0, [pc, #88]	; (1706c <z_set_timeout_expiry+0x70>)
   17014:	f7fe fca2 	bl	1595c <z_spin_lock_valid>
   17018:	b940      	cbnz	r0, 1702c <z_set_timeout_expiry+0x30>
   1701a:	4915      	ldr	r1, [pc, #84]	; (17070 <z_set_timeout_expiry+0x74>)
   1701c:	4815      	ldr	r0, [pc, #84]	; (17074 <z_set_timeout_expiry+0x78>)
   1701e:	2281      	movs	r2, #129	; 0x81
   17020:	f003 f9b6 	bl	1a390 <printk>
   17024:	2181      	movs	r1, #129	; 0x81
   17026:	4812      	ldr	r0, [pc, #72]	; (17070 <z_set_timeout_expiry+0x74>)
   17028:	f003 fa7e 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   1702c:	480f      	ldr	r0, [pc, #60]	; (1706c <z_set_timeout_expiry+0x70>)
   1702e:	f7fe fcb1 	bl	15994 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   17032:	f7ff fe8b 	bl	16d4c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   17036:	2801      	cmp	r0, #1
   17038:	dd05      	ble.n	17046 <z_set_timeout_expiry+0x4a>
   1703a:	42a0      	cmp	r0, r4
   1703c:	db03      	blt.n	17046 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1703e:	4629      	mov	r1, r5
   17040:	4620      	mov	r0, r4
   17042:	f7fd fe99 	bl	14d78 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17046:	4809      	ldr	r0, [pc, #36]	; (1706c <z_set_timeout_expiry+0x70>)
   17048:	f7fe fc96 	bl	15978 <z_spin_unlock_valid>
   1704c:	b940      	cbnz	r0, 17060 <z_set_timeout_expiry+0x64>
   1704e:	4908      	ldr	r1, [pc, #32]	; (17070 <z_set_timeout_expiry+0x74>)
   17050:	4808      	ldr	r0, [pc, #32]	; (17074 <z_set_timeout_expiry+0x78>)
   17052:	22ac      	movs	r2, #172	; 0xac
   17054:	f003 f99c 	bl	1a390 <printk>
   17058:	21ac      	movs	r1, #172	; 0xac
   1705a:	4805      	ldr	r0, [pc, #20]	; (17070 <z_set_timeout_expiry+0x74>)
   1705c:	f003 fa64 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   17060:	f386 8811 	msr	BASEPRI, r6
   17064:	f3bf 8f6f 	isb	sy
		}
	}
}
   17068:	bd70      	pop	{r4, r5, r6, pc}
   1706a:	bf00      	nop
   1706c:	20000a78 	.word	0x20000a78
   17070:	0001d540 	.word	0x0001d540
   17074:	0001d506 	.word	0x0001d506

00017078 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   17078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1707c:	b085      	sub	sp, #20
   1707e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   17080:	f7ff f880 	bl	16184 <z_time_slice>
	__asm__ volatile(
   17084:	f04f 0320 	mov.w	r3, #32
   17088:	f3ef 8911 	mrs	r9, BASEPRI
   1708c:	f383 8812 	msr	BASEPRI_MAX, r3
   17090:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17094:	484c      	ldr	r0, [pc, #304]	; (171c8 <sys_clock_announce+0x150>)
   17096:	f7fe fc61 	bl	1595c <z_spin_lock_valid>
   1709a:	b940      	cbnz	r0, 170ae <sys_clock_announce+0x36>
   1709c:	494b      	ldr	r1, [pc, #300]	; (171cc <sys_clock_announce+0x154>)
   1709e:	484c      	ldr	r0, [pc, #304]	; (171d0 <sys_clock_announce+0x158>)
   170a0:	2281      	movs	r2, #129	; 0x81
   170a2:	f003 f975 	bl	1a390 <printk>
   170a6:	2181      	movs	r1, #129	; 0x81
   170a8:	4848      	ldr	r0, [pc, #288]	; (171cc <sys_clock_announce+0x154>)
   170aa:	f003 fa3d 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   170ae:	4f49      	ldr	r7, [pc, #292]	; (171d4 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   170b0:	4e49      	ldr	r6, [pc, #292]	; (171d8 <sys_clock_announce+0x160>)
   170b2:	46bb      	mov	fp, r7
   170b4:	4844      	ldr	r0, [pc, #272]	; (171c8 <sys_clock_announce+0x150>)
	return list->head == list;
   170b6:	f8df a124 	ldr.w	sl, [pc, #292]	; 171dc <sys_clock_announce+0x164>
   170ba:	f7fe fc6b 	bl	15994 <z_spin_lock_set_owner>
   170be:	6034      	str	r4, [r6, #0]
   170c0:	f8d6 c000 	ldr.w	ip, [r6]
   170c4:	f8da 8000 	ldr.w	r8, [sl]
   170c8:	4662      	mov	r2, ip
   170ca:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   170ce:	45d0      	cmp	r8, sl
   170d0:	e9cd 3402 	strd	r3, r4, [sp, #8]
   170d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
   170d8:	e9cd 2300 	strd	r2, r3, [sp]
   170dc:	d011      	beq.n	17102 <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   170de:	f1b8 0f00 	cmp.w	r8, #0
   170e2:	d00e      	beq.n	17102 <sys_clock_announce+0x8a>
   170e4:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   170e8:	e9dd 3400 	ldrd	r3, r4, [sp]
   170ec:	428b      	cmp	r3, r1
   170ee:	eb74 0302 	sbcs.w	r3, r4, r2
   170f2:	da2a      	bge.n	1714a <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   170f4:	9b00      	ldr	r3, [sp, #0]
   170f6:	1ac8      	subs	r0, r1, r3
   170f8:	9b01      	ldr	r3, [sp, #4]
   170fa:	eb62 0103 	sbc.w	r1, r2, r3
   170fe:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   17102:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   17104:	9b00      	ldr	r3, [sp, #0]
   17106:	9a02      	ldr	r2, [sp, #8]
   17108:	9903      	ldr	r1, [sp, #12]
   1710a:	189a      	adds	r2, r3, r2
   1710c:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1710e:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
   17110:	eb41 0303 	adc.w	r3, r1, r3
   17114:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   17118:	f7ff fe18 	bl	16d4c <next_timeout>
   1711c:	4621      	mov	r1, r4
   1711e:	f7fd fe2b 	bl	14d78 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17122:	4829      	ldr	r0, [pc, #164]	; (171c8 <sys_clock_announce+0x150>)
   17124:	f7fe fc28 	bl	15978 <z_spin_unlock_valid>
   17128:	b940      	cbnz	r0, 1713c <sys_clock_announce+0xc4>
   1712a:	4928      	ldr	r1, [pc, #160]	; (171cc <sys_clock_announce+0x154>)
   1712c:	4828      	ldr	r0, [pc, #160]	; (171d0 <sys_clock_announce+0x158>)
   1712e:	22ac      	movs	r2, #172	; 0xac
   17130:	f003 f92e 	bl	1a390 <printk>
   17134:	21ac      	movs	r1, #172	; 0xac
   17136:	4825      	ldr	r0, [pc, #148]	; (171cc <sys_clock_announce+0x154>)
   17138:	f003 f9f6 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   1713c:	f389 8811 	msr	BASEPRI, r9
   17140:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   17144:	b005      	add	sp, #20
   17146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1714a:	2200      	movs	r2, #0
		curr_tick += dt;
   1714c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
   17150:	2300      	movs	r3, #0
		curr_tick += dt;
   17152:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
   17154:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   17158:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   1715c:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   1715e:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   17162:	4640      	mov	r0, r8
		curr_tick += dt;
   17164:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   17168:	f7ff fdd6 	bl	16d18 <remove_timeout>
   1716c:	4816      	ldr	r0, [pc, #88]	; (171c8 <sys_clock_announce+0x150>)
   1716e:	f7fe fc03 	bl	15978 <z_spin_unlock_valid>
   17172:	b940      	cbnz	r0, 17186 <sys_clock_announce+0x10e>
   17174:	4915      	ldr	r1, [pc, #84]	; (171cc <sys_clock_announce+0x154>)
   17176:	4816      	ldr	r0, [pc, #88]	; (171d0 <sys_clock_announce+0x158>)
   17178:	22ac      	movs	r2, #172	; 0xac
   1717a:	f003 f909 	bl	1a390 <printk>
   1717e:	21ac      	movs	r1, #172	; 0xac
   17180:	4812      	ldr	r0, [pc, #72]	; (171cc <sys_clock_announce+0x154>)
   17182:	f003 f9d1 	bl	1a528 <assert_post_action>
   17186:	f389 8811 	msr	BASEPRI, r9
   1718a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1718e:	4640      	mov	r0, r8
   17190:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17194:	4798      	blx	r3
	__asm__ volatile(
   17196:	f04f 0320 	mov.w	r3, #32
   1719a:	f3ef 8911 	mrs	r9, BASEPRI
   1719e:	f383 8812 	msr	BASEPRI_MAX, r3
   171a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   171a6:	4808      	ldr	r0, [pc, #32]	; (171c8 <sys_clock_announce+0x150>)
   171a8:	f7fe fbd8 	bl	1595c <z_spin_lock_valid>
   171ac:	b940      	cbnz	r0, 171c0 <sys_clock_announce+0x148>
   171ae:	4907      	ldr	r1, [pc, #28]	; (171cc <sys_clock_announce+0x154>)
   171b0:	4807      	ldr	r0, [pc, #28]	; (171d0 <sys_clock_announce+0x158>)
   171b2:	2281      	movs	r2, #129	; 0x81
   171b4:	f003 f8ec 	bl	1a390 <printk>
   171b8:	2181      	movs	r1, #129	; 0x81
   171ba:	4804      	ldr	r0, [pc, #16]	; (171cc <sys_clock_announce+0x154>)
   171bc:	f003 f9b4 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   171c0:	4801      	ldr	r0, [pc, #4]	; (171c8 <sys_clock_announce+0x150>)
   171c2:	f7fe fbe7 	bl	15994 <z_spin_lock_set_owner>
	return k;
   171c6:	e77b      	b.n	170c0 <sys_clock_announce+0x48>
   171c8:	20000a78 	.word	0x20000a78
   171cc:	0001d540 	.word	0x0001d540
   171d0:	0001d506 	.word	0x0001d506
   171d4:	20000240 	.word	0x20000240
   171d8:	20000a74 	.word	0x20000a74
   171dc:	20000044 	.word	0x20000044

000171e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   171e0:	b570      	push	{r4, r5, r6, lr}
   171e2:	f04f 0320 	mov.w	r3, #32
   171e6:	f3ef 8611 	mrs	r6, BASEPRI
   171ea:	f383 8812 	msr	BASEPRI_MAX, r3
   171ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   171f2:	4816      	ldr	r0, [pc, #88]	; (1724c <sys_clock_tick_get+0x6c>)
   171f4:	f7fe fbb2 	bl	1595c <z_spin_lock_valid>
   171f8:	b940      	cbnz	r0, 1720c <sys_clock_tick_get+0x2c>
   171fa:	4915      	ldr	r1, [pc, #84]	; (17250 <sys_clock_tick_get+0x70>)
   171fc:	4815      	ldr	r0, [pc, #84]	; (17254 <sys_clock_tick_get+0x74>)
   171fe:	2281      	movs	r2, #129	; 0x81
   17200:	f003 f8c6 	bl	1a390 <printk>
   17204:	2181      	movs	r1, #129	; 0x81
   17206:	4812      	ldr	r0, [pc, #72]	; (17250 <sys_clock_tick_get+0x70>)
   17208:	f003 f98e 	bl	1a528 <assert_post_action>
	z_spin_lock_set_owner(l);
   1720c:	480f      	ldr	r0, [pc, #60]	; (1724c <sys_clock_tick_get+0x6c>)
   1720e:	f7fe fbc1 	bl	15994 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   17212:	f7fd fde1 	bl	14dd8 <sys_clock_elapsed>
   17216:	4b10      	ldr	r3, [pc, #64]	; (17258 <sys_clock_tick_get+0x78>)
   17218:	e9d3 4500 	ldrd	r4, r5, [r3]
   1721c:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1721e:	480b      	ldr	r0, [pc, #44]	; (1724c <sys_clock_tick_get+0x6c>)
   17220:	f145 0500 	adc.w	r5, r5, #0
   17224:	f7fe fba8 	bl	15978 <z_spin_unlock_valid>
   17228:	b940      	cbnz	r0, 1723c <sys_clock_tick_get+0x5c>
   1722a:	4909      	ldr	r1, [pc, #36]	; (17250 <sys_clock_tick_get+0x70>)
   1722c:	4809      	ldr	r0, [pc, #36]	; (17254 <sys_clock_tick_get+0x74>)
   1722e:	22ac      	movs	r2, #172	; 0xac
   17230:	f003 f8ae 	bl	1a390 <printk>
   17234:	21ac      	movs	r1, #172	; 0xac
   17236:	4806      	ldr	r0, [pc, #24]	; (17250 <sys_clock_tick_get+0x70>)
   17238:	f003 f976 	bl	1a528 <assert_post_action>
	__asm__ volatile(
   1723c:	f386 8811 	msr	BASEPRI, r6
   17240:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   17244:	4620      	mov	r0, r4
   17246:	4629      	mov	r1, r5
   17248:	bd70      	pop	{r4, r5, r6, pc}
   1724a:	bf00      	nop
   1724c:	20000a78 	.word	0x20000a78
   17250:	0001d540 	.word	0x0001d540
   17254:	0001d506 	.word	0x0001d506
   17258:	20000240 	.word	0x20000240

0001725c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1725c:	4a02      	ldr	r2, [pc, #8]	; (17268 <boot_banner+0xc>)
   1725e:	4903      	ldr	r1, [pc, #12]	; (1726c <boot_banner+0x10>)
   17260:	4803      	ldr	r0, [pc, #12]	; (17270 <boot_banner+0x14>)
   17262:	f003 b895 	b.w	1a390 <printk>
   17266:	bf00      	nop
   17268:	0001d5ff 	.word	0x0001d5ff
   1726c:	0001e4f5 	.word	0x0001e4f5
   17270:	0001e501 	.word	0x0001e501

00017274 <ocrypto_aes_ctr_init>:
   17274:	b570      	push	{r4, r5, r6, lr}
   17276:	461e      	mov	r6, r3
   17278:	4604      	mov	r4, r0
   1727a:	4615      	mov	r5, r2
   1727c:	b109      	cbz	r1, 17282 <ocrypto_aes_ctr_init+0xe>
   1727e:	f7fa f84b 	bl	11318 <ocrypto_aes_key_schedule>
   17282:	4631      	mov	r1, r6
   17284:	2210      	movs	r2, #16
   17286:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   1728a:	f7fa f8ab 	bl	113e4 <ocrypto_constant_time_copy>
   1728e:	2300      	movs	r3, #0
   17290:	f884 5110 	strb.w	r5, [r4, #272]	; 0x110
   17294:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   17298:	bd70      	pop	{r4, r5, r6, pc}
   1729a:	bf00      	nop

0001729c <ocrypto_aes_ctr_decrypt>:
   1729c:	2b00      	cmp	r3, #0
   1729e:	f000 808e 	beq.w	173be <ocrypto_aes_ctr_decrypt+0x122>
   172a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172a6:	4604      	mov	r4, r0
   172a8:	460e      	mov	r6, r1
   172aa:	4690      	mov	r8, r2
   172ac:	f04f 0a10 	mov.w	sl, #16
   172b0:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
   172b4:	18cf      	adds	r7, r1, r3
   172b6:	f100 0bf0 	add.w	fp, r0, #240	; 0xf0
   172ba:	f500 7980 	add.w	r9, r0, #256	; 0x100
   172be:	e00e      	b.n	172de <ocrypto_aes_ctr_decrypt+0x42>
   172c0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
   172c4:	f818 2b01 	ldrb.w	r2, [r8], #1
   172c8:	4053      	eors	r3, r2
   172ca:	f806 3b01 	strb.w	r3, [r6], #1
   172ce:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   172d2:	42be      	cmp	r6, r7
   172d4:	f105 35ff 	add.w	r5, r5, #4294967295
   172d8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   172dc:	d06d      	beq.n	173ba <ocrypto_aes_ctr_decrypt+0x11e>
   172de:	1b63      	subs	r3, r4, r5
   172e0:	2d00      	cmp	r5, #0
   172e2:	d1ed      	bne.n	172c0 <ocrypto_aes_ctr_decrypt+0x24>
   172e4:	4622      	mov	r2, r4
   172e6:	4659      	mov	r1, fp
   172e8:	4648      	mov	r0, r9
   172ea:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
   172ee:	f7f9 fee5 	bl	110bc <ocrypto_aes_encrypt_block>
   172f2:	f894 10ff 	ldrb.w	r1, [r4, #255]	; 0xff
   172f6:	f894 20fe 	ldrb.w	r2, [r4, #254]	; 0xfe
   172fa:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
   172fe:	3101      	adds	r1, #1
   17300:	eb02 2211 	add.w	r2, r2, r1, lsr #8
   17304:	f894 c0fc 	ldrb.w	ip, [r4, #252]	; 0xfc
   17308:	eb03 2312 	add.w	r3, r3, r2, lsr #8
   1730c:	f894 50fb 	ldrb.w	r5, [r4, #251]	; 0xfb
   17310:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
   17314:	f894 00fa 	ldrb.w	r0, [r4, #250]	; 0xfa
   17318:	eb05 251c 	add.w	r5, r5, ip, lsr #8
   1731c:	f884 10ff 	strb.w	r1, [r4, #255]	; 0xff
   17320:	f894 10f9 	ldrb.w	r1, [r4, #249]	; 0xf9
   17324:	eb00 2015 	add.w	r0, r0, r5, lsr #8
   17328:	f884 20fe 	strb.w	r2, [r4, #254]	; 0xfe
   1732c:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   17330:	eb01 2110 	add.w	r1, r1, r0, lsr #8
   17334:	f884 30fd 	strb.w	r3, [r4, #253]	; 0xfd
   17338:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
   1733c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
   17340:	f884 c0fc 	strb.w	ip, [r4, #252]	; 0xfc
   17344:	f894 c0f6 	ldrb.w	ip, [r4, #246]	; 0xf6
   17348:	eb03 2312 	add.w	r3, r3, r2, lsr #8
   1734c:	f884 50fb 	strb.w	r5, [r4, #251]	; 0xfb
   17350:	f894 50f5 	ldrb.w	r5, [r4, #245]	; 0xf5
   17354:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
   17358:	f884 00fa 	strb.w	r0, [r4, #250]	; 0xfa
   1735c:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
   17360:	eb05 251c 	add.w	r5, r5, ip, lsr #8
   17364:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
   17368:	f894 10f3 	ldrb.w	r1, [r4, #243]	; 0xf3
   1736c:	eb00 2015 	add.w	r0, r0, r5, lsr #8
   17370:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
   17374:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   17378:	eb01 2110 	add.w	r1, r1, r0, lsr #8
   1737c:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
   17380:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   17384:	eb02 2211 	add.w	r2, r2, r1, lsr #8
   17388:	f884 c0f6 	strb.w	ip, [r4, #246]	; 0xf6
   1738c:	f894 c0f0 	ldrb.w	ip, [r4, #240]	; 0xf0
   17390:	eb03 2312 	add.w	r3, r3, r2, lsr #8
   17394:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
   17398:	eb0c 2513 	add.w	r5, ip, r3, lsr #8
   1739c:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
   173a0:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
   173a4:	f884 10f3 	strb.w	r1, [r4, #243]	; 0xf3
   173a8:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
   173ac:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
   173b0:	f8c4 a114 	str.w	sl, [r4, #276]	; 0x114
   173b4:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   173b8:	e784      	b.n	172c4 <ocrypto_aes_ctr_decrypt+0x28>
   173ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173be:	4770      	bx	lr

000173c0 <sha256_blocks>:
   173c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173c4:	2a3f      	cmp	r2, #63	; 0x3f
   173c6:	b09b      	sub	sp, #108	; 0x6c
   173c8:	9201      	str	r2, [sp, #4]
   173ca:	f240 80ad 	bls.w	17528 <sha256_blocks+0x168>
   173ce:	460c      	mov	r4, r1
   173d0:	4605      	mov	r5, r0
   173d2:	f1a2 0040 	sub.w	r0, r2, #64	; 0x40
   173d6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   173da:	3040      	adds	r0, #64	; 0x40
   173dc:	1820      	adds	r0, r4, r0
   173de:	e9d5 ba02 	ldrd	fp, sl, [r5, #8]
   173e2:	9000      	str	r0, [sp, #0]
   173e4:	e9d5 c306 	ldrd	ip, r3, [r5, #24]
   173e8:	4658      	mov	r0, fp
   173ea:	e9d5 1200 	ldrd	r1, r2, [r5]
   173ee:	e9d5 9e04 	ldrd	r9, lr, [r5, #16]
   173f2:	469b      	mov	fp, r3
   173f4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1753c <sha256_blocks+0x17c>
   173f8:	6823      	ldr	r3, [r4, #0]
   173fa:	6867      	ldr	r7, [r4, #4]
   173fc:	ba1b      	rev	r3, r3
   173fe:	68a6      	ldr	r6, [r4, #8]
   17400:	9102      	str	r1, [sp, #8]
   17402:	9203      	str	r2, [sp, #12]
   17404:	68e1      	ldr	r1, [r4, #12]
   17406:	6922      	ldr	r2, [r4, #16]
   17408:	9004      	str	r0, [sp, #16]
   1740a:	f8cd a014 	str.w	sl, [sp, #20]
   1740e:	6960      	ldr	r0, [r4, #20]
   17410:	f8d4 a018 	ldr.w	sl, [r4, #24]
   17414:	f8cd 9018 	str.w	r9, [sp, #24]
   17418:	f8cd e01c 	str.w	lr, [sp, #28]
   1741c:	f8d4 901c 	ldr.w	r9, [r4, #28]
   17420:	f8d4 e020 	ldr.w	lr, [r4, #32]
   17424:	f8cd c020 	str.w	ip, [sp, #32]
   17428:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   1742c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   17430:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
   17434:	930a      	str	r3, [sp, #40]	; 0x28
   17436:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17438:	fa9e fe8e 	rev.w	lr, lr
   1743c:	ba3f      	rev	r7, r7
   1743e:	ba36      	rev	r6, r6
   17440:	ba09      	rev	r1, r1
   17442:	ba12      	rev	r2, r2
   17444:	ba00      	rev	r0, r0
   17446:	fa9a fa8a 	rev.w	sl, sl
   1744a:	fa99 f989 	rev.w	r9, r9
   1744e:	fa9c fc8c 	rev.w	ip, ip
   17452:	fa9b fb8b 	rev.w	fp, fp
   17456:	ba1b      	rev	r3, r3
   17458:	e9cd ec12 	strd	lr, ip, [sp, #72]	; 0x48
   1745c:	e9cd 610c 	strd	r6, r1, [sp, #48]	; 0x30
   17460:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
   17464:	e9cd a910 	strd	sl, r9, [sp, #64]	; 0x40
   17468:	e9cd b314 	strd	fp, r3, [sp, #80]	; 0x50
   1746c:	970b      	str	r7, [sp, #44]	; 0x2c
   1746e:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
   17472:	6b67      	ldr	r7, [r4, #52]	; 0x34
   17474:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   17476:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17478:	fa9c fc8c 	rev.w	ip, ip
   1747c:	ba1b      	rev	r3, r3
   1747e:	aa02      	add	r2, sp, #8
   17480:	a90a      	add	r1, sp, #40	; 0x28
   17482:	4640      	mov	r0, r8
   17484:	ba3f      	rev	r7, r7
   17486:	ba36      	rev	r6, r6
   17488:	e9cd c716 	strd	ip, r7, [sp, #88]	; 0x58
   1748c:	e9cd 6318 	strd	r6, r3, [sp, #96]	; 0x60
   17490:	f7f9 ffb6 	bl	11400 <ocrypto_sha256_loop1>
   17494:	a80a      	add	r0, sp, #40	; 0x28
   17496:	f7fa f8d9 	bl	1164c <ocrypto_sha256_loop2>
   1749a:	aa02      	add	r2, sp, #8
   1749c:	a90a      	add	r1, sp, #40	; 0x28
   1749e:	4824      	ldr	r0, [pc, #144]	; (17530 <sha256_blocks+0x170>)
   174a0:	f7f9 ffae 	bl	11400 <ocrypto_sha256_loop1>
   174a4:	a80a      	add	r0, sp, #40	; 0x28
   174a6:	f7fa f8d1 	bl	1164c <ocrypto_sha256_loop2>
   174aa:	aa02      	add	r2, sp, #8
   174ac:	a90a      	add	r1, sp, #40	; 0x28
   174ae:	4821      	ldr	r0, [pc, #132]	; (17534 <sha256_blocks+0x174>)
   174b0:	f7f9 ffa6 	bl	11400 <ocrypto_sha256_loop1>
   174b4:	a80a      	add	r0, sp, #40	; 0x28
   174b6:	f7fa f8c9 	bl	1164c <ocrypto_sha256_loop2>
   174ba:	481f      	ldr	r0, [pc, #124]	; (17538 <sha256_blocks+0x178>)
   174bc:	aa02      	add	r2, sp, #8
   174be:	a90a      	add	r1, sp, #40	; 0x28
   174c0:	f7f9 ff9e 	bl	11400 <ocrypto_sha256_loop1>
   174c4:	686a      	ldr	r2, [r5, #4]
   174c6:	9b03      	ldr	r3, [sp, #12]
   174c8:	682e      	ldr	r6, [r5, #0]
   174ca:	441a      	add	r2, r3
   174cc:	68eb      	ldr	r3, [r5, #12]
   174ce:	68a8      	ldr	r0, [r5, #8]
   174d0:	469c      	mov	ip, r3
   174d2:	9b05      	ldr	r3, [sp, #20]
   174d4:	9f04      	ldr	r7, [sp, #16]
   174d6:	eb0c 0a03 	add.w	sl, ip, r3
   174da:	692b      	ldr	r3, [r5, #16]
   174dc:	9902      	ldr	r1, [sp, #8]
   174de:	469c      	mov	ip, r3
   174e0:	9b06      	ldr	r3, [sp, #24]
   174e2:	4431      	add	r1, r6
   174e4:	eb0c 0903 	add.w	r9, ip, r3
   174e8:	696e      	ldr	r6, [r5, #20]
   174ea:	9b07      	ldr	r3, [sp, #28]
   174ec:	4438      	add	r0, r7
   174ee:	69af      	ldr	r7, [r5, #24]
   174f0:	eb06 0e03 	add.w	lr, r6, r3
   174f4:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
   174f8:	eb07 0c06 	add.w	ip, r7, r6
   174fc:	69ee      	ldr	r6, [r5, #28]
   174fe:	3440      	adds	r4, #64	; 0x40
   17500:	eb06 0b03 	add.w	fp, r6, r3
   17504:	9b00      	ldr	r3, [sp, #0]
   17506:	e9c5 1200 	strd	r1, r2, [r5]
   1750a:	429c      	cmp	r4, r3
   1750c:	e9c5 0a02 	strd	r0, sl, [r5, #8]
   17510:	e9c5 9e04 	strd	r9, lr, [r5, #16]
   17514:	e9c5 cb06 	strd	ip, fp, [r5, #24]
   17518:	f47f af6e 	bne.w	173f8 <sha256_blocks+0x38>
   1751c:	9b01      	ldr	r3, [sp, #4]
   1751e:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   17522:	b01b      	add	sp, #108	; 0x6c
   17524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17528:	4610      	mov	r0, r2
   1752a:	b01b      	add	sp, #108	; 0x6c
   1752c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17530:	0001d298 	.word	0x0001d298
   17534:	0001d2d8 	.word	0x0001d2d8
   17538:	0001d318 	.word	0x0001d318
   1753c:	0001d258 	.word	0x0001d258

00017540 <sha256_blocks.constprop.0>:
   17540:	b5f0      	push	{r4, r5, r6, r7, lr}
   17542:	4604      	mov	r4, r0
   17544:	680b      	ldr	r3, [r1, #0]
   17546:	688f      	ldr	r7, [r1, #8]
   17548:	68ce      	ldr	r6, [r1, #12]
   1754a:	b099      	sub	sp, #100	; 0x64
   1754c:	ba1b      	rev	r3, r3
   1754e:	690d      	ldr	r5, [r1, #16]
   17550:	6948      	ldr	r0, [r1, #20]
   17552:	698a      	ldr	r2, [r1, #24]
   17554:	9308      	str	r3, [sp, #32]
   17556:	ba3f      	rev	r7, r7
   17558:	69cb      	ldr	r3, [r1, #28]
   1755a:	ba36      	rev	r6, r6
   1755c:	970a      	str	r7, [sp, #40]	; 0x28
   1755e:	960b      	str	r6, [sp, #44]	; 0x2c
   17560:	6867      	ldr	r7, [r4, #4]
   17562:	68a6      	ldr	r6, [r4, #8]
   17564:	f8d1 c004 	ldr.w	ip, [r1, #4]
   17568:	ba2d      	rev	r5, r5
   1756a:	ba00      	rev	r0, r0
   1756c:	ba12      	rev	r2, r2
   1756e:	ba1b      	rev	r3, r3
   17570:	950c      	str	r5, [sp, #48]	; 0x30
   17572:	900d      	str	r0, [sp, #52]	; 0x34
   17574:	68e5      	ldr	r5, [r4, #12]
   17576:	6920      	ldr	r0, [r4, #16]
   17578:	920e      	str	r2, [sp, #56]	; 0x38
   1757a:	930f      	str	r3, [sp, #60]	; 0x3c
   1757c:	6962      	ldr	r2, [r4, #20]
   1757e:	69a3      	ldr	r3, [r4, #24]
   17580:	9701      	str	r7, [sp, #4]
   17582:	9602      	str	r6, [sp, #8]
   17584:	69e7      	ldr	r7, [r4, #28]
   17586:	6826      	ldr	r6, [r4, #0]
   17588:	fa9c fc8c 	rev.w	ip, ip
   1758c:	e9cd 5003 	strd	r5, r0, [sp, #12]
   17590:	e9cd 2305 	strd	r2, r3, [sp, #20]
   17594:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   17598:	9707      	str	r7, [sp, #28]
   1759a:	9600      	str	r6, [sp, #0]
   1759c:	6a0b      	ldr	r3, [r1, #32]
   1759e:	6acf      	ldr	r7, [r1, #44]	; 0x2c
   175a0:	6b08      	ldr	r0, [r1, #48]	; 0x30
   175a2:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   175a4:	ba1b      	rev	r3, r3
   175a6:	4d2d      	ldr	r5, [pc, #180]	; (1765c <sha256_blocks.constprop.0+0x11c>)
   175a8:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
   175ac:	f8d1 c028 	ldr.w	ip, [r1, #40]	; 0x28
   175b0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   175b2:	9310      	str	r3, [sp, #64]	; 0x40
   175b4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   175b6:	ba3f      	rev	r7, r7
   175b8:	ba11      	rev	r1, r2
   175ba:	ba00      	rev	r0, r0
   175bc:	fa9e fe8e 	rev.w	lr, lr
   175c0:	fa9c fc8c 	rev.w	ip, ip
   175c4:	ba1b      	rev	r3, r3
   175c6:	466a      	mov	r2, sp
   175c8:	e9cd 7013 	strd	r7, r0, [sp, #76]	; 0x4c
   175cc:	9116      	str	r1, [sp, #88]	; 0x58
   175ce:	4628      	mov	r0, r5
   175d0:	a908      	add	r1, sp, #32
   175d2:	ba36      	rev	r6, r6
   175d4:	9317      	str	r3, [sp, #92]	; 0x5c
   175d6:	e9cd ec11 	strd	lr, ip, [sp, #68]	; 0x44
   175da:	9615      	str	r6, [sp, #84]	; 0x54
   175dc:	f7f9 ff10 	bl	11400 <ocrypto_sha256_loop1>
   175e0:	a808      	add	r0, sp, #32
   175e2:	f7fa f833 	bl	1164c <ocrypto_sha256_loop2>
   175e6:	466a      	mov	r2, sp
   175e8:	a908      	add	r1, sp, #32
   175ea:	f105 0040 	add.w	r0, r5, #64	; 0x40
   175ee:	f7f9 ff07 	bl	11400 <ocrypto_sha256_loop1>
   175f2:	a808      	add	r0, sp, #32
   175f4:	f7fa f82a 	bl	1164c <ocrypto_sha256_loop2>
   175f8:	466a      	mov	r2, sp
   175fa:	a908      	add	r1, sp, #32
   175fc:	f105 0080 	add.w	r0, r5, #128	; 0x80
   17600:	f7f9 fefe 	bl	11400 <ocrypto_sha256_loop1>
   17604:	a808      	add	r0, sp, #32
   17606:	f7fa f821 	bl	1164c <ocrypto_sha256_loop2>
   1760a:	466a      	mov	r2, sp
   1760c:	a908      	add	r1, sp, #32
   1760e:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   17612:	f7f9 fef5 	bl	11400 <ocrypto_sha256_loop1>
   17616:	e9d4 6502 	ldrd	r6, r5, [r4, #8]
   1761a:	6860      	ldr	r0, [r4, #4]
   1761c:	9901      	ldr	r1, [sp, #4]
   1761e:	6827      	ldr	r7, [r4, #0]
   17620:	1843      	adds	r3, r0, r1
   17622:	9a00      	ldr	r2, [sp, #0]
   17624:	9902      	ldr	r1, [sp, #8]
   17626:	6920      	ldr	r0, [r4, #16]
   17628:	4417      	add	r7, r2
   1762a:	440e      	add	r6, r1
   1762c:	9a03      	ldr	r2, [sp, #12]
   1762e:	9904      	ldr	r1, [sp, #16]
   17630:	4415      	add	r5, r2
   17632:	4408      	add	r0, r1
   17634:	6962      	ldr	r2, [r4, #20]
   17636:	9905      	ldr	r1, [sp, #20]
   17638:	6027      	str	r7, [r4, #0]
   1763a:	4411      	add	r1, r2
   1763c:	e9c4 0104 	strd	r0, r1, [r4, #16]
   17640:	2000      	movs	r0, #0
   17642:	69a7      	ldr	r7, [r4, #24]
   17644:	9a06      	ldr	r2, [sp, #24]
   17646:	6063      	str	r3, [r4, #4]
   17648:	443a      	add	r2, r7
   1764a:	69e3      	ldr	r3, [r4, #28]
   1764c:	9f07      	ldr	r7, [sp, #28]
   1764e:	e9c4 6502 	strd	r6, r5, [r4, #8]
   17652:	443b      	add	r3, r7
   17654:	e9c4 2306 	strd	r2, r3, [r4, #24]
   17658:	b019      	add	sp, #100	; 0x64
   1765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1765c:	0001d258 	.word	0x0001d258

00017660 <nrf_cc3xx_platform_init>:
   17660:	b510      	push	{r4, lr}
   17662:	4c0c      	ldr	r4, [pc, #48]	; (17694 <nrf_cc3xx_platform_init+0x34>)
   17664:	6823      	ldr	r3, [r4, #0]
   17666:	b113      	cbz	r3, 1766e <nrf_cc3xx_platform_init+0xe>
   17668:	4b0b      	ldr	r3, [pc, #44]	; (17698 <nrf_cc3xx_platform_init+0x38>)
   1766a:	681b      	ldr	r3, [r3, #0]
   1766c:	b92b      	cbnz	r3, 1767a <nrf_cc3xx_platform_init+0x1a>
   1766e:	f000 fac7 	bl	17c00 <CC_LibInit>
   17672:	b930      	cbnz	r0, 17682 <nrf_cc3xx_platform_init+0x22>
   17674:	2201      	movs	r2, #1
   17676:	4b08      	ldr	r3, [pc, #32]	; (17698 <nrf_cc3xx_platform_init+0x38>)
   17678:	601a      	str	r2, [r3, #0]
   1767a:	2301      	movs	r3, #1
   1767c:	2000      	movs	r0, #0
   1767e:	6023      	str	r3, [r4, #0]
   17680:	bd10      	pop	{r4, pc}
   17682:	3801      	subs	r0, #1
   17684:	2807      	cmp	r0, #7
   17686:	d901      	bls.n	1768c <nrf_cc3xx_platform_init+0x2c>
   17688:	4804      	ldr	r0, [pc, #16]	; (1769c <nrf_cc3xx_platform_init+0x3c>)
   1768a:	bd10      	pop	{r4, pc}
   1768c:	4b04      	ldr	r3, [pc, #16]	; (176a0 <nrf_cc3xx_platform_init+0x40>)
   1768e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17692:	bd10      	pop	{r4, pc}
   17694:	20000a7c 	.word	0x20000a7c
   17698:	20000a80 	.word	0x20000a80
   1769c:	ffff8ffe 	.word	0xffff8ffe
   176a0:	0001d358 	.word	0x0001d358

000176a4 <nrf_cc3xx_platform_abort>:
   176a4:	f3bf 8f4f 	dsb	sy
   176a8:	4905      	ldr	r1, [pc, #20]	; (176c0 <nrf_cc3xx_platform_abort+0x1c>)
   176aa:	4b06      	ldr	r3, [pc, #24]	; (176c4 <nrf_cc3xx_platform_abort+0x20>)
   176ac:	68ca      	ldr	r2, [r1, #12]
   176ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   176b2:	4313      	orrs	r3, r2
   176b4:	60cb      	str	r3, [r1, #12]
   176b6:	f3bf 8f4f 	dsb	sy
   176ba:	bf00      	nop
   176bc:	e7fd      	b.n	176ba <nrf_cc3xx_platform_abort+0x16>
   176be:	bf00      	nop
   176c0:	e000ed00 	.word	0xe000ed00
   176c4:	05fa0004 	.word	0x05fa0004

000176c8 <CC_PalAbort>:
   176c8:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   176cc:	2100      	movs	r1, #0
   176ce:	b430      	push	{r4, r5}
   176d0:	4a08      	ldr	r2, [pc, #32]	; (176f4 <CC_PalAbort+0x2c>)
   176d2:	4c09      	ldr	r4, [pc, #36]	; (176f8 <CC_PalAbort+0x30>)
   176d4:	4d09      	ldr	r5, [pc, #36]	; (176fc <CC_PalAbort+0x34>)
   176d6:	6023      	str	r3, [r4, #0]
   176d8:	602b      	str	r3, [r5, #0]
   176da:	6013      	str	r3, [r2, #0]
   176dc:	60e3      	str	r3, [r4, #12]
   176de:	60eb      	str	r3, [r5, #12]
   176e0:	60d3      	str	r3, [r2, #12]
   176e2:	61a3      	str	r3, [r4, #24]
   176e4:	4a06      	ldr	r2, [pc, #24]	; (17700 <CC_PalAbort+0x38>)
   176e6:	4c07      	ldr	r4, [pc, #28]	; (17704 <CC_PalAbort+0x3c>)
   176e8:	61ab      	str	r3, [r5, #24]
   176ea:	6863      	ldr	r3, [r4, #4]
   176ec:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   176f0:	bc30      	pop	{r4, r5}
   176f2:	4718      	bx	r3
   176f4:	50845408 	.word	0x50845408
   176f8:	50845400 	.word	0x50845400
   176fc:	50845404 	.word	0x50845404
   17700:	50844000 	.word	0x50844000
   17704:	2000004c 	.word	0x2000004c

00017708 <nrf_cc3xx_platform_set_abort>:
   17708:	4b02      	ldr	r3, [pc, #8]	; (17714 <nrf_cc3xx_platform_set_abort+0xc>)
   1770a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1770e:	e9c3 1200 	strd	r1, r2, [r3]
   17712:	4770      	bx	lr
   17714:	2000004c 	.word	0x2000004c

00017718 <nrf_cc3xx_platform_ctr_drbg_init>:
   17718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1771c:	4c15      	ldr	r4, [pc, #84]	; (17774 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1771e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1777c <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   17722:	2800      	cmp	r0, #0
   17724:	bf18      	it	ne
   17726:	4604      	movne	r4, r0
   17728:	6820      	ldr	r0, [r4, #0]
   1772a:	b083      	sub	sp, #12
   1772c:	4540      	cmp	r0, r8
   1772e:	d01d      	beq.n	1776c <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   17730:	4616      	mov	r6, r2
   17732:	460d      	mov	r5, r1
   17734:	4620      	mov	r0, r4
   17736:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1773a:	f104 0904 	add.w	r9, r4, #4
   1773e:	f000 fe71 	bl	18424 <mbedtls_platform_zeroize>
   17742:	f504 778c 	add.w	r7, r4, #280	; 0x118
   17746:	4648      	mov	r0, r9
   17748:	f000 f93e 	bl	179c8 <cc_mbedtls_entropy_init>
   1774c:	4638      	mov	r0, r7
   1774e:	f001 fa5f 	bl	18c10 <cc_mbedtls_ctr_drbg_init>
   17752:	464a      	mov	r2, r9
   17754:	4638      	mov	r0, r7
   17756:	462b      	mov	r3, r5
   17758:	4907      	ldr	r1, [pc, #28]	; (17778 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1775a:	9600      	str	r6, [sp, #0]
   1775c:	f001 fa6a 	bl	18c34 <cc_mbedtls_ctr_drbg_seed>
   17760:	b908      	cbnz	r0, 17766 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   17762:	f8c4 8000 	str.w	r8, [r4]
   17766:	b003      	add	sp, #12
   17768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1776c:	2000      	movs	r0, #0
   1776e:	b003      	add	sp, #12
   17770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17774:	200018c0 	.word	0x200018c0
   17778:	00017a49 	.word	0x00017a49
   1777c:	5ac9bca5 	.word	0x5ac9bca5

00017780 <nrf_cc3xx_platform_ctr_drbg_get>:
   17780:	b5f0      	push	{r4, r5, r6, r7, lr}
   17782:	4c0d      	ldr	r4, [pc, #52]	; (177b8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   17784:	4e0d      	ldr	r6, [pc, #52]	; (177bc <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   17786:	2800      	cmp	r0, #0
   17788:	bf08      	it	eq
   1778a:	4620      	moveq	r0, r4
   1778c:	6807      	ldr	r7, [r0, #0]
   1778e:	b083      	sub	sp, #12
   17790:	42b7      	cmp	r7, r6
   17792:	d10e      	bne.n	177b2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   17794:	2600      	movs	r6, #0
   17796:	461d      	mov	r5, r3
   17798:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1779c:	4633      	mov	r3, r6
   1779e:	9600      	str	r6, [sp, #0]
   177a0:	4614      	mov	r4, r2
   177a2:	f001 fa99 	bl	18cd8 <cc_mbedtls_ctr_drbg_random_with_add>
   177a6:	2800      	cmp	r0, #0
   177a8:	bf18      	it	ne
   177aa:	4634      	movne	r4, r6
   177ac:	602c      	str	r4, [r5, #0]
   177ae:	b003      	add	sp, #12
   177b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177b2:	4803      	ldr	r0, [pc, #12]	; (177c0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   177b4:	e7fb      	b.n	177ae <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   177b6:	bf00      	nop
   177b8:	200018c0 	.word	0x200018c0
   177bc:	5ac9bca5 	.word	0x5ac9bca5
   177c0:	ffff8fe8 	.word	0xffff8fe8

000177c4 <mutex_free>:
   177c4:	b510      	push	{r4, lr}
   177c6:	4604      	mov	r4, r0
   177c8:	b130      	cbz	r0, 177d8 <mutex_free+0x14>
   177ca:	6863      	ldr	r3, [r4, #4]
   177cc:	06db      	lsls	r3, r3, #27
   177ce:	d502      	bpl.n	177d6 <mutex_free+0x12>
   177d0:	2300      	movs	r3, #0
   177d2:	6023      	str	r3, [r4, #0]
   177d4:	6063      	str	r3, [r4, #4]
   177d6:	bd10      	pop	{r4, pc}
   177d8:	4b02      	ldr	r3, [pc, #8]	; (177e4 <mutex_free+0x20>)
   177da:	4803      	ldr	r0, [pc, #12]	; (177e8 <mutex_free+0x24>)
   177dc:	685b      	ldr	r3, [r3, #4]
   177de:	4798      	blx	r3
   177e0:	e7f3      	b.n	177ca <mutex_free+0x6>
   177e2:	bf00      	nop
   177e4:	2000004c 	.word	0x2000004c
   177e8:	0001d378 	.word	0x0001d378

000177ec <mutex_unlock>:
   177ec:	b168      	cbz	r0, 1780a <mutex_unlock+0x1e>
   177ee:	6843      	ldr	r3, [r0, #4]
   177f0:	b13b      	cbz	r3, 17802 <mutex_unlock+0x16>
   177f2:	06db      	lsls	r3, r3, #27
   177f4:	d507      	bpl.n	17806 <mutex_unlock+0x1a>
   177f6:	f3bf 8f5f 	dmb	sy
   177fa:	2300      	movs	r3, #0
   177fc:	6003      	str	r3, [r0, #0]
   177fe:	4618      	mov	r0, r3
   17800:	4770      	bx	lr
   17802:	4803      	ldr	r0, [pc, #12]	; (17810 <mutex_unlock+0x24>)
   17804:	4770      	bx	lr
   17806:	4803      	ldr	r0, [pc, #12]	; (17814 <mutex_unlock+0x28>)
   17808:	4770      	bx	lr
   1780a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1780e:	4770      	bx	lr
   17810:	ffff8fea 	.word	0xffff8fea
   17814:	ffff8fe9 	.word	0xffff8fe9

00017818 <mutex_init>:
   17818:	b510      	push	{r4, lr}
   1781a:	4604      	mov	r4, r0
   1781c:	b120      	cbz	r0, 17828 <mutex_init+0x10>
   1781e:	2200      	movs	r2, #0
   17820:	2311      	movs	r3, #17
   17822:	6022      	str	r2, [r4, #0]
   17824:	6063      	str	r3, [r4, #4]
   17826:	bd10      	pop	{r4, pc}
   17828:	4801      	ldr	r0, [pc, #4]	; (17830 <mutex_init+0x18>)
   1782a:	f7ff ff4d 	bl	176c8 <CC_PalAbort>
   1782e:	e7f6      	b.n	1781e <mutex_init+0x6>
   17830:	0001d3a0 	.word	0x0001d3a0

00017834 <mutex_lock>:
   17834:	b1a0      	cbz	r0, 17860 <mutex_lock+0x2c>
   17836:	6843      	ldr	r3, [r0, #4]
   17838:	b183      	cbz	r3, 1785c <mutex_lock+0x28>
   1783a:	06db      	lsls	r3, r3, #27
   1783c:	d50c      	bpl.n	17858 <mutex_lock+0x24>
   1783e:	2201      	movs	r2, #1
   17840:	e8d0 3fef 	ldaex	r3, [r0]
   17844:	e8c0 2fe1 	stlex	r1, r2, [r0]
   17848:	2900      	cmp	r1, #0
   1784a:	d1f9      	bne.n	17840 <mutex_lock+0xc>
   1784c:	2b01      	cmp	r3, #1
   1784e:	d0f7      	beq.n	17840 <mutex_lock+0xc>
   17850:	f3bf 8f5f 	dmb	sy
   17854:	2000      	movs	r0, #0
   17856:	4770      	bx	lr
   17858:	4803      	ldr	r0, [pc, #12]	; (17868 <mutex_lock+0x34>)
   1785a:	4770      	bx	lr
   1785c:	4803      	ldr	r0, [pc, #12]	; (1786c <mutex_lock+0x38>)
   1785e:	4770      	bx	lr
   17860:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   17864:	4770      	bx	lr
   17866:	bf00      	nop
   17868:	ffff8fe9 	.word	0xffff8fe9
   1786c:	ffff8fea 	.word	0xffff8fea

00017870 <nrf_cc3xx_platform_set_mutexes>:
   17870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17874:	4c14      	ldr	r4, [pc, #80]	; (178c8 <nrf_cc3xx_platform_set_mutexes+0x58>)
   17876:	6802      	ldr	r2, [r0, #0]
   17878:	68c3      	ldr	r3, [r0, #12]
   1787a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   1787e:	e9c4 6302 	strd	r6, r3, [r4, #8]
   17882:	e9c4 2500 	strd	r2, r5, [r4]
   17886:	4b11      	ldr	r3, [pc, #68]	; (178cc <nrf_cc3xx_platform_set_mutexes+0x5c>)
   17888:	680e      	ldr	r6, [r1, #0]
   1788a:	6848      	ldr	r0, [r1, #4]
   1788c:	4d10      	ldr	r5, [pc, #64]	; (178d0 <nrf_cc3xx_platform_set_mutexes+0x60>)
   1788e:	e9c3 6000 	strd	r6, r0, [r3]
   17892:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   17896:	6908      	ldr	r0, [r1, #16]
   17898:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1789c:	e9c3 7602 	strd	r7, r6, [r3, #8]
   178a0:	6118      	str	r0, [r3, #16]
   178a2:	06cb      	lsls	r3, r1, #27
   178a4:	d50d      	bpl.n	178c2 <nrf_cc3xx_platform_set_mutexes+0x52>
   178a6:	2300      	movs	r3, #0
   178a8:	f505 7088 	add.w	r0, r5, #272	; 0x110
   178ac:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   178b0:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   178b4:	4790      	blx	r2
   178b6:	6823      	ldr	r3, [r4, #0]
   178b8:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   178bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   178c0:	4718      	bx	r3
   178c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178c6:	bf00      	nop
   178c8:	2000005c 	.word	0x2000005c
   178cc:	2000006c 	.word	0x2000006c
   178d0:	200018c0 	.word	0x200018c0

000178d4 <entropy_update>:
   178d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   178d8:	2b20      	cmp	r3, #32
   178da:	461d      	mov	r5, r3
   178dc:	4606      	mov	r6, r0
   178de:	4689      	mov	r9, r1
   178e0:	4690      	mov	r8, r2
   178e2:	b08b      	sub	sp, #44	; 0x2c
   178e4:	d826      	bhi.n	17934 <entropy_update+0x60>
   178e6:	b2db      	uxtb	r3, r3
   178e8:	af02      	add	r7, sp, #8
   178ea:	6831      	ldr	r1, [r6, #0]
   178ec:	f88d 9004 	strb.w	r9, [sp, #4]
   178f0:	f88d 3005 	strb.w	r3, [sp, #5]
   178f4:	f106 0904 	add.w	r9, r6, #4
   178f8:	b921      	cbnz	r1, 17904 <entropy_update+0x30>
   178fa:	4648      	mov	r0, r9
   178fc:	f000 fe3c 	bl	18578 <cc_mbedtls_sha256_starts_ret>
   17900:	4604      	mov	r4, r0
   17902:	b940      	cbnz	r0, 17916 <entropy_update+0x42>
   17904:	2301      	movs	r3, #1
   17906:	2202      	movs	r2, #2
   17908:	4648      	mov	r0, r9
   1790a:	6033      	str	r3, [r6, #0]
   1790c:	a901      	add	r1, sp, #4
   1790e:	f000 fe47 	bl	185a0 <cc_mbedtls_sha256_update_ret>
   17912:	4604      	mov	r4, r0
   17914:	b138      	cbz	r0, 17926 <entropy_update+0x52>
   17916:	4638      	mov	r0, r7
   17918:	2120      	movs	r1, #32
   1791a:	f000 fd83 	bl	18424 <mbedtls_platform_zeroize>
   1791e:	4620      	mov	r0, r4
   17920:	b00b      	add	sp, #44	; 0x2c
   17922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17926:	462a      	mov	r2, r5
   17928:	4641      	mov	r1, r8
   1792a:	4648      	mov	r0, r9
   1792c:	f000 fe38 	bl	185a0 <cc_mbedtls_sha256_update_ret>
   17930:	4604      	mov	r4, r0
   17932:	e7f0      	b.n	17916 <entropy_update+0x42>
   17934:	af02      	add	r7, sp, #8
   17936:	4619      	mov	r1, r3
   17938:	4610      	mov	r0, r2
   1793a:	2300      	movs	r3, #0
   1793c:	463a      	mov	r2, r7
   1793e:	f001 fabf 	bl	18ec0 <cc_mbedtls_sha256_ret>
   17942:	4604      	mov	r4, r0
   17944:	2800      	cmp	r0, #0
   17946:	d1e6      	bne.n	17916 <entropy_update+0x42>
   17948:	2320      	movs	r3, #32
   1794a:	46b8      	mov	r8, r7
   1794c:	461d      	mov	r5, r3
   1794e:	e7cc      	b.n	178ea <entropy_update+0x16>

00017950 <entropy_gather_internal.part.0>:
   17950:	b5f0      	push	{r4, r5, r6, r7, lr}
   17952:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   17956:	b0a7      	sub	sp, #156	; 0x9c
   17958:	2b00      	cmp	r3, #0
   1795a:	bfd8      	it	le
   1795c:	ae02      	addle	r6, sp, #8
   1795e:	dd2c      	ble.n	179ba <entropy_gather_internal.part.0+0x6a>
   17960:	4605      	mov	r5, r0
   17962:	2300      	movs	r3, #0
   17964:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   17968:	ae02      	add	r6, sp, #8
   1796a:	9301      	str	r3, [sp, #4]
   1796c:	f1a4 0701 	sub.w	r7, r4, #1
   17970:	4631      	mov	r1, r6
   17972:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   17976:	2290      	movs	r2, #144	; 0x90
   17978:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1797c:	ab01      	add	r3, sp, #4
   1797e:	fab7 f787 	clz	r7, r7
   17982:	47a0      	blx	r4
   17984:	097f      	lsrs	r7, r7, #5
   17986:	4604      	mov	r4, r0
   17988:	b910      	cbnz	r0, 17990 <entropy_gather_internal.part.0+0x40>
   1798a:	9b01      	ldr	r3, [sp, #4]
   1798c:	b93b      	cbnz	r3, 1799e <entropy_gather_internal.part.0+0x4e>
   1798e:	b1a7      	cbz	r7, 179ba <entropy_gather_internal.part.0+0x6a>
   17990:	4630      	mov	r0, r6
   17992:	2190      	movs	r1, #144	; 0x90
   17994:	f000 fd46 	bl	18424 <mbedtls_platform_zeroize>
   17998:	4620      	mov	r0, r4
   1799a:	b027      	add	sp, #156	; 0x9c
   1799c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1799e:	4601      	mov	r1, r0
   179a0:	4632      	mov	r2, r6
   179a2:	4628      	mov	r0, r5
   179a4:	f7ff ff96 	bl	178d4 <entropy_update>
   179a8:	b950      	cbnz	r0, 179c0 <entropy_gather_internal.part.0+0x70>
   179aa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   179ae:	9a01      	ldr	r2, [sp, #4]
   179b0:	4413      	add	r3, r2
   179b2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   179b6:	2f00      	cmp	r7, #0
   179b8:	d1ea      	bne.n	17990 <entropy_gather_internal.part.0+0x40>
   179ba:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   179be:	e7e7      	b.n	17990 <entropy_gather_internal.part.0+0x40>
   179c0:	4604      	mov	r4, r0
   179c2:	4620      	mov	r0, r4
   179c4:	b027      	add	sp, #156	; 0x9c
   179c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000179c8 <cc_mbedtls_entropy_init>:
   179c8:	b570      	push	{r4, r5, r6, lr}
   179ca:	2500      	movs	r5, #0
   179cc:	4604      	mov	r4, r0
   179ce:	4629      	mov	r1, r5
   179d0:	2214      	movs	r2, #20
   179d2:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   179d6:	30f8      	adds	r0, #248	; 0xf8
   179d8:	f002 fe61 	bl	1a69e <memset>
   179dc:	4b16      	ldr	r3, [pc, #88]	; (17a38 <cc_mbedtls_entropy_init+0x70>)
   179de:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   179e2:	681b      	ldr	r3, [r3, #0]
   179e4:	4630      	mov	r0, r6
   179e6:	4798      	blx	r3
   179e8:	4620      	mov	r0, r4
   179ea:	f840 5b04 	str.w	r5, [r0], #4
   179ee:	f000 fda9 	bl	18544 <cc_mbedtls_sha256_init>
   179f2:	4b12      	ldr	r3, [pc, #72]	; (17a3c <cc_mbedtls_entropy_init+0x74>)
   179f4:	4630      	mov	r0, r6
   179f6:	681b      	ldr	r3, [r3, #0]
   179f8:	4798      	blx	r3
   179fa:	b9d8      	cbnz	r0, 17a34 <cc_mbedtls_entropy_init+0x6c>
   179fc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17a00:	42ab      	cmp	r3, r5
   17a02:	dc11      	bgt.n	17a28 <cc_mbedtls_entropy_init+0x60>
   17a04:	2101      	movs	r1, #1
   17a06:	2520      	movs	r5, #32
   17a08:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17a0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   17a10:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   17a14:	480a      	ldr	r0, [pc, #40]	; (17a40 <cc_mbedtls_entropy_init+0x78>)
   17a16:	440b      	add	r3, r1
   17a18:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
   17a1c:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
   17a20:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   17a24:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   17a28:	4b06      	ldr	r3, [pc, #24]	; (17a44 <cc_mbedtls_entropy_init+0x7c>)
   17a2a:	4630      	mov	r0, r6
   17a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17a30:	681b      	ldr	r3, [r3, #0]
   17a32:	4718      	bx	r3
   17a34:	bd70      	pop	{r4, r5, r6, pc}
   17a36:	bf00      	nop
   17a38:	200000b0 	.word	0x200000b0
   17a3c:	200000b4 	.word	0x200000b4
   17a40:	00018439 	.word	0x00018439
   17a44:	200000b8 	.word	0x200000b8

00017a48 <cc_mbedtls_entropy_func>:
   17a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17a4c:	2a20      	cmp	r2, #32
   17a4e:	b088      	sub	sp, #32
   17a50:	d878      	bhi.n	17b44 <cc_mbedtls_entropy_func+0xfc>
   17a52:	4b3e      	ldr	r3, [pc, #248]	; (17b4c <cc_mbedtls_entropy_func+0x104>)
   17a54:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   17a58:	4604      	mov	r4, r0
   17a5a:	681b      	ldr	r3, [r3, #0]
   17a5c:	4648      	mov	r0, r9
   17a5e:	4617      	mov	r7, r2
   17a60:	4688      	mov	r8, r1
   17a62:	4798      	blx	r3
   17a64:	4605      	mov	r5, r0
   17a66:	bb40      	cbnz	r0, 17aba <cc_mbedtls_entropy_func+0x72>
   17a68:	f240 1601 	movw	r6, #257	; 0x101
   17a6c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17a70:	2b00      	cmp	r3, #0
   17a72:	d063      	beq.n	17b3c <cc_mbedtls_entropy_func+0xf4>
   17a74:	4620      	mov	r0, r4
   17a76:	f7ff ff6b 	bl	17950 <entropy_gather_internal.part.0>
   17a7a:	4605      	mov	r5, r0
   17a7c:	2800      	cmp	r0, #0
   17a7e:	d15f      	bne.n	17b40 <cc_mbedtls_entropy_func+0xf8>
   17a80:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17a84:	2b00      	cmp	r3, #0
   17a86:	dd07      	ble.n	17a98 <cc_mbedtls_entropy_func+0x50>
   17a88:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   17a8c:	4290      	cmp	r0, r2
   17a8e:	d303      	bcc.n	17a98 <cc_mbedtls_entropy_func+0x50>
   17a90:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   17a94:	2a01      	cmp	r2, #1
   17a96:	d014      	beq.n	17ac2 <cc_mbedtls_entropy_func+0x7a>
   17a98:	3e01      	subs	r6, #1
   17a9a:	d1e9      	bne.n	17a70 <cc_mbedtls_entropy_func+0x28>
   17a9c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   17aa0:	466e      	mov	r6, sp
   17aa2:	4630      	mov	r0, r6
   17aa4:	2120      	movs	r1, #32
   17aa6:	f000 fcbd 	bl	18424 <mbedtls_platform_zeroize>
   17aaa:	4b29      	ldr	r3, [pc, #164]	; (17b50 <cc_mbedtls_entropy_func+0x108>)
   17aac:	4648      	mov	r0, r9
   17aae:	681b      	ldr	r3, [r3, #0]
   17ab0:	4798      	blx	r3
   17ab2:	2800      	cmp	r0, #0
   17ab4:	bf18      	it	ne
   17ab6:	f06f 051d 	mvnne.w	r5, #29
   17aba:	4628      	mov	r0, r5
   17abc:	b008      	add	sp, #32
   17abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17ac2:	281f      	cmp	r0, #31
   17ac4:	d9e8      	bls.n	17a98 <cc_mbedtls_entropy_func+0x50>
   17ac6:	466e      	mov	r6, sp
   17ac8:	4629      	mov	r1, r5
   17aca:	2220      	movs	r2, #32
   17acc:	4630      	mov	r0, r6
   17ace:	f104 0a04 	add.w	sl, r4, #4
   17ad2:	f002 fde4 	bl	1a69e <memset>
   17ad6:	4631      	mov	r1, r6
   17ad8:	4650      	mov	r0, sl
   17ada:	f000 fd69 	bl	185b0 <cc_mbedtls_sha256_finish_ret>
   17ade:	4605      	mov	r5, r0
   17ae0:	2800      	cmp	r0, #0
   17ae2:	d1de      	bne.n	17aa2 <cc_mbedtls_entropy_func+0x5a>
   17ae4:	4650      	mov	r0, sl
   17ae6:	f000 fd41 	bl	1856c <cc_mbedtls_sha256_free>
   17aea:	4650      	mov	r0, sl
   17aec:	f000 fd2a 	bl	18544 <cc_mbedtls_sha256_init>
   17af0:	4629      	mov	r1, r5
   17af2:	4650      	mov	r0, sl
   17af4:	f000 fd40 	bl	18578 <cc_mbedtls_sha256_starts_ret>
   17af8:	4605      	mov	r5, r0
   17afa:	2800      	cmp	r0, #0
   17afc:	d1d1      	bne.n	17aa2 <cc_mbedtls_entropy_func+0x5a>
   17afe:	4650      	mov	r0, sl
   17b00:	2220      	movs	r2, #32
   17b02:	4631      	mov	r1, r6
   17b04:	f000 fd4c 	bl	185a0 <cc_mbedtls_sha256_update_ret>
   17b08:	4605      	mov	r5, r0
   17b0a:	2800      	cmp	r0, #0
   17b0c:	d1c9      	bne.n	17aa2 <cc_mbedtls_entropy_func+0x5a>
   17b0e:	4603      	mov	r3, r0
   17b10:	4632      	mov	r2, r6
   17b12:	2120      	movs	r1, #32
   17b14:	4630      	mov	r0, r6
   17b16:	f001 f9d3 	bl	18ec0 <cc_mbedtls_sha256_ret>
   17b1a:	4605      	mov	r5, r0
   17b1c:	2800      	cmp	r0, #0
   17b1e:	d1c0      	bne.n	17aa2 <cc_mbedtls_entropy_func+0x5a>
   17b20:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17b24:	463a      	mov	r2, r7
   17b26:	2b00      	cmp	r3, #0
   17b28:	bfc8      	it	gt
   17b2a:	2300      	movgt	r3, #0
   17b2c:	4640      	mov	r0, r8
   17b2e:	4631      	mov	r1, r6
   17b30:	bfc8      	it	gt
   17b32:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   17b36:	f002 fda7 	bl	1a688 <memcpy>
   17b3a:	e7b2      	b.n	17aa2 <cc_mbedtls_entropy_func+0x5a>
   17b3c:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   17b40:	466e      	mov	r6, sp
   17b42:	e7ae      	b.n	17aa2 <cc_mbedtls_entropy_func+0x5a>
   17b44:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   17b48:	e7b7      	b.n	17aba <cc_mbedtls_entropy_func+0x72>
   17b4a:	bf00      	nop
   17b4c:	200000b4 	.word	0x200000b4
   17b50:	200000b8 	.word	0x200000b8

00017b54 <RndStartupTest.constprop.0>:
   17b54:	2100      	movs	r1, #0
   17b56:	b530      	push	{r4, r5, lr}
   17b58:	b08d      	sub	sp, #52	; 0x34
   17b5a:	2228      	movs	r2, #40	; 0x28
   17b5c:	a802      	add	r0, sp, #8
   17b5e:	9101      	str	r1, [sp, #4]
   17b60:	f002 fd9d 	bl	1a69e <memset>
   17b64:	a802      	add	r0, sp, #8
   17b66:	f001 f9d3 	bl	18f10 <RNG_PLAT_SetUserRngParameters>
   17b6a:	4604      	mov	r4, r0
   17b6c:	b110      	cbz	r0, 17b74 <RndStartupTest.constprop.0+0x20>
   17b6e:	4620      	mov	r0, r4
   17b70:	b00d      	add	sp, #52	; 0x34
   17b72:	bd30      	pop	{r4, r5, pc}
   17b74:	4d1b      	ldr	r5, [pc, #108]	; (17be4 <RndStartupTest.constprop.0+0x90>)
   17b76:	f04f 31ff 	mov.w	r1, #4294967295
   17b7a:	6828      	ldr	r0, [r5, #0]
   17b7c:	f000 f924 	bl	17dc8 <CC_PalMutexLock>
   17b80:	bb58      	cbnz	r0, 17bda <RndStartupTest.constprop.0+0x86>
   17b82:	4b19      	ldr	r3, [pc, #100]	; (17be8 <RndStartupTest.constprop.0+0x94>)
   17b84:	6818      	ldr	r0, [r3, #0]
   17b86:	f010 0001 	ands.w	r0, r0, #1
   17b8a:	d117      	bne.n	17bbc <RndStartupTest.constprop.0+0x68>
   17b8c:	f000 f94c 	bl	17e28 <CC_PalPowerSaveModeSelect>
   17b90:	b9f8      	cbnz	r0, 17bd2 <RndStartupTest.constprop.0+0x7e>
   17b92:	4a16      	ldr	r2, [pc, #88]	; (17bec <RndStartupTest.constprop.0+0x98>)
   17b94:	a902      	add	r1, sp, #8
   17b96:	a801      	add	r0, sp, #4
   17b98:	f000 fc36 	bl	18408 <LLF_RND_RunTrngStartupTest>
   17b9c:	4604      	mov	r4, r0
   17b9e:	2001      	movs	r0, #1
   17ba0:	f000 f942 	bl	17e28 <CC_PalPowerSaveModeSelect>
   17ba4:	b988      	cbnz	r0, 17bca <RndStartupTest.constprop.0+0x76>
   17ba6:	6828      	ldr	r0, [r5, #0]
   17ba8:	f000 f916 	bl	17dd8 <CC_PalMutexUnlock>
   17bac:	2800      	cmp	r0, #0
   17bae:	d0de      	beq.n	17b6e <RndStartupTest.constprop.0+0x1a>
   17bb0:	480f      	ldr	r0, [pc, #60]	; (17bf0 <RndStartupTest.constprop.0+0x9c>)
   17bb2:	f7ff fd89 	bl	176c8 <CC_PalAbort>
   17bb6:	4620      	mov	r0, r4
   17bb8:	b00d      	add	sp, #52	; 0x34
   17bba:	bd30      	pop	{r4, r5, pc}
   17bbc:	6828      	ldr	r0, [r5, #0]
   17bbe:	2405      	movs	r4, #5
   17bc0:	f000 f90a 	bl	17dd8 <CC_PalMutexUnlock>
   17bc4:	2800      	cmp	r0, #0
   17bc6:	d0d2      	beq.n	17b6e <RndStartupTest.constprop.0+0x1a>
   17bc8:	e7f2      	b.n	17bb0 <RndStartupTest.constprop.0+0x5c>
   17bca:	480a      	ldr	r0, [pc, #40]	; (17bf4 <RndStartupTest.constprop.0+0xa0>)
   17bcc:	f7ff fd7c 	bl	176c8 <CC_PalAbort>
   17bd0:	e7e9      	b.n	17ba6 <RndStartupTest.constprop.0+0x52>
   17bd2:	4809      	ldr	r0, [pc, #36]	; (17bf8 <RndStartupTest.constprop.0+0xa4>)
   17bd4:	f7ff fd78 	bl	176c8 <CC_PalAbort>
   17bd8:	e7db      	b.n	17b92 <RndStartupTest.constprop.0+0x3e>
   17bda:	4808      	ldr	r0, [pc, #32]	; (17bfc <RndStartupTest.constprop.0+0xa8>)
   17bdc:	f7ff fd74 	bl	176c8 <CC_PalAbort>
   17be0:	e7cf      	b.n	17b82 <RndStartupTest.constprop.0+0x2e>
   17be2:	bf00      	nop
   17be4:	200000ac 	.word	0x200000ac
   17be8:	50846e34 	.word	0x50846e34
   17bec:	20000afc 	.word	0x20000afc
   17bf0:	0001d41c 	.word	0x0001d41c
   17bf4:	0001d3fc 	.word	0x0001d3fc
   17bf8:	0001d3dc 	.word	0x0001d3dc
   17bfc:	0001d3c4 	.word	0x0001d3c4

00017c00 <CC_LibInit>:
   17c00:	b510      	push	{r4, lr}
   17c02:	b082      	sub	sp, #8
   17c04:	f000 f82a 	bl	17c5c <CC_HalInit>
   17c08:	b9d0      	cbnz	r0, 17c40 <CC_LibInit+0x40>
   17c0a:	f000 f849 	bl	17ca0 <CC_PalInit>
   17c0e:	b9e8      	cbnz	r0, 17c4c <CC_LibInit+0x4c>
   17c10:	4b10      	ldr	r3, [pc, #64]	; (17c54 <CC_LibInit+0x54>)
   17c12:	6018      	str	r0, [r3, #0]
   17c14:	f7ff ff9e 	bl	17b54 <RndStartupTest.constprop.0>
   17c18:	4604      	mov	r4, r0
   17c1a:	b968      	cbnz	r0, 17c38 <CC_LibInit+0x38>
   17c1c:	4602      	mov	r2, r0
   17c1e:	4601      	mov	r1, r0
   17c20:	f7ff fd7a 	bl	17718 <nrf_cc3xx_platform_ctr_drbg_init>
   17c24:	b940      	cbnz	r0, 17c38 <CC_LibInit+0x38>
   17c26:	2268      	movs	r2, #104	; 0x68
   17c28:	490b      	ldr	r1, [pc, #44]	; (17c58 <CC_LibInit+0x58>)
   17c2a:	ab01      	add	r3, sp, #4
   17c2c:	f7ff fda8 	bl	17780 <nrf_cc3xx_platform_ctr_drbg_get>
   17c30:	b910      	cbnz	r0, 17c38 <CC_LibInit+0x38>
   17c32:	4620      	mov	r0, r4
   17c34:	b002      	add	sp, #8
   17c36:	bd10      	pop	{r4, pc}
   17c38:	2405      	movs	r4, #5
   17c3a:	4620      	mov	r0, r4
   17c3c:	b002      	add	sp, #8
   17c3e:	bd10      	pop	{r4, pc}
   17c40:	2403      	movs	r4, #3
   17c42:	f000 f85b 	bl	17cfc <CC_PalTerminate>
   17c46:	4620      	mov	r0, r4
   17c48:	b002      	add	sp, #8
   17c4a:	bd10      	pop	{r4, pc}
   17c4c:	2404      	movs	r4, #4
   17c4e:	4620      	mov	r0, r4
   17c50:	b002      	add	sp, #8
   17c52:	bd10      	pop	{r4, pc}
   17c54:	50845a0c 	.word	0x50845a0c
   17c58:	20000a94 	.word	0x20000a94

00017c5c <CC_HalInit>:
   17c5c:	2000      	movs	r0, #0
   17c5e:	4770      	bx	lr

00017c60 <CC_HalClearInterruptBit>:
   17c60:	0543      	lsls	r3, r0, #21
   17c62:	d503      	bpl.n	17c6c <CC_HalClearInterruptBit+0xc>
   17c64:	f04f 32ff 	mov.w	r2, #4294967295
   17c68:	4b02      	ldr	r3, [pc, #8]	; (17c74 <CC_HalClearInterruptBit+0x14>)
   17c6a:	601a      	str	r2, [r3, #0]
   17c6c:	4b02      	ldr	r3, [pc, #8]	; (17c78 <CC_HalClearInterruptBit+0x18>)
   17c6e:	6018      	str	r0, [r3, #0]
   17c70:	4770      	bx	lr
   17c72:	bf00      	nop
   17c74:	50845108 	.word	0x50845108
   17c78:	50845a08 	.word	0x50845a08

00017c7c <CC_HalMaskInterrupt>:
   17c7c:	4b01      	ldr	r3, [pc, #4]	; (17c84 <CC_HalMaskInterrupt+0x8>)
   17c7e:	6018      	str	r0, [r3, #0]
   17c80:	4770      	bx	lr
   17c82:	bf00      	nop
   17c84:	50845a04 	.word	0x50845a04

00017c88 <CC_HalWaitInterrupt>:
   17c88:	b108      	cbz	r0, 17c8e <CC_HalWaitInterrupt+0x6>
   17c8a:	f000 b875 	b.w	17d78 <CC_PalWaitInterrupt>
   17c8e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   17c92:	4770      	bx	lr

00017c94 <CC_HalWaitInterruptRND>:
   17c94:	b108      	cbz	r0, 17c9a <CC_HalWaitInterruptRND+0x6>
   17c96:	f000 b84f 	b.w	17d38 <CC_PalWaitInterruptRND>
   17c9a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   17c9e:	4770      	bx	lr

00017ca0 <CC_PalInit>:
   17ca0:	b510      	push	{r4, lr}
   17ca2:	4811      	ldr	r0, [pc, #68]	; (17ce8 <CC_PalInit+0x48>)
   17ca4:	f000 f87c 	bl	17da0 <CC_PalMutexCreate>
   17ca8:	b100      	cbz	r0, 17cac <CC_PalInit+0xc>
   17caa:	bd10      	pop	{r4, pc}
   17cac:	480f      	ldr	r0, [pc, #60]	; (17cec <CC_PalInit+0x4c>)
   17cae:	f000 f877 	bl	17da0 <CC_PalMutexCreate>
   17cb2:	2800      	cmp	r0, #0
   17cb4:	d1f9      	bne.n	17caa <CC_PalInit+0xa>
   17cb6:	4c0e      	ldr	r4, [pc, #56]	; (17cf0 <CC_PalInit+0x50>)
   17cb8:	4620      	mov	r0, r4
   17cba:	f000 f871 	bl	17da0 <CC_PalMutexCreate>
   17cbe:	2800      	cmp	r0, #0
   17cc0:	d1f3      	bne.n	17caa <CC_PalInit+0xa>
   17cc2:	4b0c      	ldr	r3, [pc, #48]	; (17cf4 <CC_PalInit+0x54>)
   17cc4:	480c      	ldr	r0, [pc, #48]	; (17cf8 <CC_PalInit+0x58>)
   17cc6:	601c      	str	r4, [r3, #0]
   17cc8:	f000 f86a 	bl	17da0 <CC_PalMutexCreate>
   17ccc:	4601      	mov	r1, r0
   17cce:	2800      	cmp	r0, #0
   17cd0:	d1eb      	bne.n	17caa <CC_PalInit+0xa>
   17cd2:	f000 f82d 	bl	17d30 <CC_PalDmaInit>
   17cd6:	4604      	mov	r4, r0
   17cd8:	b108      	cbz	r0, 17cde <CC_PalInit+0x3e>
   17cda:	4620      	mov	r0, r4
   17cdc:	bd10      	pop	{r4, pc}
   17cde:	f000 f885 	bl	17dec <CC_PalPowerSaveModeInit>
   17ce2:	4620      	mov	r0, r4
   17ce4:	e7fa      	b.n	17cdc <CC_PalInit+0x3c>
   17ce6:	bf00      	nop
   17ce8:	200000a8 	.word	0x200000a8
   17cec:	2000009c 	.word	0x2000009c
   17cf0:	200000a4 	.word	0x200000a4
   17cf4:	200000ac 	.word	0x200000ac
   17cf8:	200000a0 	.word	0x200000a0

00017cfc <CC_PalTerminate>:
   17cfc:	b508      	push	{r3, lr}
   17cfe:	4808      	ldr	r0, [pc, #32]	; (17d20 <CC_PalTerminate+0x24>)
   17d00:	f000 f858 	bl	17db4 <CC_PalMutexDestroy>
   17d04:	4807      	ldr	r0, [pc, #28]	; (17d24 <CC_PalTerminate+0x28>)
   17d06:	f000 f855 	bl	17db4 <CC_PalMutexDestroy>
   17d0a:	4807      	ldr	r0, [pc, #28]	; (17d28 <CC_PalTerminate+0x2c>)
   17d0c:	f000 f852 	bl	17db4 <CC_PalMutexDestroy>
   17d10:	4806      	ldr	r0, [pc, #24]	; (17d2c <CC_PalTerminate+0x30>)
   17d12:	f000 f84f 	bl	17db4 <CC_PalMutexDestroy>
   17d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17d1a:	f000 b80b 	b.w	17d34 <CC_PalDmaTerminate>
   17d1e:	bf00      	nop
   17d20:	200000a8 	.word	0x200000a8
   17d24:	2000009c 	.word	0x2000009c
   17d28:	200000a4 	.word	0x200000a4
   17d2c:	200000a0 	.word	0x200000a0

00017d30 <CC_PalDmaInit>:
   17d30:	2000      	movs	r0, #0
   17d32:	4770      	bx	lr

00017d34 <CC_PalDmaTerminate>:
   17d34:	4770      	bx	lr
   17d36:	bf00      	nop

00017d38 <CC_PalWaitInterruptRND>:
   17d38:	b410      	push	{r4}
   17d3a:	4602      	mov	r2, r0
   17d3c:	4c0a      	ldr	r4, [pc, #40]	; (17d68 <CC_PalWaitInterruptRND+0x30>)
   17d3e:	e001      	b.n	17d44 <CC_PalWaitInterruptRND+0xc>
   17d40:	4213      	tst	r3, r2
   17d42:	d106      	bne.n	17d52 <CC_PalWaitInterruptRND+0x1a>
   17d44:	6823      	ldr	r3, [r4, #0]
   17d46:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   17d4a:	d0f9      	beq.n	17d40 <CC_PalWaitInterruptRND+0x8>
   17d4c:	2001      	movs	r0, #1
   17d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   17d52:	b121      	cbz	r1, 17d5e <CC_PalWaitInterruptRND+0x26>
   17d54:	4b05      	ldr	r3, [pc, #20]	; (17d6c <CC_PalWaitInterruptRND+0x34>)
   17d56:	4c06      	ldr	r4, [pc, #24]	; (17d70 <CC_PalWaitInterruptRND+0x38>)
   17d58:	681b      	ldr	r3, [r3, #0]
   17d5a:	600b      	str	r3, [r1, #0]
   17d5c:	6023      	str	r3, [r4, #0]
   17d5e:	4b05      	ldr	r3, [pc, #20]	; (17d74 <CC_PalWaitInterruptRND+0x3c>)
   17d60:	601a      	str	r2, [r3, #0]
   17d62:	bc10      	pop	{r4}
   17d64:	4770      	bx	lr
   17d66:	bf00      	nop
   17d68:	50845a00 	.word	0x50845a00
   17d6c:	50845104 	.word	0x50845104
   17d70:	50845108 	.word	0x50845108
   17d74:	50845a08 	.word	0x50845a08

00017d78 <CC_PalWaitInterrupt>:
   17d78:	4602      	mov	r2, r0
   17d7a:	4907      	ldr	r1, [pc, #28]	; (17d98 <CC_PalWaitInterrupt+0x20>)
   17d7c:	e001      	b.n	17d82 <CC_PalWaitInterrupt+0xa>
   17d7e:	421a      	tst	r2, r3
   17d80:	d106      	bne.n	17d90 <CC_PalWaitInterrupt+0x18>
   17d82:	680b      	ldr	r3, [r1, #0]
   17d84:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   17d88:	d0f9      	beq.n	17d7e <CC_PalWaitInterrupt+0x6>
   17d8a:	2001      	movs	r0, #1
   17d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   17d90:	4b02      	ldr	r3, [pc, #8]	; (17d9c <CC_PalWaitInterrupt+0x24>)
   17d92:	601a      	str	r2, [r3, #0]
   17d94:	4770      	bx	lr
   17d96:	bf00      	nop
   17d98:	50845a00 	.word	0x50845a00
   17d9c:	50845a08 	.word	0x50845a08

00017da0 <CC_PalMutexCreate>:
   17da0:	b508      	push	{r3, lr}
   17da2:	4b03      	ldr	r3, [pc, #12]	; (17db0 <CC_PalMutexCreate+0x10>)
   17da4:	6802      	ldr	r2, [r0, #0]
   17da6:	681b      	ldr	r3, [r3, #0]
   17da8:	6810      	ldr	r0, [r2, #0]
   17daa:	4798      	blx	r3
   17dac:	2000      	movs	r0, #0
   17dae:	bd08      	pop	{r3, pc}
   17db0:	2000005c 	.word	0x2000005c

00017db4 <CC_PalMutexDestroy>:
   17db4:	b508      	push	{r3, lr}
   17db6:	4b03      	ldr	r3, [pc, #12]	; (17dc4 <CC_PalMutexDestroy+0x10>)
   17db8:	6802      	ldr	r2, [r0, #0]
   17dba:	685b      	ldr	r3, [r3, #4]
   17dbc:	6810      	ldr	r0, [r2, #0]
   17dbe:	4798      	blx	r3
   17dc0:	2000      	movs	r0, #0
   17dc2:	bd08      	pop	{r3, pc}
   17dc4:	2000005c 	.word	0x2000005c

00017dc8 <CC_PalMutexLock>:
   17dc8:	4b02      	ldr	r3, [pc, #8]	; (17dd4 <CC_PalMutexLock+0xc>)
   17dca:	6802      	ldr	r2, [r0, #0]
   17dcc:	689b      	ldr	r3, [r3, #8]
   17dce:	6810      	ldr	r0, [r2, #0]
   17dd0:	4718      	bx	r3
   17dd2:	bf00      	nop
   17dd4:	2000005c 	.word	0x2000005c

00017dd8 <CC_PalMutexUnlock>:
   17dd8:	b508      	push	{r3, lr}
   17dda:	4b03      	ldr	r3, [pc, #12]	; (17de8 <CC_PalMutexUnlock+0x10>)
   17ddc:	6802      	ldr	r2, [r0, #0]
   17dde:	68db      	ldr	r3, [r3, #12]
   17de0:	6810      	ldr	r0, [r2, #0]
   17de2:	4798      	blx	r3
   17de4:	2000      	movs	r0, #0
   17de6:	bd08      	pop	{r3, pc}
   17de8:	2000005c 	.word	0x2000005c

00017dec <CC_PalPowerSaveModeInit>:
   17dec:	b570      	push	{r4, r5, r6, lr}
   17dee:	4c09      	ldr	r4, [pc, #36]	; (17e14 <CC_PalPowerSaveModeInit+0x28>)
   17df0:	4d09      	ldr	r5, [pc, #36]	; (17e18 <CC_PalPowerSaveModeInit+0x2c>)
   17df2:	6920      	ldr	r0, [r4, #16]
   17df4:	68ab      	ldr	r3, [r5, #8]
   17df6:	4798      	blx	r3
   17df8:	b118      	cbz	r0, 17e02 <CC_PalPowerSaveModeInit+0x16>
   17dfa:	4b08      	ldr	r3, [pc, #32]	; (17e1c <CC_PalPowerSaveModeInit+0x30>)
   17dfc:	4808      	ldr	r0, [pc, #32]	; (17e20 <CC_PalPowerSaveModeInit+0x34>)
   17dfe:	685b      	ldr	r3, [r3, #4]
   17e00:	4798      	blx	r3
   17e02:	2100      	movs	r1, #0
   17e04:	4a07      	ldr	r2, [pc, #28]	; (17e24 <CC_PalPowerSaveModeInit+0x38>)
   17e06:	68eb      	ldr	r3, [r5, #12]
   17e08:	6011      	str	r1, [r2, #0]
   17e0a:	6920      	ldr	r0, [r4, #16]
   17e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17e10:	4718      	bx	r3
   17e12:	bf00      	nop
   17e14:	2000006c 	.word	0x2000006c
   17e18:	2000005c 	.word	0x2000005c
   17e1c:	2000004c 	.word	0x2000004c
   17e20:	0001d434 	.word	0x0001d434
   17e24:	20000d1c 	.word	0x20000d1c

00017e28 <CC_PalPowerSaveModeSelect>:
   17e28:	b570      	push	{r4, r5, r6, lr}
   17e2a:	4d1a      	ldr	r5, [pc, #104]	; (17e94 <CC_PalPowerSaveModeSelect+0x6c>)
   17e2c:	4e1a      	ldr	r6, [pc, #104]	; (17e98 <CC_PalPowerSaveModeSelect+0x70>)
   17e2e:	4604      	mov	r4, r0
   17e30:	68b2      	ldr	r2, [r6, #8]
   17e32:	6928      	ldr	r0, [r5, #16]
   17e34:	4790      	blx	r2
   17e36:	b9f0      	cbnz	r0, 17e76 <CC_PalPowerSaveModeSelect+0x4e>
   17e38:	b15c      	cbz	r4, 17e52 <CC_PalPowerSaveModeSelect+0x2a>
   17e3a:	4c18      	ldr	r4, [pc, #96]	; (17e9c <CC_PalPowerSaveModeSelect+0x74>)
   17e3c:	6823      	ldr	r3, [r4, #0]
   17e3e:	b1ab      	cbz	r3, 17e6c <CC_PalPowerSaveModeSelect+0x44>
   17e40:	2b01      	cmp	r3, #1
   17e42:	d01a      	beq.n	17e7a <CC_PalPowerSaveModeSelect+0x52>
   17e44:	3b01      	subs	r3, #1
   17e46:	6023      	str	r3, [r4, #0]
   17e48:	6928      	ldr	r0, [r5, #16]
   17e4a:	68f3      	ldr	r3, [r6, #12]
   17e4c:	4798      	blx	r3
   17e4e:	2000      	movs	r0, #0
   17e50:	bd70      	pop	{r4, r5, r6, pc}
   17e52:	4c12      	ldr	r4, [pc, #72]	; (17e9c <CC_PalPowerSaveModeSelect+0x74>)
   17e54:	6821      	ldr	r1, [r4, #0]
   17e56:	b939      	cbnz	r1, 17e68 <CC_PalPowerSaveModeSelect+0x40>
   17e58:	2001      	movs	r0, #1
   17e5a:	4b11      	ldr	r3, [pc, #68]	; (17ea0 <CC_PalPowerSaveModeSelect+0x78>)
   17e5c:	4a11      	ldr	r2, [pc, #68]	; (17ea4 <CC_PalPowerSaveModeSelect+0x7c>)
   17e5e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   17e62:	6813      	ldr	r3, [r2, #0]
   17e64:	2b00      	cmp	r3, #0
   17e66:	d1fc      	bne.n	17e62 <CC_PalPowerSaveModeSelect+0x3a>
   17e68:	3101      	adds	r1, #1
   17e6a:	6021      	str	r1, [r4, #0]
   17e6c:	68f3      	ldr	r3, [r6, #12]
   17e6e:	6928      	ldr	r0, [r5, #16]
   17e70:	4798      	blx	r3
   17e72:	2000      	movs	r0, #0
   17e74:	bd70      	pop	{r4, r5, r6, pc}
   17e76:	480c      	ldr	r0, [pc, #48]	; (17ea8 <CC_PalPowerSaveModeSelect+0x80>)
   17e78:	bd70      	pop	{r4, r5, r6, pc}
   17e7a:	4a0a      	ldr	r2, [pc, #40]	; (17ea4 <CC_PalPowerSaveModeSelect+0x7c>)
   17e7c:	6813      	ldr	r3, [r2, #0]
   17e7e:	2b00      	cmp	r3, #0
   17e80:	d1fc      	bne.n	17e7c <CC_PalPowerSaveModeSelect+0x54>
   17e82:	4a07      	ldr	r2, [pc, #28]	; (17ea0 <CC_PalPowerSaveModeSelect+0x78>)
   17e84:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   17e88:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   17e8c:	f7ff fef6 	bl	17c7c <CC_HalMaskInterrupt>
   17e90:	6823      	ldr	r3, [r4, #0]
   17e92:	e7d7      	b.n	17e44 <CC_PalPowerSaveModeSelect+0x1c>
   17e94:	2000006c 	.word	0x2000006c
   17e98:	2000005c 	.word	0x2000005c
   17e9c:	20000d1c 	.word	0x20000d1c
   17ea0:	50844000 	.word	0x50844000
   17ea4:	50845910 	.word	0x50845910
   17ea8:	ffff8fe9 	.word	0xffff8fe9

00017eac <mutex_init>:
   17eac:	4b01      	ldr	r3, [pc, #4]	; (17eb4 <mutex_init+0x8>)
   17eae:	681b      	ldr	r3, [r3, #0]
   17eb0:	4718      	bx	r3
   17eb2:	bf00      	nop
   17eb4:	2000005c 	.word	0x2000005c

00017eb8 <mutex_lock>:
   17eb8:	4b01      	ldr	r3, [pc, #4]	; (17ec0 <mutex_lock+0x8>)
   17eba:	689b      	ldr	r3, [r3, #8]
   17ebc:	4718      	bx	r3
   17ebe:	bf00      	nop
   17ec0:	2000005c 	.word	0x2000005c

00017ec4 <mutex_unlock>:
   17ec4:	4b01      	ldr	r3, [pc, #4]	; (17ecc <mutex_unlock+0x8>)
   17ec6:	68db      	ldr	r3, [r3, #12]
   17ec8:	4718      	bx	r3
   17eca:	bf00      	nop
   17ecc:	2000005c 	.word	0x2000005c

00017ed0 <startTrngHW>:
   17ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ed2:	2800      	cmp	r0, #0
   17ed4:	d070      	beq.n	17fb8 <startTrngHW+0xe8>
   17ed6:	460c      	mov	r4, r1
   17ed8:	2900      	cmp	r1, #0
   17eda:	d06d      	beq.n	17fb8 <startTrngHW+0xe8>
   17edc:	461d      	mov	r5, r3
   17ede:	2b00      	cmp	r3, #0
   17ee0:	d06a      	beq.n	17fb8 <startTrngHW+0xe8>
   17ee2:	4606      	mov	r6, r0
   17ee4:	b11a      	cbz	r2, 17eee <startTrngHW+0x1e>
   17ee6:	2201      	movs	r2, #1
   17ee8:	2300      	movs	r3, #0
   17eea:	602a      	str	r2, [r5, #0]
   17eec:	6003      	str	r3, [r0, #0]
   17eee:	682b      	ldr	r3, [r5, #0]
   17ef0:	2b00      	cmp	r3, #0
   17ef2:	d05e      	beq.n	17fb2 <startTrngHW+0xe2>
   17ef4:	4629      	mov	r1, r5
   17ef6:	4620      	mov	r0, r4
   17ef8:	f001 f8d2 	bl	190a0 <LLF_RND_GetFastestRosc>
   17efc:	4607      	mov	r7, r0
   17efe:	2800      	cmp	r0, #0
   17f00:	d158      	bne.n	17fb4 <startTrngHW+0xe4>
   17f02:	4621      	mov	r1, r4
   17f04:	6828      	ldr	r0, [r5, #0]
   17f06:	f001 f8ad 	bl	19064 <LLF_RND_GetRoscSampleCnt>
   17f0a:	4607      	mov	r7, r0
   17f0c:	2800      	cmp	r0, #0
   17f0e:	d151      	bne.n	17fb4 <startTrngHW+0xe4>
   17f10:	682b      	ldr	r3, [r5, #0]
   17f12:	2b08      	cmp	r3, #8
   17f14:	d05e      	beq.n	17fd4 <startTrngHW+0x104>
   17f16:	2b04      	cmp	r3, #4
   17f18:	d05f      	beq.n	17fda <startTrngHW+0x10a>
   17f1a:	f1a3 0e02 	sub.w	lr, r3, #2
   17f1e:	fabe fe8e 	clz	lr, lr
   17f22:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   17f26:	2301      	movs	r3, #1
   17f28:	469c      	mov	ip, r3
   17f2a:	4a2d      	ldr	r2, [pc, #180]	; (17fe0 <startTrngHW+0x110>)
   17f2c:	492d      	ldr	r1, [pc, #180]	; (17fe4 <startTrngHW+0x114>)
   17f2e:	6013      	str	r3, [r2, #0]
   17f30:	4610      	mov	r0, r2
   17f32:	600b      	str	r3, [r1, #0]
   17f34:	3a94      	subs	r2, #148	; 0x94
   17f36:	f8c0 c000 	str.w	ip, [r0]
   17f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17f3c:	6013      	str	r3, [r2, #0]
   17f3e:	6811      	ldr	r1, [r2, #0]
   17f40:	428b      	cmp	r3, r1
   17f42:	d1f8      	bne.n	17f36 <startTrngHW+0x66>
   17f44:	2200      	movs	r2, #0
   17f46:	f06f 011b 	mvn.w	r1, #27
   17f4a:	f04f 30ff 	mov.w	r0, #4294967295
   17f4e:	4b26      	ldr	r3, [pc, #152]	; (17fe8 <startTrngHW+0x118>)
   17f50:	601a      	str	r2, [r3, #0]
   17f52:	4a26      	ldr	r2, [pc, #152]	; (17fec <startTrngHW+0x11c>)
   17f54:	6010      	str	r0, [r2, #0]
   17f56:	f843 1c2c 	str.w	r1, [r3, #-44]
   17f5a:	f8c2 e004 	str.w	lr, [r2, #4]
   17f5e:	f8d3 08d8 	ldr.w	r0, [r3, #2264]	; 0x8d8
   17f62:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   17f66:	f7ff fe89 	bl	17c7c <CC_HalMaskInterrupt>
   17f6a:	220a      	movs	r2, #10
   17f6c:	4b20      	ldr	r3, [pc, #128]	; (17ff0 <startTrngHW+0x120>)
   17f6e:	601a      	str	r2, [r3, #0]
   17f70:	9a06      	ldr	r2, [sp, #24]
   17f72:	6923      	ldr	r3, [r4, #16]
   17f74:	2a01      	cmp	r2, #1
   17f76:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17f78:	d021      	beq.n	17fbe <startTrngHW+0xee>
   17f7a:	4a1e      	ldr	r2, [pc, #120]	; (17ff4 <startTrngHW+0x124>)
   17f7c:	fba2 2303 	umull	r2, r3, r2, r3
   17f80:	091b      	lsrs	r3, r3, #4
   17f82:	2201      	movs	r2, #1
   17f84:	fb03 f301 	mul.w	r3, r3, r1
   17f88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17f8c:	491a      	ldr	r1, [pc, #104]	; (17ff8 <startTrngHW+0x128>)
   17f8e:	03db      	lsls	r3, r3, #15
   17f90:	099b      	lsrs	r3, r3, #6
   17f92:	600b      	str	r3, [r1, #0]
   17f94:	4b14      	ldr	r3, [pc, #80]	; (17fe8 <startTrngHW+0x118>)
   17f96:	4638      	mov	r0, r7
   17f98:	601a      	str	r2, [r3, #0]
   17f9a:	6833      	ldr	r3, [r6, #0]
   17f9c:	682a      	ldr	r2, [r5, #0]
   17f9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   17fa2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   17fa6:	6033      	str	r3, [r6, #0]
   17fa8:	682a      	ldr	r2, [r5, #0]
   17faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17fae:	6033      	str	r3, [r6, #0]
   17fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fb2:	4f12      	ldr	r7, [pc, #72]	; (17ffc <startTrngHW+0x12c>)
   17fb4:	4638      	mov	r0, r7
   17fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fb8:	4f11      	ldr	r7, [pc, #68]	; (18000 <startTrngHW+0x130>)
   17fba:	4638      	mov	r0, r7
   17fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fbe:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   17fc2:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   17fc6:	3201      	adds	r2, #1
   17fc8:	d002      	beq.n	17fd0 <startTrngHW+0x100>
   17fca:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   17fce:	e7d4      	b.n	17f7a <startTrngHW+0xaa>
   17fd0:	2316      	movs	r3, #22
   17fd2:	e7d6      	b.n	17f82 <startTrngHW+0xb2>
   17fd4:	f04f 0e03 	mov.w	lr, #3
   17fd8:	e7a5      	b.n	17f26 <startTrngHW+0x56>
   17fda:	f04f 0e02 	mov.w	lr, #2
   17fde:	e7a2      	b.n	17f26 <startTrngHW+0x56>
   17fe0:	508451c4 	.word	0x508451c4
   17fe4:	50845140 	.word	0x50845140
   17fe8:	5084512c 	.word	0x5084512c
   17fec:	50845108 	.word	0x50845108
   17ff0:	50845138 	.word	0x50845138
   17ff4:	aaaaaaab 	.word	0xaaaaaaab
   17ff8:	508451d8 	.word	0x508451d8
   17ffc:	00f10c31 	.word	0x00f10c31
   18000:	00f10c35 	.word	0x00f10c35

00018004 <LLF_RND_RepetitionCounterTest.part.0>:
   18004:	b4f0      	push	{r4, r5, r6, r7}
   18006:	2400      	movs	r4, #0
   18008:	00c9      	lsls	r1, r1, #3
   1800a:	4626      	mov	r6, r4
   1800c:	4627      	mov	r7, r4
   1800e:	f101 3cff 	add.w	ip, r1, #4294967295
   18012:	e006      	b.n	18022 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   18014:	429f      	cmp	r7, r3
   18016:	d015      	beq.n	18044 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   18018:	2601      	movs	r6, #1
   1801a:	4565      	cmp	r5, ip
   1801c:	d818      	bhi.n	18050 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   1801e:	462c      	mov	r4, r5
   18020:	461f      	mov	r7, r3
   18022:	0963      	lsrs	r3, r4, #5
   18024:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   18028:	f004 011f 	and.w	r1, r4, #31
   1802c:	40cb      	lsrs	r3, r1
   1802e:	291f      	cmp	r1, #31
   18030:	f104 0501 	add.w	r5, r4, #1
   18034:	bf18      	it	ne
   18036:	f003 0301 	andne.w	r3, r3, #1
   1803a:	2c00      	cmp	r4, #0
   1803c:	d1ea      	bne.n	18014 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   1803e:	2601      	movs	r6, #1
   18040:	4635      	mov	r5, r6
   18042:	e7ec      	b.n	1801e <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   18044:	3601      	adds	r6, #1
   18046:	4296      	cmp	r6, r2
   18048:	d1e7      	bne.n	1801a <LLF_RND_RepetitionCounterTest.part.0+0x16>
   1804a:	4803      	ldr	r0, [pc, #12]	; (18058 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   1804c:	bcf0      	pop	{r4, r5, r6, r7}
   1804e:	4770      	bx	lr
   18050:	2000      	movs	r0, #0
   18052:	bcf0      	pop	{r4, r5, r6, r7}
   18054:	4770      	bx	lr
   18056:	bf00      	nop
   18058:	00f10c36 	.word	0x00f10c36

0001805c <LLF_RND_AdaptiveProportionTest>:
   1805c:	2800      	cmp	r0, #0
   1805e:	d05f      	beq.n	18120 <LLF_RND_AdaptiveProportionTest+0xc4>
   18060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18064:	1e4c      	subs	r4, r1, #1
   18066:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1806a:	d226      	bcs.n	180ba <LLF_RND_AdaptiveProportionTest+0x5e>
   1806c:	b32b      	cbz	r3, 180ba <LLF_RND_AdaptiveProportionTest+0x5e>
   1806e:	b322      	cbz	r2, 180ba <LLF_RND_AdaptiveProportionTest+0x5e>
   18070:	00cc      	lsls	r4, r1, #3
   18072:	2b01      	cmp	r3, #1
   18074:	f104 3eff 	add.w	lr, r4, #4294967295
   18078:	d02f      	beq.n	180da <LLF_RND_AdaptiveProportionTest+0x7e>
   1807a:	2100      	movs	r1, #0
   1807c:	468c      	mov	ip, r1
   1807e:	460f      	mov	r7, r1
   18080:	460d      	mov	r5, r1
   18082:	f103 38ff 	add.w	r8, r3, #4294967295
   18086:	094c      	lsrs	r4, r1, #5
   18088:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1808c:	f001 061f 	and.w	r6, r1, #31
   18090:	40f4      	lsrs	r4, r6
   18092:	2e1f      	cmp	r6, #31
   18094:	bf18      	it	ne
   18096:	f004 0401 	andne.w	r4, r4, #1
   1809a:	b921      	cbnz	r1, 180a6 <LLF_RND_AdaptiveProportionTest+0x4a>
   1809c:	2501      	movs	r5, #1
   1809e:	46ac      	mov	ip, r5
   180a0:	4629      	mov	r1, r5
   180a2:	4627      	mov	r7, r4
   180a4:	e7ef      	b.n	18086 <LLF_RND_AdaptiveProportionTest+0x2a>
   180a6:	42ab      	cmp	r3, r5
   180a8:	d013      	beq.n	180d2 <LLF_RND_AdaptiveProportionTest+0x76>
   180aa:	42a7      	cmp	r7, r4
   180ac:	d101      	bne.n	180b2 <LLF_RND_AdaptiveProportionTest+0x56>
   180ae:	f10c 0c01 	add.w	ip, ip, #1
   180b2:	4545      	cmp	r5, r8
   180b4:	d104      	bne.n	180c0 <LLF_RND_AdaptiveProportionTest+0x64>
   180b6:	4562      	cmp	r2, ip
   180b8:	d202      	bcs.n	180c0 <LLF_RND_AdaptiveProportionTest+0x64>
   180ba:	481a      	ldr	r0, [pc, #104]	; (18124 <LLF_RND_AdaptiveProportionTest+0xc8>)
   180bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180c0:	463c      	mov	r4, r7
   180c2:	3101      	adds	r1, #1
   180c4:	458e      	cmp	lr, r1
   180c6:	f105 0501 	add.w	r5, r5, #1
   180ca:	d2ea      	bcs.n	180a2 <LLF_RND_AdaptiveProportionTest+0x46>
   180cc:	2000      	movs	r0, #0
   180ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180d2:	2500      	movs	r5, #0
   180d4:	f04f 0c01 	mov.w	ip, #1
   180d8:	e7f3      	b.n	180c2 <LLF_RND_AdaptiveProportionTest+0x66>
   180da:	2600      	movs	r6, #0
   180dc:	46b4      	mov	ip, r6
   180de:	4637      	mov	r7, r6
   180e0:	4631      	mov	r1, r6
   180e2:	094b      	lsrs	r3, r1, #5
   180e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   180e8:	f001 051f 	and.w	r5, r1, #31
   180ec:	40eb      	lsrs	r3, r5
   180ee:	2d1f      	cmp	r5, #31
   180f0:	bf18      	it	ne
   180f2:	f003 0301 	andne.w	r3, r3, #1
   180f6:	b139      	cbz	r1, 18108 <LLF_RND_AdaptiveProportionTest+0xac>
   180f8:	b95f      	cbnz	r7, 18112 <LLF_RND_AdaptiveProportionTest+0xb6>
   180fa:	459c      	cmp	ip, r3
   180fc:	d001      	beq.n	18102 <LLF_RND_AdaptiveProportionTest+0xa6>
   180fe:	4663      	mov	r3, ip
   18100:	e008      	b.n	18114 <LLF_RND_AdaptiveProportionTest+0xb8>
   18102:	4663      	mov	r3, ip
   18104:	3601      	adds	r6, #1
   18106:	e005      	b.n	18114 <LLF_RND_AdaptiveProportionTest+0xb8>
   18108:	2601      	movs	r6, #1
   1810a:	4631      	mov	r1, r6
   1810c:	469c      	mov	ip, r3
   1810e:	2701      	movs	r7, #1
   18110:	e7e7      	b.n	180e2 <LLF_RND_AdaptiveProportionTest+0x86>
   18112:	463e      	mov	r6, r7
   18114:	42b2      	cmp	r2, r6
   18116:	d3d0      	bcc.n	180ba <LLF_RND_AdaptiveProportionTest+0x5e>
   18118:	3101      	adds	r1, #1
   1811a:	42a1      	cmp	r1, r4
   1811c:	d1f6      	bne.n	1810c <LLF_RND_AdaptiveProportionTest+0xb0>
   1811e:	e7d5      	b.n	180cc <LLF_RND_AdaptiveProportionTest+0x70>
   18120:	4800      	ldr	r0, [pc, #0]	; (18124 <LLF_RND_AdaptiveProportionTest+0xc8>)
   18122:	4770      	bx	lr
   18124:	00f10c37 	.word	0x00f10c37

00018128 <getTrngSource>:
   18128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1812c:	b08d      	sub	sp, #52	; 0x34
   1812e:	9e18      	ldr	r6, [sp, #96]	; 0x60
   18130:	4607      	mov	r7, r0
   18132:	460c      	mov	r4, r1
   18134:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   18136:	2e00      	cmp	r6, #0
   18138:	d14c      	bne.n	181d4 <getTrngSource+0xac>
   1813a:	f8d1 b010 	ldr.w	fp, [r1, #16]
   1813e:	2100      	movs	r1, #0
   18140:	601d      	str	r5, [r3, #0]
   18142:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18144:	6019      	str	r1, [r3, #0]
   18146:	2a00      	cmp	r2, #0
   18148:	f000 811e 	beq.w	18388 <getTrngSource+0x260>
   1814c:	4a9a      	ldr	r2, [pc, #616]	; (183b8 <getTrngSource+0x290>)
   1814e:	4b9b      	ldr	r3, [pc, #620]	; (183bc <getTrngSource+0x294>)
   18150:	6811      	ldr	r1, [r2, #0]
   18152:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18154:	681b      	ldr	r3, [r3, #0]
   18156:	429a      	cmp	r2, r3
   18158:	d147      	bne.n	181ea <getTrngSource+0xc2>
   1815a:	290a      	cmp	r1, #10
   1815c:	d145      	bne.n	181ea <getTrngSource+0xc2>
   1815e:	78fb      	ldrb	r3, [r7, #3]
   18160:	9304      	str	r3, [sp, #16]
   18162:	2304      	movs	r3, #4
   18164:	46b8      	mov	r8, r7
   18166:	9302      	str	r3, [sp, #8]
   18168:	4b95      	ldr	r3, [pc, #596]	; (183c0 <getTrngSource+0x298>)
   1816a:	fba3 230b 	umull	r2, r3, r3, fp
   1816e:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   18172:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   18176:	f105 0208 	add.w	r2, r5, #8
   1817a:	9203      	str	r2, [sp, #12]
   1817c:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   18180:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18182:	f8c3 b000 	str.w	fp, [r3]
   18186:	f1bb 0f00 	cmp.w	fp, #0
   1818a:	f000 80c3 	beq.w	18314 <getTrngSource+0x1ec>
   1818e:	465d      	mov	r5, fp
   18190:	f04f 0900 	mov.w	r9, #0
   18194:	9e03      	ldr	r6, [sp, #12]
   18196:	f000 ff93 	bl	190c0 <LLF_RND_TurnOffTrng>
   1819a:	2300      	movs	r3, #0
   1819c:	9305      	str	r3, [sp, #20]
   1819e:	f1b8 0f00 	cmp.w	r8, #0
   181a2:	f000 80e5 	beq.w	18370 <getTrngSource+0x248>
   181a6:	2c00      	cmp	r4, #0
   181a8:	f000 80e2 	beq.w	18370 <getTrngSource+0x248>
   181ac:	9b04      	ldr	r3, [sp, #16]
   181ae:	2b00      	cmp	r3, #0
   181b0:	f000 80dc 	beq.w	1836c <getTrngSource+0x244>
   181b4:	4620      	mov	r0, r4
   181b6:	a904      	add	r1, sp, #16
   181b8:	f000 ff72 	bl	190a0 <LLF_RND_GetFastestRosc>
   181bc:	b1b8      	cbz	r0, 181ee <getTrngSource+0xc6>
   181be:	4b81      	ldr	r3, [pc, #516]	; (183c4 <getTrngSource+0x29c>)
   181c0:	4298      	cmp	r0, r3
   181c2:	f040 80a7 	bne.w	18314 <getTrngSource+0x1ec>
   181c6:	9002      	str	r0, [sp, #8]
   181c8:	f000 ff7a 	bl	190c0 <LLF_RND_TurnOffTrng>
   181cc:	9802      	ldr	r0, [sp, #8]
   181ce:	b00d      	add	sp, #52	; 0x34
   181d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181d4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   181d8:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   181dc:	3001      	adds	r0, #1
   181de:	bf0c      	ite	eq
   181e0:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   181e4:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   181e8:	e7a9      	b.n	1813e <getTrngSource+0x16>
   181ea:	4877      	ldr	r0, [pc, #476]	; (183c8 <getTrngSource+0x2a0>)
   181ec:	e7eb      	b.n	181c6 <getTrngSource+0x9e>
   181ee:	4621      	mov	r1, r4
   181f0:	9804      	ldr	r0, [sp, #16]
   181f2:	f000 ff37 	bl	19064 <LLF_RND_GetRoscSampleCnt>
   181f6:	2800      	cmp	r0, #0
   181f8:	d1e1      	bne.n	181be <getTrngSource+0x96>
   181fa:	9904      	ldr	r1, [sp, #16]
   181fc:	2908      	cmp	r1, #8
   181fe:	f000 80b9 	beq.w	18374 <getTrngSource+0x24c>
   18202:	2904      	cmp	r1, #4
   18204:	f000 80b8 	beq.w	18378 <getTrngSource+0x250>
   18208:	f1a1 0102 	sub.w	r1, r1, #2
   1820c:	fab1 f181 	clz	r1, r1
   18210:	0949      	lsrs	r1, r1, #5
   18212:	2301      	movs	r3, #1
   18214:	4618      	mov	r0, r3
   18216:	4f6d      	ldr	r7, [pc, #436]	; (183cc <getTrngSource+0x2a4>)
   18218:	603b      	str	r3, [r7, #0]
   1821a:	f847 3c84 	str.w	r3, [r7, #-132]
   1821e:	4b6b      	ldr	r3, [pc, #428]	; (183cc <getTrngSource+0x2a4>)
   18220:	4f66      	ldr	r7, [pc, #408]	; (183bc <getTrngSource+0x294>)
   18222:	6018      	str	r0, [r3, #0]
   18224:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18226:	603b      	str	r3, [r7, #0]
   18228:	683f      	ldr	r7, [r7, #0]
   1822a:	42bb      	cmp	r3, r7
   1822c:	d1f7      	bne.n	1821e <getTrngSource+0xf6>
   1822e:	2000      	movs	r0, #0
   18230:	f04f 33ff 	mov.w	r3, #4294967295
   18234:	f06f 071b 	mvn.w	r7, #27
   18238:	4a65      	ldr	r2, [pc, #404]	; (183d0 <getTrngSource+0x2a8>)
   1823a:	6010      	str	r0, [r2, #0]
   1823c:	4865      	ldr	r0, [pc, #404]	; (183d4 <getTrngSource+0x2ac>)
   1823e:	f842 3c24 	str.w	r3, [r2, #-36]
   18242:	4b65      	ldr	r3, [pc, #404]	; (183d8 <getTrngSource+0x2b0>)
   18244:	f842 7c2c 	str.w	r7, [r2, #-44]
   18248:	6001      	str	r1, [r0, #0]
   1824a:	6818      	ldr	r0, [r3, #0]
   1824c:	4f5c      	ldr	r7, [pc, #368]	; (183c0 <getTrngSource+0x298>)
   1824e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   18252:	f7ff fd13 	bl	17c7c <CC_HalMaskInterrupt>
   18256:	210a      	movs	r1, #10
   18258:	2201      	movs	r2, #1
   1825a:	4b57      	ldr	r3, [pc, #348]	; (183b8 <getTrngSource+0x290>)
   1825c:	485f      	ldr	r0, [pc, #380]	; (183dc <getTrngSource+0x2b4>)
   1825e:	6019      	str	r1, [r3, #0]
   18260:	6921      	ldr	r1, [r4, #16]
   18262:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18264:	fba7 c101 	umull	ip, r1, r7, r1
   18268:	0909      	lsrs	r1, r1, #4
   1826a:	fb03 f301 	mul.w	r3, r3, r1
   1826e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18272:	03db      	lsls	r3, r3, #15
   18274:	099b      	lsrs	r3, r3, #6
   18276:	6003      	str	r3, [r0, #0]
   18278:	4b55      	ldr	r3, [pc, #340]	; (183d0 <getTrngSource+0x2a8>)
   1827a:	a805      	add	r0, sp, #20
   1827c:	601a      	str	r2, [r3, #0]
   1827e:	9904      	ldr	r1, [sp, #16]
   18280:	f8d8 2000 	ldr.w	r2, [r8]
   18284:	020b      	lsls	r3, r1, #8
   18286:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1828a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1828e:	4313      	orrs	r3, r2
   18290:	f8c8 3000 	str.w	r3, [r8]
   18294:	f000 fed6 	bl	19044 <LLF_RND_WaitRngInterrupt>
   18298:	9b05      	ldr	r3, [sp, #20]
   1829a:	f003 031a 	and.w	r3, r3, #26
   1829e:	4303      	orrs	r3, r0
   182a0:	d138      	bne.n	18314 <getTrngSource+0x1ec>
   182a2:	4b4f      	ldr	r3, [pc, #316]	; (183e0 <getTrngSource+0x2b8>)
   182a4:	fba7 2705 	umull	r2, r7, r7, r5
   182a8:	681a      	ldr	r2, [r3, #0]
   182aa:	3314      	adds	r3, #20
   182ac:	9206      	str	r2, [sp, #24]
   182ae:	f853 2c10 	ldr.w	r2, [r3, #-16]
   182b2:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   182b6:	9207      	str	r2, [sp, #28]
   182b8:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   182bc:	9208      	str	r2, [sp, #32]
   182be:	f853 2c08 	ldr.w	r2, [r3, #-8]
   182c2:	9209      	str	r2, [sp, #36]	; 0x24
   182c4:	f853 2c04 	ldr.w	r2, [r3, #-4]
   182c8:	920a      	str	r2, [sp, #40]	; 0x28
   182ca:	681b      	ldr	r3, [r3, #0]
   182cc:	930b      	str	r3, [sp, #44]	; 0x2c
   182ce:	d102      	bne.n	182d6 <getTrngSource+0x1ae>
   182d0:	f1ba 0f00 	cmp.w	sl, #0
   182d4:	d141      	bne.n	1835a <getTrngSource+0x232>
   182d6:	2218      	movs	r2, #24
   182d8:	4630      	mov	r0, r6
   182da:	eb0d 0102 	add.w	r1, sp, r2
   182de:	f000 fe55 	bl	18f8c <CC_PalMemCopyPlat>
   182e2:	3d18      	subs	r5, #24
   182e4:	3618      	adds	r6, #24
   182e6:	f109 0901 	add.w	r9, r9, #1
   182ea:	2d00      	cmp	r5, #0
   182ec:	f47f af53 	bne.w	18196 <getTrngSource+0x6e>
   182f0:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   182f4:	d85d      	bhi.n	183b2 <getTrngSource+0x28a>
   182f6:	9d03      	ldr	r5, [sp, #12]
   182f8:	4659      	mov	r1, fp
   182fa:	4628      	mov	r0, r5
   182fc:	6962      	ldr	r2, [r4, #20]
   182fe:	f7ff fe81 	bl	18004 <LLF_RND_RepetitionCounterTest.part.0>
   18302:	2800      	cmp	r0, #0
   18304:	d04b      	beq.n	1839e <getTrngSource+0x276>
   18306:	2300      	movs	r3, #0
   18308:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1830a:	6013      	str	r3, [r2, #0]
   1830c:	4b2d      	ldr	r3, [pc, #180]	; (183c4 <getTrngSource+0x29c>)
   1830e:	4298      	cmp	r0, r3
   18310:	f43f af59 	beq.w	181c6 <getTrngSource+0x9e>
   18314:	9d04      	ldr	r5, [sp, #16]
   18316:	2d08      	cmp	r5, #8
   18318:	d034      	beq.n	18384 <getTrngSource+0x25c>
   1831a:	2200      	movs	r2, #0
   1831c:	ab04      	add	r3, sp, #16
   1831e:	4621      	mov	r1, r4
   18320:	4640      	mov	r0, r8
   18322:	006d      	lsls	r5, r5, #1
   18324:	9200      	str	r2, [sp, #0]
   18326:	9504      	str	r5, [sp, #16]
   18328:	f7ff fdd2 	bl	17ed0 <startTrngHW>
   1832c:	4b2d      	ldr	r3, [pc, #180]	; (183e4 <getTrngSource+0x2bc>)
   1832e:	4298      	cmp	r0, r3
   18330:	d024      	beq.n	1837c <getTrngSource+0x254>
   18332:	2800      	cmp	r0, #0
   18334:	f47f af47 	bne.w	181c6 <getTrngSource+0x9e>
   18338:	f8d8 2000 	ldr.w	r2, [r8]
   1833c:	0a13      	lsrs	r3, r2, #8
   1833e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   18342:	4313      	orrs	r3, r2
   18344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18348:	f8c8 3000 	str.w	r3, [r8]
   1834c:	9b02      	ldr	r3, [sp, #8]
   1834e:	3b01      	subs	r3, #1
   18350:	9302      	str	r3, [sp, #8]
   18352:	f47f af15 	bne.w	18180 <getTrngSource+0x58>
   18356:	2000      	movs	r0, #0
   18358:	e735      	b.n	181c6 <getTrngSource+0x9e>
   1835a:	4630      	mov	r0, r6
   1835c:	4652      	mov	r2, sl
   1835e:	a906      	add	r1, sp, #24
   18360:	f000 fe14 	bl	18f8c <CC_PalMemCopyPlat>
   18364:	eba5 050a 	sub.w	r5, r5, sl
   18368:	4456      	add	r6, sl
   1836a:	e7bc      	b.n	182e6 <getTrngSource+0x1be>
   1836c:	481d      	ldr	r0, [pc, #116]	; (183e4 <getTrngSource+0x2bc>)
   1836e:	e726      	b.n	181be <getTrngSource+0x96>
   18370:	481d      	ldr	r0, [pc, #116]	; (183e8 <getTrngSource+0x2c0>)
   18372:	e724      	b.n	181be <getTrngSource+0x96>
   18374:	2103      	movs	r1, #3
   18376:	e74c      	b.n	18212 <getTrngSource+0xea>
   18378:	2102      	movs	r1, #2
   1837a:	e74a      	b.n	18212 <getTrngSource+0xea>
   1837c:	6a23      	ldr	r3, [r4, #32]
   1837e:	2b00      	cmp	r3, #0
   18380:	f43f af21 	beq.w	181c6 <getTrngSource+0x9e>
   18384:	4819      	ldr	r0, [pc, #100]	; (183ec <getTrngSource+0x2c4>)
   18386:	e71e      	b.n	181c6 <getTrngSource+0x9e>
   18388:	2201      	movs	r2, #1
   1838a:	4621      	mov	r1, r4
   1838c:	4638      	mov	r0, r7
   1838e:	9600      	str	r6, [sp, #0]
   18390:	ab04      	add	r3, sp, #16
   18392:	f7ff fd9d 	bl	17ed0 <startTrngHW>
   18396:	2800      	cmp	r0, #0
   18398:	f43f aee3 	beq.w	18162 <getTrngSource+0x3a>
   1839c:	e713      	b.n	181c6 <getTrngSource+0x9e>
   1839e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   183a2:	4659      	mov	r1, fp
   183a4:	4628      	mov	r0, r5
   183a6:	69a2      	ldr	r2, [r4, #24]
   183a8:	f7ff fe58 	bl	1805c <LLF_RND_AdaptiveProportionTest>
   183ac:	2800      	cmp	r0, #0
   183ae:	d1aa      	bne.n	18306 <getTrngSource+0x1de>
   183b0:	e7d1      	b.n	18356 <getTrngSource+0x22e>
   183b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   183b4:	601d      	str	r5, [r3, #0]
   183b6:	e7ad      	b.n	18314 <getTrngSource+0x1ec>
   183b8:	50845138 	.word	0x50845138
   183bc:	50845130 	.word	0x50845130
   183c0:	aaaaaaab 	.word	0xaaaaaaab
   183c4:	00f10c02 	.word	0x00f10c02
   183c8:	00f10c30 	.word	0x00f10c30
   183cc:	508451c4 	.word	0x508451c4
   183d0:	5084512c 	.word	0x5084512c
   183d4:	5084510c 	.word	0x5084510c
   183d8:	50845a04 	.word	0x50845a04
   183dc:	508451d8 	.word	0x508451d8
   183e0:	50845114 	.word	0x50845114
   183e4:	00f10c31 	.word	0x00f10c31
   183e8:	00f10c35 	.word	0x00f10c35
   183ec:	00f10c32 	.word	0x00f10c32

000183f0 <LLF_RND_GetTrngSource>:
   183f0:	2300      	movs	r3, #0
   183f2:	b430      	push	{r4, r5}
   183f4:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
   183f8:	9304      	str	r3, [sp, #16]
   183fa:	9b02      	ldr	r3, [sp, #8]
   183fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
   18400:	bc30      	pop	{r4, r5}
   18402:	f7ff be91 	b.w	18128 <getTrngSource>
   18406:	bf00      	nop

00018408 <LLF_RND_RunTrngStartupTest>:
   18408:	b510      	push	{r4, lr}
   1840a:	2401      	movs	r4, #1
   1840c:	b086      	sub	sp, #24
   1840e:	ab05      	add	r3, sp, #20
   18410:	e9cd 2401 	strd	r2, r4, [sp, #4]
   18414:	9300      	str	r3, [sp, #0]
   18416:	2200      	movs	r2, #0
   18418:	ab04      	add	r3, sp, #16
   1841a:	f7ff fe85 	bl	18128 <getTrngSource>
   1841e:	b006      	add	sp, #24
   18420:	bd10      	pop	{r4, pc}
   18422:	bf00      	nop

00018424 <mbedtls_platform_zeroize>:
   18424:	b138      	cbz	r0, 18436 <mbedtls_platform_zeroize+0x12>
   18426:	b131      	cbz	r1, 18436 <mbedtls_platform_zeroize+0x12>
   18428:	2200      	movs	r2, #0
   1842a:	4401      	add	r1, r0
   1842c:	4603      	mov	r3, r0
   1842e:	3001      	adds	r0, #1
   18430:	4281      	cmp	r1, r0
   18432:	701a      	strb	r2, [r3, #0]
   18434:	d1fa      	bne.n	1842c <mbedtls_platform_zeroize+0x8>
   18436:	4770      	bx	lr

00018438 <mbedtls_hardware_poll>:
   18438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1843c:	b088      	sub	sp, #32
   1843e:	9205      	str	r2, [sp, #20]
   18440:	2900      	cmp	r1, #0
   18442:	d069      	beq.n	18518 <mbedtls_hardware_poll+0xe0>
   18444:	461c      	mov	r4, r3
   18446:	2b00      	cmp	r3, #0
   18448:	d066      	beq.n	18518 <mbedtls_hardware_poll+0xe0>
   1844a:	4615      	mov	r5, r2
   1844c:	2a00      	cmp	r2, #0
   1844e:	d063      	beq.n	18518 <mbedtls_hardware_poll+0xe0>
   18450:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 18540 <mbedtls_hardware_poll+0x108>
   18454:	460e      	mov	r6, r1
   18456:	f8d8 0000 	ldr.w	r0, [r8]
   1845a:	f04f 31ff 	mov.w	r1, #4294967295
   1845e:	f7ff fcb3 	bl	17dc8 <CC_PalMutexLock>
   18462:	2800      	cmp	r0, #0
   18464:	d149      	bne.n	184fa <mbedtls_hardware_poll+0xc2>
   18466:	4b2e      	ldr	r3, [pc, #184]	; (18520 <mbedtls_hardware_poll+0xe8>)
   18468:	6818      	ldr	r0, [r3, #0]
   1846a:	f010 0001 	ands.w	r0, r0, #1
   1846e:	d018      	beq.n	184a2 <mbedtls_hardware_poll+0x6a>
   18470:	f04f 37ff 	mov.w	r7, #4294967295
   18474:	f44f 7108 	mov.w	r1, #544	; 0x220
   18478:	482a      	ldr	r0, [pc, #168]	; (18524 <mbedtls_hardware_poll+0xec>)
   1847a:	f7ff ffd3 	bl	18424 <mbedtls_platform_zeroize>
   1847e:	2104      	movs	r1, #4
   18480:	4829      	ldr	r0, [pc, #164]	; (18528 <mbedtls_hardware_poll+0xf0>)
   18482:	f7ff ffcf 	bl	18424 <mbedtls_platform_zeroize>
   18486:	4829      	ldr	r0, [pc, #164]	; (1852c <mbedtls_hardware_poll+0xf4>)
   18488:	2128      	movs	r1, #40	; 0x28
   1848a:	f7ff ffcb 	bl	18424 <mbedtls_platform_zeroize>
   1848e:	f8d8 0000 	ldr.w	r0, [r8]
   18492:	f7ff fca1 	bl	17dd8 <CC_PalMutexUnlock>
   18496:	2800      	cmp	r0, #0
   18498:	d133      	bne.n	18502 <mbedtls_hardware_poll+0xca>
   1849a:	4638      	mov	r0, r7
   1849c:	b008      	add	sp, #32
   1849e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   184a2:	f7ff fcc1 	bl	17e28 <CC_PalPowerSaveModeSelect>
   184a6:	2800      	cmp	r0, #0
   184a8:	d132      	bne.n	18510 <mbedtls_hardware_poll+0xd8>
   184aa:	4820      	ldr	r0, [pc, #128]	; (1852c <mbedtls_hardware_poll+0xf4>)
   184ac:	f000 fd30 	bl	18f10 <RNG_PLAT_SetUserRngParameters>
   184b0:	b9c0      	cbnz	r0, 184e4 <mbedtls_hardware_poll+0xac>
   184b2:	491c      	ldr	r1, [pc, #112]	; (18524 <mbedtls_hardware_poll+0xec>)
   184b4:	ab07      	add	r3, sp, #28
   184b6:	4602      	mov	r2, r0
   184b8:	9003      	str	r0, [sp, #12]
   184ba:	9102      	str	r1, [sp, #8]
   184bc:	9300      	str	r3, [sp, #0]
   184be:	491b      	ldr	r1, [pc, #108]	; (1852c <mbedtls_hardware_poll+0xf4>)
   184c0:	4819      	ldr	r0, [pc, #100]	; (18528 <mbedtls_hardware_poll+0xf0>)
   184c2:	9401      	str	r4, [sp, #4]
   184c4:	ab05      	add	r3, sp, #20
   184c6:	f7ff ff93 	bl	183f0 <LLF_RND_GetTrngSource>
   184ca:	b958      	cbnz	r0, 184e4 <mbedtls_hardware_poll+0xac>
   184cc:	6823      	ldr	r3, [r4, #0]
   184ce:	42ab      	cmp	r3, r5
   184d0:	d308      	bcc.n	184e4 <mbedtls_hardware_poll+0xac>
   184d2:	9907      	ldr	r1, [sp, #28]
   184d4:	4607      	mov	r7, r0
   184d6:	462a      	mov	r2, r5
   184d8:	4630      	mov	r0, r6
   184da:	3108      	adds	r1, #8
   184dc:	f000 fd56 	bl	18f8c <CC_PalMemCopyPlat>
   184e0:	6025      	str	r5, [r4, #0]
   184e2:	e001      	b.n	184e8 <mbedtls_hardware_poll+0xb0>
   184e4:	f04f 37ff 	mov.w	r7, #4294967295
   184e8:	2001      	movs	r0, #1
   184ea:	f7ff fc9d 	bl	17e28 <CC_PalPowerSaveModeSelect>
   184ee:	2800      	cmp	r0, #0
   184f0:	d0c0      	beq.n	18474 <mbedtls_hardware_poll+0x3c>
   184f2:	480f      	ldr	r0, [pc, #60]	; (18530 <mbedtls_hardware_poll+0xf8>)
   184f4:	f7ff f8e8 	bl	176c8 <CC_PalAbort>
   184f8:	e7bc      	b.n	18474 <mbedtls_hardware_poll+0x3c>
   184fa:	480e      	ldr	r0, [pc, #56]	; (18534 <mbedtls_hardware_poll+0xfc>)
   184fc:	f7ff f8e4 	bl	176c8 <CC_PalAbort>
   18500:	e7b1      	b.n	18466 <mbedtls_hardware_poll+0x2e>
   18502:	480d      	ldr	r0, [pc, #52]	; (18538 <mbedtls_hardware_poll+0x100>)
   18504:	f7ff f8e0 	bl	176c8 <CC_PalAbort>
   18508:	4638      	mov	r0, r7
   1850a:	b008      	add	sp, #32
   1850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18510:	480a      	ldr	r0, [pc, #40]	; (1853c <mbedtls_hardware_poll+0x104>)
   18512:	f7ff f8d9 	bl	176c8 <CC_PalAbort>
   18516:	e7c8      	b.n	184aa <mbedtls_hardware_poll+0x72>
   18518:	f04f 37ff 	mov.w	r7, #4294967295
   1851c:	e7bd      	b.n	1849a <mbedtls_hardware_poll+0x62>
   1851e:	bf00      	nop
   18520:	50846e34 	.word	0x50846e34
   18524:	20000d24 	.word	0x20000d24
   18528:	20000d20 	.word	0x20000d20
   1852c:	20000f44 	.word	0x20000f44
   18530:	0001d3fc 	.word	0x0001d3fc
   18534:	0001d3c4 	.word	0x0001d3c4
   18538:	0001d454 	.word	0x0001d454
   1853c:	0001d3dc 	.word	0x0001d3dc
   18540:	200000ac 	.word	0x200000ac

00018544 <cc_mbedtls_sha256_init>:
   18544:	b510      	push	{r4, lr}
   18546:	4604      	mov	r4, r0
   18548:	b128      	cbz	r0, 18556 <cc_mbedtls_sha256_init+0x12>
   1854a:	4620      	mov	r0, r4
   1854c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18550:	21f0      	movs	r1, #240	; 0xf0
   18552:	f000 bd1f 	b.w	18f94 <CC_PalMemSetZeroPlat>
   18556:	4804      	ldr	r0, [pc, #16]	; (18568 <cc_mbedtls_sha256_init+0x24>)
   18558:	f7ff f8b6 	bl	176c8 <CC_PalAbort>
   1855c:	4620      	mov	r0, r4
   1855e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18562:	21f0      	movs	r1, #240	; 0xf0
   18564:	f000 bd16 	b.w	18f94 <CC_PalMemSetZeroPlat>
   18568:	0001d46c 	.word	0x0001d46c

0001856c <cc_mbedtls_sha256_free>:
   1856c:	b110      	cbz	r0, 18574 <cc_mbedtls_sha256_free+0x8>
   1856e:	21f0      	movs	r1, #240	; 0xf0
   18570:	f7ff bf58 	b.w	18424 <mbedtls_platform_zeroize>
   18574:	4770      	bx	lr
   18576:	bf00      	nop

00018578 <cc_mbedtls_sha256_starts_ret>:
   18578:	b508      	push	{r3, lr}
   1857a:	b161      	cbz	r1, 18596 <cc_mbedtls_sha256_starts_ret+0x1e>
   1857c:	2901      	cmp	r1, #1
   1857e:	d107      	bne.n	18590 <cc_mbedtls_sha256_starts_ret+0x18>
   18580:	2102      	movs	r1, #2
   18582:	f000 f839 	bl	185f8 <mbedtls_sha_starts_internal>
   18586:	2800      	cmp	r0, #0
   18588:	bf18      	it	ne
   1858a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1858e:	bd08      	pop	{r3, pc}
   18590:	f06f 0036 	mvn.w	r0, #54	; 0x36
   18594:	bd08      	pop	{r3, pc}
   18596:	2101      	movs	r1, #1
   18598:	f000 f82e 	bl	185f8 <mbedtls_sha_starts_internal>
   1859c:	e7f3      	b.n	18586 <cc_mbedtls_sha256_starts_ret+0xe>
   1859e:	bf00      	nop

000185a0 <cc_mbedtls_sha256_update_ret>:
   185a0:	b508      	push	{r3, lr}
   185a2:	f000 f86b 	bl	1867c <mbedtls_sha_update_internal>
   185a6:	2800      	cmp	r0, #0
   185a8:	bf18      	it	ne
   185aa:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   185ae:	bd08      	pop	{r3, pc}

000185b0 <cc_mbedtls_sha256_finish_ret>:
   185b0:	b570      	push	{r4, r5, r6, lr}
   185b2:	b1e8      	cbz	r0, 185f0 <cc_mbedtls_sha256_finish_ret+0x40>
   185b4:	460e      	mov	r6, r1
   185b6:	b1d9      	cbz	r1, 185f0 <cc_mbedtls_sha256_finish_ret+0x40>
   185b8:	4604      	mov	r4, r0
   185ba:	f000 f831 	bl	18620 <mbedtls_sha_finish_internal>
   185be:	4605      	mov	r5, r0
   185c0:	b9b0      	cbnz	r0, 185f0 <cc_mbedtls_sha256_finish_ret+0x40>
   185c2:	6823      	ldr	r3, [r4, #0]
   185c4:	2b01      	cmp	r3, #1
   185c6:	d00b      	beq.n	185e0 <cc_mbedtls_sha256_finish_ret+0x30>
   185c8:	2b02      	cmp	r3, #2
   185ca:	d001      	beq.n	185d0 <cc_mbedtls_sha256_finish_ret+0x20>
   185cc:	4628      	mov	r0, r5
   185ce:	bd70      	pop	{r4, r5, r6, pc}
   185d0:	4630      	mov	r0, r6
   185d2:	221c      	movs	r2, #28
   185d4:	f104 0108 	add.w	r1, r4, #8
   185d8:	f000 fcd8 	bl	18f8c <CC_PalMemCopyPlat>
   185dc:	4628      	mov	r0, r5
   185de:	bd70      	pop	{r4, r5, r6, pc}
   185e0:	4630      	mov	r0, r6
   185e2:	2220      	movs	r2, #32
   185e4:	f104 0108 	add.w	r1, r4, #8
   185e8:	f000 fcd0 	bl	18f8c <CC_PalMemCopyPlat>
   185ec:	4628      	mov	r0, r5
   185ee:	bd70      	pop	{r4, r5, r6, pc}
   185f0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   185f4:	e7ea      	b.n	185cc <cc_mbedtls_sha256_finish_ret+0x1c>
   185f6:	bf00      	nop

000185f8 <mbedtls_sha_starts_internal>:
   185f8:	b178      	cbz	r0, 1861a <mbedtls_sha_starts_internal+0x22>
   185fa:	b538      	push	{r3, r4, r5, lr}
   185fc:	460d      	mov	r5, r1
   185fe:	21f0      	movs	r1, #240	; 0xf0
   18600:	4604      	mov	r4, r0
   18602:	f000 fcc7 	bl	18f94 <CC_PalMemSetZeroPlat>
   18606:	2340      	movs	r3, #64	; 0x40
   18608:	4620      	mov	r0, r4
   1860a:	6025      	str	r5, [r4, #0]
   1860c:	65e3      	str	r3, [r4, #92]	; 0x5c
   1860e:	f000 fd9f 	bl	19150 <InitHashDrv>
   18612:	3800      	subs	r0, #0
   18614:	bf18      	it	ne
   18616:	2001      	movne	r0, #1
   18618:	bd38      	pop	{r3, r4, r5, pc}
   1861a:	2001      	movs	r0, #1
   1861c:	4770      	bx	lr
   1861e:	bf00      	nop

00018620 <mbedtls_sha_finish_internal>:
   18620:	b570      	push	{r4, r5, r6, lr}
   18622:	6e05      	ldr	r5, [r0, #96]	; 0x60
   18624:	b0a4      	sub	sp, #144	; 0x90
   18626:	4604      	mov	r4, r0
   18628:	ae04      	add	r6, sp, #16
   1862a:	b9e5      	cbnz	r5, 18666 <mbedtls_sha_finish_internal+0x46>
   1862c:	2201      	movs	r2, #1
   1862e:	2300      	movs	r3, #0
   18630:	6062      	str	r2, [r4, #4]
   18632:	4630      	mov	r0, r6
   18634:	4629      	mov	r1, r5
   18636:	e9cd 3300 	strd	r3, r3, [sp]
   1863a:	aa02      	add	r2, sp, #8
   1863c:	f000 fd56 	bl	190ec <SetDataBuffersInfo>
   18640:	b110      	cbz	r0, 18648 <mbedtls_sha_finish_internal+0x28>
   18642:	2001      	movs	r0, #1
   18644:	b024      	add	sp, #144	; 0x90
   18646:	bd70      	pop	{r4, r5, r6, pc}
   18648:	462a      	mov	r2, r5
   1864a:	4620      	mov	r0, r4
   1864c:	a902      	add	r1, sp, #8
   1864e:	f000 fda9 	bl	191a4 <ProcessHashDrv>
   18652:	2800      	cmp	r0, #0
   18654:	d1f5      	bne.n	18642 <mbedtls_sha_finish_internal+0x22>
   18656:	4620      	mov	r0, r4
   18658:	f000 fec2 	bl	193e0 <FinishHashDrv>
   1865c:	2800      	cmp	r0, #0
   1865e:	d1f0      	bne.n	18642 <mbedtls_sha_finish_internal+0x22>
   18660:	6620      	str	r0, [r4, #96]	; 0x60
   18662:	b024      	add	sp, #144	; 0x90
   18664:	bd70      	pop	{r4, r5, r6, pc}
   18666:	2d80      	cmp	r5, #128	; 0x80
   18668:	462a      	mov	r2, r5
   1866a:	4630      	mov	r0, r6
   1866c:	bf28      	it	cs
   1866e:	2280      	movcs	r2, #128	; 0x80
   18670:	f104 0164 	add.w	r1, r4, #100	; 0x64
   18674:	f000 fc8a 	bl	18f8c <CC_PalMemCopyPlat>
   18678:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1867a:	e7d7      	b.n	1862c <mbedtls_sha_finish_internal+0xc>

0001867c <mbedtls_sha_update_internal>:
   1867c:	2800      	cmp	r0, #0
   1867e:	d055      	beq.n	1872c <mbedtls_sha_update_internal+0xb0>
   18680:	b5f0      	push	{r4, r5, r6, r7, lr}
   18682:	4615      	mov	r5, r2
   18684:	b0a5      	sub	sp, #148	; 0x94
   18686:	b1b2      	cbz	r2, 186b6 <mbedtls_sha_update_internal+0x3a>
   18688:	460e      	mov	r6, r1
   1868a:	b351      	cbz	r1, 186e2 <mbedtls_sha_update_internal+0x66>
   1868c:	4604      	mov	r4, r0
   1868e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   18692:	1a1a      	subs	r2, r3, r0
   18694:	fbb2 f7f3 	udiv	r7, r2, r3
   18698:	fb03 2717 	mls	r7, r3, r7, r2
   1869c:	42af      	cmp	r7, r5
   1869e:	bf28      	it	cs
   186a0:	462f      	movcs	r7, r5
   186a2:	2f00      	cmp	r7, #0
   186a4:	d144      	bne.n	18730 <mbedtls_sha_update_internal+0xb4>
   186a6:	4283      	cmp	r3, r0
   186a8:	d008      	beq.n	186bc <mbedtls_sha_update_internal+0x40>
   186aa:	fbb5 f7f3 	udiv	r7, r5, r3
   186ae:	fb03 f707 	mul.w	r7, r3, r7
   186b2:	b9cf      	cbnz	r7, 186e8 <mbedtls_sha_update_internal+0x6c>
   186b4:	bb6d      	cbnz	r5, 18712 <mbedtls_sha_update_internal+0x96>
   186b6:	4628      	mov	r0, r5
   186b8:	b025      	add	sp, #148	; 0x94
   186ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186bc:	2b80      	cmp	r3, #128	; 0x80
   186be:	bf28      	it	cs
   186c0:	2380      	movcs	r3, #128	; 0x80
   186c2:	f104 0164 	add.w	r1, r4, #100	; 0x64
   186c6:	461a      	mov	r2, r3
   186c8:	a804      	add	r0, sp, #16
   186ca:	f000 fc5f 	bl	18f8c <CC_PalMemCopyPlat>
   186ce:	2300      	movs	r3, #0
   186d0:	e9cd 3300 	strd	r3, r3, [sp]
   186d4:	a804      	add	r0, sp, #16
   186d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   186d8:	aa02      	add	r2, sp, #8
   186da:	f000 fd07 	bl	190ec <SetDataBuffersInfo>
   186de:	2800      	cmp	r0, #0
   186e0:	d033      	beq.n	1874a <mbedtls_sha_update_internal+0xce>
   186e2:	2001      	movs	r0, #1
   186e4:	b025      	add	sp, #148	; 0x94
   186e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186e8:	2300      	movs	r3, #0
   186ea:	4639      	mov	r1, r7
   186ec:	4630      	mov	r0, r6
   186ee:	e9cd 3300 	strd	r3, r3, [sp]
   186f2:	aa02      	add	r2, sp, #8
   186f4:	f000 fcfa 	bl	190ec <SetDataBuffersInfo>
   186f8:	2800      	cmp	r0, #0
   186fa:	d1f2      	bne.n	186e2 <mbedtls_sha_update_internal+0x66>
   186fc:	463a      	mov	r2, r7
   186fe:	4620      	mov	r0, r4
   18700:	a902      	add	r1, sp, #8
   18702:	f000 fd4f 	bl	191a4 <ProcessHashDrv>
   18706:	2800      	cmp	r0, #0
   18708:	d1eb      	bne.n	186e2 <mbedtls_sha_update_internal+0x66>
   1870a:	1bed      	subs	r5, r5, r7
   1870c:	443e      	add	r6, r7
   1870e:	2d00      	cmp	r5, #0
   18710:	d0d1      	beq.n	186b6 <mbedtls_sha_update_internal+0x3a>
   18712:	6e20      	ldr	r0, [r4, #96]	; 0x60
   18714:	462a      	mov	r2, r5
   18716:	3019      	adds	r0, #25
   18718:	4631      	mov	r1, r6
   1871a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1871e:	f000 fc35 	bl	18f8c <CC_PalMemCopyPlat>
   18722:	6e22      	ldr	r2, [r4, #96]	; 0x60
   18724:	2000      	movs	r0, #0
   18726:	442a      	add	r2, r5
   18728:	6622      	str	r2, [r4, #96]	; 0x60
   1872a:	e7c5      	b.n	186b8 <mbedtls_sha_update_internal+0x3c>
   1872c:	2001      	movs	r0, #1
   1872e:	4770      	bx	lr
   18730:	f104 0364 	add.w	r3, r4, #100	; 0x64
   18734:	4418      	add	r0, r3
   18736:	463a      	mov	r2, r7
   18738:	f000 fc28 	bl	18f8c <CC_PalMemCopyPlat>
   1873c:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
   18740:	4438      	add	r0, r7
   18742:	443e      	add	r6, r7
   18744:	1bed      	subs	r5, r5, r7
   18746:	6620      	str	r0, [r4, #96]	; 0x60
   18748:	e7ad      	b.n	186a6 <mbedtls_sha_update_internal+0x2a>
   1874a:	4620      	mov	r0, r4
   1874c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1874e:	a902      	add	r1, sp, #8
   18750:	f000 fd28 	bl	191a4 <ProcessHashDrv>
   18754:	2800      	cmp	r0, #0
   18756:	d1c4      	bne.n	186e2 <mbedtls_sha_update_internal+0x66>
   18758:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1875a:	6620      	str	r0, [r4, #96]	; 0x60
   1875c:	e7a5      	b.n	186aa <mbedtls_sha_update_internal+0x2e>
   1875e:	bf00      	nop

00018760 <block_cipher_df>:
   18760:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   18764:	f200 8133 	bhi.w	189ce <block_cipher_df+0x26e>
   18768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1876c:	4f9a      	ldr	r7, [pc, #616]	; (189d8 <block_cipher_df+0x278>)
   1876e:	b0b9      	sub	sp, #228	; 0xe4
   18770:	4691      	mov	r9, r2
   18772:	460d      	mov	r5, r1
   18774:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   18778:	2100      	movs	r1, #0
   1877a:	4680      	mov	r8, r0
   1877c:	4638      	mov	r0, r7
   1877e:	f001 ff8e 	bl	1a69e <memset>
   18782:	a81b      	add	r0, sp, #108	; 0x6c
   18784:	f000 fe6c 	bl	19460 <cc_mbedtls_aes_init>
   18788:	2400      	movs	r4, #0
   1878a:	2330      	movs	r3, #48	; 0x30
   1878c:	fa99 f299 	rev16.w	r2, r9
   18790:	4629      	mov	r1, r5
   18792:	827a      	strh	r2, [r7, #18]
   18794:	f107 0018 	add.w	r0, r7, #24
   18798:	464a      	mov	r2, r9
   1879a:	75fb      	strb	r3, [r7, #23]
   1879c:	823c      	strh	r4, [r7, #16]
   1879e:	f001 ff73 	bl	1a688 <memcpy>
   187a2:	2180      	movs	r1, #128	; 0x80
   187a4:	4623      	mov	r3, r4
   187a6:	eb07 0209 	add.w	r2, r7, r9
   187aa:	7611      	strb	r1, [r2, #24]
   187ac:	f10d 011b 	add.w	r1, sp, #27
   187b0:	f801 3f01 	strb.w	r3, [r1, #1]!
   187b4:	3301      	adds	r3, #1
   187b6:	2b20      	cmp	r3, #32
   187b8:	d1fa      	bne.n	187b0 <block_cipher_df+0x50>
   187ba:	f44f 7280 	mov.w	r2, #256	; 0x100
   187be:	a907      	add	r1, sp, #28
   187c0:	a81b      	add	r0, sp, #108	; 0x6c
   187c2:	f000 fe63 	bl	1948c <cc_mbedtls_aes_setkey_enc>
   187c6:	4603      	mov	r3, r0
   187c8:	2800      	cmp	r0, #0
   187ca:	f040 80df 	bne.w	1898c <block_cipher_df+0x22c>
   187ce:	4682      	mov	sl, r0
   187d0:	f109 0919 	add.w	r9, r9, #25
   187d4:	ae03      	add	r6, sp, #12
   187d6:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   187da:	2210      	movs	r2, #16
   187dc:	2100      	movs	r1, #0
   187de:	4630      	mov	r0, r6
   187e0:	f001 ff5d 	bl	1a69e <memset>
   187e4:	464d      	mov	r5, r9
   187e6:	4c7d      	ldr	r4, [pc, #500]	; (189dc <block_cipher_df+0x27c>)
   187e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
   187ec:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   187f0:	f89d c00d 	ldrb.w	ip, [sp, #13]
   187f4:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   187f8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   187fc:	4053      	eors	r3, r2
   187fe:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   18802:	ea8c 0c01 	eor.w	ip, ip, r1
   18806:	4050      	eors	r0, r2
   18808:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1880c:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
   18810:	f89d e010 	ldrb.w	lr, [sp, #16]
   18814:	4051      	eors	r1, r2
   18816:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
   1881a:	f88d 300c 	strb.w	r3, [sp, #12]
   1881e:	ea8e 0202 	eor.w	r2, lr, r2
   18822:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   18826:	f89d e011 	ldrb.w	lr, [sp, #17]
   1882a:	f88d c00d 	strb.w	ip, [sp, #13]
   1882e:	ea8e 0303 	eor.w	r3, lr, r3
   18832:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
   18836:	f89d e012 	ldrb.w	lr, [sp, #18]
   1883a:	f88d 000e 	strb.w	r0, [sp, #14]
   1883e:	ea8e 0c0c 	eor.w	ip, lr, ip
   18842:	f814 0c09 	ldrb.w	r0, [r4, #-9]
   18846:	f89d e013 	ldrb.w	lr, [sp, #19]
   1884a:	f88d 100f 	strb.w	r1, [sp, #15]
   1884e:	ea8e 0000 	eor.w	r0, lr, r0
   18852:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   18856:	f89d e014 	ldrb.w	lr, [sp, #20]
   1885a:	f88d 2010 	strb.w	r2, [sp, #16]
   1885e:	ea8e 0101 	eor.w	r1, lr, r1
   18862:	f814 2c07 	ldrb.w	r2, [r4, #-7]
   18866:	f89d e015 	ldrb.w	lr, [sp, #21]
   1886a:	f88d 3011 	strb.w	r3, [sp, #17]
   1886e:	ea8e 0202 	eor.w	r2, lr, r2
   18872:	f89d 3016 	ldrb.w	r3, [sp, #22]
   18876:	f814 ec06 	ldrb.w	lr, [r4, #-6]
   1887a:	f88d c012 	strb.w	ip, [sp, #18]
   1887e:	ea83 030e 	eor.w	r3, r3, lr
   18882:	f88d 0013 	strb.w	r0, [sp, #19]
   18886:	f88d 1014 	strb.w	r1, [sp, #20]
   1888a:	f88d 2015 	strb.w	r2, [sp, #21]
   1888e:	f88d 3016 	strb.w	r3, [sp, #22]
   18892:	f89d 1017 	ldrb.w	r1, [sp, #23]
   18896:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   1889a:	f89d c018 	ldrb.w	ip, [sp, #24]
   1889e:	f89d 0019 	ldrb.w	r0, [sp, #25]
   188a2:	404b      	eors	r3, r1
   188a4:	f814 2c04 	ldrb.w	r2, [r4, #-4]
   188a8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   188ac:	ea8c 0202 	eor.w	r2, ip, r2
   188b0:	4041      	eors	r1, r0
   188b2:	f89d c01a 	ldrb.w	ip, [sp, #26]
   188b6:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   188ba:	f89d e01b 	ldrb.w	lr, [sp, #27]
   188be:	ea8c 0000 	eor.w	r0, ip, r0
   188c2:	f814 cc01 	ldrb.w	ip, [r4, #-1]
   188c6:	f88d 3017 	strb.w	r3, [sp, #23]
   188ca:	ea8e 0c0c 	eor.w	ip, lr, ip
   188ce:	4633      	mov	r3, r6
   188d0:	f88d 2018 	strb.w	r2, [sp, #24]
   188d4:	f88d 1019 	strb.w	r1, [sp, #25]
   188d8:	f88d 001a 	strb.w	r0, [sp, #26]
   188dc:	4632      	mov	r2, r6
   188de:	2101      	movs	r1, #1
   188e0:	a81b      	add	r0, sp, #108	; 0x6c
   188e2:	f88d c01b 	strb.w	ip, [sp, #27]
   188e6:	f000 fdf3 	bl	194d0 <cc_mbedtls_aes_crypt_ecb>
   188ea:	2d10      	cmp	r5, #16
   188ec:	4603      	mov	r3, r0
   188ee:	bf94      	ite	ls
   188f0:	1b6d      	subls	r5, r5, r5
   188f2:	3d10      	subhi	r5, #16
   188f4:	2800      	cmp	r0, #0
   188f6:	d14c      	bne.n	18992 <block_cipher_df+0x232>
   188f8:	3410      	adds	r4, #16
   188fa:	2d00      	cmp	r5, #0
   188fc:	f47f af74 	bne.w	187e8 <block_cipher_df+0x88>
   18900:	eb0b 000a 	add.w	r0, fp, sl
   18904:	2210      	movs	r2, #16
   18906:	4631      	mov	r1, r6
   18908:	f001 febe 	bl	1a688 <memcpy>
   1890c:	78fb      	ldrb	r3, [r7, #3]
   1890e:	f10a 0a10 	add.w	sl, sl, #16
   18912:	3301      	adds	r3, #1
   18914:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   18918:	70fb      	strb	r3, [r7, #3]
   1891a:	f47f af5e 	bne.w	187da <block_cipher_df+0x7a>
   1891e:	f44f 7280 	mov.w	r2, #256	; 0x100
   18922:	4659      	mov	r1, fp
   18924:	a81b      	add	r0, sp, #108	; 0x6c
   18926:	f000 fdb1 	bl	1948c <cc_mbedtls_aes_setkey_enc>
   1892a:	4603      	mov	r3, r0
   1892c:	bb88      	cbnz	r0, 18992 <block_cipher_df+0x232>
   1892e:	4644      	mov	r4, r8
   18930:	f108 0530 	add.w	r5, r8, #48	; 0x30
   18934:	ab17      	add	r3, sp, #92	; 0x5c
   18936:	461a      	mov	r2, r3
   18938:	2101      	movs	r1, #1
   1893a:	a81b      	add	r0, sp, #108	; 0x6c
   1893c:	f000 fdc8 	bl	194d0 <cc_mbedtls_aes_crypt_ecb>
   18940:	4603      	mov	r3, r0
   18942:	bb30      	cbnz	r0, 18992 <block_cipher_df+0x232>
   18944:	2210      	movs	r2, #16
   18946:	9001      	str	r0, [sp, #4]
   18948:	a917      	add	r1, sp, #92	; 0x5c
   1894a:	4620      	mov	r0, r4
   1894c:	4414      	add	r4, r2
   1894e:	f001 fe9b 	bl	1a688 <memcpy>
   18952:	42ac      	cmp	r4, r5
   18954:	9b01      	ldr	r3, [sp, #4]
   18956:	d1ed      	bne.n	18934 <block_cipher_df+0x1d4>
   18958:	a81b      	add	r0, sp, #108	; 0x6c
   1895a:	9301      	str	r3, [sp, #4]
   1895c:	f000 fd90 	bl	19480 <cc_mbedtls_aes_free>
   18960:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   18964:	481c      	ldr	r0, [pc, #112]	; (189d8 <block_cipher_df+0x278>)
   18966:	f7ff fd5d 	bl	18424 <mbedtls_platform_zeroize>
   1896a:	4658      	mov	r0, fp
   1896c:	2130      	movs	r1, #48	; 0x30
   1896e:	f7ff fd59 	bl	18424 <mbedtls_platform_zeroize>
   18972:	a807      	add	r0, sp, #28
   18974:	2120      	movs	r1, #32
   18976:	f7ff fd55 	bl	18424 <mbedtls_platform_zeroize>
   1897a:	4630      	mov	r0, r6
   1897c:	2110      	movs	r1, #16
   1897e:	f7ff fd51 	bl	18424 <mbedtls_platform_zeroize>
   18982:	9b01      	ldr	r3, [sp, #4]
   18984:	4618      	mov	r0, r3
   18986:	b039      	add	sp, #228	; 0xe4
   18988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1898c:	ae03      	add	r6, sp, #12
   1898e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   18992:	a81b      	add	r0, sp, #108	; 0x6c
   18994:	9301      	str	r3, [sp, #4]
   18996:	f000 fd73 	bl	19480 <cc_mbedtls_aes_free>
   1899a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1899e:	480e      	ldr	r0, [pc, #56]	; (189d8 <block_cipher_df+0x278>)
   189a0:	f7ff fd40 	bl	18424 <mbedtls_platform_zeroize>
   189a4:	4658      	mov	r0, fp
   189a6:	2130      	movs	r1, #48	; 0x30
   189a8:	f7ff fd3c 	bl	18424 <mbedtls_platform_zeroize>
   189ac:	a807      	add	r0, sp, #28
   189ae:	2120      	movs	r1, #32
   189b0:	f7ff fd38 	bl	18424 <mbedtls_platform_zeroize>
   189b4:	4630      	mov	r0, r6
   189b6:	2110      	movs	r1, #16
   189b8:	f7ff fd34 	bl	18424 <mbedtls_platform_zeroize>
   189bc:	4640      	mov	r0, r8
   189be:	2130      	movs	r1, #48	; 0x30
   189c0:	f7ff fd30 	bl	18424 <mbedtls_platform_zeroize>
   189c4:	9b01      	ldr	r3, [sp, #4]
   189c6:	4618      	mov	r0, r3
   189c8:	b039      	add	sp, #228	; 0xe4
   189ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189ce:	f06f 0337 	mvn.w	r3, #55	; 0x37
   189d2:	4618      	mov	r0, r3
   189d4:	4770      	bx	lr
   189d6:	bf00      	nop
   189d8:	20000f6c 	.word	0x20000f6c
   189dc:	20000f7c 	.word	0x20000f7c

000189e0 <ctr_drbg_update_internal>:
   189e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189e4:	b08c      	sub	sp, #48	; 0x30
   189e6:	4604      	mov	r4, r0
   189e8:	460d      	mov	r5, r1
   189ea:	4668      	mov	r0, sp
   189ec:	2230      	movs	r2, #48	; 0x30
   189ee:	2100      	movs	r1, #0
   189f0:	f001 fe55 	bl	1a69e <memset>
   189f4:	466f      	mov	r7, sp
   189f6:	f104 0620 	add.w	r6, r4, #32
   189fa:	7be2      	ldrb	r2, [r4, #15]
   189fc:	3201      	adds	r2, #1
   189fe:	b2d2      	uxtb	r2, r2
   18a00:	73e2      	strb	r2, [r4, #15]
   18a02:	2a00      	cmp	r2, #0
   18a04:	d14d      	bne.n	18aa2 <ctr_drbg_update_internal+0xc2>
   18a06:	7ba2      	ldrb	r2, [r4, #14]
   18a08:	3201      	adds	r2, #1
   18a0a:	b2d2      	uxtb	r2, r2
   18a0c:	73a2      	strb	r2, [r4, #14]
   18a0e:	2a00      	cmp	r2, #0
   18a10:	d147      	bne.n	18aa2 <ctr_drbg_update_internal+0xc2>
   18a12:	7b63      	ldrb	r3, [r4, #13]
   18a14:	3301      	adds	r3, #1
   18a16:	b2db      	uxtb	r3, r3
   18a18:	7363      	strb	r3, [r4, #13]
   18a1a:	2b00      	cmp	r3, #0
   18a1c:	d141      	bne.n	18aa2 <ctr_drbg_update_internal+0xc2>
   18a1e:	7b23      	ldrb	r3, [r4, #12]
   18a20:	3301      	adds	r3, #1
   18a22:	b2db      	uxtb	r3, r3
   18a24:	7323      	strb	r3, [r4, #12]
   18a26:	2b00      	cmp	r3, #0
   18a28:	d13b      	bne.n	18aa2 <ctr_drbg_update_internal+0xc2>
   18a2a:	7ae3      	ldrb	r3, [r4, #11]
   18a2c:	3301      	adds	r3, #1
   18a2e:	b2db      	uxtb	r3, r3
   18a30:	72e3      	strb	r3, [r4, #11]
   18a32:	2b00      	cmp	r3, #0
   18a34:	d135      	bne.n	18aa2 <ctr_drbg_update_internal+0xc2>
   18a36:	7aa3      	ldrb	r3, [r4, #10]
   18a38:	3301      	adds	r3, #1
   18a3a:	b2db      	uxtb	r3, r3
   18a3c:	72a3      	strb	r3, [r4, #10]
   18a3e:	2b00      	cmp	r3, #0
   18a40:	d12f      	bne.n	18aa2 <ctr_drbg_update_internal+0xc2>
   18a42:	7a63      	ldrb	r3, [r4, #9]
   18a44:	3301      	adds	r3, #1
   18a46:	b2db      	uxtb	r3, r3
   18a48:	7263      	strb	r3, [r4, #9]
   18a4a:	bb53      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a4c:	7a23      	ldrb	r3, [r4, #8]
   18a4e:	3301      	adds	r3, #1
   18a50:	b2db      	uxtb	r3, r3
   18a52:	7223      	strb	r3, [r4, #8]
   18a54:	bb2b      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a56:	79e3      	ldrb	r3, [r4, #7]
   18a58:	3301      	adds	r3, #1
   18a5a:	b2db      	uxtb	r3, r3
   18a5c:	71e3      	strb	r3, [r4, #7]
   18a5e:	bb03      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a60:	79a3      	ldrb	r3, [r4, #6]
   18a62:	3301      	adds	r3, #1
   18a64:	b2db      	uxtb	r3, r3
   18a66:	71a3      	strb	r3, [r4, #6]
   18a68:	b9db      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a6a:	7963      	ldrb	r3, [r4, #5]
   18a6c:	3301      	adds	r3, #1
   18a6e:	b2db      	uxtb	r3, r3
   18a70:	7163      	strb	r3, [r4, #5]
   18a72:	b9b3      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a74:	7923      	ldrb	r3, [r4, #4]
   18a76:	3301      	adds	r3, #1
   18a78:	b2db      	uxtb	r3, r3
   18a7a:	7123      	strb	r3, [r4, #4]
   18a7c:	b98b      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a7e:	78e3      	ldrb	r3, [r4, #3]
   18a80:	3301      	adds	r3, #1
   18a82:	b2db      	uxtb	r3, r3
   18a84:	70e3      	strb	r3, [r4, #3]
   18a86:	b963      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a88:	78a3      	ldrb	r3, [r4, #2]
   18a8a:	3301      	adds	r3, #1
   18a8c:	b2db      	uxtb	r3, r3
   18a8e:	70a3      	strb	r3, [r4, #2]
   18a90:	b93b      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a92:	7863      	ldrb	r3, [r4, #1]
   18a94:	3301      	adds	r3, #1
   18a96:	b2db      	uxtb	r3, r3
   18a98:	7063      	strb	r3, [r4, #1]
   18a9a:	b913      	cbnz	r3, 18aa2 <ctr_drbg_update_internal+0xc2>
   18a9c:	7823      	ldrb	r3, [r4, #0]
   18a9e:	3301      	adds	r3, #1
   18aa0:	7023      	strb	r3, [r4, #0]
   18aa2:	463b      	mov	r3, r7
   18aa4:	4622      	mov	r2, r4
   18aa6:	2101      	movs	r1, #1
   18aa8:	4630      	mov	r0, r6
   18aaa:	f000 fd11 	bl	194d0 <cc_mbedtls_aes_crypt_ecb>
   18aae:	4680      	mov	r8, r0
   18ab0:	2800      	cmp	r0, #0
   18ab2:	d13b      	bne.n	18b2c <ctr_drbg_update_internal+0x14c>
   18ab4:	3710      	adds	r7, #16
   18ab6:	ab0c      	add	r3, sp, #48	; 0x30
   18ab8:	429f      	cmp	r7, r3
   18aba:	d19e      	bne.n	189fa <ctr_drbg_update_internal+0x1a>
   18abc:	9901      	ldr	r1, [sp, #4]
   18abe:	682b      	ldr	r3, [r5, #0]
   18ac0:	9800      	ldr	r0, [sp, #0]
   18ac2:	686a      	ldr	r2, [r5, #4]
   18ac4:	4058      	eors	r0, r3
   18ac6:	404a      	eors	r2, r1
   18ac8:	68ab      	ldr	r3, [r5, #8]
   18aca:	9902      	ldr	r1, [sp, #8]
   18acc:	9000      	str	r0, [sp, #0]
   18ace:	4059      	eors	r1, r3
   18ad0:	9803      	ldr	r0, [sp, #12]
   18ad2:	68eb      	ldr	r3, [r5, #12]
   18ad4:	9201      	str	r2, [sp, #4]
   18ad6:	4043      	eors	r3, r0
   18ad8:	692a      	ldr	r2, [r5, #16]
   18ada:	9804      	ldr	r0, [sp, #16]
   18adc:	9102      	str	r1, [sp, #8]
   18ade:	4050      	eors	r0, r2
   18ae0:	9905      	ldr	r1, [sp, #20]
   18ae2:	696a      	ldr	r2, [r5, #20]
   18ae4:	9303      	str	r3, [sp, #12]
   18ae6:	4051      	eors	r1, r2
   18ae8:	69ab      	ldr	r3, [r5, #24]
   18aea:	9a06      	ldr	r2, [sp, #24]
   18aec:	9004      	str	r0, [sp, #16]
   18aee:	405a      	eors	r2, r3
   18af0:	9807      	ldr	r0, [sp, #28]
   18af2:	69eb      	ldr	r3, [r5, #28]
   18af4:	9105      	str	r1, [sp, #20]
   18af6:	4058      	eors	r0, r3
   18af8:	9908      	ldr	r1, [sp, #32]
   18afa:	6a2b      	ldr	r3, [r5, #32]
   18afc:	9206      	str	r2, [sp, #24]
   18afe:	4059      	eors	r1, r3
   18b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18b02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18b04:	9007      	str	r0, [sp, #28]
   18b06:	405a      	eors	r2, r3
   18b08:	980a      	ldr	r0, [sp, #40]	; 0x28
   18b0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18b0c:	9108      	str	r1, [sp, #32]
   18b0e:	4043      	eors	r3, r0
   18b10:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   18b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18b16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   18b18:	4630      	mov	r0, r6
   18b1a:	4053      	eors	r3, r2
   18b1c:	4669      	mov	r1, sp
   18b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
   18b22:	930b      	str	r3, [sp, #44]	; 0x2c
   18b24:	f000 fcb2 	bl	1948c <cc_mbedtls_aes_setkey_enc>
   18b28:	4680      	mov	r8, r0
   18b2a:	b138      	cbz	r0, 18b3c <ctr_drbg_update_internal+0x15c>
   18b2c:	4668      	mov	r0, sp
   18b2e:	2130      	movs	r1, #48	; 0x30
   18b30:	f7ff fc78 	bl	18424 <mbedtls_platform_zeroize>
   18b34:	4640      	mov	r0, r8
   18b36:	b00c      	add	sp, #48	; 0x30
   18b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b3c:	4620      	mov	r0, r4
   18b3e:	2210      	movs	r2, #16
   18b40:	a908      	add	r1, sp, #32
   18b42:	f001 fda1 	bl	1a688 <memcpy>
   18b46:	e7f1      	b.n	18b2c <ctr_drbg_update_internal+0x14c>

00018b48 <mbedtls_ctr_drbg_reseed_internal>:
   18b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b4c:	4604      	mov	r4, r0
   18b4e:	6980      	ldr	r0, [r0, #24]
   18b50:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   18b54:	d853      	bhi.n	18bfe <mbedtls_ctr_drbg_reseed_internal+0xb6>
   18b56:	461d      	mov	r5, r3
   18b58:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   18b5c:	42ab      	cmp	r3, r5
   18b5e:	d34e      	bcc.n	18bfe <mbedtls_ctr_drbg_reseed_internal+0xb6>
   18b60:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   18b64:	1a18      	subs	r0, r3, r0
   18b66:	4290      	cmp	r0, r2
   18b68:	4616      	mov	r6, r2
   18b6a:	d348      	bcc.n	18bfe <mbedtls_ctr_drbg_reseed_internal+0xb6>
   18b6c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 18c0c <mbedtls_ctr_drbg_reseed_internal+0xc4>
   18b70:	f44f 72c0 	mov.w	r2, #384	; 0x180
   18b74:	460f      	mov	r7, r1
   18b76:	4640      	mov	r0, r8
   18b78:	2100      	movs	r1, #0
   18b7a:	f001 fd90 	bl	1a69e <memset>
   18b7e:	4641      	mov	r1, r8
   18b80:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   18b84:	69a2      	ldr	r2, [r4, #24]
   18b86:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   18b8a:	4798      	blx	r3
   18b8c:	2800      	cmp	r0, #0
   18b8e:	d139      	bne.n	18c04 <mbedtls_ctr_drbg_reseed_internal+0xbc>
   18b90:	f8d4 9018 	ldr.w	r9, [r4, #24]
   18b94:	b145      	cbz	r5, 18ba8 <mbedtls_ctr_drbg_reseed_internal+0x60>
   18b96:	462a      	mov	r2, r5
   18b98:	4641      	mov	r1, r8
   18b9a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   18b9e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   18ba2:	4798      	blx	r3
   18ba4:	bb70      	cbnz	r0, 18c04 <mbedtls_ctr_drbg_reseed_internal+0xbc>
   18ba6:	44a9      	add	r9, r5
   18ba8:	b107      	cbz	r7, 18bac <mbedtls_ctr_drbg_reseed_internal+0x64>
   18baa:	b9c6      	cbnz	r6, 18bde <mbedtls_ctr_drbg_reseed_internal+0x96>
   18bac:	4917      	ldr	r1, [pc, #92]	; (18c0c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   18bae:	464a      	mov	r2, r9
   18bb0:	4608      	mov	r0, r1
   18bb2:	f7ff fdd5 	bl	18760 <block_cipher_df>
   18bb6:	4605      	mov	r5, r0
   18bb8:	b138      	cbz	r0, 18bca <mbedtls_ctr_drbg_reseed_internal+0x82>
   18bba:	f44f 71c0 	mov.w	r1, #384	; 0x180
   18bbe:	4813      	ldr	r0, [pc, #76]	; (18c0c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   18bc0:	f7ff fc30 	bl	18424 <mbedtls_platform_zeroize>
   18bc4:	4628      	mov	r0, r5
   18bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18bca:	4620      	mov	r0, r4
   18bcc:	490f      	ldr	r1, [pc, #60]	; (18c0c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   18bce:	f7ff ff07 	bl	189e0 <ctr_drbg_update_internal>
   18bd2:	4605      	mov	r5, r0
   18bd4:	2800      	cmp	r0, #0
   18bd6:	d1f0      	bne.n	18bba <mbedtls_ctr_drbg_reseed_internal+0x72>
   18bd8:	2301      	movs	r3, #1
   18bda:	6123      	str	r3, [r4, #16]
   18bdc:	e7ed      	b.n	18bba <mbedtls_ctr_drbg_reseed_internal+0x72>
   18bde:	4639      	mov	r1, r7
   18be0:	4632      	mov	r2, r6
   18be2:	eb08 0009 	add.w	r0, r8, r9
   18be6:	f001 fd4f 	bl	1a688 <memcpy>
   18bea:	4908      	ldr	r1, [pc, #32]	; (18c0c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   18bec:	44b1      	add	r9, r6
   18bee:	464a      	mov	r2, r9
   18bf0:	4608      	mov	r0, r1
   18bf2:	f7ff fdb5 	bl	18760 <block_cipher_df>
   18bf6:	4605      	mov	r5, r0
   18bf8:	2800      	cmp	r0, #0
   18bfa:	d1de      	bne.n	18bba <mbedtls_ctr_drbg_reseed_internal+0x72>
   18bfc:	e7e5      	b.n	18bca <mbedtls_ctr_drbg_reseed_internal+0x82>
   18bfe:	f06f 0537 	mvn.w	r5, #55	; 0x37
   18c02:	e7df      	b.n	18bc4 <mbedtls_ctr_drbg_reseed_internal+0x7c>
   18c04:	f06f 0533 	mvn.w	r5, #51	; 0x33
   18c08:	e7dc      	b.n	18bc4 <mbedtls_ctr_drbg_reseed_internal+0x7c>
   18c0a:	bf00      	nop
   18c0c:	2000110c 	.word	0x2000110c

00018c10 <cc_mbedtls_ctr_drbg_init>:
   18c10:	b510      	push	{r4, lr}
   18c12:	22a4      	movs	r2, #164	; 0xa4
   18c14:	2100      	movs	r1, #0
   18c16:	4604      	mov	r4, r0
   18c18:	f001 fd41 	bl	1a69e <memset>
   18c1c:	f04f 32ff 	mov.w	r2, #4294967295
   18c20:	4b03      	ldr	r3, [pc, #12]	; (18c30 <cc_mbedtls_ctr_drbg_init+0x20>)
   18c22:	6122      	str	r2, [r4, #16]
   18c24:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   18c28:	681b      	ldr	r3, [r3, #0]
   18c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18c2e:	4718      	bx	r3
   18c30:	200000b0 	.word	0x200000b0

00018c34 <cc_mbedtls_ctr_drbg_seed>:
   18c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c38:	4606      	mov	r6, r0
   18c3a:	b089      	sub	sp, #36	; 0x24
   18c3c:	468a      	mov	sl, r1
   18c3e:	4691      	mov	r9, r2
   18c40:	2100      	movs	r1, #0
   18c42:	2220      	movs	r2, #32
   18c44:	4668      	mov	r0, sp
   18c46:	461f      	mov	r7, r3
   18c48:	f001 fd29 	bl	1a69e <memset>
   18c4c:	4b20      	ldr	r3, [pc, #128]	; (18cd0 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   18c4e:	f106 089c 	add.w	r8, r6, #156	; 0x9c
   18c52:	4640      	mov	r0, r8
   18c54:	681b      	ldr	r3, [r3, #0]
   18c56:	4798      	blx	r3
   18c58:	4604      	mov	r4, r0
   18c5a:	b118      	cbz	r0, 18c64 <cc_mbedtls_ctr_drbg_seed+0x30>
   18c5c:	4620      	mov	r0, r4
   18c5e:	b009      	add	sp, #36	; 0x24
   18c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c64:	f106 0b20 	add.w	fp, r6, #32
   18c68:	4658      	mov	r0, fp
   18c6a:	f000 fbf9 	bl	19460 <cc_mbedtls_aes_init>
   18c6e:	69b5      	ldr	r5, [r6, #24]
   18c70:	e9c6 a925 	strd	sl, r9, [r6, #148]	; 0x94
   18c74:	bb15      	cbnz	r5, 18cbc <cc_mbedtls_ctr_drbg_seed+0x88>
   18c76:	2520      	movs	r5, #32
   18c78:	6933      	ldr	r3, [r6, #16]
   18c7a:	61b5      	str	r5, [r6, #24]
   18c7c:	2b00      	cmp	r3, #0
   18c7e:	db24      	blt.n	18cca <cc_mbedtls_ctr_drbg_seed+0x96>
   18c80:	461d      	mov	r5, r3
   18c82:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   18c86:	4669      	mov	r1, sp
   18c88:	4658      	mov	r0, fp
   18c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
   18c8e:	61f3      	str	r3, [r6, #28]
   18c90:	f000 fbfc 	bl	1948c <cc_mbedtls_aes_setkey_enc>
   18c94:	4604      	mov	r4, r0
   18c96:	b930      	cbnz	r0, 18ca6 <cc_mbedtls_ctr_drbg_seed+0x72>
   18c98:	462b      	mov	r3, r5
   18c9a:	4639      	mov	r1, r7
   18c9c:	4630      	mov	r0, r6
   18c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18ca0:	f7ff ff52 	bl	18b48 <mbedtls_ctr_drbg_reseed_internal>
   18ca4:	4604      	mov	r4, r0
   18ca6:	4b0b      	ldr	r3, [pc, #44]	; (18cd4 <cc_mbedtls_ctr_drbg_seed+0xa0>)
   18ca8:	4640      	mov	r0, r8
   18caa:	681b      	ldr	r3, [r3, #0]
   18cac:	4798      	blx	r3
   18cae:	2800      	cmp	r0, #0
   18cb0:	bf18      	it	ne
   18cb2:	4604      	movne	r4, r0
   18cb4:	4620      	mov	r0, r4
   18cb6:	b009      	add	sp, #36	; 0x24
   18cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cbc:	6933      	ldr	r3, [r6, #16]
   18cbe:	2b00      	cmp	r3, #0
   18cc0:	dade      	bge.n	18c80 <cc_mbedtls_ctr_drbg_seed+0x4c>
   18cc2:	2d2f      	cmp	r5, #47	; 0x2f
   18cc4:	bf88      	it	hi
   18cc6:	4625      	movhi	r5, r4
   18cc8:	d8db      	bhi.n	18c82 <cc_mbedtls_ctr_drbg_seed+0x4e>
   18cca:	3501      	adds	r5, #1
   18ccc:	086d      	lsrs	r5, r5, #1
   18cce:	e7d8      	b.n	18c82 <cc_mbedtls_ctr_drbg_seed+0x4e>
   18cd0:	200000b4 	.word	0x200000b4
   18cd4:	200000b8 	.word	0x200000b8

00018cd8 <cc_mbedtls_ctr_drbg_random_with_add>:
   18cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cdc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   18ce0:	b091      	sub	sp, #68	; 0x44
   18ce2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   18ce6:	f200 80e4 	bhi.w	18eb2 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   18cea:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   18cee:	f200 80dd 	bhi.w	18eac <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   18cf2:	4604      	mov	r4, r0
   18cf4:	4615      	mov	r5, r2
   18cf6:	460e      	mov	r6, r1
   18cf8:	2230      	movs	r2, #48	; 0x30
   18cfa:	2100      	movs	r1, #0
   18cfc:	a804      	add	r0, sp, #16
   18cfe:	461f      	mov	r7, r3
   18d00:	f001 fccd 	bl	1a69e <memset>
   18d04:	4b6c      	ldr	r3, [pc, #432]	; (18eb8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   18d06:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   18d0a:	4648      	mov	r0, r9
   18d0c:	681b      	ldr	r3, [r3, #0]
   18d0e:	4798      	blx	r3
   18d10:	4683      	mov	fp, r0
   18d12:	2800      	cmp	r0, #0
   18d14:	f040 8093 	bne.w	18e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   18d18:	6922      	ldr	r2, [r4, #16]
   18d1a:	69e3      	ldr	r3, [r4, #28]
   18d1c:	429a      	cmp	r2, r3
   18d1e:	f300 8092 	bgt.w	18e46 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   18d22:	6963      	ldr	r3, [r4, #20]
   18d24:	2b00      	cmp	r3, #0
   18d26:	f040 808e 	bne.w	18e46 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   18d2a:	f1b8 0f00 	cmp.w	r8, #0
   18d2e:	f040 80a9 	bne.w	18e84 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   18d32:	f8df a188 	ldr.w	sl, [pc, #392]	; 18ebc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   18d36:	466f      	mov	r7, sp
   18d38:	2d00      	cmp	r5, #0
   18d3a:	f000 8098 	beq.w	18e6e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   18d3e:	466f      	mov	r7, sp
   18d40:	f104 0820 	add.w	r8, r4, #32
   18d44:	e00e      	b.n	18d64 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   18d46:	2d10      	cmp	r5, #16
   18d48:	46ab      	mov	fp, r5
   18d4a:	bf28      	it	cs
   18d4c:	f04f 0b10 	movcs.w	fp, #16
   18d50:	4630      	mov	r0, r6
   18d52:	4639      	mov	r1, r7
   18d54:	465a      	mov	r2, fp
   18d56:	f001 fc97 	bl	1a688 <memcpy>
   18d5a:	ebb5 050b 	subs.w	r5, r5, fp
   18d5e:	445e      	add	r6, fp
   18d60:	f000 8085 	beq.w	18e6e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   18d64:	7be3      	ldrb	r3, [r4, #15]
   18d66:	3301      	adds	r3, #1
   18d68:	b2db      	uxtb	r3, r3
   18d6a:	73e3      	strb	r3, [r4, #15]
   18d6c:	2b00      	cmp	r3, #0
   18d6e:	d14d      	bne.n	18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18d70:	7ba3      	ldrb	r3, [r4, #14]
   18d72:	3301      	adds	r3, #1
   18d74:	b2db      	uxtb	r3, r3
   18d76:	73a3      	strb	r3, [r4, #14]
   18d78:	2b00      	cmp	r3, #0
   18d7a:	d147      	bne.n	18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18d7c:	7b63      	ldrb	r3, [r4, #13]
   18d7e:	3301      	adds	r3, #1
   18d80:	b2db      	uxtb	r3, r3
   18d82:	7363      	strb	r3, [r4, #13]
   18d84:	2b00      	cmp	r3, #0
   18d86:	d141      	bne.n	18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18d88:	7b23      	ldrb	r3, [r4, #12]
   18d8a:	3301      	adds	r3, #1
   18d8c:	b2db      	uxtb	r3, r3
   18d8e:	7323      	strb	r3, [r4, #12]
   18d90:	2b00      	cmp	r3, #0
   18d92:	d13b      	bne.n	18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18d94:	7ae3      	ldrb	r3, [r4, #11]
   18d96:	3301      	adds	r3, #1
   18d98:	b2db      	uxtb	r3, r3
   18d9a:	72e3      	strb	r3, [r4, #11]
   18d9c:	2b00      	cmp	r3, #0
   18d9e:	d135      	bne.n	18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18da0:	7aa3      	ldrb	r3, [r4, #10]
   18da2:	3301      	adds	r3, #1
   18da4:	b2db      	uxtb	r3, r3
   18da6:	72a3      	strb	r3, [r4, #10]
   18da8:	2b00      	cmp	r3, #0
   18daa:	d12f      	bne.n	18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18dac:	7a63      	ldrb	r3, [r4, #9]
   18dae:	3301      	adds	r3, #1
   18db0:	b2db      	uxtb	r3, r3
   18db2:	7263      	strb	r3, [r4, #9]
   18db4:	bb53      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18db6:	7a23      	ldrb	r3, [r4, #8]
   18db8:	3301      	adds	r3, #1
   18dba:	b2db      	uxtb	r3, r3
   18dbc:	7223      	strb	r3, [r4, #8]
   18dbe:	bb2b      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18dc0:	79e3      	ldrb	r3, [r4, #7]
   18dc2:	3301      	adds	r3, #1
   18dc4:	b2db      	uxtb	r3, r3
   18dc6:	71e3      	strb	r3, [r4, #7]
   18dc8:	bb03      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18dca:	79a3      	ldrb	r3, [r4, #6]
   18dcc:	3301      	adds	r3, #1
   18dce:	b2db      	uxtb	r3, r3
   18dd0:	71a3      	strb	r3, [r4, #6]
   18dd2:	b9db      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18dd4:	7963      	ldrb	r3, [r4, #5]
   18dd6:	3301      	adds	r3, #1
   18dd8:	b2db      	uxtb	r3, r3
   18dda:	7163      	strb	r3, [r4, #5]
   18ddc:	b9b3      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18dde:	7923      	ldrb	r3, [r4, #4]
   18de0:	3301      	adds	r3, #1
   18de2:	b2db      	uxtb	r3, r3
   18de4:	7123      	strb	r3, [r4, #4]
   18de6:	b98b      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18de8:	78e3      	ldrb	r3, [r4, #3]
   18dea:	3301      	adds	r3, #1
   18dec:	b2db      	uxtb	r3, r3
   18dee:	70e3      	strb	r3, [r4, #3]
   18df0:	b963      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18df2:	78a3      	ldrb	r3, [r4, #2]
   18df4:	3301      	adds	r3, #1
   18df6:	b2db      	uxtb	r3, r3
   18df8:	70a3      	strb	r3, [r4, #2]
   18dfa:	b93b      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18dfc:	7863      	ldrb	r3, [r4, #1]
   18dfe:	3301      	adds	r3, #1
   18e00:	b2db      	uxtb	r3, r3
   18e02:	7063      	strb	r3, [r4, #1]
   18e04:	b913      	cbnz	r3, 18e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   18e06:	7823      	ldrb	r3, [r4, #0]
   18e08:	3301      	adds	r3, #1
   18e0a:	7023      	strb	r3, [r4, #0]
   18e0c:	463b      	mov	r3, r7
   18e0e:	4622      	mov	r2, r4
   18e10:	2101      	movs	r1, #1
   18e12:	4640      	mov	r0, r8
   18e14:	f000 fb5c 	bl	194d0 <cc_mbedtls_aes_crypt_ecb>
   18e18:	4683      	mov	fp, r0
   18e1a:	2800      	cmp	r0, #0
   18e1c:	d093      	beq.n	18d46 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   18e1e:	f8da 3000 	ldr.w	r3, [sl]
   18e22:	4648      	mov	r0, r9
   18e24:	4798      	blx	r3
   18e26:	4603      	mov	r3, r0
   18e28:	2130      	movs	r1, #48	; 0x30
   18e2a:	a804      	add	r0, sp, #16
   18e2c:	2b00      	cmp	r3, #0
   18e2e:	bf18      	it	ne
   18e30:	469b      	movne	fp, r3
   18e32:	f7ff faf7 	bl	18424 <mbedtls_platform_zeroize>
   18e36:	4638      	mov	r0, r7
   18e38:	2110      	movs	r1, #16
   18e3a:	f7ff faf3 	bl	18424 <mbedtls_platform_zeroize>
   18e3e:	4658      	mov	r0, fp
   18e40:	b011      	add	sp, #68	; 0x44
   18e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e46:	4642      	mov	r2, r8
   18e48:	4639      	mov	r1, r7
   18e4a:	2300      	movs	r3, #0
   18e4c:	4620      	mov	r0, r4
   18e4e:	f7ff fe7b 	bl	18b48 <mbedtls_ctr_drbg_reseed_internal>
   18e52:	f8df a068 	ldr.w	sl, [pc, #104]	; 18ebc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   18e56:	2800      	cmp	r0, #0
   18e58:	f43f af6d 	beq.w	18d36 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   18e5c:	4648      	mov	r0, r9
   18e5e:	f8da 3000 	ldr.w	r3, [sl]
   18e62:	4798      	blx	r3
   18e64:	4683      	mov	fp, r0
   18e66:	2800      	cmp	r0, #0
   18e68:	f43f af65 	beq.w	18d36 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   18e6c:	e7e7      	b.n	18e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   18e6e:	4620      	mov	r0, r4
   18e70:	a904      	add	r1, sp, #16
   18e72:	f7ff fdb5 	bl	189e0 <ctr_drbg_update_internal>
   18e76:	4683      	mov	fp, r0
   18e78:	2800      	cmp	r0, #0
   18e7a:	d1d0      	bne.n	18e1e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   18e7c:	6923      	ldr	r3, [r4, #16]
   18e7e:	3301      	adds	r3, #1
   18e80:	6123      	str	r3, [r4, #16]
   18e82:	e7cc      	b.n	18e1e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   18e84:	4642      	mov	r2, r8
   18e86:	4639      	mov	r1, r7
   18e88:	a804      	add	r0, sp, #16
   18e8a:	f7ff fc69 	bl	18760 <block_cipher_df>
   18e8e:	4683      	mov	fp, r0
   18e90:	b118      	cbz	r0, 18e9a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   18e92:	466f      	mov	r7, sp
   18e94:	f8df a024 	ldr.w	sl, [pc, #36]	; 18ebc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   18e98:	e7c1      	b.n	18e1e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   18e9a:	4620      	mov	r0, r4
   18e9c:	a904      	add	r1, sp, #16
   18e9e:	f7ff fd9f 	bl	189e0 <ctr_drbg_update_internal>
   18ea2:	4683      	mov	fp, r0
   18ea4:	2800      	cmp	r0, #0
   18ea6:	f43f af44 	beq.w	18d32 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   18eaa:	e7f2      	b.n	18e92 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   18eac:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   18eb0:	e7c5      	b.n	18e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   18eb2:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   18eb6:	e7c2      	b.n	18e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   18eb8:	200000b4 	.word	0x200000b4
   18ebc:	200000b8 	.word	0x200000b8

00018ec0 <cc_mbedtls_sha256_ret>:
   18ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ec2:	461c      	mov	r4, r3
   18ec4:	4605      	mov	r5, r0
   18ec6:	4811      	ldr	r0, [pc, #68]	; (18f0c <cc_mbedtls_sha256_ret+0x4c>)
   18ec8:	460e      	mov	r6, r1
   18eca:	4617      	mov	r7, r2
   18ecc:	f7ff fb3a 	bl	18544 <cc_mbedtls_sha256_init>
   18ed0:	4621      	mov	r1, r4
   18ed2:	480e      	ldr	r0, [pc, #56]	; (18f0c <cc_mbedtls_sha256_ret+0x4c>)
   18ed4:	f7ff fb50 	bl	18578 <cc_mbedtls_sha256_starts_ret>
   18ed8:	4604      	mov	r4, r0
   18eda:	b120      	cbz	r0, 18ee6 <cc_mbedtls_sha256_ret+0x26>
   18edc:	480b      	ldr	r0, [pc, #44]	; (18f0c <cc_mbedtls_sha256_ret+0x4c>)
   18ede:	f7ff fb45 	bl	1856c <cc_mbedtls_sha256_free>
   18ee2:	4620      	mov	r0, r4
   18ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ee6:	4632      	mov	r2, r6
   18ee8:	4629      	mov	r1, r5
   18eea:	4808      	ldr	r0, [pc, #32]	; (18f0c <cc_mbedtls_sha256_ret+0x4c>)
   18eec:	f7ff fb58 	bl	185a0 <cc_mbedtls_sha256_update_ret>
   18ef0:	4604      	mov	r4, r0
   18ef2:	2800      	cmp	r0, #0
   18ef4:	d1f2      	bne.n	18edc <cc_mbedtls_sha256_ret+0x1c>
   18ef6:	4639      	mov	r1, r7
   18ef8:	4804      	ldr	r0, [pc, #16]	; (18f0c <cc_mbedtls_sha256_ret+0x4c>)
   18efa:	f7ff fb59 	bl	185b0 <cc_mbedtls_sha256_finish_ret>
   18efe:	4604      	mov	r4, r0
   18f00:	4802      	ldr	r0, [pc, #8]	; (18f0c <cc_mbedtls_sha256_ret+0x4c>)
   18f02:	f7ff fb33 	bl	1856c <cc_mbedtls_sha256_free>
   18f06:	4620      	mov	r0, r4
   18f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18f0a:	bf00      	nop
   18f0c:	2000128c 	.word	0x2000128c

00018f10 <RNG_PLAT_SetUserRngParameters>:
   18f10:	231c      	movs	r3, #28
   18f12:	b530      	push	{r4, r5, lr}
   18f14:	b083      	sub	sp, #12
   18f16:	a901      	add	r1, sp, #4
   18f18:	4604      	mov	r4, r0
   18f1a:	9301      	str	r3, [sp, #4]
   18f1c:	f000 f83e 	bl	18f9c <CC_PalTrngParamGet>
   18f20:	4605      	mov	r5, r0
   18f22:	b938      	cbnz	r0, 18f34 <RNG_PLAT_SetUserRngParameters+0x24>
   18f24:	9b01      	ldr	r3, [sp, #4]
   18f26:	2b1c      	cmp	r3, #28
   18f28:	d007      	beq.n	18f3a <RNG_PLAT_SetUserRngParameters+0x2a>
   18f2a:	4d16      	ldr	r5, [pc, #88]	; (18f84 <RNG_PLAT_SetUserRngParameters+0x74>)
   18f2c:	4620      	mov	r0, r4
   18f2e:	211c      	movs	r1, #28
   18f30:	f000 f830 	bl	18f94 <CC_PalMemSetZeroPlat>
   18f34:	4628      	mov	r0, r5
   18f36:	b003      	add	sp, #12
   18f38:	bd30      	pop	{r4, r5, pc}
   18f3a:	2101      	movs	r1, #1
   18f3c:	e9d4 3200 	ldrd	r3, r2, [r4]
   18f40:	3b00      	subs	r3, #0
   18f42:	bf18      	it	ne
   18f44:	2301      	movne	r3, #1
   18f46:	61e1      	str	r1, [r4, #28]
   18f48:	b10a      	cbz	r2, 18f4e <RNG_PLAT_SetUserRngParameters+0x3e>
   18f4a:	f043 0302 	orr.w	r3, r3, #2
   18f4e:	68a2      	ldr	r2, [r4, #8]
   18f50:	b932      	cbnz	r2, 18f60 <RNG_PLAT_SetUserRngParameters+0x50>
   18f52:	68e2      	ldr	r2, [r4, #12]
   18f54:	b942      	cbnz	r2, 18f68 <RNG_PLAT_SetUserRngParameters+0x58>
   18f56:	e9c4 3208 	strd	r3, r2, [r4, #32]
   18f5a:	b98b      	cbnz	r3, 18f80 <RNG_PLAT_SetUserRngParameters+0x70>
   18f5c:	4d0a      	ldr	r5, [pc, #40]	; (18f88 <RNG_PLAT_SetUserRngParameters+0x78>)
   18f5e:	e7e5      	b.n	18f2c <RNG_PLAT_SetUserRngParameters+0x1c>
   18f60:	68e2      	ldr	r2, [r4, #12]
   18f62:	f043 0304 	orr.w	r3, r3, #4
   18f66:	b13a      	cbz	r2, 18f78 <RNG_PLAT_SetUserRngParameters+0x68>
   18f68:	2200      	movs	r2, #0
   18f6a:	4628      	mov	r0, r5
   18f6c:	f043 0308 	orr.w	r3, r3, #8
   18f70:	e9c4 3208 	strd	r3, r2, [r4, #32]
   18f74:	b003      	add	sp, #12
   18f76:	bd30      	pop	{r4, r5, pc}
   18f78:	4615      	mov	r5, r2
   18f7a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   18f7e:	e7d9      	b.n	18f34 <RNG_PLAT_SetUserRngParameters+0x24>
   18f80:	4615      	mov	r5, r2
   18f82:	e7d7      	b.n	18f34 <RNG_PLAT_SetUserRngParameters+0x24>
   18f84:	00f00c37 	.word	0x00f00c37
   18f88:	00f00c0e 	.word	0x00f00c0e

00018f8c <CC_PalMemCopyPlat>:
   18f8c:	f001 bb65 	b.w	1a65a <memmove>

00018f90 <CC_PalMemSetPlat>:
   18f90:	f001 bb85 	b.w	1a69e <memset>

00018f94 <CC_PalMemSetZeroPlat>:
   18f94:	460a      	mov	r2, r1
   18f96:	2100      	movs	r1, #0
   18f98:	f001 bb81 	b.w	1a69e <memset>

00018f9c <CC_PalTrngParamGet>:
   18f9c:	b118      	cbz	r0, 18fa6 <CC_PalTrngParamGet+0xa>
   18f9e:	b111      	cbz	r1, 18fa6 <CC_PalTrngParamGet+0xa>
   18fa0:	680b      	ldr	r3, [r1, #0]
   18fa2:	2b1c      	cmp	r3, #28
   18fa4:	d001      	beq.n	18faa <CC_PalTrngParamGet+0xe>
   18fa6:	2001      	movs	r0, #1
   18fa8:	4770      	bx	lr
   18faa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   18fae:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   18fb2:	3201      	adds	r2, #1
   18fb4:	bf0c      	ite	eq
   18fb6:	f240 52dc 	movweq	r2, #1500	; 0x5dc
   18fba:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   18fbe:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   18fc2:	6002      	str	r2, [r0, #0]
   18fc4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   18fc8:	3201      	adds	r2, #1
   18fca:	bf0c      	ite	eq
   18fcc:	f240 52dc 	movweq	r2, #1500	; 0x5dc
   18fd0:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   18fd4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   18fd8:	6042      	str	r2, [r0, #4]
   18fda:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   18fde:	3201      	adds	r2, #1
   18fe0:	bf0c      	ite	eq
   18fe2:	f640 0234 	movweq	r2, #2100	; 0x834
   18fe6:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   18fea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   18fee:	6082      	str	r2, [r0, #8]
   18ff0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   18ff4:	3201      	adds	r2, #1
   18ff6:	bf0c      	ite	eq
   18ff8:	f640 0234 	movweq	r2, #2100	; 0x834
   18ffc:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   19000:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   19004:	60c2      	str	r2, [r0, #12]
   19006:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1900a:	3201      	adds	r2, #1
   1900c:	bf0c      	ite	eq
   1900e:	2290      	moveq	r2, #144	; 0x90
   19010:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   19014:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   19018:	6102      	str	r2, [r0, #16]
   1901a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1901e:	3201      	adds	r2, #1
   19020:	bf0c      	ite	eq
   19022:	2251      	moveq	r2, #81	; 0x51
   19024:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   19028:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1902c:	6142      	str	r2, [r0, #20]
   1902e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   19032:	3201      	adds	r2, #1
   19034:	bf0c      	ite	eq
   19036:	f240 3337 	movweq	r3, #823	; 0x337
   1903a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1903e:	6183      	str	r3, [r0, #24]
   19040:	2000      	movs	r0, #0
   19042:	4770      	bx	lr

00019044 <LLF_RND_WaitRngInterrupt>:
   19044:	4601      	mov	r1, r0
   19046:	b508      	push	{r3, lr}
   19048:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1904c:	f7fe fe22 	bl	17c94 <CC_HalWaitInterruptRND>
   19050:	2300      	movs	r3, #0
   19052:	4902      	ldr	r1, [pc, #8]	; (1905c <LLF_RND_WaitRngInterrupt+0x18>)
   19054:	4a02      	ldr	r2, [pc, #8]	; (19060 <LLF_RND_WaitRngInterrupt+0x1c>)
   19056:	600b      	str	r3, [r1, #0]
   19058:	6013      	str	r3, [r2, #0]
   1905a:	bd08      	pop	{r3, pc}
   1905c:	508451c8 	.word	0x508451c8
   19060:	5084512c 	.word	0x5084512c

00019064 <LLF_RND_GetRoscSampleCnt>:
   19064:	3801      	subs	r0, #1
   19066:	2807      	cmp	r0, #7
   19068:	d805      	bhi.n	19076 <LLF_RND_GetRoscSampleCnt+0x12>
   1906a:	e8df f000 	tbb	[pc, r0]
   1906e:	0e0a      	.short	0x0e0a
   19070:	04041204 	.word	0x04041204
   19074:	0604      	.short	0x0604
   19076:	4809      	ldr	r0, [pc, #36]	; (1909c <LLF_RND_GetRoscSampleCnt+0x38>)
   19078:	4770      	bx	lr
   1907a:	68cb      	ldr	r3, [r1, #12]
   1907c:	2000      	movs	r0, #0
   1907e:	624b      	str	r3, [r1, #36]	; 0x24
   19080:	4770      	bx	lr
   19082:	680b      	ldr	r3, [r1, #0]
   19084:	2000      	movs	r0, #0
   19086:	624b      	str	r3, [r1, #36]	; 0x24
   19088:	4770      	bx	lr
   1908a:	684b      	ldr	r3, [r1, #4]
   1908c:	2000      	movs	r0, #0
   1908e:	624b      	str	r3, [r1, #36]	; 0x24
   19090:	4770      	bx	lr
   19092:	688b      	ldr	r3, [r1, #8]
   19094:	2000      	movs	r0, #0
   19096:	624b      	str	r3, [r1, #36]	; 0x24
   19098:	4770      	bx	lr
   1909a:	bf00      	nop
   1909c:	00f10c31 	.word	0x00f10c31

000190a0 <LLF_RND_GetFastestRosc>:
   190a0:	680b      	ldr	r3, [r1, #0]
   190a2:	e002      	b.n	190aa <LLF_RND_GetFastestRosc+0xa>
   190a4:	2b08      	cmp	r3, #8
   190a6:	600b      	str	r3, [r1, #0]
   190a8:	d806      	bhi.n	190b8 <LLF_RND_GetFastestRosc+0x18>
   190aa:	6a02      	ldr	r2, [r0, #32]
   190ac:	4213      	tst	r3, r2
   190ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
   190b2:	d0f7      	beq.n	190a4 <LLF_RND_GetFastestRosc+0x4>
   190b4:	2000      	movs	r0, #0
   190b6:	4770      	bx	lr
   190b8:	4800      	ldr	r0, [pc, #0]	; (190bc <LLF_RND_GetFastestRosc+0x1c>)
   190ba:	4770      	bx	lr
   190bc:	00f10c31 	.word	0x00f10c31

000190c0 <LLF_RND_TurnOffTrng>:
   190c0:	b508      	push	{r3, lr}
   190c2:	2300      	movs	r3, #0
   190c4:	4a06      	ldr	r2, [pc, #24]	; (190e0 <LLF_RND_TurnOffTrng+0x20>)
   190c6:	4907      	ldr	r1, [pc, #28]	; (190e4 <LLF_RND_TurnOffTrng+0x24>)
   190c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   190cc:	600b      	str	r3, [r1, #0]
   190ce:	6013      	str	r3, [r2, #0]
   190d0:	f7fe fdc6 	bl	17c60 <CC_HalClearInterruptBit>
   190d4:	f04f 32ff 	mov.w	r2, #4294967295
   190d8:	4b03      	ldr	r3, [pc, #12]	; (190e8 <LLF_RND_TurnOffTrng+0x28>)
   190da:	601a      	str	r2, [r3, #0]
   190dc:	bd08      	pop	{r3, pc}
   190de:	bf00      	nop
   190e0:	508451c4 	.word	0x508451c4
   190e4:	5084512c 	.word	0x5084512c
   190e8:	50845108 	.word	0x50845108

000190ec <SetDataBuffersInfo>:
   190ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190f0:	2400      	movs	r4, #0
   190f2:	b082      	sub	sp, #8
   190f4:	4615      	mov	r5, r2
   190f6:	461e      	mov	r6, r3
   190f8:	2201      	movs	r2, #1
   190fa:	f10d 0307 	add.w	r3, sp, #7
   190fe:	4607      	mov	r7, r0
   19100:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   19104:	f88d 4007 	strb.w	r4, [sp, #7]
   19108:	f000 fa0c 	bl	19524 <CC_PalDataBufferAttrGet>
   1910c:	b9d0      	cbnz	r0, 19144 <SetDataBuffersInfo+0x58>
   1910e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19112:	4604      	mov	r4, r0
   19114:	602f      	str	r7, [r5, #0]
   19116:	712b      	strb	r3, [r5, #4]
   19118:	f1b8 0f00 	cmp.w	r8, #0
   1911c:	d00e      	beq.n	1913c <SetDataBuffersInfo+0x50>
   1911e:	b14e      	cbz	r6, 19134 <SetDataBuffersInfo+0x48>
   19120:	4602      	mov	r2, r0
   19122:	9908      	ldr	r1, [sp, #32]
   19124:	4630      	mov	r0, r6
   19126:	f10d 0307 	add.w	r3, sp, #7
   1912a:	f000 f9fb 	bl	19524 <CC_PalDataBufferAttrGet>
   1912e:	b948      	cbnz	r0, 19144 <SetDataBuffersInfo+0x58>
   19130:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19134:	f8c8 6000 	str.w	r6, [r8]
   19138:	f888 3004 	strb.w	r3, [r8, #4]
   1913c:	4620      	mov	r0, r4
   1913e:	b002      	add	sp, #8
   19140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19144:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   19148:	4620      	mov	r0, r4
   1914a:	b002      	add	sp, #8
   1914c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019150 <InitHashDrv>:
   19150:	b1e8      	cbz	r0, 1918e <InitHashDrv+0x3e>
   19152:	b510      	push	{r4, lr}
   19154:	6804      	ldr	r4, [r0, #0]
   19156:	2c01      	cmp	r4, #1
   19158:	d004      	beq.n	19164 <InitHashDrv+0x14>
   1915a:	2c02      	cmp	r4, #2
   1915c:	d010      	beq.n	19180 <InitHashDrv+0x30>
   1915e:	b144      	cbz	r4, 19172 <InitHashDrv+0x22>
   19160:	480c      	ldr	r0, [pc, #48]	; (19194 <InitHashDrv+0x44>)
   19162:	bd10      	pop	{r4, pc}
   19164:	2220      	movs	r2, #32
   19166:	490c      	ldr	r1, [pc, #48]	; (19198 <InitHashDrv+0x48>)
   19168:	3008      	adds	r0, #8
   1916a:	f7ff ff0f 	bl	18f8c <CC_PalMemCopyPlat>
   1916e:	2000      	movs	r0, #0
   19170:	bd10      	pop	{r4, pc}
   19172:	2214      	movs	r2, #20
   19174:	4909      	ldr	r1, [pc, #36]	; (1919c <InitHashDrv+0x4c>)
   19176:	3008      	adds	r0, #8
   19178:	f7ff ff08 	bl	18f8c <CC_PalMemCopyPlat>
   1917c:	4620      	mov	r0, r4
   1917e:	bd10      	pop	{r4, pc}
   19180:	2220      	movs	r2, #32
   19182:	4907      	ldr	r1, [pc, #28]	; (191a0 <InitHashDrv+0x50>)
   19184:	3008      	adds	r0, #8
   19186:	f7ff ff01 	bl	18f8c <CC_PalMemCopyPlat>
   1918a:	2000      	movs	r0, #0
   1918c:	bd10      	pop	{r4, pc}
   1918e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   19192:	4770      	bx	lr
   19194:	00f30001 	.word	0x00f30001
   19198:	0001d4b0 	.word	0x0001d4b0
   1919c:	0001d47c 	.word	0x0001d47c
   191a0:	0001d490 	.word	0x0001d490

000191a4 <ProcessHashDrv>:
   191a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   191a8:	2900      	cmp	r1, #0
   191aa:	f000 80e4 	beq.w	19376 <ProcessHashDrv+0x1d2>
   191ae:	4604      	mov	r4, r0
   191b0:	2800      	cmp	r0, #0
   191b2:	f000 80e4 	beq.w	1937e <ProcessHashDrv+0x1da>
   191b6:	6803      	ldr	r3, [r0, #0]
   191b8:	4690      	mov	r8, r2
   191ba:	460f      	mov	r7, r1
   191bc:	2b00      	cmp	r3, #0
   191be:	f000 80ae 	beq.w	1931e <ProcessHashDrv+0x17a>
   191c2:	3b01      	subs	r3, #1
   191c4:	2b01      	cmp	r3, #1
   191c6:	f200 80c2 	bhi.w	1934e <ProcessHashDrv+0x1aa>
   191ca:	f04f 31ff 	mov.w	r1, #4294967295
   191ce:	486d      	ldr	r0, [pc, #436]	; (19384 <ProcessHashDrv+0x1e0>)
   191d0:	f04f 0902 	mov.w	r9, #2
   191d4:	f7fe fdf8 	bl	17dc8 <CC_PalMutexLock>
   191d8:	2800      	cmp	r0, #0
   191da:	f040 80aa 	bne.w	19332 <ProcessHashDrv+0x18e>
   191de:	2000      	movs	r0, #0
   191e0:	f7fe fe22 	bl	17e28 <CC_PalPowerSaveModeSelect>
   191e4:	4606      	mov	r6, r0
   191e6:	2800      	cmp	r0, #0
   191e8:	f040 80ad 	bne.w	19346 <ProcessHashDrv+0x1a2>
   191ec:	4b66      	ldr	r3, [pc, #408]	; (19388 <ProcessHashDrv+0x1e4>)
   191ee:	681d      	ldr	r5, [r3, #0]
   191f0:	2d00      	cmp	r5, #0
   191f2:	d1fc      	bne.n	191ee <ProcessHashDrv+0x4a>
   191f4:	f04f 30ff 	mov.w	r0, #4294967295
   191f8:	f7fe fd32 	bl	17c60 <CC_HalClearInterruptBit>
   191fc:	4b63      	ldr	r3, [pc, #396]	; (1938c <ProcessHashDrv+0x1e8>)
   191fe:	6818      	ldr	r0, [r3, #0]
   19200:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   19204:	f7fe fd3a 	bl	17c7c <CC_HalMaskInterrupt>
   19208:	2301      	movs	r3, #1
   1920a:	2007      	movs	r0, #7
   1920c:	4a60      	ldr	r2, [pc, #384]	; (19390 <ProcessHashDrv+0x1ec>)
   1920e:	4961      	ldr	r1, [pc, #388]	; (19394 <ProcessHashDrv+0x1f0>)
   19210:	6013      	str	r3, [r2, #0]
   19212:	600b      	str	r3, [r1, #0]
   19214:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
   19218:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
   1921c:	f841 3c5c 	str.w	r3, [r1, #-92]
   19220:	6015      	str	r5, [r2, #0]
   19222:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   19224:	4b5c      	ldr	r3, [pc, #368]	; (19398 <ProcessHashDrv+0x1f4>)
   19226:	6019      	str	r1, [r3, #0]
   19228:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1922a:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
   1922e:	f843 9c0c 	str.w	r9, [r3, #-12]
   19232:	6823      	ldr	r3, [r4, #0]
   19234:	f502 7296 	add.w	r2, r2, #300	; 0x12c
   19238:	b163      	cbz	r3, 19254 <ProcessHashDrv+0xb0>
   1923a:	3b01      	subs	r3, #1
   1923c:	2b01      	cmp	r3, #1
   1923e:	d818      	bhi.n	19272 <ProcessHashDrv+0xce>
   19240:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19242:	4b56      	ldr	r3, [pc, #344]	; (1939c <ProcessHashDrv+0x1f8>)
   19244:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
   19248:	6019      	str	r1, [r3, #0]
   1924a:	6a21      	ldr	r1, [r4, #32]
   1924c:	6011      	str	r1, [r2, #0]
   1924e:	69e2      	ldr	r2, [r4, #28]
   19250:	f843 2c08 	str.w	r2, [r3, #-8]
   19254:	69a1      	ldr	r1, [r4, #24]
   19256:	4b52      	ldr	r3, [pc, #328]	; (193a0 <ProcessHashDrv+0x1fc>)
   19258:	4a52      	ldr	r2, [pc, #328]	; (193a4 <ProcessHashDrv+0x200>)
   1925a:	6019      	str	r1, [r3, #0]
   1925c:	6961      	ldr	r1, [r4, #20]
   1925e:	6011      	str	r1, [r2, #0]
   19260:	6921      	ldr	r1, [r4, #16]
   19262:	f843 1c08 	str.w	r1, [r3, #-8]
   19266:	68e1      	ldr	r1, [r4, #12]
   19268:	f842 1c08 	str.w	r1, [r2, #-8]
   1926c:	68a2      	ldr	r2, [r4, #8]
   1926e:	f843 2c10 	str.w	r2, [r3, #-16]
   19272:	f1b8 0f00 	cmp.w	r8, #0
   19276:	d04e      	beq.n	19316 <ProcessHashDrv+0x172>
   19278:	6863      	ldr	r3, [r4, #4]
   1927a:	484b      	ldr	r0, [pc, #300]	; (193a8 <ProcessHashDrv+0x204>)
   1927c:	2b01      	cmp	r3, #1
   1927e:	bf04      	itt	eq
   19280:	4a4a      	ldreq	r2, [pc, #296]	; (193ac <ProcessHashDrv+0x208>)
   19282:	6013      	streq	r3, [r2, #0]
   19284:	793b      	ldrb	r3, [r7, #4]
   19286:	6839      	ldr	r1, [r7, #0]
   19288:	005b      	lsls	r3, r3, #1
   1928a:	f003 0302 	and.w	r3, r3, #2
   1928e:	6003      	str	r3, [r0, #0]
   19290:	4a47      	ldr	r2, [pc, #284]	; (193b0 <ProcessHashDrv+0x20c>)
   19292:	4b48      	ldr	r3, [pc, #288]	; (193b4 <ProcessHashDrv+0x210>)
   19294:	6011      	str	r1, [r2, #0]
   19296:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1929a:	f8c3 8000 	str.w	r8, [r3]
   1929e:	f7fe fcf3 	bl	17c88 <CC_HalWaitInterrupt>
   192a2:	4606      	mov	r6, r0
   192a4:	6823      	ldr	r3, [r4, #0]
   192a6:	b15b      	cbz	r3, 192c0 <ProcessHashDrv+0x11c>
   192a8:	3b01      	subs	r3, #1
   192aa:	2b01      	cmp	r3, #1
   192ac:	d816      	bhi.n	192dc <ProcessHashDrv+0x138>
   192ae:	4b3b      	ldr	r3, [pc, #236]	; (1939c <ProcessHashDrv+0x1f8>)
   192b0:	4a41      	ldr	r2, [pc, #260]	; (193b8 <ProcessHashDrv+0x214>)
   192b2:	6819      	ldr	r1, [r3, #0]
   192b4:	3b08      	subs	r3, #8
   192b6:	6261      	str	r1, [r4, #36]	; 0x24
   192b8:	6812      	ldr	r2, [r2, #0]
   192ba:	6222      	str	r2, [r4, #32]
   192bc:	681b      	ldr	r3, [r3, #0]
   192be:	61e3      	str	r3, [r4, #28]
   192c0:	4b37      	ldr	r3, [pc, #220]	; (193a0 <ProcessHashDrv+0x1fc>)
   192c2:	4a38      	ldr	r2, [pc, #224]	; (193a4 <ProcessHashDrv+0x200>)
   192c4:	6819      	ldr	r1, [r3, #0]
   192c6:	3a08      	subs	r2, #8
   192c8:	61a1      	str	r1, [r4, #24]
   192ca:	6891      	ldr	r1, [r2, #8]
   192cc:	3b10      	subs	r3, #16
   192ce:	6161      	str	r1, [r4, #20]
   192d0:	6899      	ldr	r1, [r3, #8]
   192d2:	6121      	str	r1, [r4, #16]
   192d4:	6812      	ldr	r2, [r2, #0]
   192d6:	60e2      	str	r2, [r4, #12]
   192d8:	681b      	ldr	r3, [r3, #0]
   192da:	60a3      	str	r3, [r4, #8]
   192dc:	2001      	movs	r0, #1
   192de:	2300      	movs	r3, #0
   192e0:	492d      	ldr	r1, [pc, #180]	; (19398 <ProcessHashDrv+0x1f4>)
   192e2:	4a36      	ldr	r2, [pc, #216]	; (193bc <ProcessHashDrv+0x218>)
   192e4:	6809      	ldr	r1, [r1, #0]
   192e6:	64a1      	str	r1, [r4, #72]	; 0x48
   192e8:	6812      	ldr	r2, [r2, #0]
   192ea:	4935      	ldr	r1, [pc, #212]	; (193c0 <ProcessHashDrv+0x21c>)
   192ec:	64e2      	str	r2, [r4, #76]	; 0x4c
   192ee:	6008      	str	r0, [r1, #0]
   192f0:	4a2e      	ldr	r2, [pc, #184]	; (193ac <ProcessHashDrv+0x208>)
   192f2:	4834      	ldr	r0, [pc, #208]	; (193c4 <ProcessHashDrv+0x220>)
   192f4:	6013      	str	r3, [r2, #0]
   192f6:	6003      	str	r3, [r0, #0]
   192f8:	654b      	str	r3, [r1, #84]	; 0x54
   192fa:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
   192fe:	bba6      	cbnz	r6, 1936a <ProcessHashDrv+0x1c6>
   19300:	2001      	movs	r0, #1
   19302:	f7fe fd91 	bl	17e28 <CC_PalPowerSaveModeSelect>
   19306:	bb60      	cbnz	r0, 19362 <ProcessHashDrv+0x1be>
   19308:	481e      	ldr	r0, [pc, #120]	; (19384 <ProcessHashDrv+0x1e0>)
   1930a:	f7fe fd65 	bl	17dd8 <CC_PalMutexUnlock>
   1930e:	bb10      	cbnz	r0, 19356 <ProcessHashDrv+0x1b2>
   19310:	4630      	mov	r0, r6
   19312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19316:	2204      	movs	r2, #4
   19318:	4b2a      	ldr	r3, [pc, #168]	; (193c4 <ProcessHashDrv+0x220>)
   1931a:	601a      	str	r2, [r3, #0]
   1931c:	e7c2      	b.n	192a4 <ProcessHashDrv+0x100>
   1931e:	f04f 31ff 	mov.w	r1, #4294967295
   19322:	4818      	ldr	r0, [pc, #96]	; (19384 <ProcessHashDrv+0x1e0>)
   19324:	f04f 0901 	mov.w	r9, #1
   19328:	f7fe fd4e 	bl	17dc8 <CC_PalMutexLock>
   1932c:	2800      	cmp	r0, #0
   1932e:	f43f af56 	beq.w	191de <ProcessHashDrv+0x3a>
   19332:	4825      	ldr	r0, [pc, #148]	; (193c8 <ProcessHashDrv+0x224>)
   19334:	f7fe f9c8 	bl	176c8 <CC_PalAbort>
   19338:	2000      	movs	r0, #0
   1933a:	f7fe fd75 	bl	17e28 <CC_PalPowerSaveModeSelect>
   1933e:	4606      	mov	r6, r0
   19340:	2800      	cmp	r0, #0
   19342:	f43f af53 	beq.w	191ec <ProcessHashDrv+0x48>
   19346:	4821      	ldr	r0, [pc, #132]	; (193cc <ProcessHashDrv+0x228>)
   19348:	f7fe f9be 	bl	176c8 <CC_PalAbort>
   1934c:	e74e      	b.n	191ec <ProcessHashDrv+0x48>
   1934e:	4e20      	ldr	r6, [pc, #128]	; (193d0 <ProcessHashDrv+0x22c>)
   19350:	4630      	mov	r0, r6
   19352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19356:	481f      	ldr	r0, [pc, #124]	; (193d4 <ProcessHashDrv+0x230>)
   19358:	f7fe f9b6 	bl	176c8 <CC_PalAbort>
   1935c:	4630      	mov	r0, r6
   1935e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19362:	481d      	ldr	r0, [pc, #116]	; (193d8 <ProcessHashDrv+0x234>)
   19364:	f7fe f9b0 	bl	176c8 <CC_PalAbort>
   19368:	e7ce      	b.n	19308 <ProcessHashDrv+0x164>
   1936a:	2110      	movs	r1, #16
   1936c:	f104 0008 	add.w	r0, r4, #8
   19370:	f7ff fe10 	bl	18f94 <CC_PalMemSetZeroPlat>
   19374:	e7c4      	b.n	19300 <ProcessHashDrv+0x15c>
   19376:	4e19      	ldr	r6, [pc, #100]	; (193dc <ProcessHashDrv+0x238>)
   19378:	4630      	mov	r0, r6
   1937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1937e:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   19382:	e7c5      	b.n	19310 <ProcessHashDrv+0x16c>
   19384:	200000a8 	.word	0x200000a8
   19388:	50845910 	.word	0x50845910
   1938c:	50845a04 	.word	0x50845a04
   19390:	50845818 	.word	0x50845818
   19394:	50845820 	.word	0x50845820
   19398:	508457cc 	.word	0x508457cc
   1939c:	5084565c 	.word	0x5084565c
   193a0:	50845650 	.word	0x50845650
   193a4:	5084564c 	.word	0x5084564c
   193a8:	50845b0c 	.word	0x50845b0c
   193ac:	50845684 	.word	0x50845684
   193b0:	50845c28 	.word	0x50845c28
   193b4:	50845c2c 	.word	0x50845c2c
   193b8:	50845658 	.word	0x50845658
   193bc:	508457d0 	.word	0x508457d0
   193c0:	508457c4 	.word	0x508457c4
   193c4:	508457c8 	.word	0x508457c8
   193c8:	0001d3c4 	.word	0x0001d3c4
   193cc:	0001d3dc 	.word	0x0001d3dc
   193d0:	00f30001 	.word	0x00f30001
   193d4:	0001d41c 	.word	0x0001d41c
   193d8:	0001d3fc 	.word	0x0001d3fc
   193dc:	00f30003 	.word	0x00f30003

000193e0 <FinishHashDrv>:
   193e0:	2800      	cmp	r0, #0
   193e2:	d03a      	beq.n	1945a <FinishHashDrv+0x7a>
   193e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193e8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   193ec:	fa92 f882 	rev.w	r8, r2
   193f0:	fa93 fe83 	rev.w	lr, r3
   193f4:	6a02      	ldr	r2, [r0, #32]
   193f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   193f8:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
   193fc:	ba12      	rev	r2, r2
   193fe:	ba24      	rev	r4, r4
   19400:	ba1b      	rev	r3, r3
   19402:	6104      	str	r4, [r0, #16]
   19404:	6202      	str	r2, [r0, #32]
   19406:	6a84      	ldr	r4, [r0, #40]	; 0x28
   19408:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1940a:	6243      	str	r3, [r0, #36]	; 0x24
   1940c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1940e:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
   19412:	ba09      	rev	r1, r1
   19414:	ba36      	rev	r6, r6
   19416:	ba2d      	rev	r5, r5
   19418:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1941a:	6086      	str	r6, [r0, #8]
   1941c:	60c5      	str	r5, [r0, #12]
   1941e:	6b06      	ldr	r6, [r0, #48]	; 0x30
   19420:	6b45      	ldr	r5, [r0, #52]	; 0x34
   19422:	6141      	str	r1, [r0, #20]
   19424:	fa94 fc84 	rev.w	ip, r4
   19428:	ba19      	rev	r1, r3
   1942a:	ba14      	rev	r4, r2
   1942c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1942e:	6c02      	ldr	r2, [r0, #64]	; 0x40
   19430:	ba3f      	rev	r7, r7
   19432:	ba36      	rev	r6, r6
   19434:	ba2d      	rev	r5, r5
   19436:	ba12      	rev	r2, r2
   19438:	ba1b      	rev	r3, r3
   1943a:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1943e:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   19442:	f8c0 8018 	str.w	r8, [r0, #24]
   19446:	f8c0 e01c 	str.w	lr, [r0, #28]
   1944a:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   1944e:	62c7      	str	r7, [r0, #44]	; 0x2c
   19450:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   19454:	2000      	movs	r0, #0
   19456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1945a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1945e:	4770      	bx	lr

00019460 <cc_mbedtls_aes_init>:
   19460:	b510      	push	{r4, lr}
   19462:	4604      	mov	r4, r0
   19464:	b130      	cbz	r0, 19474 <cc_mbedtls_aes_init+0x14>
   19466:	2200      	movs	r2, #0
   19468:	2301      	movs	r3, #1
   1946a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1946e:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   19472:	bd10      	pop	{r4, pc}
   19474:	4801      	ldr	r0, [pc, #4]	; (1947c <cc_mbedtls_aes_init+0x1c>)
   19476:	f7fe f927 	bl	176c8 <CC_PalAbort>
   1947a:	e7f4      	b.n	19466 <cc_mbedtls_aes_init+0x6>
   1947c:	0001d4d0 	.word	0x0001d4d0

00019480 <cc_mbedtls_aes_free>:
   19480:	b118      	cbz	r0, 1948a <cc_mbedtls_aes_free+0xa>
   19482:	2274      	movs	r2, #116	; 0x74
   19484:	2100      	movs	r1, #0
   19486:	f7ff bd83 	b.w	18f90 <CC_PalMemSetPlat>
   1948a:	4770      	bx	lr

0001948c <cc_mbedtls_aes_setkey_enc>:
   1948c:	b1e8      	cbz	r0, 194ca <cc_mbedtls_aes_setkey_enc+0x3e>
   1948e:	b1c9      	cbz	r1, 194c4 <cc_mbedtls_aes_setkey_enc+0x38>
   19490:	b508      	push	{r3, lr}
   19492:	2300      	movs	r3, #0
   19494:	2ac0      	cmp	r2, #192	; 0xc0
   19496:	6383      	str	r3, [r0, #56]	; 0x38
   19498:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   1949c:	d00f      	beq.n	194be <cc_mbedtls_aes_setkey_enc+0x32>
   1949e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   194a2:	d004      	beq.n	194ae <cc_mbedtls_aes_setkey_enc+0x22>
   194a4:	2a80      	cmp	r2, #128	; 0x80
   194a6:	d003      	beq.n	194b0 <cc_mbedtls_aes_setkey_enc+0x24>
   194a8:	f06f 001f 	mvn.w	r0, #31
   194ac:	bd08      	pop	{r3, pc}
   194ae:	2302      	movs	r3, #2
   194b0:	6303      	str	r3, [r0, #48]	; 0x30
   194b2:	08d2      	lsrs	r2, r2, #3
   194b4:	3010      	adds	r0, #16
   194b6:	f7ff fd69 	bl	18f8c <CC_PalMemCopyPlat>
   194ba:	2000      	movs	r0, #0
   194bc:	bd08      	pop	{r3, pc}
   194be:	2301      	movs	r3, #1
   194c0:	6303      	str	r3, [r0, #48]	; 0x30
   194c2:	e7f6      	b.n	194b2 <cc_mbedtls_aes_setkey_enc+0x26>
   194c4:	f06f 001f 	mvn.w	r0, #31
   194c8:	4770      	bx	lr
   194ca:	f06f 0021 	mvn.w	r0, #33	; 0x21
   194ce:	4770      	bx	lr

000194d0 <cc_mbedtls_aes_crypt_ecb>:
   194d0:	b328      	cbz	r0, 1951e <cc_mbedtls_aes_crypt_ecb+0x4e>
   194d2:	b322      	cbz	r2, 1951e <cc_mbedtls_aes_crypt_ecb+0x4e>
   194d4:	b31b      	cbz	r3, 1951e <cc_mbedtls_aes_crypt_ecb+0x4e>
   194d6:	2901      	cmp	r1, #1
   194d8:	d821      	bhi.n	1951e <cc_mbedtls_aes_crypt_ecb+0x4e>
   194da:	b570      	push	{r4, r5, r6, lr}
   194dc:	4604      	mov	r4, r0
   194de:	6b81      	ldr	r1, [r0, #56]	; 0x38
   194e0:	b086      	sub	sp, #24
   194e2:	d017      	beq.n	19514 <cc_mbedtls_aes_crypt_ecb+0x44>
   194e4:	2901      	cmp	r1, #1
   194e6:	d117      	bne.n	19518 <cc_mbedtls_aes_crypt_ecb+0x48>
   194e8:	2510      	movs	r5, #16
   194ea:	2100      	movs	r1, #0
   194ec:	eb0d 0605 	add.w	r6, sp, r5
   194f0:	6361      	str	r1, [r4, #52]	; 0x34
   194f2:	4610      	mov	r0, r2
   194f4:	4629      	mov	r1, r5
   194f6:	9500      	str	r5, [sp, #0]
   194f8:	aa02      	add	r2, sp, #8
   194fa:	9601      	str	r6, [sp, #4]
   194fc:	f7ff fdf6 	bl	190ec <SetDataBuffersInfo>
   19500:	b950      	cbnz	r0, 19518 <cc_mbedtls_aes_crypt_ecb+0x48>
   19502:	462b      	mov	r3, r5
   19504:	4632      	mov	r2, r6
   19506:	4620      	mov	r0, r4
   19508:	a902      	add	r1, sp, #8
   1950a:	f000 f897 	bl	1963c <ProcessAesDrv>
   1950e:	b918      	cbnz	r0, 19518 <cc_mbedtls_aes_crypt_ecb+0x48>
   19510:	b006      	add	sp, #24
   19512:	bd70      	pop	{r4, r5, r6, pc}
   19514:	2900      	cmp	r1, #0
   19516:	d0e7      	beq.n	194e8 <cc_mbedtls_aes_crypt_ecb+0x18>
   19518:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1951c:	e7f8      	b.n	19510 <cc_mbedtls_aes_crypt_ecb+0x40>
   1951e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   19522:	4770      	bx	lr

00019524 <CC_PalDataBufferAttrGet>:
   19524:	2000      	movs	r0, #0
   19526:	7018      	strb	r0, [r3, #0]
   19528:	4770      	bx	lr
   1952a:	bf00      	nop

0001952c <LoadAesKey>:
   1952c:	2800      	cmp	r0, #0
   1952e:	d06e      	beq.n	1960e <LoadAesKey+0xe2>
   19530:	b538      	push	{r3, r4, r5, lr}
   19532:	4604      	mov	r4, r0
   19534:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   19538:	2800      	cmp	r0, #0
   1953a:	d04a      	beq.n	195d2 <LoadAesKey+0xa6>
   1953c:	2802      	cmp	r0, #2
   1953e:	d01e      	beq.n	1957e <LoadAesKey+0x52>
   19540:	4834      	ldr	r0, [pc, #208]	; (19614 <LoadAesKey+0xe8>)
   19542:	4d35      	ldr	r5, [pc, #212]	; (19618 <LoadAesKey+0xec>)
   19544:	682b      	ldr	r3, [r5, #0]
   19546:	4a35      	ldr	r2, [pc, #212]	; (1961c <LoadAesKey+0xf0>)
   19548:	6819      	ldr	r1, [r3, #0]
   1954a:	4b35      	ldr	r3, [pc, #212]	; (19620 <LoadAesKey+0xf4>)
   1954c:	6011      	str	r1, [r2, #0]
   1954e:	682a      	ldr	r2, [r5, #0]
   19550:	4934      	ldr	r1, [pc, #208]	; (19624 <LoadAesKey+0xf8>)
   19552:	6854      	ldr	r4, [r2, #4]
   19554:	4a34      	ldr	r2, [pc, #208]	; (19628 <LoadAesKey+0xfc>)
   19556:	601c      	str	r4, [r3, #0]
   19558:	682c      	ldr	r4, [r5, #0]
   1955a:	68a4      	ldr	r4, [r4, #8]
   1955c:	600c      	str	r4, [r1, #0]
   1955e:	682c      	ldr	r4, [r5, #0]
   19560:	68e4      	ldr	r4, [r4, #12]
   19562:	6014      	str	r4, [r2, #0]
   19564:	682c      	ldr	r4, [r5, #0]
   19566:	6924      	ldr	r4, [r4, #16]
   19568:	60dc      	str	r4, [r3, #12]
   1956a:	682c      	ldr	r4, [r5, #0]
   1956c:	6964      	ldr	r4, [r4, #20]
   1956e:	60cc      	str	r4, [r1, #12]
   19570:	6829      	ldr	r1, [r5, #0]
   19572:	6989      	ldr	r1, [r1, #24]
   19574:	60d1      	str	r1, [r2, #12]
   19576:	682a      	ldr	r2, [r5, #0]
   19578:	69d2      	ldr	r2, [r2, #28]
   1957a:	619a      	str	r2, [r3, #24]
   1957c:	bd38      	pop	{r3, r4, r5, pc}
   1957e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19580:	6c20      	ldr	r0, [r4, #64]	; 0x40
   19582:	f000 fbdf 	bl	19d44 <kmu_validate_slot_and_size_no_kdr>
   19586:	4d24      	ldr	r5, [pc, #144]	; (19618 <LoadAesKey+0xec>)
   19588:	2800      	cmp	r0, #0
   1958a:	d1db      	bne.n	19544 <LoadAesKey+0x18>
   1958c:	6829      	ldr	r1, [r5, #0]
   1958e:	4a23      	ldr	r2, [pc, #140]	; (1961c <LoadAesKey+0xf0>)
   19590:	6808      	ldr	r0, [r1, #0]
   19592:	4b23      	ldr	r3, [pc, #140]	; (19620 <LoadAesKey+0xf4>)
   19594:	6010      	str	r0, [r2, #0]
   19596:	6828      	ldr	r0, [r5, #0]
   19598:	4922      	ldr	r1, [pc, #136]	; (19624 <LoadAesKey+0xf8>)
   1959a:	6840      	ldr	r0, [r0, #4]
   1959c:	6018      	str	r0, [r3, #0]
   1959e:	6828      	ldr	r0, [r5, #0]
   195a0:	6880      	ldr	r0, [r0, #8]
   195a2:	6008      	str	r0, [r1, #0]
   195a4:	6828      	ldr	r0, [r5, #0]
   195a6:	68c0      	ldr	r0, [r0, #12]
   195a8:	60d0      	str	r0, [r2, #12]
   195aa:	6828      	ldr	r0, [r5, #0]
   195ac:	6900      	ldr	r0, [r0, #16]
   195ae:	60d8      	str	r0, [r3, #12]
   195b0:	6828      	ldr	r0, [r5, #0]
   195b2:	6940      	ldr	r0, [r0, #20]
   195b4:	60c8      	str	r0, [r1, #12]
   195b6:	6829      	ldr	r1, [r5, #0]
   195b8:	6989      	ldr	r1, [r1, #24]
   195ba:	6191      	str	r1, [r2, #24]
   195bc:	682a      	ldr	r2, [r5, #0]
   195be:	69d2      	ldr	r2, [r2, #28]
   195c0:	619a      	str	r2, [r3, #24]
   195c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   195c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   195c6:	f000 fbd3 	bl	19d70 <kmu_load_key_aes>
   195ca:	2800      	cmp	r0, #0
   195cc:	d1ba      	bne.n	19544 <LoadAesKey+0x18>
   195ce:	2000      	movs	r0, #0
   195d0:	bd38      	pop	{r3, r4, r5, pc}
   195d2:	6921      	ldr	r1, [r4, #16]
   195d4:	4a11      	ldr	r2, [pc, #68]	; (1961c <LoadAesKey+0xf0>)
   195d6:	4b12      	ldr	r3, [pc, #72]	; (19620 <LoadAesKey+0xf4>)
   195d8:	6011      	str	r1, [r2, #0]
   195da:	6961      	ldr	r1, [r4, #20]
   195dc:	6019      	str	r1, [r3, #0]
   195de:	69a1      	ldr	r1, [r4, #24]
   195e0:	6091      	str	r1, [r2, #8]
   195e2:	69e2      	ldr	r2, [r4, #28]
   195e4:	609a      	str	r2, [r3, #8]
   195e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   195e8:	3b01      	subs	r3, #1
   195ea:	2b01      	cmp	r3, #1
   195ec:	d8ef      	bhi.n	195ce <LoadAesKey+0xa2>
   195ee:	6a21      	ldr	r1, [r4, #32]
   195f0:	4a0e      	ldr	r2, [pc, #56]	; (1962c <LoadAesKey+0x100>)
   195f2:	4b0f      	ldr	r3, [pc, #60]	; (19630 <LoadAesKey+0x104>)
   195f4:	6011      	str	r1, [r2, #0]
   195f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   195f8:	601a      	str	r2, [r3, #0]
   195fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   195fc:	2b02      	cmp	r3, #2
   195fe:	d1e6      	bne.n	195ce <LoadAesKey+0xa2>
   19600:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   19602:	4a0c      	ldr	r2, [pc, #48]	; (19634 <LoadAesKey+0x108>)
   19604:	4b0c      	ldr	r3, [pc, #48]	; (19638 <LoadAesKey+0x10c>)
   19606:	6011      	str	r1, [r2, #0]
   19608:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1960a:	601a      	str	r2, [r3, #0]
   1960c:	bd38      	pop	{r3, r4, r5, pc}
   1960e:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   19612:	4770      	bx	lr
   19614:	00f10009 	.word	0x00f10009
   19618:	20000098 	.word	0x20000098
   1961c:	50845400 	.word	0x50845400
   19620:	50845404 	.word	0x50845404
   19624:	50845408 	.word	0x50845408
   19628:	5084540c 	.word	0x5084540c
   1962c:	50845410 	.word	0x50845410
   19630:	50845414 	.word	0x50845414
   19634:	50845418 	.word	0x50845418
   19638:	5084541c 	.word	0x5084541c

0001963c <ProcessAesDrv>:
   1963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19640:	b087      	sub	sp, #28
   19642:	2900      	cmp	r1, #0
   19644:	f000 80ae 	beq.w	197a4 <ProcessAesDrv+0x168>
   19648:	4616      	mov	r6, r2
   1964a:	2a00      	cmp	r2, #0
   1964c:	f000 80aa 	beq.w	197a4 <ProcessAesDrv+0x168>
   19650:	4604      	mov	r4, r0
   19652:	2800      	cmp	r0, #0
   19654:	f000 814c 	beq.w	198f0 <ProcessAesDrv+0x2b4>
   19658:	461f      	mov	r7, r3
   1965a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1965c:	460d      	mov	r5, r1
   1965e:	2b00      	cmp	r3, #0
   19660:	d13c      	bne.n	196dc <ProcessAesDrv+0xa0>
   19662:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   19666:	d23e      	bcs.n	196e6 <ProcessAesDrv+0xaa>
   19668:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1966c:	2b04      	cmp	r3, #4
   1966e:	f000 8105 	beq.w	1987c <ProcessAesDrv+0x240>
   19672:	f04f 0900 	mov.w	r9, #0
   19676:	f04f 31ff 	mov.w	r1, #4294967295
   1967a:	48ac      	ldr	r0, [pc, #688]	; (1992c <ProcessAesDrv+0x2f0>)
   1967c:	f7fe fba4 	bl	17dc8 <CC_PalMutexLock>
   19680:	2800      	cmp	r0, #0
   19682:	f040 80e3 	bne.w	1984c <ProcessAesDrv+0x210>
   19686:	2000      	movs	r0, #0
   19688:	f7fe fbce 	bl	17e28 <CC_PalPowerSaveModeSelect>
   1968c:	2800      	cmp	r0, #0
   1968e:	f040 80e6 	bne.w	1985e <ProcessAesDrv+0x222>
   19692:	2301      	movs	r3, #1
   19694:	49a6      	ldr	r1, [pc, #664]	; (19930 <ProcessAesDrv+0x2f4>)
   19696:	4aa7      	ldr	r2, [pc, #668]	; (19934 <ProcessAesDrv+0x2f8>)
   19698:	600b      	str	r3, [r1, #0]
   1969a:	6013      	str	r3, [r2, #0]
   1969c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1969e:	2b03      	cmp	r3, #3
   196a0:	dc27      	bgt.n	196f2 <ProcessAesDrv+0xb6>
   196a2:	2b00      	cmp	r3, #0
   196a4:	da28      	bge.n	196f8 <ProcessAesDrv+0xbc>
   196a6:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 19990 <ProcessAesDrv+0x354>
   196aa:	f1b9 0f00 	cmp.w	r9, #0
   196ae:	f040 8085 	bne.w	197bc <ProcessAesDrv+0x180>
   196b2:	2300      	movs	r3, #0
   196b4:	499e      	ldr	r1, [pc, #632]	; (19930 <ProcessAesDrv+0x2f4>)
   196b6:	4a9f      	ldr	r2, [pc, #636]	; (19934 <ProcessAesDrv+0x2f8>)
   196b8:	600b      	str	r3, [r1, #0]
   196ba:	2001      	movs	r0, #1
   196bc:	6013      	str	r3, [r2, #0]
   196be:	f7fe fbb3 	bl	17e28 <CC_PalPowerSaveModeSelect>
   196c2:	2800      	cmp	r0, #0
   196c4:	f040 80d6 	bne.w	19874 <ProcessAesDrv+0x238>
   196c8:	4898      	ldr	r0, [pc, #608]	; (1992c <ProcessAesDrv+0x2f0>)
   196ca:	f7fe fb85 	bl	17dd8 <CC_PalMutexUnlock>
   196ce:	2800      	cmp	r0, #0
   196d0:	f040 80c9 	bne.w	19866 <ProcessAesDrv+0x22a>
   196d4:	4640      	mov	r0, r8
   196d6:	b007      	add	sp, #28
   196d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196dc:	2b01      	cmp	r3, #1
   196de:	d1c3      	bne.n	19668 <ProcessAesDrv+0x2c>
   196e0:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   196e4:	d3c0      	bcc.n	19668 <ProcessAesDrv+0x2c>
   196e6:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 19994 <ProcessAesDrv+0x358>
   196ea:	4640      	mov	r0, r8
   196ec:	b007      	add	sp, #28
   196ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196f2:	3b06      	subs	r3, #6
   196f4:	2b01      	cmp	r3, #1
   196f6:	d8d6      	bhi.n	196a6 <ProcessAesDrv+0x6a>
   196f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   196fa:	2b01      	cmp	r3, #1
   196fc:	f200 80f5 	bhi.w	198ea <ProcessAesDrv+0x2ae>
   19700:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19702:	2b01      	cmp	r3, #1
   19704:	d854      	bhi.n	197b0 <ProcessAesDrv+0x174>
   19706:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19708:	2b01      	cmp	r3, #1
   1970a:	f200 816a 	bhi.w	199e2 <ProcessAesDrv+0x3a6>
   1970e:	4a8a      	ldr	r2, [pc, #552]	; (19938 <ProcessAesDrv+0x2fc>)
   19710:	6813      	ldr	r3, [r2, #0]
   19712:	2b00      	cmp	r3, #0
   19714:	d1fc      	bne.n	19710 <ProcessAesDrv+0xd4>
   19716:	f04f 30ff 	mov.w	r0, #4294967295
   1971a:	9304      	str	r3, [sp, #16]
   1971c:	f7fe faa0 	bl	17c60 <CC_HalClearInterruptBit>
   19720:	4a86      	ldr	r2, [pc, #536]	; (1993c <ProcessAesDrv+0x300>)
   19722:	6810      	ldr	r0, [r2, #0]
   19724:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   19728:	f7fe faa8 	bl	17c7c <CC_HalMaskInterrupt>
   1972c:	2001      	movs	r0, #1
   1972e:	4984      	ldr	r1, [pc, #528]	; (19940 <ProcessAesDrv+0x304>)
   19730:	4a84      	ldr	r2, [pc, #528]	; (19944 <ProcessAesDrv+0x308>)
   19732:	6008      	str	r0, [r1, #0]
   19734:	9b04      	ldr	r3, [sp, #16]
   19736:	6013      	str	r3, [r2, #0]
   19738:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1973a:	f022 0104 	bic.w	r1, r2, #4
   1973e:	2903      	cmp	r1, #3
   19740:	bf18      	it	ne
   19742:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   19744:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19746:	bf18      	it	ne
   19748:	4003      	andne	r3, r0
   1974a:	2902      	cmp	r1, #2
   1974c:	f200 814c 	bhi.w	199e8 <ProcessAesDrv+0x3ac>
   19750:	0092      	lsls	r2, r2, #2
   19752:	f002 021c 	and.w	r2, r2, #28
   19756:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   1975a:	497b      	ldr	r1, [pc, #492]	; (19948 <ProcessAesDrv+0x30c>)
   1975c:	4313      	orrs	r3, r2
   1975e:	600b      	str	r3, [r1, #0]
   19760:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19762:	2b07      	cmp	r3, #7
   19764:	d102      	bne.n	1976c <ProcessAesDrv+0x130>
   19766:	2201      	movs	r2, #1
   19768:	4b78      	ldr	r3, [pc, #480]	; (1994c <ProcessAesDrv+0x310>)
   1976a:	601a      	str	r2, [r3, #0]
   1976c:	4620      	mov	r0, r4
   1976e:	f7ff fedd 	bl	1952c <LoadAesKey>
   19772:	4680      	mov	r8, r0
   19774:	2800      	cmp	r0, #0
   19776:	d198      	bne.n	196aa <ProcessAesDrv+0x6e>
   19778:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1977a:	2b07      	cmp	r3, #7
   1977c:	d893      	bhi.n	196a6 <ProcessAesDrv+0x6a>
   1977e:	a201      	add	r2, pc, #4	; (adr r2, 19784 <ProcessAesDrv+0x148>)
   19780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19784:	000197e3 	.word	0x000197e3
   19788:	000197cf 	.word	0x000197cf
   1978c:	000198f7 	.word	0x000198f7
   19790:	000197cf 	.word	0x000197cf
   19794:	000196a7 	.word	0x000196a7
   19798:	000196a7 	.word	0x000196a7
   1979c:	000198f7 	.word	0x000198f7
   197a0:	000197cf 	.word	0x000197cf
   197a4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 19998 <ProcessAesDrv+0x35c>
   197a8:	4640      	mov	r0, r8
   197aa:	b007      	add	sp, #28
   197ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197b0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 1999c <ProcessAesDrv+0x360>
   197b4:	f1b9 0f00 	cmp.w	r9, #0
   197b8:	f43f af7b 	beq.w	196b2 <ProcessAesDrv+0x76>
   197bc:	2304      	movs	r3, #4
   197be:	2120      	movs	r1, #32
   197c0:	f104 0010 	add.w	r0, r4, #16
   197c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   197c8:	f7ff fbe4 	bl	18f94 <CC_PalMemSetZeroPlat>
   197cc:	e771      	b.n	196b2 <ProcessAesDrv+0x76>
   197ce:	6821      	ldr	r1, [r4, #0]
   197d0:	4a5f      	ldr	r2, [pc, #380]	; (19950 <ProcessAesDrv+0x314>)
   197d2:	4b60      	ldr	r3, [pc, #384]	; (19954 <ProcessAesDrv+0x318>)
   197d4:	6011      	str	r1, [r2, #0]
   197d6:	6861      	ldr	r1, [r4, #4]
   197d8:	6019      	str	r1, [r3, #0]
   197da:	68a1      	ldr	r1, [r4, #8]
   197dc:	6091      	str	r1, [r2, #8]
   197de:	68e2      	ldr	r2, [r4, #12]
   197e0:	609a      	str	r2, [r3, #8]
   197e2:	792b      	ldrb	r3, [r5, #4]
   197e4:	7932      	ldrb	r2, [r6, #4]
   197e6:	005b      	lsls	r3, r3, #1
   197e8:	f002 0201 	and.w	r2, r2, #1
   197ec:	495a      	ldr	r1, [pc, #360]	; (19958 <ProcessAesDrv+0x31c>)
   197ee:	f003 0302 	and.w	r3, r3, #2
   197f2:	4313      	orrs	r3, r2
   197f4:	6830      	ldr	r0, [r6, #0]
   197f6:	682a      	ldr	r2, [r5, #0]
   197f8:	600b      	str	r3, [r1, #0]
   197fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   197fc:	f023 0304 	bic.w	r3, r3, #4
   19800:	2b03      	cmp	r3, #3
   19802:	d007      	beq.n	19814 <ProcessAesDrv+0x1d8>
   19804:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19806:	2b01      	cmp	r3, #1
   19808:	f000 80e3 	beq.w	199d2 <ProcessAesDrv+0x396>
   1980c:	4953      	ldr	r1, [pc, #332]	; (1995c <ProcessAesDrv+0x320>)
   1980e:	4b54      	ldr	r3, [pc, #336]	; (19960 <ProcessAesDrv+0x324>)
   19810:	6008      	str	r0, [r1, #0]
   19812:	601f      	str	r7, [r3, #0]
   19814:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19816:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1981a:	2b01      	cmp	r3, #1
   1981c:	bf07      	ittee	eq
   1981e:	4951      	ldreq	r1, [pc, #324]	; (19964 <ProcessAesDrv+0x328>)
   19820:	4b51      	ldreq	r3, [pc, #324]	; (19968 <ProcessAesDrv+0x32c>)
   19822:	4952      	ldrne	r1, [pc, #328]	; (1996c <ProcessAesDrv+0x330>)
   19824:	4b52      	ldrne	r3, [pc, #328]	; (19970 <ProcessAesDrv+0x334>)
   19826:	600a      	str	r2, [r1, #0]
   19828:	601f      	str	r7, [r3, #0]
   1982a:	f7fe fa2d 	bl	17c88 <CC_HalWaitInterrupt>
   1982e:	4680      	mov	r8, r0
   19830:	2800      	cmp	r0, #0
   19832:	f47f af3a 	bne.w	196aa <ProcessAesDrv+0x6e>
   19836:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19838:	3b01      	subs	r3, #1
   1983a:	2b06      	cmp	r3, #6
   1983c:	f200 80c6 	bhi.w	199cc <ProcessAesDrv+0x390>
   19840:	e8df f003 	tbb	[pc, r3]
   19844:	c4b8ccb8 	.word	0xc4b8ccb8
   19848:	ccc4      	.short	0xccc4
   1984a:	b8          	.byte	0xb8
   1984b:	00          	.byte	0x00
   1984c:	4849      	ldr	r0, [pc, #292]	; (19974 <ProcessAesDrv+0x338>)
   1984e:	f7fd ff3b 	bl	176c8 <CC_PalAbort>
   19852:	2000      	movs	r0, #0
   19854:	f7fe fae8 	bl	17e28 <CC_PalPowerSaveModeSelect>
   19858:	2800      	cmp	r0, #0
   1985a:	f43f af1a 	beq.w	19692 <ProcessAesDrv+0x56>
   1985e:	4846      	ldr	r0, [pc, #280]	; (19978 <ProcessAesDrv+0x33c>)
   19860:	f7fd ff32 	bl	176c8 <CC_PalAbort>
   19864:	e715      	b.n	19692 <ProcessAesDrv+0x56>
   19866:	4845      	ldr	r0, [pc, #276]	; (1997c <ProcessAesDrv+0x340>)
   19868:	f7fd ff2e 	bl	176c8 <CC_PalAbort>
   1986c:	4640      	mov	r0, r8
   1986e:	b007      	add	sp, #28
   19870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19874:	4842      	ldr	r0, [pc, #264]	; (19980 <ProcessAesDrv+0x344>)
   19876:	f7fd ff27 	bl	176c8 <CC_PalAbort>
   1987a:	e725      	b.n	196c8 <ProcessAesDrv+0x8c>
   1987c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1987e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   19880:	f000 fa4a 	bl	19d18 <kmu_validate_slot_and_size>
   19884:	bb70      	cbnz	r0, 198e4 <ProcessAesDrv+0x2a8>
   19886:	f8df 8118 	ldr.w	r8, [pc, #280]	; 199a0 <ProcessAesDrv+0x364>
   1988a:	f8df b118 	ldr.w	fp, [pc, #280]	; 199a4 <ProcessAesDrv+0x368>
   1988e:	f8d8 3000 	ldr.w	r3, [r8]
   19892:	f8df a114 	ldr.w	sl, [pc, #276]	; 199a8 <ProcessAesDrv+0x36c>
   19896:	681b      	ldr	r3, [r3, #0]
   19898:	f8df 9110 	ldr.w	r9, [pc, #272]	; 199ac <ProcessAesDrv+0x370>
   1989c:	f8cb 3000 	str.w	r3, [fp]
   198a0:	f8d8 3000 	ldr.w	r3, [r8]
   198a4:	4a37      	ldr	r2, [pc, #220]	; (19984 <ProcessAesDrv+0x348>)
   198a6:	685b      	ldr	r3, [r3, #4]
   198a8:	f8ca 3000 	str.w	r3, [sl]
   198ac:	f8d8 3000 	ldr.w	r3, [r8]
   198b0:	689b      	ldr	r3, [r3, #8]
   198b2:	f8c9 3000 	str.w	r3, [r9]
   198b6:	f8d8 3000 	ldr.w	r3, [r8]
   198ba:	68db      	ldr	r3, [r3, #12]
   198bc:	6013      	str	r3, [r2, #0]
   198be:	f8d8 3000 	ldr.w	r3, [r8]
   198c2:	691b      	ldr	r3, [r3, #16]
   198c4:	6053      	str	r3, [r2, #4]
   198c6:	f8d8 3000 	ldr.w	r3, [r8]
   198ca:	695b      	ldr	r3, [r3, #20]
   198cc:	6093      	str	r3, [r2, #8]
   198ce:	f8d8 3000 	ldr.w	r3, [r8]
   198d2:	699b      	ldr	r3, [r3, #24]
   198d4:	60d3      	str	r3, [r2, #12]
   198d6:	f8d8 3000 	ldr.w	r3, [r8]
   198da:	69db      	ldr	r3, [r3, #28]
   198dc:	6113      	str	r3, [r2, #16]
   198de:	6b21      	ldr	r1, [r4, #48]	; 0x30
   198e0:	2902      	cmp	r1, #2
   198e2:	d90c      	bls.n	198fe <ProcessAesDrv+0x2c2>
   198e4:	f04f 0901 	mov.w	r9, #1
   198e8:	e6c5      	b.n	19676 <ProcessAesDrv+0x3a>
   198ea:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 199b0 <ProcessAesDrv+0x374>
   198ee:	e6dc      	b.n	196aa <ProcessAesDrv+0x6e>
   198f0:	f44f 0871 	mov.w	r8, #15794176	; 0xf10000
   198f4:	e6ee      	b.n	196d4 <ProcessAesDrv+0x98>
   198f6:	6821      	ldr	r1, [r4, #0]
   198f8:	4a23      	ldr	r2, [pc, #140]	; (19988 <ProcessAesDrv+0x34c>)
   198fa:	4b24      	ldr	r3, [pc, #144]	; (1998c <ProcessAesDrv+0x350>)
   198fc:	e76a      	b.n	197d4 <ProcessAesDrv+0x198>
   198fe:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   19902:	9300      	str	r3, [sp, #0]
   19904:	f104 0310 	add.w	r3, r4, #16
   19908:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1990c:	00c8      	lsls	r0, r1, #3
   1990e:	3010      	adds	r0, #16
   19910:	9003      	str	r0, [sp, #12]
   19912:	9004      	str	r0, [sp, #16]
   19914:	9305      	str	r3, [sp, #20]
   19916:	6c20      	ldr	r0, [r4, #64]	; 0x40
   19918:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1991c:	f000 fc0a 	bl	1a134 <kmu_derive_cmac>
   19920:	2800      	cmp	r0, #0
   19922:	d164      	bne.n	199ee <ProcessAesDrv+0x3b2>
   19924:	2300      	movs	r3, #0
   19926:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1992a:	e7db      	b.n	198e4 <ProcessAesDrv+0x2a8>
   1992c:	200000a8 	.word	0x200000a8
   19930:	50845810 	.word	0x50845810
   19934:	50845820 	.word	0x50845820
   19938:	50845910 	.word	0x50845910
   1993c:	50845a04 	.word	0x50845a04
   19940:	50845900 	.word	0x50845900
   19944:	508454bc 	.word	0x508454bc
   19948:	508454c0 	.word	0x508454c0
   1994c:	5084547c 	.word	0x5084547c
   19950:	50845440 	.word	0x50845440
   19954:	50845444 	.word	0x50845444
   19958:	50845b0c 	.word	0x50845b0c
   1995c:	50845d30 	.word	0x50845d30
   19960:	50845d34 	.word	0x50845d34
   19964:	50845c28 	.word	0x50845c28
   19968:	50845c2c 	.word	0x50845c2c
   1996c:	50845c30 	.word	0x50845c30
   19970:	50845c34 	.word	0x50845c34
   19974:	0001d3c4 	.word	0x0001d3c4
   19978:	0001d3dc 	.word	0x0001d3dc
   1997c:	0001d41c 	.word	0x0001d41c
   19980:	0001d3fc 	.word	0x0001d3fc
   19984:	5084540c 	.word	0x5084540c
   19988:	50845460 	.word	0x50845460
   1998c:	50845464 	.word	0x50845464
   19990:	00f10001 	.word	0x00f10001
   19994:	00f10005 	.word	0x00f10005
   19998:	00f1000b 	.word	0x00f1000b
   1999c:	00f10003 	.word	0x00f10003
   199a0:	20000098 	.word	0x20000098
   199a4:	50845400 	.word	0x50845400
   199a8:	50845404 	.word	0x50845404
   199ac:	50845408 	.word	0x50845408
   199b0:	00f10002 	.word	0x00f10002
   199b4:	4a22      	ldr	r2, [pc, #136]	; (19a40 <ProcessAesDrv+0x404>)
   199b6:	4b23      	ldr	r3, [pc, #140]	; (19a44 <ProcessAesDrv+0x408>)
   199b8:	6811      	ldr	r1, [r2, #0]
   199ba:	3208      	adds	r2, #8
   199bc:	6021      	str	r1, [r4, #0]
   199be:	6819      	ldr	r1, [r3, #0]
   199c0:	3308      	adds	r3, #8
   199c2:	6061      	str	r1, [r4, #4]
   199c4:	6812      	ldr	r2, [r2, #0]
   199c6:	60a2      	str	r2, [r4, #8]
   199c8:	681b      	ldr	r3, [r3, #0]
   199ca:	60e3      	str	r3, [r4, #12]
   199cc:	2301      	movs	r3, #1
   199ce:	65a3      	str	r3, [r4, #88]	; 0x58
   199d0:	e66b      	b.n	196aa <ProcessAesDrv+0x6e>
   199d2:	4b1d      	ldr	r3, [pc, #116]	; (19a48 <ProcessAesDrv+0x40c>)
   199d4:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
   199d8:	601f      	str	r7, [r3, #0]
   199da:	e71b      	b.n	19814 <ProcessAesDrv+0x1d8>
   199dc:	4a1b      	ldr	r2, [pc, #108]	; (19a4c <ProcessAesDrv+0x410>)
   199de:	4b1c      	ldr	r3, [pc, #112]	; (19a50 <ProcessAesDrv+0x414>)
   199e0:	e7ea      	b.n	199b8 <ProcessAesDrv+0x37c>
   199e2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 19a58 <ProcessAesDrv+0x41c>
   199e6:	e660      	b.n	196aa <ProcessAesDrv+0x6e>
   199e8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 19a5c <ProcessAesDrv+0x420>
   199ec:	e65d      	b.n	196aa <ProcessAesDrv+0x6e>
   199ee:	f8d8 3000 	ldr.w	r3, [r8]
   199f2:	9904      	ldr	r1, [sp, #16]
   199f4:	681b      	ldr	r3, [r3, #0]
   199f6:	9805      	ldr	r0, [sp, #20]
   199f8:	f8cb 3000 	str.w	r3, [fp]
   199fc:	f8d8 3000 	ldr.w	r3, [r8]
   19a00:	4a14      	ldr	r2, [pc, #80]	; (19a54 <ProcessAesDrv+0x418>)
   19a02:	685b      	ldr	r3, [r3, #4]
   19a04:	f8ca 3000 	str.w	r3, [sl]
   19a08:	f8d8 3000 	ldr.w	r3, [r8]
   19a0c:	689b      	ldr	r3, [r3, #8]
   19a0e:	f8c9 3000 	str.w	r3, [r9]
   19a12:	f8d8 3000 	ldr.w	r3, [r8]
   19a16:	68db      	ldr	r3, [r3, #12]
   19a18:	6013      	str	r3, [r2, #0]
   19a1a:	f8d8 3000 	ldr.w	r3, [r8]
   19a1e:	691b      	ldr	r3, [r3, #16]
   19a20:	6053      	str	r3, [r2, #4]
   19a22:	f8d8 3000 	ldr.w	r3, [r8]
   19a26:	695b      	ldr	r3, [r3, #20]
   19a28:	6093      	str	r3, [r2, #8]
   19a2a:	f8d8 3000 	ldr.w	r3, [r8]
   19a2e:	699b      	ldr	r3, [r3, #24]
   19a30:	60d3      	str	r3, [r2, #12]
   19a32:	f8d8 3000 	ldr.w	r3, [r8]
   19a36:	69db      	ldr	r3, [r3, #28]
   19a38:	6113      	str	r3, [r2, #16]
   19a3a:	f7ff faab 	bl	18f94 <CC_PalMemSetZeroPlat>
   19a3e:	e771      	b.n	19924 <ProcessAesDrv+0x2e8>
   19a40:	50845440 	.word	0x50845440
   19a44:	50845444 	.word	0x50845444
   19a48:	50845d2c 	.word	0x50845d2c
   19a4c:	50845460 	.word	0x50845460
   19a50:	50845464 	.word	0x50845464
   19a54:	5084540c 	.word	0x5084540c
   19a58:	00f10004 	.word	0x00f10004
   19a5c:	00f10006 	.word	0x00f10006

00019a60 <FinishAesDrv>:
   19a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a64:	b309      	cbz	r1, 19aaa <FinishAesDrv+0x4a>
   19a66:	b302      	cbz	r2, 19aaa <FinishAesDrv+0x4a>
   19a68:	4604      	mov	r4, r0
   19a6a:	2800      	cmp	r0, #0
   19a6c:	f000 80a3 	beq.w	19bb6 <FinishAesDrv+0x156>
   19a70:	461d      	mov	r5, r3
   19a72:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19a74:	460e      	mov	r6, r1
   19a76:	2b07      	cmp	r3, #7
   19a78:	d01b      	beq.n	19ab2 <FinishAesDrv+0x52>
   19a7a:	b95d      	cbnz	r5, 19a94 <FinishAesDrv+0x34>
   19a7c:	2b03      	cmp	r3, #3
   19a7e:	d110      	bne.n	19aa2 <FinishAesDrv+0x42>
   19a80:	6d83      	ldr	r3, [r0, #88]	; 0x58
   19a82:	b973      	cbnz	r3, 19aa2 <FinishAesDrv+0x42>
   19a84:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   19a88:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   19a8c:	2510      	movs	r5, #16
   19a8e:	f100 0364 	add.w	r3, r0, #100	; 0x64
   19a92:	600b      	str	r3, [r1, #0]
   19a94:	462b      	mov	r3, r5
   19a96:	4631      	mov	r1, r6
   19a98:	4620      	mov	r0, r4
   19a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19a9e:	f7ff bdcd 	b.w	1963c <ProcessAesDrv>
   19aa2:	462f      	mov	r7, r5
   19aa4:	4638      	mov	r0, r7
   19aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19aaa:	4f7e      	ldr	r7, [pc, #504]	; (19ca4 <FinishAesDrv+0x244>)
   19aac:	4638      	mov	r0, r7
   19aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ab2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   19ab4:	2b00      	cmp	r3, #0
   19ab6:	f040 8081 	bne.w	19bbc <FinishAesDrv+0x15c>
   19aba:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   19abe:	f080 8083 	bcs.w	19bc8 <FinishAesDrv+0x168>
   19ac2:	b915      	cbnz	r5, 19aca <FinishAesDrv+0x6a>
   19ac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   19ac6:	2b00      	cmp	r3, #0
   19ac8:	d17e      	bne.n	19bc8 <FinishAesDrv+0x168>
   19aca:	f04f 31ff 	mov.w	r1, #4294967295
   19ace:	4876      	ldr	r0, [pc, #472]	; (19ca8 <FinishAesDrv+0x248>)
   19ad0:	f7fe f97a 	bl	17dc8 <CC_PalMutexLock>
   19ad4:	2800      	cmp	r0, #0
   19ad6:	f040 80c1 	bne.w	19c5c <FinishAesDrv+0x1fc>
   19ada:	2000      	movs	r0, #0
   19adc:	f7fe f9a4 	bl	17e28 <CC_PalPowerSaveModeSelect>
   19ae0:	2800      	cmp	r0, #0
   19ae2:	f040 80c3 	bne.w	19c6c <FinishAesDrv+0x20c>
   19ae6:	2301      	movs	r3, #1
   19ae8:	4970      	ldr	r1, [pc, #448]	; (19cac <FinishAesDrv+0x24c>)
   19aea:	4a71      	ldr	r2, [pc, #452]	; (19cb0 <FinishAesDrv+0x250>)
   19aec:	600b      	str	r3, [r1, #0]
   19aee:	6013      	str	r3, [r2, #0]
   19af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19af2:	2b03      	cmp	r3, #3
   19af4:	dd48      	ble.n	19b88 <FinishAesDrv+0x128>
   19af6:	3b06      	subs	r3, #6
   19af8:	2b01      	cmp	r3, #1
   19afa:	d847      	bhi.n	19b8c <FinishAesDrv+0x12c>
   19afc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19afe:	2b01      	cmp	r3, #1
   19b00:	d864      	bhi.n	19bcc <FinishAesDrv+0x16c>
   19b02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19b04:	2b01      	cmp	r3, #1
   19b06:	f200 80b5 	bhi.w	19c74 <FinishAesDrv+0x214>
   19b0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19b0c:	2b01      	cmp	r3, #1
   19b0e:	f200 80b3 	bhi.w	19c78 <FinishAesDrv+0x218>
   19b12:	4b68      	ldr	r3, [pc, #416]	; (19cb4 <FinishAesDrv+0x254>)
   19b14:	681f      	ldr	r7, [r3, #0]
   19b16:	2f00      	cmp	r7, #0
   19b18:	d1fc      	bne.n	19b14 <FinishAesDrv+0xb4>
   19b1a:	f04f 30ff 	mov.w	r0, #4294967295
   19b1e:	f7fe f89f 	bl	17c60 <CC_HalClearInterruptBit>
   19b22:	4b65      	ldr	r3, [pc, #404]	; (19cb8 <FinishAesDrv+0x258>)
   19b24:	6818      	ldr	r0, [r3, #0]
   19b26:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   19b2a:	f7fe f8a7 	bl	17c7c <CC_HalMaskInterrupt>
   19b2e:	2101      	movs	r1, #1
   19b30:	4a62      	ldr	r2, [pc, #392]	; (19cbc <FinishAesDrv+0x25c>)
   19b32:	4b63      	ldr	r3, [pc, #396]	; (19cc0 <FinishAesDrv+0x260>)
   19b34:	6011      	str	r1, [r2, #0]
   19b36:	601f      	str	r7, [r3, #0]
   19b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19b3a:	f023 0204 	bic.w	r2, r3, #4
   19b3e:	2a03      	cmp	r2, #3
   19b40:	bf18      	it	ne
   19b42:	6ba7      	ldrne	r7, [r4, #56]	; 0x38
   19b44:	6b22      	ldr	r2, [r4, #48]	; 0x30
   19b46:	bf18      	it	ne
   19b48:	400f      	andne	r7, r1
   19b4a:	2a02      	cmp	r2, #2
   19b4c:	f200 80a7 	bhi.w	19c9e <FinishAesDrv+0x23e>
   19b50:	009b      	lsls	r3, r3, #2
   19b52:	f003 031c 	and.w	r3, r3, #28
   19b56:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   19b5a:	4a5a      	ldr	r2, [pc, #360]	; (19cc4 <FinishAesDrv+0x264>)
   19b5c:	431f      	orrs	r7, r3
   19b5e:	6017      	str	r7, [r2, #0]
   19b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19b62:	2b07      	cmp	r3, #7
   19b64:	d102      	bne.n	19b6c <FinishAesDrv+0x10c>
   19b66:	2201      	movs	r2, #1
   19b68:	4b57      	ldr	r3, [pc, #348]	; (19cc8 <FinishAesDrv+0x268>)
   19b6a:	601a      	str	r2, [r3, #0]
   19b6c:	4620      	mov	r0, r4
   19b6e:	f7ff fcdd 	bl	1952c <LoadAesKey>
   19b72:	4607      	mov	r7, r0
   19b74:	b958      	cbnz	r0, 19b8e <FinishAesDrv+0x12e>
   19b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19b78:	2b07      	cmp	r3, #7
   19b7a:	d807      	bhi.n	19b8c <FinishAesDrv+0x12c>
   19b7c:	e8df f003 	tbb	[pc, r3]
   19b80:	28672832 	.word	0x28672832
   19b84:	28670606 	.word	0x28670606
   19b88:	2b00      	cmp	r3, #0
   19b8a:	dab7      	bge.n	19afc <FinishAesDrv+0x9c>
   19b8c:	4f4f      	ldr	r7, [pc, #316]	; (19ccc <FinishAesDrv+0x26c>)
   19b8e:	2300      	movs	r3, #0
   19b90:	4946      	ldr	r1, [pc, #280]	; (19cac <FinishAesDrv+0x24c>)
   19b92:	4a47      	ldr	r2, [pc, #284]	; (19cb0 <FinishAesDrv+0x250>)
   19b94:	600b      	str	r3, [r1, #0]
   19b96:	2001      	movs	r0, #1
   19b98:	6013      	str	r3, [r2, #0]
   19b9a:	f7fe f945 	bl	17e28 <CC_PalPowerSaveModeSelect>
   19b9e:	2800      	cmp	r0, #0
   19ba0:	d160      	bne.n	19c64 <FinishAesDrv+0x204>
   19ba2:	4841      	ldr	r0, [pc, #260]	; (19ca8 <FinishAesDrv+0x248>)
   19ba4:	f7fe f918 	bl	17dd8 <CC_PalMutexUnlock>
   19ba8:	2800      	cmp	r0, #0
   19baa:	f43f af7b 	beq.w	19aa4 <FinishAesDrv+0x44>
   19bae:	4848      	ldr	r0, [pc, #288]	; (19cd0 <FinishAesDrv+0x270>)
   19bb0:	f7fd fd8a 	bl	176c8 <CC_PalAbort>
   19bb4:	e776      	b.n	19aa4 <FinishAesDrv+0x44>
   19bb6:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   19bba:	e773      	b.n	19aa4 <FinishAesDrv+0x44>
   19bbc:	2b01      	cmp	r3, #1
   19bbe:	d180      	bne.n	19ac2 <FinishAesDrv+0x62>
   19bc0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   19bc4:	f4ff af7d 	bcc.w	19ac2 <FinishAesDrv+0x62>
   19bc8:	4f42      	ldr	r7, [pc, #264]	; (19cd4 <FinishAesDrv+0x274>)
   19bca:	e76b      	b.n	19aa4 <FinishAesDrv+0x44>
   19bcc:	4f42      	ldr	r7, [pc, #264]	; (19cd8 <FinishAesDrv+0x278>)
   19bce:	e7de      	b.n	19b8e <FinishAesDrv+0x12e>
   19bd0:	6821      	ldr	r1, [r4, #0]
   19bd2:	4a42      	ldr	r2, [pc, #264]	; (19cdc <FinishAesDrv+0x27c>)
   19bd4:	4b42      	ldr	r3, [pc, #264]	; (19ce0 <FinishAesDrv+0x280>)
   19bd6:	6011      	str	r1, [r2, #0]
   19bd8:	6861      	ldr	r1, [r4, #4]
   19bda:	6019      	str	r1, [r3, #0]
   19bdc:	68a1      	ldr	r1, [r4, #8]
   19bde:	6091      	str	r1, [r2, #8]
   19be0:	68e2      	ldr	r2, [r4, #12]
   19be2:	609a      	str	r2, [r3, #8]
   19be4:	2201      	movs	r2, #1
   19be6:	4938      	ldr	r1, [pc, #224]	; (19cc8 <FinishAesDrv+0x268>)
   19be8:	4b35      	ldr	r3, [pc, #212]	; (19cc0 <FinishAesDrv+0x260>)
   19bea:	600a      	str	r2, [r1, #0]
   19bec:	601d      	str	r5, [r3, #0]
   19bee:	7933      	ldrb	r3, [r6, #4]
   19bf0:	6830      	ldr	r0, [r6, #0]
   19bf2:	4093      	lsls	r3, r2
   19bf4:	f003 0302 	and.w	r3, r3, #2
   19bf8:	f8c1 3690 	str.w	r3, [r1, #1680]	; 0x690
   19bfc:	2d00      	cmp	r5, #0
   19bfe:	d13d      	bne.n	19c7c <FinishAesDrv+0x21c>
   19c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
   19c02:	b90b      	cbnz	r3, 19c08 <FinishAesDrv+0x1a8>
   19c04:	4b37      	ldr	r3, [pc, #220]	; (19ce4 <FinishAesDrv+0x284>)
   19c06:	601a      	str	r2, [r3, #0]
   19c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19c0a:	3b01      	subs	r3, #1
   19c0c:	2b06      	cmp	r3, #6
   19c0e:	d8be      	bhi.n	19b8e <FinishAesDrv+0x12e>
   19c10:	a201      	add	r2, pc, #4	; (adr r2, 19c18 <FinishAesDrv+0x1b8>)
   19c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19c16:	bf00      	nop
   19c18:	00019c35 	.word	0x00019c35
   19c1c:	00019c57 	.word	0x00019c57
   19c20:	00019c35 	.word	0x00019c35
   19c24:	00019b8f 	.word	0x00019b8f
   19c28:	00019b8f 	.word	0x00019b8f
   19c2c:	00019c57 	.word	0x00019c57
   19c30:	00019c35 	.word	0x00019c35
   19c34:	4a29      	ldr	r2, [pc, #164]	; (19cdc <FinishAesDrv+0x27c>)
   19c36:	4b2a      	ldr	r3, [pc, #168]	; (19ce0 <FinishAesDrv+0x280>)
   19c38:	6811      	ldr	r1, [r2, #0]
   19c3a:	3208      	adds	r2, #8
   19c3c:	6021      	str	r1, [r4, #0]
   19c3e:	6819      	ldr	r1, [r3, #0]
   19c40:	3308      	adds	r3, #8
   19c42:	6061      	str	r1, [r4, #4]
   19c44:	6812      	ldr	r2, [r2, #0]
   19c46:	60a2      	str	r2, [r4, #8]
   19c48:	681b      	ldr	r3, [r3, #0]
   19c4a:	60e3      	str	r3, [r4, #12]
   19c4c:	e79f      	b.n	19b8e <FinishAesDrv+0x12e>
   19c4e:	6821      	ldr	r1, [r4, #0]
   19c50:	4a25      	ldr	r2, [pc, #148]	; (19ce8 <FinishAesDrv+0x288>)
   19c52:	4b26      	ldr	r3, [pc, #152]	; (19cec <FinishAesDrv+0x28c>)
   19c54:	e7bf      	b.n	19bd6 <FinishAesDrv+0x176>
   19c56:	4a24      	ldr	r2, [pc, #144]	; (19ce8 <FinishAesDrv+0x288>)
   19c58:	4b24      	ldr	r3, [pc, #144]	; (19cec <FinishAesDrv+0x28c>)
   19c5a:	e7ed      	b.n	19c38 <FinishAesDrv+0x1d8>
   19c5c:	4824      	ldr	r0, [pc, #144]	; (19cf0 <FinishAesDrv+0x290>)
   19c5e:	f7fd fd33 	bl	176c8 <CC_PalAbort>
   19c62:	e73a      	b.n	19ada <FinishAesDrv+0x7a>
   19c64:	4823      	ldr	r0, [pc, #140]	; (19cf4 <FinishAesDrv+0x294>)
   19c66:	f7fd fd2f 	bl	176c8 <CC_PalAbort>
   19c6a:	e79a      	b.n	19ba2 <FinishAesDrv+0x142>
   19c6c:	4822      	ldr	r0, [pc, #136]	; (19cf8 <FinishAesDrv+0x298>)
   19c6e:	f7fd fd2b 	bl	176c8 <CC_PalAbort>
   19c72:	e738      	b.n	19ae6 <FinishAesDrv+0x86>
   19c74:	4f21      	ldr	r7, [pc, #132]	; (19cfc <FinishAesDrv+0x29c>)
   19c76:	e78a      	b.n	19b8e <FinishAesDrv+0x12e>
   19c78:	4f21      	ldr	r7, [pc, #132]	; (19d00 <FinishAesDrv+0x2a0>)
   19c7a:	e788      	b.n	19b8e <FinishAesDrv+0x12e>
   19c7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19c7e:	2b01      	cmp	r3, #1
   19c80:	bf07      	ittee	eq
   19c82:	4a20      	ldreq	r2, [pc, #128]	; (19d04 <FinishAesDrv+0x2a4>)
   19c84:	4b20      	ldreq	r3, [pc, #128]	; (19d08 <FinishAesDrv+0x2a8>)
   19c86:	4a21      	ldrne	r2, [pc, #132]	; (19d0c <FinishAesDrv+0x2ac>)
   19c88:	4b21      	ldrne	r3, [pc, #132]	; (19d10 <FinishAesDrv+0x2b0>)
   19c8a:	6010      	str	r0, [r2, #0]
   19c8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   19c90:	601d      	str	r5, [r3, #0]
   19c92:	f7fd fff9 	bl	17c88 <CC_HalWaitInterrupt>
   19c96:	2800      	cmp	r0, #0
   19c98:	d0b6      	beq.n	19c08 <FinishAesDrv+0x1a8>
   19c9a:	4607      	mov	r7, r0
   19c9c:	e777      	b.n	19b8e <FinishAesDrv+0x12e>
   19c9e:	4f1d      	ldr	r7, [pc, #116]	; (19d14 <FinishAesDrv+0x2b4>)
   19ca0:	e775      	b.n	19b8e <FinishAesDrv+0x12e>
   19ca2:	bf00      	nop
   19ca4:	00f1000b 	.word	0x00f1000b
   19ca8:	200000a8 	.word	0x200000a8
   19cac:	50845810 	.word	0x50845810
   19cb0:	50845820 	.word	0x50845820
   19cb4:	50845910 	.word	0x50845910
   19cb8:	50845a04 	.word	0x50845a04
   19cbc:	50845900 	.word	0x50845900
   19cc0:	508454bc 	.word	0x508454bc
   19cc4:	508454c0 	.word	0x508454c0
   19cc8:	5084547c 	.word	0x5084547c
   19ccc:	00f10001 	.word	0x00f10001
   19cd0:	0001d41c 	.word	0x0001d41c
   19cd4:	00f10005 	.word	0x00f10005
   19cd8:	00f10002 	.word	0x00f10002
   19cdc:	50845440 	.word	0x50845440
   19ce0:	50845444 	.word	0x50845444
   19ce4:	50845524 	.word	0x50845524
   19ce8:	50845460 	.word	0x50845460
   19cec:	50845464 	.word	0x50845464
   19cf0:	0001d3c4 	.word	0x0001d3c4
   19cf4:	0001d3fc 	.word	0x0001d3fc
   19cf8:	0001d3dc 	.word	0x0001d3dc
   19cfc:	00f10003 	.word	0x00f10003
   19d00:	00f10004 	.word	0x00f10004
   19d04:	50845c28 	.word	0x50845c28
   19d08:	50845c2c 	.word	0x50845c2c
   19d0c:	50845c30 	.word	0x50845c30
   19d10:	50845c34 	.word	0x50845c34
   19d14:	00f10006 	.word	0x00f10006

00019d18 <kmu_validate_slot_and_size>:
   19d18:	287f      	cmp	r0, #127	; 0x7f
   19d1a:	d809      	bhi.n	19d30 <kmu_validate_slot_and_size+0x18>
   19d1c:	b151      	cbz	r1, 19d34 <kmu_validate_slot_and_size+0x1c>
   19d1e:	3901      	subs	r1, #1
   19d20:	2902      	cmp	r1, #2
   19d22:	d809      	bhi.n	19d38 <kmu_validate_slot_and_size+0x20>
   19d24:	4905      	ldr	r1, [pc, #20]	; (19d3c <kmu_validate_slot_and_size+0x24>)
   19d26:	287f      	cmp	r0, #127	; 0x7f
   19d28:	bf0c      	ite	eq
   19d2a:	4608      	moveq	r0, r1
   19d2c:	2000      	movne	r0, #0
   19d2e:	4770      	bx	lr
   19d30:	4802      	ldr	r0, [pc, #8]	; (19d3c <kmu_validate_slot_and_size+0x24>)
   19d32:	4770      	bx	lr
   19d34:	4608      	mov	r0, r1
   19d36:	4770      	bx	lr
   19d38:	4801      	ldr	r0, [pc, #4]	; (19d40 <kmu_validate_slot_and_size+0x28>)
   19d3a:	4770      	bx	lr
   19d3c:	00f70001 	.word	0x00f70001
   19d40:	00f70003 	.word	0x00f70003

00019d44 <kmu_validate_slot_and_size_no_kdr>:
   19d44:	287f      	cmp	r0, #127	; 0x7f
   19d46:	d809      	bhi.n	19d5c <kmu_validate_slot_and_size_no_kdr+0x18>
   19d48:	b151      	cbz	r1, 19d60 <kmu_validate_slot_and_size_no_kdr+0x1c>
   19d4a:	3901      	subs	r1, #1
   19d4c:	2902      	cmp	r1, #2
   19d4e:	d809      	bhi.n	19d64 <kmu_validate_slot_and_size_no_kdr+0x20>
   19d50:	4905      	ldr	r1, [pc, #20]	; (19d68 <kmu_validate_slot_and_size_no_kdr+0x24>)
   19d52:	287f      	cmp	r0, #127	; 0x7f
   19d54:	bf0c      	ite	eq
   19d56:	4608      	moveq	r0, r1
   19d58:	2000      	movne	r0, #0
   19d5a:	4770      	bx	lr
   19d5c:	4802      	ldr	r0, [pc, #8]	; (19d68 <kmu_validate_slot_and_size_no_kdr+0x24>)
   19d5e:	4770      	bx	lr
   19d60:	4608      	mov	r0, r1
   19d62:	4770      	bx	lr
   19d64:	4801      	ldr	r0, [pc, #4]	; (19d6c <kmu_validate_slot_and_size_no_kdr+0x28>)
   19d66:	4770      	bx	lr
   19d68:	00f70001 	.word	0x00f70001
   19d6c:	00f70003 	.word	0x00f70003

00019d70 <kmu_load_key_aes>:
   19d70:	b470      	push	{r4, r5, r6}
   19d72:	2901      	cmp	r1, #1
   19d74:	b08f      	sub	sp, #60	; 0x3c
   19d76:	d009      	beq.n	19d8c <kmu_load_key_aes+0x1c>
   19d78:	2902      	cmp	r1, #2
   19d7a:	f000 80b4 	beq.w	19ee6 <kmu_load_key_aes+0x176>
   19d7e:	2900      	cmp	r1, #0
   19d80:	f000 80dd 	beq.w	19f3e <kmu_load_key_aes+0x1ce>
   19d84:	489d      	ldr	r0, [pc, #628]	; (19ffc <kmu_load_key_aes+0x28c>)
   19d86:	b00f      	add	sp, #60	; 0x3c
   19d88:	bc70      	pop	{r4, r5, r6}
   19d8a:	4770      	bx	lr
   19d8c:	2200      	movs	r2, #0
   19d8e:	4b9c      	ldr	r3, [pc, #624]	; (1a000 <kmu_load_key_aes+0x290>)
   19d90:	4c9c      	ldr	r4, [pc, #624]	; (1a004 <kmu_load_key_aes+0x294>)
   19d92:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   19d96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19d9a:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   19d9e:	00c4      	lsls	r4, r0, #3
   19da0:	9506      	str	r5, [sp, #24]
   19da2:	9d06      	ldr	r5, [sp, #24]
   19da4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19da8:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
   19dac:	1c45      	adds	r5, r0, #1
   19dae:	9606      	str	r6, [sp, #24]
   19db0:	9e06      	ldr	r6, [sp, #24]
   19db2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   19db6:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
   19dba:	f504 027f 	add.w	r2, r4, #16711680	; 0xff0000
   19dbe:	9606      	str	r6, [sp, #24]
   19dc0:	9e06      	ldr	r6, [sp, #24]
   19dc2:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
   19dc6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
   19dca:	6812      	ldr	r2, [r2, #0]
   19dcc:	f3bf 8f4f 	dsb	sy
   19dd0:	9207      	str	r2, [sp, #28]
   19dd2:	9d07      	ldr	r5, [sp, #28]
   19dd4:	4a8c      	ldr	r2, [pc, #560]	; (1a008 <kmu_load_key_aes+0x298>)
   19dd6:	4295      	cmp	r5, r2
   19dd8:	f040 80ad 	bne.w	19f36 <kmu_load_key_aes+0x1c6>
   19ddc:	461a      	mov	r2, r3
   19dde:	6019      	str	r1, [r3, #0]
   19de0:	e005      	b.n	19dee <kmu_load_key_aes+0x7e>
   19de2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19de6:	b9db      	cbnz	r3, 19e20 <kmu_load_key_aes+0xb0>
   19de8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19dec:	b9c3      	cbnz	r3, 19e20 <kmu_load_key_aes+0xb0>
   19dee:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   19df2:	3b00      	subs	r3, #0
   19df4:	bf18      	it	ne
   19df6:	2301      	movne	r3, #1
   19df8:	f88d 3004 	strb.w	r3, [sp, #4]
   19dfc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   19e00:	3b00      	subs	r3, #0
   19e02:	bf18      	it	ne
   19e04:	2301      	movne	r3, #1
   19e06:	f88d 3005 	strb.w	r3, [sp, #5]
   19e0a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19e0e:	3b00      	subs	r3, #0
   19e10:	bf18      	it	ne
   19e12:	2301      	movne	r3, #1
   19e14:	f88d 3006 	strb.w	r3, [sp, #6]
   19e18:	f89d 3004 	ldrb.w	r3, [sp, #4]
   19e1c:	2b00      	cmp	r3, #0
   19e1e:	d0e0      	beq.n	19de2 <kmu_load_key_aes+0x72>
   19e20:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19e24:	2b00      	cmp	r3, #0
   19e26:	f040 8177 	bne.w	1a118 <kmu_load_key_aes+0x3a8>
   19e2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19e2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   19e32:	2b00      	cmp	r3, #0
   19e34:	d153      	bne.n	19ede <kmu_load_key_aes+0x16e>
   19e36:	2501      	movs	r5, #1
   19e38:	4b71      	ldr	r3, [pc, #452]	; (1a000 <kmu_load_key_aes+0x290>)
   19e3a:	4972      	ldr	r1, [pc, #456]	; (1a004 <kmu_load_key_aes+0x294>)
   19e3c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   19e40:	f8c1 5500 	str.w	r5, [r1, #1280]	; 0x500
   19e44:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19e48:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   19e4c:	3002      	adds	r0, #2
   19e4e:	9108      	str	r1, [sp, #32]
   19e50:	9908      	ldr	r1, [sp, #32]
   19e52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19e56:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
   19e5a:	496c      	ldr	r1, [pc, #432]	; (1a00c <kmu_load_key_aes+0x29c>)
   19e5c:	9608      	str	r6, [sp, #32]
   19e5e:	9e08      	ldr	r6, [sp, #32]
   19e60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   19e64:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   19e68:	4421      	add	r1, r4
   19e6a:	9208      	str	r2, [sp, #32]
   19e6c:	9a08      	ldr	r2, [sp, #32]
   19e6e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   19e72:	680a      	ldr	r2, [r1, #0]
   19e74:	f3bf 8f4f 	dsb	sy
   19e78:	9209      	str	r2, [sp, #36]	; 0x24
   19e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
   19e7c:	4a64      	ldr	r2, [pc, #400]	; (1a010 <kmu_load_key_aes+0x2a0>)
   19e7e:	4291      	cmp	r1, r2
   19e80:	d159      	bne.n	19f36 <kmu_load_key_aes+0x1c6>
   19e82:	461a      	mov	r2, r3
   19e84:	601d      	str	r5, [r3, #0]
   19e86:	e005      	b.n	19e94 <kmu_load_key_aes+0x124>
   19e88:	f89d 3008 	ldrb.w	r3, [sp, #8]
   19e8c:	b9db      	cbnz	r3, 19ec6 <kmu_load_key_aes+0x156>
   19e8e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   19e92:	b9c3      	cbnz	r3, 19ec6 <kmu_load_key_aes+0x156>
   19e94:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   19e98:	3b00      	subs	r3, #0
   19e9a:	bf18      	it	ne
   19e9c:	2301      	movne	r3, #1
   19e9e:	f88d 3007 	strb.w	r3, [sp, #7]
   19ea2:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   19ea6:	3b00      	subs	r3, #0
   19ea8:	bf18      	it	ne
   19eaa:	2301      	movne	r3, #1
   19eac:	f88d 3008 	strb.w	r3, [sp, #8]
   19eb0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19eb4:	3b00      	subs	r3, #0
   19eb6:	bf18      	it	ne
   19eb8:	2301      	movne	r3, #1
   19eba:	f88d 3009 	strb.w	r3, [sp, #9]
   19ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19ec2:	2b00      	cmp	r3, #0
   19ec4:	d0e0      	beq.n	19e88 <kmu_load_key_aes+0x118>
   19ec6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   19eca:	2b00      	cmp	r3, #0
   19ecc:	f040 8124 	bne.w	1a118 <kmu_load_key_aes+0x3a8>
   19ed0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   19ed4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   19ed8:	2b00      	cmp	r3, #0
   19eda:	f000 8085 	beq.w	19fe8 <kmu_load_key_aes+0x278>
   19ede:	484d      	ldr	r0, [pc, #308]	; (1a014 <kmu_load_key_aes+0x2a4>)
   19ee0:	b00f      	add	sp, #60	; 0x3c
   19ee2:	bc70      	pop	{r4, r5, r6}
   19ee4:	4770      	bx	lr
   19ee6:	2200      	movs	r2, #0
   19ee8:	2501      	movs	r5, #1
   19eea:	4b45      	ldr	r3, [pc, #276]	; (1a000 <kmu_load_key_aes+0x290>)
   19eec:	4945      	ldr	r1, [pc, #276]	; (1a004 <kmu_load_key_aes+0x294>)
   19eee:	f8c1 5500 	str.w	r5, [r1, #1280]	; 0x500
   19ef2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19ef6:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
   19efa:	00c1      	lsls	r1, r0, #3
   19efc:	940a      	str	r4, [sp, #40]	; 0x28
   19efe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   19f00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19f04:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
   19f08:	1944      	adds	r4, r0, r5
   19f0a:	960a      	str	r6, [sp, #40]	; 0x28
   19f0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   19f0e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   19f12:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
   19f16:	f501 027f 	add.w	r2, r1, #16711680	; 0xff0000
   19f1a:	960a      	str	r6, [sp, #40]	; 0x28
   19f1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   19f1e:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
   19f22:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
   19f26:	6812      	ldr	r2, [r2, #0]
   19f28:	f3bf 8f4f 	dsb	sy
   19f2c:	920b      	str	r2, [sp, #44]	; 0x2c
   19f2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   19f30:	4a35      	ldr	r2, [pc, #212]	; (1a008 <kmu_load_key_aes+0x298>)
   19f32:	4294      	cmp	r4, r2
   19f34:	d05f      	beq.n	19ff6 <kmu_load_key_aes+0x286>
   19f36:	4838      	ldr	r0, [pc, #224]	; (1a018 <kmu_load_key_aes+0x2a8>)
   19f38:	b00f      	add	sp, #60	; 0x3c
   19f3a:	bc70      	pop	{r4, r5, r6}
   19f3c:	4770      	bx	lr
   19f3e:	2401      	movs	r4, #1
   19f40:	4b2f      	ldr	r3, [pc, #188]	; (1a000 <kmu_load_key_aes+0x290>)
   19f42:	4a30      	ldr	r2, [pc, #192]	; (1a004 <kmu_load_key_aes+0x294>)
   19f44:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   19f48:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   19f4c:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   19f50:	00c2      	lsls	r2, r0, #3
   19f52:	9504      	str	r5, [sp, #16]
   19f54:	9d04      	ldr	r5, [sp, #16]
   19f56:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   19f5a:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   19f5e:	4420      	add	r0, r4
   19f60:	9504      	str	r5, [sp, #16]
   19f62:	9d04      	ldr	r5, [sp, #16]
   19f64:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   19f68:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   19f6c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   19f70:	9104      	str	r1, [sp, #16]
   19f72:	9904      	ldr	r1, [sp, #16]
   19f74:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
   19f78:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   19f7c:	6812      	ldr	r2, [r2, #0]
   19f7e:	f3bf 8f4f 	dsb	sy
   19f82:	9205      	str	r2, [sp, #20]
   19f84:	9905      	ldr	r1, [sp, #20]
   19f86:	4a20      	ldr	r2, [pc, #128]	; (1a008 <kmu_load_key_aes+0x298>)
   19f88:	4291      	cmp	r1, r2
   19f8a:	d1d4      	bne.n	19f36 <kmu_load_key_aes+0x1c6>
   19f8c:	461a      	mov	r2, r3
   19f8e:	601c      	str	r4, [r3, #0]
   19f90:	e005      	b.n	19f9e <kmu_load_key_aes+0x22e>
   19f92:	f89d 3002 	ldrb.w	r3, [sp, #2]
   19f96:	b9db      	cbnz	r3, 19fd0 <kmu_load_key_aes+0x260>
   19f98:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19f9c:	b9c3      	cbnz	r3, 19fd0 <kmu_load_key_aes+0x260>
   19f9e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   19fa2:	3b00      	subs	r3, #0
   19fa4:	bf18      	it	ne
   19fa6:	2301      	movne	r3, #1
   19fa8:	f88d 3001 	strb.w	r3, [sp, #1]
   19fac:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   19fb0:	3b00      	subs	r3, #0
   19fb2:	bf18      	it	ne
   19fb4:	2301      	movne	r3, #1
   19fb6:	f88d 3002 	strb.w	r3, [sp, #2]
   19fba:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19fbe:	3b00      	subs	r3, #0
   19fc0:	bf18      	it	ne
   19fc2:	2301      	movne	r3, #1
   19fc4:	f88d 3003 	strb.w	r3, [sp, #3]
   19fc8:	f89d 3001 	ldrb.w	r3, [sp, #1]
   19fcc:	2b00      	cmp	r3, #0
   19fce:	d0e0      	beq.n	19f92 <kmu_load_key_aes+0x222>
   19fd0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   19fd4:	2b00      	cmp	r3, #0
   19fd6:	f040 809f 	bne.w	1a118 <kmu_load_key_aes+0x3a8>
   19fda:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19fde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   19fe2:	2b00      	cmp	r3, #0
   19fe4:	f47f af7b 	bne.w	19ede <kmu_load_key_aes+0x16e>
   19fe8:	4610      	mov	r0, r2
   19fea:	4b05      	ldr	r3, [pc, #20]	; (1a000 <kmu_load_key_aes+0x290>)
   19fec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   19ff0:	b00f      	add	sp, #60	; 0x3c
   19ff2:	bc70      	pop	{r4, r5, r6}
   19ff4:	4770      	bx	lr
   19ff6:	461a      	mov	r2, r3
   19ff8:	601d      	str	r5, [r3, #0]
   19ffa:	e015      	b.n	1a028 <kmu_load_key_aes+0x2b8>
   19ffc:	00f1000c 	.word	0x00f1000c
   1a000:	50039000 	.word	0x50039000
   1a004:	50844000 	.word	0x50844000
   1a008:	50845400 	.word	0x50845400
   1a00c:	00ff8408 	.word	0x00ff8408
   1a010:	50845410 	.word	0x50845410
   1a014:	00f70002 	.word	0x00f70002
   1a018:	00f70006 	.word	0x00f70006
   1a01c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1a020:	b9db      	cbnz	r3, 1a05a <kmu_load_key_aes+0x2ea>
   1a022:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a026:	b9c3      	cbnz	r3, 1a05a <kmu_load_key_aes+0x2ea>
   1a028:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   1a02c:	3b00      	subs	r3, #0
   1a02e:	bf18      	it	ne
   1a030:	2301      	movne	r3, #1
   1a032:	f88d 300a 	strb.w	r3, [sp, #10]
   1a036:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   1a03a:	3b00      	subs	r3, #0
   1a03c:	bf18      	it	ne
   1a03e:	2301      	movne	r3, #1
   1a040:	f88d 300b 	strb.w	r3, [sp, #11]
   1a044:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1a048:	3b00      	subs	r3, #0
   1a04a:	bf18      	it	ne
   1a04c:	2301      	movne	r3, #1
   1a04e:	f88d 300c 	strb.w	r3, [sp, #12]
   1a052:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1a056:	2b00      	cmp	r3, #0
   1a058:	d0e0      	beq.n	1a01c <kmu_load_key_aes+0x2ac>
   1a05a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1a05e:	2b00      	cmp	r3, #0
   1a060:	d15a      	bne.n	1a118 <kmu_load_key_aes+0x3a8>
   1a062:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a066:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1a06a:	2b00      	cmp	r3, #0
   1a06c:	f47f af37 	bne.w	19ede <kmu_load_key_aes+0x16e>
   1a070:	2501      	movs	r5, #1
   1a072:	4b2b      	ldr	r3, [pc, #172]	; (1a120 <kmu_load_key_aes+0x3b0>)
   1a074:	4c2b      	ldr	r4, [pc, #172]	; (1a124 <kmu_load_key_aes+0x3b4>)
   1a076:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a07a:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
   1a07e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1a082:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
   1a086:	3002      	adds	r0, #2
   1a088:	940c      	str	r4, [sp, #48]	; 0x30
   1a08a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1a08c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1a090:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
   1a094:	4c24      	ldr	r4, [pc, #144]	; (1a128 <kmu_load_key_aes+0x3b8>)
   1a096:	960c      	str	r6, [sp, #48]	; 0x30
   1a098:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1a09a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1a09e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1a0a2:	440c      	add	r4, r1
   1a0a4:	920c      	str	r2, [sp, #48]	; 0x30
   1a0a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a0a8:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1a0ac:	6822      	ldr	r2, [r4, #0]
   1a0ae:	f3bf 8f4f 	dsb	sy
   1a0b2:	920d      	str	r2, [sp, #52]	; 0x34
   1a0b4:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a0b6:	4a1d      	ldr	r2, [pc, #116]	; (1a12c <kmu_load_key_aes+0x3bc>)
   1a0b8:	4291      	cmp	r1, r2
   1a0ba:	f47f af3c 	bne.w	19f36 <kmu_load_key_aes+0x1c6>
   1a0be:	461a      	mov	r2, r3
   1a0c0:	601d      	str	r5, [r3, #0]
   1a0c2:	e005      	b.n	1a0d0 <kmu_load_key_aes+0x360>
   1a0c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1a0c8:	b9db      	cbnz	r3, 1a102 <kmu_load_key_aes+0x392>
   1a0ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a0ce:	b9c3      	cbnz	r3, 1a102 <kmu_load_key_aes+0x392>
   1a0d0:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   1a0d4:	3b00      	subs	r3, #0
   1a0d6:	bf18      	it	ne
   1a0d8:	2301      	movne	r3, #1
   1a0da:	f88d 300d 	strb.w	r3, [sp, #13]
   1a0de:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   1a0e2:	3b00      	subs	r3, #0
   1a0e4:	bf18      	it	ne
   1a0e6:	2301      	movne	r3, #1
   1a0e8:	f88d 300e 	strb.w	r3, [sp, #14]
   1a0ec:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1a0f0:	3b00      	subs	r3, #0
   1a0f2:	bf18      	it	ne
   1a0f4:	2301      	movne	r3, #1
   1a0f6:	f88d 300f 	strb.w	r3, [sp, #15]
   1a0fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1a0fe:	2b00      	cmp	r3, #0
   1a100:	d0e0      	beq.n	1a0c4 <kmu_load_key_aes+0x354>
   1a102:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1a106:	b93b      	cbnz	r3, 1a118 <kmu_load_key_aes+0x3a8>
   1a108:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a10c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1a110:	2b00      	cmp	r3, #0
   1a112:	f43f af69 	beq.w	19fe8 <kmu_load_key_aes+0x278>
   1a116:	e6e2      	b.n	19ede <kmu_load_key_aes+0x16e>
   1a118:	4805      	ldr	r0, [pc, #20]	; (1a130 <kmu_load_key_aes+0x3c0>)
   1a11a:	b00f      	add	sp, #60	; 0x3c
   1a11c:	bc70      	pop	{r4, r5, r6}
   1a11e:	4770      	bx	lr
   1a120:	50039000 	.word	0x50039000
   1a124:	50844000 	.word	0x50844000
   1a128:	00ff8408 	.word	0x00ff8408
   1a12c:	50845410 	.word	0x50845410
   1a130:	00f70001 	.word	0x00f70001

0001a134 <kmu_derive_cmac>:
   1a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a138:	2400      	movs	r4, #0
   1a13a:	b0cd      	sub	sp, #308	; 0x134
   1a13c:	4681      	mov	r9, r0
   1a13e:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1a142:	460f      	mov	r7, r1
   1a144:	4616      	mov	r6, r2
   1a146:	4621      	mov	r1, r4
   1a148:	2274      	movs	r2, #116	; 0x74
   1a14a:	a80e      	add	r0, sp, #56	; 0x38
   1a14c:	469b      	mov	fp, r3
   1a14e:	f000 faa6 	bl	1a69e <memset>
   1a152:	4621      	mov	r1, r4
   1a154:	2280      	movs	r2, #128	; 0x80
   1a156:	a82c      	add	r0, sp, #176	; 0xb0
   1a158:	942b      	str	r4, [sp, #172]	; 0xac
   1a15a:	f000 faa0 	bl	1a69e <memset>
   1a15e:	2384      	movs	r3, #132	; 0x84
   1a160:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1a164:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1a168:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1a16c:	9305      	str	r3, [sp, #20]
   1a16e:	d861      	bhi.n	1a234 <kmu_derive_cmac+0x100>
   1a170:	ab05      	add	r3, sp, #20
   1a172:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1a176:	9301      	str	r3, [sp, #4]
   1a178:	4659      	mov	r1, fp
   1a17a:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1a17e:	4630      	mov	r0, r6
   1a180:	9502      	str	r5, [sp, #8]
   1a182:	f8cd a000 	str.w	sl, [sp]
   1a186:	f000 f865 	bl	1a254 <UtilCmacBuildDataForDerivation>
   1a18a:	2800      	cmp	r0, #0
   1a18c:	d14d      	bne.n	1a22a <kmu_derive_cmac+0xf6>
   1a18e:	2102      	movs	r1, #2
   1a190:	2200      	movs	r2, #0
   1a192:	2301      	movs	r3, #1
   1a194:	2607      	movs	r6, #7
   1a196:	2401      	movs	r4, #1
   1a198:	f88d 1013 	strb.w	r1, [sp, #19]
   1a19c:	901c      	str	r0, [sp, #112]	; 0x70
   1a19e:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1a1a2:	2110      	movs	r1, #16
   1a1a4:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
   1a1a8:	a80e      	add	r0, sp, #56	; 0x38
   1a1aa:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1a1ae:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1a1b2:	971a      	str	r7, [sp, #104]	; 0x68
   1a1b4:	961b      	str	r6, [sp, #108]	; 0x6c
   1a1b6:	9426      	str	r4, [sp, #152]	; 0x98
   1a1b8:	f7fe feec 	bl	18f94 <CC_PalMemSetZeroPlat>
   1a1bc:	2210      	movs	r2, #16
   1a1be:	f10d 0920 	add.w	r9, sp, #32
   1a1c2:	9200      	str	r2, [sp, #0]
   1a1c4:	4650      	mov	r0, sl
   1a1c6:	9905      	ldr	r1, [sp, #20]
   1a1c8:	ab0a      	add	r3, sp, #40	; 0x28
   1a1ca:	aa06      	add	r2, sp, #24
   1a1cc:	f8cd 9004 	str.w	r9, [sp, #4]
   1a1d0:	f7fe ff8c 	bl	190ec <SetDataBuffersInfo>
   1a1d4:	4607      	mov	r7, r0
   1a1d6:	b188      	cbz	r0, 1a1fc <kmu_derive_cmac+0xc8>
   1a1d8:	e01e      	b.n	1a218 <kmu_derive_cmac+0xe4>
   1a1da:	2d10      	cmp	r5, #16
   1a1dc:	462e      	mov	r6, r5
   1a1de:	bf28      	it	cs
   1a1e0:	2610      	movcs	r6, #16
   1a1e2:	a90e      	add	r1, sp, #56	; 0x38
   1a1e4:	4632      	mov	r2, r6
   1a1e6:	f7fe fed1 	bl	18f8c <CC_PalMemCopyPlat>
   1a1ea:	2110      	movs	r1, #16
   1a1ec:	a80e      	add	r0, sp, #56	; 0x38
   1a1ee:	f7fe fed1 	bl	18f94 <CC_PalMemSetZeroPlat>
   1a1f2:	3401      	adds	r4, #1
   1a1f4:	1bad      	subs	r5, r5, r6
   1a1f6:	4437      	add	r7, r6
   1a1f8:	b2e4      	uxtb	r4, r4
   1a1fa:	d020      	beq.n	1a23e <kmu_derive_cmac+0x10a>
   1a1fc:	9b05      	ldr	r3, [sp, #20]
   1a1fe:	464a      	mov	r2, r9
   1a200:	a906      	add	r1, sp, #24
   1a202:	a80e      	add	r0, sp, #56	; 0x38
   1a204:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1a208:	f7ff fc2a 	bl	19a60 <FinishAesDrv>
   1a20c:	4603      	mov	r3, r0
   1a20e:	eb08 0007 	add.w	r0, r8, r7
   1a212:	2b00      	cmp	r3, #0
   1a214:	d0e1      	beq.n	1a1da <kmu_derive_cmac+0xa6>
   1a216:	461f      	mov	r7, r3
   1a218:	2274      	movs	r2, #116	; 0x74
   1a21a:	2100      	movs	r1, #0
   1a21c:	a80e      	add	r0, sp, #56	; 0x38
   1a21e:	f7fe feb7 	bl	18f90 <CC_PalMemSetPlat>
   1a222:	4638      	mov	r0, r7
   1a224:	b04d      	add	sp, #308	; 0x134
   1a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a22a:	4f08      	ldr	r7, [pc, #32]	; (1a24c <kmu_derive_cmac+0x118>)
   1a22c:	4638      	mov	r0, r7
   1a22e:	b04d      	add	sp, #308	; 0x134
   1a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a234:	4f06      	ldr	r7, [pc, #24]	; (1a250 <kmu_derive_cmac+0x11c>)
   1a236:	4638      	mov	r0, r7
   1a238:	b04d      	add	sp, #308	; 0x134
   1a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a23e:	2274      	movs	r2, #116	; 0x74
   1a240:	2100      	movs	r1, #0
   1a242:	a80e      	add	r0, sp, #56	; 0x38
   1a244:	462f      	mov	r7, r5
   1a246:	f7fe fea3 	bl	18f90 <CC_PalMemSetPlat>
   1a24a:	e7ea      	b.n	1a222 <kmu_derive_cmac+0xee>
   1a24c:	00f1000e 	.word	0x00f1000e
   1a250:	00f1000f 	.word	0x00f1000f

0001a254 <UtilCmacBuildDataForDerivation>:
   1a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a258:	2600      	movs	r6, #0
   1a25a:	b082      	sub	sp, #8
   1a25c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a25e:	9601      	str	r6, [sp, #4]
   1a260:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1a264:	d83b      	bhi.n	1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a266:	00ee      	lsls	r6, r5, #3
   1a268:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1a26c:	461f      	mov	r7, r3
   1a26e:	bf34      	ite	cc
   1a270:	2303      	movcc	r3, #3
   1a272:	2304      	movcs	r3, #4
   1a274:	1e4d      	subs	r5, r1, #1
   1a276:	2d3f      	cmp	r5, #63	; 0x3f
   1a278:	460c      	mov	r4, r1
   1a27a:	9300      	str	r3, [sp, #0]
   1a27c:	d82f      	bhi.n	1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a27e:	b370      	cbz	r0, 1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a280:	4690      	mov	r8, r2
   1a282:	b117      	cbz	r7, 1a28a <UtilCmacBuildDataForDerivation+0x36>
   1a284:	b35a      	cbz	r2, 1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a286:	2f40      	cmp	r7, #64	; 0x40
   1a288:	d829      	bhi.n	1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a28a:	9a08      	ldr	r2, [sp, #32]
   1a28c:	b33a      	cbz	r2, 1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a290:	6811      	ldr	r1, [r2, #0]
   1a292:	b321      	cbz	r1, 1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a294:	19e2      	adds	r2, r4, r7
   1a296:	4413      	add	r3, r2
   1a298:	4299      	cmp	r1, r3
   1a29a:	d320      	bcc.n	1a2de <UtilCmacBuildDataForDerivation+0x8a>
   1a29c:	9b08      	ldr	r3, [sp, #32]
   1a29e:	4622      	mov	r2, r4
   1a2a0:	4601      	mov	r1, r0
   1a2a2:	1c58      	adds	r0, r3, #1
   1a2a4:	f7fe fe72 	bl	18f8c <CC_PalMemCopyPlat>
   1a2a8:	2200      	movs	r2, #0
   1a2aa:	9b08      	ldr	r3, [sp, #32]
   1a2ac:	4423      	add	r3, r4
   1a2ae:	705a      	strb	r2, [r3, #1]
   1a2b0:	3402      	adds	r4, #2
   1a2b2:	bb07      	cbnz	r7, 1a2f6 <UtilCmacBuildDataForDerivation+0xa2>
   1a2b4:	2eff      	cmp	r6, #255	; 0xff
   1a2b6:	9600      	str	r6, [sp, #0]
   1a2b8:	d915      	bls.n	1a2e6 <UtilCmacBuildDataForDerivation+0x92>
   1a2ba:	9b08      	ldr	r3, [sp, #32]
   1a2bc:	0235      	lsls	r5, r6, #8
   1a2be:	b2ad      	uxth	r5, r5
   1a2c0:	1918      	adds	r0, r3, r4
   1a2c2:	2202      	movs	r2, #2
   1a2c4:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1a2c8:	a901      	add	r1, sp, #4
   1a2ca:	9501      	str	r5, [sp, #4]
   1a2cc:	f7fe fe5e 	bl	18f8c <CC_PalMemCopyPlat>
   1a2d0:	3402      	adds	r4, #2
   1a2d2:	2000      	movs	r0, #0
   1a2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a2d6:	601c      	str	r4, [r3, #0]
   1a2d8:	b002      	add	sp, #8
   1a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a2de:	480a      	ldr	r0, [pc, #40]	; (1a308 <UtilCmacBuildDataForDerivation+0xb4>)
   1a2e0:	b002      	add	sp, #8
   1a2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a2e6:	9b08      	ldr	r3, [sp, #32]
   1a2e8:	2201      	movs	r2, #1
   1a2ea:	1918      	adds	r0, r3, r4
   1a2ec:	4669      	mov	r1, sp
   1a2ee:	f7fe fe4d 	bl	18f8c <CC_PalMemCopyPlat>
   1a2f2:	3401      	adds	r4, #1
   1a2f4:	e7ed      	b.n	1a2d2 <UtilCmacBuildDataForDerivation+0x7e>
   1a2f6:	9b08      	ldr	r3, [sp, #32]
   1a2f8:	4641      	mov	r1, r8
   1a2fa:	1918      	adds	r0, r3, r4
   1a2fc:	463a      	mov	r2, r7
   1a2fe:	f7fe fe45 	bl	18f8c <CC_PalMemCopyPlat>
   1a302:	443c      	add	r4, r7
   1a304:	e7d6      	b.n	1a2b4 <UtilCmacBuildDataForDerivation+0x60>
   1a306:	bf00      	nop
   1a308:	80000006 	.word	0x80000006

0001a30c <__acle_se_hash>:
void hash(uint8_t* out, uint8_t* in, size_t size){
   1a30c:	b508      	push	{r3, lr}
	    ocrypto_sha256(out, in, size);
   1a30e:	f7f7 fabb 	bl	11888 <ocrypto_sha256>
}
   1a312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a316:	4670      	mov	r0, lr
   1a318:	4671      	mov	r1, lr
   1a31a:	4672      	mov	r2, lr
   1a31c:	4673      	mov	r3, lr
   1a31e:	46f4      	mov	ip, lr
   1a320:	f38e 8c00 	msr	CPSR_fs, lr
   1a324:	4774      	bxns	lr

0001a326 <__acle_se_aes128ctr>:
void aes128ctr(uint8_t* key, uint8_t* iv, uint8_t* in, uint8_t* out){
   1a326:	b530      	push	{r4, r5, lr}
   1a328:	4615      	mov	r5, r2
   1a32a:	461c      	mov	r4, r3
   1a32c:	b0c7      	sub	sp, #284	; 0x11c
    ocrypto_aes_ctr_init(&ctx, key, 16, iv);
   1a32e:	460b      	mov	r3, r1
   1a330:	2210      	movs	r2, #16
   1a332:	4601      	mov	r1, r0
   1a334:	4668      	mov	r0, sp
   1a336:	f7fc ff9d 	bl	17274 <ocrypto_aes_ctr_init>
    ocrypto_aes_ctr_decrypt(&ctx, out, in, 32);
   1a33a:	2320      	movs	r3, #32
   1a33c:	462a      	mov	r2, r5
   1a33e:	4621      	mov	r1, r4
   1a340:	4668      	mov	r0, sp
   1a342:	f7fc ffab 	bl	1729c <ocrypto_aes_ctr_decrypt>
}
   1a346:	b047      	add	sp, #284	; 0x11c
   1a348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1a34c:	4670      	mov	r0, lr
   1a34e:	4671      	mov	r1, lr
   1a350:	4672      	mov	r2, lr
   1a352:	4673      	mov	r3, lr
   1a354:	46f4      	mov	ip, lr
   1a356:	f38e 8c00 	msr	CPSR_fs, lr
   1a35a:	4774      	bxns	lr

0001a35c <main>:
#include <bl_crypto.h>
#include <ocrypto_aes_ctr.h>
#include <bls_hsm.h>

void main(void)
{
   1a35c:	b508      	push	{r3, lr}
	spm_config();
   1a35e:	f7f8 fe25 	bl	12fac <spm_config>
	spm_jump();
}
   1a362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   1a366:	f7f8 bdc1 	b.w	12eec <spm_jump>

0001a36a <sys_notify_validate>:
	if (notify == NULL) {
   1a36a:	4603      	mov	r3, r0
   1a36c:	b158      	cbz	r0, 1a386 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a36e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a370:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1a374:	2a01      	cmp	r2, #1
   1a376:	d003      	beq.n	1a380 <sys_notify_validate+0x16>
   1a378:	2a03      	cmp	r2, #3
   1a37a:	d104      	bne.n	1a386 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
   1a37c:	6802      	ldr	r2, [r0, #0]
   1a37e:	b112      	cbz	r2, 1a386 <sys_notify_validate+0x1c>
		notify->result = 0;
   1a380:	2000      	movs	r0, #0
   1a382:	6098      	str	r0, [r3, #8]
   1a384:	4770      	bx	lr
		return -EINVAL;
   1a386:	f06f 0015 	mvn.w	r0, #21
}
   1a38a:	4770      	bx	lr

0001a38c <arch_printk_char_out>:
}
   1a38c:	2000      	movs	r0, #0
   1a38e:	4770      	bx	lr

0001a390 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   1a390:	b40f      	push	{r0, r1, r2, r3}
   1a392:	b507      	push	{r0, r1, r2, lr}
   1a394:	a904      	add	r1, sp, #16
   1a396:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1a39a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   1a39c:	f7f7 fd82 	bl	11ea4 <vprintk>
	}
	va_end(ap);
}
   1a3a0:	b003      	add	sp, #12
   1a3a2:	f85d eb04 	ldr.w	lr, [sp], #4
   1a3a6:	b004      	add	sp, #16
   1a3a8:	4770      	bx	lr

0001a3aa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a3aa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1a3ac:	f013 0307 	ands.w	r3, r3, #7
   1a3b0:	d105      	bne.n	1a3be <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a3b2:	6803      	ldr	r3, [r0, #0]
   1a3b4:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1a3b6:	bf0c      	ite	eq
   1a3b8:	2000      	moveq	r0, #0
   1a3ba:	2003      	movne	r0, #3
   1a3bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a3be:	2b02      	cmp	r3, #2
   1a3c0:	d105      	bne.n	1a3ce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a3c2:	8bc3      	ldrh	r3, [r0, #30]
   1a3c4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1a3c6:	bf14      	ite	ne
   1a3c8:	2000      	movne	r0, #0
   1a3ca:	2004      	moveq	r0, #4
   1a3cc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a3ce:	2b01      	cmp	r3, #1
   1a3d0:	d105      	bne.n	1a3de <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a3d2:	6803      	ldr	r3, [r0, #0]
   1a3d4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1a3d6:	bf0c      	ite	eq
   1a3d8:	2000      	moveq	r0, #0
   1a3da:	2005      	movne	r0, #5
   1a3dc:	4770      	bx	lr
	int evt = EVT_NOP;
   1a3de:	2000      	movs	r0, #0
}
   1a3e0:	4770      	bx	lr

0001a3e2 <notify_one>:
{
   1a3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3e6:	460d      	mov	r5, r1
   1a3e8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a3ea:	4619      	mov	r1, r3
   1a3ec:	1d28      	adds	r0, r5, #4
{
   1a3ee:	4690      	mov	r8, r2
   1a3f0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a3f2:	f7f7 fd2b 	bl	11e4c <sys_notify_finalize>
	if (cb) {
   1a3f6:	4604      	mov	r4, r0
   1a3f8:	b138      	cbz	r0, 1a40a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a3fa:	4633      	mov	r3, r6
   1a3fc:	4642      	mov	r2, r8
   1a3fe:	4629      	mov	r1, r5
   1a400:	4638      	mov	r0, r7
   1a402:	46a4      	mov	ip, r4
}
   1a404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a408:	4760      	bx	ip
}
   1a40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a40e <validate_args>:
{
   1a40e:	b510      	push	{r4, lr}
   1a410:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a412:	b140      	cbz	r0, 1a426 <validate_args+0x18>
   1a414:	b139      	cbz	r1, 1a426 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1a416:	1d08      	adds	r0, r1, #4
   1a418:	f7ff ffa7 	bl	1a36a <sys_notify_validate>
	if ((rv == 0)
   1a41c:	b928      	cbnz	r0, 1a42a <validate_args+0x1c>
	    && ((cli->notify.flags
   1a41e:	68a3      	ldr	r3, [r4, #8]
   1a420:	f033 0303 	bics.w	r3, r3, #3
   1a424:	d001      	beq.n	1a42a <validate_args+0x1c>
		rv = -EINVAL;
   1a426:	f06f 0015 	mvn.w	r0, #21
}
   1a42a:	bd10      	pop	{r4, pc}

0001a42c <onoff_manager_init>:
{
   1a42c:	b538      	push	{r3, r4, r5, lr}
   1a42e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a430:	4605      	mov	r5, r0
   1a432:	b158      	cbz	r0, 1a44c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a434:	b151      	cbz	r1, 1a44c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a436:	680b      	ldr	r3, [r1, #0]
   1a438:	b143      	cbz	r3, 1a44c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a43a:	684b      	ldr	r3, [r1, #4]
   1a43c:	b133      	cbz	r3, 1a44c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a43e:	2220      	movs	r2, #32
   1a440:	2100      	movs	r1, #0
   1a442:	f000 f92c 	bl	1a69e <memset>
	return 0;
   1a446:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a448:	612c      	str	r4, [r5, #16]
}
   1a44a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a44c:	f06f 0015 	mvn.w	r0, #21
   1a450:	e7fb      	b.n	1a44a <onoff_manager_init+0x1e>

0001a452 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1a452:	4604      	mov	r4, r0
   1a454:	b508      	push	{r3, lr}
   1a456:	4608      	mov	r0, r1
   1a458:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1a45a:	461a      	mov	r2, r3
   1a45c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1a45e:	f7fc fb9d 	bl	16b9c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1a462:	f7f9 fc1d 	bl	13ca0 <z_impl_k_thread_abort>

0001a466 <encode_uint>:
{
   1a466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a46a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1a46c:	78d3      	ldrb	r3, [r2, #3]
{
   1a46e:	4614      	mov	r4, r2
	switch (specifier) {
   1a470:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a472:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1a476:	4606      	mov	r6, r0
   1a478:	460f      	mov	r7, r1
   1a47a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1a47c:	d02d      	beq.n	1a4da <encode_uint+0x74>
   1a47e:	d828      	bhi.n	1a4d2 <encode_uint+0x6c>
		return 16;
   1a480:	2b58      	cmp	r3, #88	; 0x58
   1a482:	bf14      	ite	ne
   1a484:	250a      	movne	r5, #10
   1a486:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   1a488:	46aa      	mov	sl, r5
   1a48a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   1a48e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1a492:	4652      	mov	r2, sl
   1a494:	465b      	mov	r3, fp
   1a496:	4630      	mov	r0, r6
   1a498:	4639      	mov	r1, r7
   1a49a:	f7e5 fed1 	bl	240 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a49e:	2a09      	cmp	r2, #9
   1a4a0:	b2d3      	uxtb	r3, r2
   1a4a2:	d81f      	bhi.n	1a4e4 <encode_uint+0x7e>
   1a4a4:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1a4a6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a4a8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1a4aa:	bf08      	it	eq
   1a4ac:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a4ae:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1a4b2:	d301      	bcc.n	1a4b8 <encode_uint+0x52>
   1a4b4:	45c8      	cmp	r8, r9
   1a4b6:	d812      	bhi.n	1a4de <encode_uint+0x78>
	if (conv->flag_hash) {
   1a4b8:	7823      	ldrb	r3, [r4, #0]
   1a4ba:	069b      	lsls	r3, r3, #26
   1a4bc:	d505      	bpl.n	1a4ca <encode_uint+0x64>
		if (radix == 8) {
   1a4be:	2d08      	cmp	r5, #8
   1a4c0:	d116      	bne.n	1a4f0 <encode_uint+0x8a>
			conv->altform_0 = true;
   1a4c2:	78a3      	ldrb	r3, [r4, #2]
   1a4c4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1a4c8:	70a3      	strb	r3, [r4, #2]
}
   1a4ca:	4640      	mov	r0, r8
   1a4cc:	b003      	add	sp, #12
   1a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a4d2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1a4d6:	2b70      	cmp	r3, #112	; 0x70
   1a4d8:	e7d3      	b.n	1a482 <encode_uint+0x1c>
	switch (specifier) {
   1a4da:	2508      	movs	r5, #8
   1a4dc:	e7d4      	b.n	1a488 <encode_uint+0x22>
		value /= radix;
   1a4de:	4606      	mov	r6, r0
   1a4e0:	460f      	mov	r7, r1
   1a4e2:	e7d6      	b.n	1a492 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a4e4:	9a01      	ldr	r2, [sp, #4]
   1a4e6:	2a19      	cmp	r2, #25
   1a4e8:	bf94      	ite	ls
   1a4ea:	3337      	addls	r3, #55	; 0x37
   1a4ec:	3357      	addhi	r3, #87	; 0x57
   1a4ee:	e7da      	b.n	1a4a6 <encode_uint+0x40>
		} else if (radix == 16) {
   1a4f0:	2d10      	cmp	r5, #16
   1a4f2:	d1ea      	bne.n	1a4ca <encode_uint+0x64>
			conv->altform_0c = true;
   1a4f4:	78a3      	ldrb	r3, [r4, #2]
   1a4f6:	f043 0310 	orr.w	r3, r3, #16
   1a4fa:	e7e5      	b.n	1a4c8 <encode_uint+0x62>

0001a4fc <outs>:
{
   1a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a500:	4607      	mov	r7, r0
   1a502:	4688      	mov	r8, r1
   1a504:	4615      	mov	r5, r2
   1a506:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a508:	4614      	mov	r4, r2
   1a50a:	42b4      	cmp	r4, r6
   1a50c:	eba4 0005 	sub.w	r0, r4, r5
   1a510:	d302      	bcc.n	1a518 <outs+0x1c>
   1a512:	b93e      	cbnz	r6, 1a524 <outs+0x28>
   1a514:	7823      	ldrb	r3, [r4, #0]
   1a516:	b12b      	cbz	r3, 1a524 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1a518:	4641      	mov	r1, r8
   1a51a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a51e:	47b8      	blx	r7
		if (rc < 0) {
   1a520:	2800      	cmp	r0, #0
   1a522:	daf2      	bge.n	1a50a <outs+0xe>
}
   1a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a528 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1a528:	4040      	eors	r0, r0
   1a52a:	f380 8811 	msr	BASEPRI, r0
   1a52e:	f04f 0004 	mov.w	r0, #4
   1a532:	df02      	svc	2
}
   1a534:	4770      	bx	lr

0001a536 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1a536:	4770      	bx	lr

0001a538 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1a538:	b084      	sub	sp, #16
   1a53a:	ab04      	add	r3, sp, #16
   1a53c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1a540:	2300      	movs	r3, #0
   1a542:	f383 8811 	msr	BASEPRI, r3
   1a546:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1a54a:	b004      	add	sp, #16
   1a54c:	4770      	bx	lr

0001a54e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   1a54e:	b40f      	push	{r0, r1, r2, r3}
   1a550:	b507      	push	{r0, r1, r2, lr}
   1a552:	a904      	add	r1, sp, #16
   1a554:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1a558:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1a55a:	f7f7 fca3 	bl	11ea4 <vprintk>
	va_end(ap);
}
   1a55e:	b003      	add	sp, #12
   1a560:	f85d eb04 	ldr.w	lr, [sp], #4
   1a564:	b004      	add	sp, #16
   1a566:	4770      	bx	lr

0001a568 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1a568:	2200      	movs	r2, #0
   1a56a:	e9c0 2200 	strd	r2, r2, [r0]
   1a56e:	6082      	str	r2, [r0, #8]
}
   1a570:	4770      	bx	lr

0001a572 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   1a572:	2000      	movs	r0, #0
{
   1a574:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1a576:	f7f8 facb 	bl	12b10 <sys_reboot>

0001a57a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1a57a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1a57c:	6800      	ldr	r0, [r0, #0]
   1a57e:	f7f8 bf27 	b.w	133d0 <z_arm_fatal_error>

0001a582 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a582:	2100      	movs	r1, #0
   1a584:	2001      	movs	r0, #1
   1a586:	f7f8 bf23 	b.w	133d0 <z_arm_fatal_error>

0001a58a <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
   1a58a:	4602      	mov	r2, r0
   1a58c:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   1a58e:	4608      	mov	r0, r1
   1a590:	b9c1      	cbnz	r1, 1a5c4 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
   1a592:	2b00      	cmp	r3, #0
   1a594:	db27      	blt.n	1a5e6 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1a596:	2001      	movs	r0, #1
   1a598:	095b      	lsrs	r3, r3, #5
   1a59a:	009b      	lsls	r3, r3, #2
   1a59c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1a5a0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1a5a4:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   1a5a8:	f002 021f 	and.w	r2, r2, #31
   1a5ac:	4090      	lsls	r0, r2
   1a5ae:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1a5b2:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   1a5b6:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   1a5ba:	40d0      	lsrs	r0, r2
   1a5bc:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   1a5c0:	b2c0      	uxtb	r0, r0
   1a5c2:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   1a5c4:	2b00      	cmp	r3, #0
   1a5c6:	db0d      	blt.n	1a5e4 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1a5c8:	2101      	movs	r1, #1
   1a5ca:	095b      	lsrs	r3, r3, #5
   1a5cc:	009b      	lsls	r3, r3, #2
   1a5ce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1a5d2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1a5d6:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   1a5da:	f002 021f 	and.w	r2, r2, #31
   1a5de:	4091      	lsls	r1, r2
   1a5e0:	4301      	orrs	r1, r0
   1a5e2:	e7e6      	b.n	1a5b2 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
   1a5e4:	2000      	movs	r0, #0
	}
}
   1a5e6:	4770      	bx	lr

0001a5e8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1a5e8:	b508      	push	{r3, lr}
	handler();
   1a5ea:	f7f8 ff63 	bl	134b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1a5ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1a5f2:	f7f9 b825 	b.w	13640 <z_arm_exc_exit>

0001a5f6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1a5f6:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1a5f8:	f383 880b 	msr	PSPLIM, r3
}
   1a5fc:	4770      	bx	lr

0001a5fe <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1a5fe:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1a602:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a606:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1a608:	bf08      	it	eq
   1a60a:	f06f 0015 	mvneq.w	r0, #21
   1a60e:	4770      	bx	lr

0001a610 <arm_cmse_addr_is_secure>:
   1a610:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   1a614:	f3c0 5080 	ubfx	r0, r0, #22, #1
   1a618:	4770      	bx	lr

0001a61a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1a61a:	4603      	mov	r3, r0
	size_t n = 0;
   1a61c:	2000      	movs	r0, #0

	while (*s != '\0') {
   1a61e:	5c1a      	ldrb	r2, [r3, r0]
   1a620:	b902      	cbnz	r2, 1a624 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1a622:	4770      	bx	lr
		n++;
   1a624:	3001      	adds	r0, #1
   1a626:	e7fa      	b.n	1a61e <strlen+0x4>

0001a628 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1a628:	4603      	mov	r3, r0
	size_t n = 0;
   1a62a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1a62c:	5c1a      	ldrb	r2, [r3, r0]
   1a62e:	b10a      	cbz	r2, 1a634 <strnlen+0xc>
   1a630:	4288      	cmp	r0, r1
   1a632:	d100      	bne.n	1a636 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1a634:	4770      	bx	lr
		n++;
   1a636:	3001      	adds	r0, #1
   1a638:	e7f8      	b.n	1a62c <strnlen+0x4>

0001a63a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1a63a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1a63c:	b15a      	cbz	r2, 1a656 <memcmp+0x1c>
   1a63e:	3901      	subs	r1, #1
   1a640:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1a642:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a646:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1a64a:	42a0      	cmp	r0, r4
   1a64c:	d001      	beq.n	1a652 <memcmp+0x18>
   1a64e:	429a      	cmp	r2, r3
   1a650:	d0f7      	beq.n	1a642 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1a652:	1ad0      	subs	r0, r2, r3
}
   1a654:	bd10      	pop	{r4, pc}
		return 0;
   1a656:	4610      	mov	r0, r2
   1a658:	e7fc      	b.n	1a654 <memcmp+0x1a>

0001a65a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1a65a:	1a43      	subs	r3, r0, r1
   1a65c:	4293      	cmp	r3, r2
{
   1a65e:	b510      	push	{r4, lr}
   1a660:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1a664:	d308      	bcc.n	1a678 <memmove+0x1e>
	char *dest = d;
   1a666:	4602      	mov	r2, r0
   1a668:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1a66a:	429a      	cmp	r2, r3
   1a66c:	d00b      	beq.n	1a686 <memmove+0x2c>
			*dest = *src;
   1a66e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a672:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1a676:	e7f8      	b.n	1a66a <memmove+0x10>
   1a678:	440a      	add	r2, r1
			dest[n] = src[n];
   1a67a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   1a67e:	428a      	cmp	r2, r1
			dest[n] = src[n];
   1a680:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1a684:	d1f9      	bne.n	1a67a <memmove+0x20>
		}
	}

	return d;
}
   1a686:	bd10      	pop	{r4, pc}

0001a688 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1a688:	b510      	push	{r4, lr}
   1a68a:	1e43      	subs	r3, r0, #1
   1a68c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1a68e:	4291      	cmp	r1, r2
   1a690:	d100      	bne.n	1a694 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1a692:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1a694:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a698:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1a69c:	e7f7      	b.n	1a68e <memcpy+0x6>

0001a69e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1a69e:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   1a6a0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1a6a2:	4402      	add	r2, r0
   1a6a4:	4293      	cmp	r3, r2
   1a6a6:	d100      	bne.n	1a6aa <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1a6a8:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1a6aa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a6ae:	e7f9      	b.n	1a6a4 <memset+0x6>

0001a6b0 <_stdout_hook_default>:
}
   1a6b0:	f04f 30ff 	mov.w	r0, #4294967295
   1a6b4:	4770      	bx	lr

0001a6b6 <set_starting_state>:
{
   1a6b6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a6b8:	f04f 0320 	mov.w	r3, #32
   1a6bc:	f3ef 8211 	mrs	r2, BASEPRI
   1a6c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a6c8:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a6ca:	f003 0407 	and.w	r4, r3, #7
   1a6ce:	2c01      	cmp	r4, #1
   1a6d0:	d106      	bne.n	1a6e0 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a6d2:	6001      	str	r1, [r0, #0]
	int err = 0;
   1a6d4:	2000      	movs	r0, #0
	__asm__ volatile(
   1a6d6:	f382 8811 	msr	BASEPRI, r2
   1a6da:	f3bf 8f6f 	isb	sy
}
   1a6de:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1a6e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1a6e4:	428b      	cmp	r3, r1
		err = -EALREADY;
   1a6e6:	bf14      	ite	ne
   1a6e8:	f04f 30ff 	movne.w	r0, #4294967295
   1a6ec:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1a6f0:	e7f1      	b.n	1a6d6 <set_starting_state+0x20>

0001a6f2 <set_on_state>:
	__asm__ volatile(
   1a6f2:	f04f 0320 	mov.w	r3, #32
   1a6f6:	f3ef 8211 	mrs	r2, BASEPRI
   1a6fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6fe:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1a702:	6803      	ldr	r3, [r0, #0]
   1a704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a708:	f043 0302 	orr.w	r3, r3, #2
   1a70c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1a70e:	f382 8811 	msr	BASEPRI, r2
   1a712:	f3bf 8f6f 	isb	sy
}
   1a716:	4770      	bx	lr

0001a718 <onoff_started_callback>:
	return &data->mgr[type];
   1a718:	6900      	ldr	r0, [r0, #16]
   1a71a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1a71c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1a720:	2100      	movs	r1, #0
   1a722:	4710      	bx	r2

0001a724 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a724:	2003      	movs	r0, #3
   1a726:	f7fa bcb3 	b.w	15090 <nrfx_clock_start>

0001a72a <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a72a:	2002      	movs	r0, #2
   1a72c:	f7fa bcb0 	b.w	15090 <nrfx_clock_start>

0001a730 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a730:	2000      	movs	r0, #0
   1a732:	f7fa bcad 	b.w	15090 <nrfx_clock_start>

0001a736 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a736:	2003      	movs	r0, #3
   1a738:	f7fa bd20 	b.w	1517c <nrfx_clock_stop>

0001a73c <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a73c:	2002      	movs	r0, #2
   1a73e:	f7fa bd1d 	b.w	1517c <nrfx_clock_stop>

0001a742 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a742:	2000      	movs	r0, #0
   1a744:	f7fa bd1a 	b.w	1517c <nrfx_clock_stop>

0001a748 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1a748:	2280      	movs	r2, #128	; 0x80
   1a74a:	f7f9 bd65 	b.w	14218 <stop>

0001a74e <blocking_start_callback>:
{
   1a74e:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1a750:	f7fb bac4 	b.w	15cdc <z_impl_k_sem_give>

0001a754 <api_start>:
{
   1a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   1a758:	240c      	movs	r4, #12
   1a75a:	b2c9      	uxtb	r1, r1
   1a75c:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1a75e:	6905      	ldr	r5, [r0, #16]
{
   1a760:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1a762:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1a766:	2180      	movs	r1, #128	; 0x80
   1a768:	4428      	add	r0, r5
{
   1a76a:	4690      	mov	r8, r2
   1a76c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1a76e:	f7ff ffa2 	bl	1a6b6 <set_starting_state>
	if (err < 0) {
   1a772:	2800      	cmp	r0, #0
   1a774:	db06      	blt.n	1a784 <api_start+0x30>
	subdata->cb = cb;
   1a776:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1a778:	e9c5 8720 	strd	r8, r7, [r5, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1a77c:	6873      	ldr	r3, [r6, #4]
   1a77e:	591b      	ldr	r3, [r3, r4]
   1a780:	4798      	blx	r3
	return 0;
   1a782:	2000      	movs	r0, #0
}
   1a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a788 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1a788:	6843      	ldr	r3, [r0, #4]
   1a78a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1a78c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1a790:	05d1      	lsls	r1, r2, #23
   1a792:	d518      	bpl.n	1a7c6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a794:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1a798:	b1aa      	cbz	r2, 1a7c6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1a79a:	f04f 0120 	mov.w	r1, #32
   1a79e:	f3ef 8211 	mrs	r2, BASEPRI
   1a7a2:	f381 8812 	msr	BASEPRI_MAX, r1
   1a7a6:	f3bf 8f6f 	isb	sy
   1a7aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1a7ae:	b131      	cbz	r1, 1a7be <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a7b0:	2100      	movs	r1, #0
   1a7b2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1a7b6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a7ba:	2101      	movs	r1, #1
   1a7bc:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1a7be:	f382 8811 	msr	BASEPRI, r2
   1a7c2:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a7c6:	6842      	ldr	r2, [r0, #4]
   1a7c8:	6852      	ldr	r2, [r2, #4]
   1a7ca:	06d2      	lsls	r2, r2, #27
   1a7cc:	d515      	bpl.n	1a7fa <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1a7ce:	f04f 0120 	mov.w	r1, #32
   1a7d2:	f3ef 8211 	mrs	r2, BASEPRI
   1a7d6:	f381 8812 	msr	BASEPRI_MAX, r1
   1a7da:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a7de:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1a7e2:	b111      	cbz	r1, 1a7ea <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a7e4:	2100      	movs	r1, #0
   1a7e6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1a7ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1a7ee:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1a7f2:	f382 8811 	msr	BASEPRI, r2
   1a7f6:	f3bf 8f6f 	isb	sy
}
   1a7fa:	4770      	bx	lr

0001a7fc <uarte_nrfx_config_get>:
{
   1a7fc:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1a7fe:	6902      	ldr	r2, [r0, #16]
   1a800:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1a804:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1a808:	2000      	movs	r0, #0
   1a80a:	4770      	bx	lr

0001a80c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1a80c:	6843      	ldr	r3, [r0, #4]
   1a80e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a810:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a814:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1a818:	4770      	bx	lr

0001a81a <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1a81a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1a81c:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a81e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a822:	b940      	cbnz	r0, 1a836 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1a824:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a826:	0712      	lsls	r2, r2, #28
   1a828:	d406      	bmi.n	1a838 <is_tx_ready+0x1e>
   1a82a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1a82e:	3800      	subs	r0, #0
   1a830:	bf18      	it	ne
   1a832:	2001      	movne	r0, #1
   1a834:	4770      	bx	lr
   1a836:	2001      	movs	r0, #1
}
   1a838:	4770      	bx	lr

0001a83a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1a83a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1a83c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1a83e:	681b      	ldr	r3, [r3, #0]
   1a840:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1a844:	b148      	cbz	r0, 1a85a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a846:	2000      	movs	r0, #0
	*c = data->rx_data;
   1a848:	7c52      	ldrb	r2, [r2, #17]
   1a84a:	700a      	strb	r2, [r1, #0]
   1a84c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1a850:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a854:	2201      	movs	r2, #1
   1a856:	601a      	str	r2, [r3, #0]
	return 0;
   1a858:	4770      	bx	lr
		return -1;
   1a85a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a85e:	4770      	bx	lr

0001a860 <nrf_gpio_cfg_input>:
{
   1a860:	b513      	push	{r0, r1, r4, lr}
   1a862:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a864:	a801      	add	r0, sp, #4
{
   1a866:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a868:	f7f9 ff9e 	bl	147a8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1a86c:	9b01      	ldr	r3, [sp, #4]
   1a86e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1a872:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1a876:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1a87a:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1a87e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1a882:	b002      	add	sp, #8
   1a884:	bd10      	pop	{r4, pc}

0001a886 <nrf_gpio_cfg_output>:
{
   1a886:	b507      	push	{r0, r1, r2, lr}
   1a888:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a88a:	a801      	add	r0, sp, #4
   1a88c:	f7f9 ff8c 	bl	147a8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1a890:	9b01      	ldr	r3, [sp, #4]
   1a892:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1a896:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1a89a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1a89e:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   1a8a2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1a8a6:	b003      	add	sp, #12
   1a8a8:	f85d fb04 	ldr.w	pc, [sp], #4

0001a8ac <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1a8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a8ae:	4606      	mov	r6, r0
   1a8b0:	2200      	movs	r2, #0
   1a8b2:	2101      	movs	r1, #1
   1a8b4:	2008      	movs	r0, #8
   1a8b6:	f7f8 fdd7 	bl	13468 <z_arm_irq_priority_set>
   1a8ba:	2008      	movs	r0, #8
   1a8bc:	f7f8 fdb6 	bl	1342c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a8c0:	2300      	movs	r3, #0
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1a8c2:	6875      	ldr	r5, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1a8c4:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
   1a8c6:	682c      	ldr	r4, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a8c8:	a801      	add	r0, sp, #4
   1a8ca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1a8ce:	68ab      	ldr	r3, [r5, #8]
   1a8d0:	603e      	str	r6, [r7, #0]
        nrf_gpio_pin_set(pin_number);
   1a8d2:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a8d4:	f7f9 ff68 	bl	147a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a8d8:	2301      	movs	r3, #1
   1a8da:	9a01      	ldr	r2, [sp, #4]
   1a8dc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1a8de:	6083      	str	r3, [r0, #8]
	nrf_gpio_cfg_output(cfg->pseltxd);
   1a8e0:	68a8      	ldr	r0, [r5, #8]
   1a8e2:	f7ff ffd0 	bl	1a886 <nrf_gpio_cfg_output>
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1a8e6:	68e8      	ldr	r0, [r5, #12]
   1a8e8:	1c42      	adds	r2, r0, #1
   1a8ea:	d002      	beq.n	1a8f2 <uarte_0_init+0x46>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   1a8ec:	7e29      	ldrb	r1, [r5, #24]
   1a8ee:	f7ff ffb7 	bl	1a860 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   1a8f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1a8f6:	6928      	ldr	r0, [r5, #16]
    p_reg->PSEL.TXD = pseltxd;
   1a8f8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1a8fc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
   1a900:	1c43      	adds	r3, r0, #1
   1a902:	d002      	beq.n	1a90a <uarte_0_init+0x5e>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   1a904:	7e69      	ldrb	r1, [r5, #25]
   1a906:	f7ff ffab 	bl	1a860 <nrf_gpio_cfg_input>
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1a90a:	696b      	ldr	r3, [r5, #20]
   1a90c:	1c59      	adds	r1, r3, #1
   1a90e:	d00a      	beq.n	1a926 <uarte_0_init+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a910:	a801      	add	r0, sp, #4
   1a912:	9301      	str	r3, [sp, #4]
   1a914:	f7f9 ff48 	bl	147a8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a918:	2301      	movs	r3, #1
   1a91a:	9a01      	ldr	r2, [sp, #4]
   1a91c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1a91e:	6083      	str	r3, [r0, #8]
		nrf_gpio_cfg_output(cfg->pselrts);
   1a920:	6968      	ldr	r0, [r5, #20]
   1a922:	f7ff ffb0 	bl	1a886 <nrf_gpio_cfg_output>
	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   1a926:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1a92a:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.RTS = pselrts;
   1a92c:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1a930:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   1a932:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1a936:	3104      	adds	r1, #4
   1a938:	f7f9 fe74 	bl	14624 <uarte_nrfx_configure>
	if (err) {
   1a93c:	bb38      	cbnz	r0, 1a98e <uarte_0_init+0xe2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a93e:	2308      	movs	r3, #8
   1a940:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1a944:	68eb      	ldr	r3, [r5, #12]
   1a946:	3301      	adds	r3, #1
   1a948:	d00b      	beq.n	1a962 <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a94a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   1a94e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1a952:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a956:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a95a:	2301      	movs	r3, #1
   1a95c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a960:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1a962:	686b      	ldr	r3, [r5, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1a964:	3710      	adds	r7, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1a966:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   1a968:	bf5c      	itt	pl
   1a96a:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1a96e:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a972:	06db      	lsls	r3, r3, #27
   1a974:	bf44      	itt	mi
   1a976:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1a97a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1a97e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a980:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a984:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a988:	2301      	movs	r3, #1
   1a98a:	60a3      	str	r3, [r4, #8]
   1a98c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1a98e:	b003      	add	sp, #12
   1a990:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a992 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1a992:	2200      	movs	r2, #0
{
   1a994:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1a996:	4611      	mov	r1, r2
   1a998:	4610      	mov	r0, r2
   1a99a:	f7fc febd 	bl	17718 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   1a99e:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   1a9a0:	bf18      	it	ne
   1a9a2:	f06f 0015 	mvnne.w	r0, #21
   1a9a6:	bd08      	pop	{r3, pc}

0001a9a8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1a9a8:	4770      	bx	lr

0001a9aa <sys_clock_disable>:
   1a9aa:	4770      	bx	lr

0001a9ac <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1a9ac:	f7fc be58 	b.w	17660 <nrf_cc3xx_platform_init>

0001a9b0 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1a9b0:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1a9b2:	f7f8 fc13 	bl	131dc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1a9b6:	f7f8 fcd7 	bl	13368 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1a9ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1a9be:	f7fc be4f 	b.w	17660 <nrf_cc3xx_platform_init>

0001a9c2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1a9c2:	4700      	bx	r0

0001a9c4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1a9c4:	f000 b861 	b.w	1aa8a <z_impl_k_busy_wait>

0001a9c8 <z_device_state_init>:
}
   1a9c8:	4770      	bx	lr

0001a9ca <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1a9ca:	b138      	cbz	r0, 1a9dc <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1a9cc:	68c3      	ldr	r3, [r0, #12]
   1a9ce:	8818      	ldrh	r0, [r3, #0]
   1a9d0:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1a9d4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1a9d8:	4258      	negs	r0, r3
   1a9da:	4158      	adcs	r0, r3
}
   1a9dc:	4770      	bx	lr

0001a9de <k_mem_slab_init>:
{
   1a9de:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1a9e0:	2400      	movs	r4, #0
   1a9e2:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1a9e4:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a9e6:	ea41 0402 	orr.w	r4, r1, r2
   1a9ea:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1a9ee:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   1a9f2:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a9f4:	d10c      	bne.n	1aa10 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   1a9f6:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a9f8:	42a3      	cmp	r3, r4
   1a9fa:	d103      	bne.n	1aa04 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   1a9fc:	e9c0 0000 	strd	r0, r0, [r0]
}
   1aa00:	2000      	movs	r0, #0
}
   1aa02:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1aa04:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1aa06:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1aa08:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1aa0a:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   1aa0c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1aa0e:	e7f3      	b.n	1a9f8 <k_mem_slab_init+0x1a>
		return -EINVAL;
   1aa10:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1aa14:	e7f5      	b.n	1aa02 <k_mem_slab_init+0x24>

0001aa16 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1aa16:	f3ef 8005 	mrs	r0, IPSR
}
   1aa1a:	3800      	subs	r0, #0
   1aa1c:	bf18      	it	ne
   1aa1e:	2001      	movne	r0, #1
   1aa20:	4770      	bx	lr

0001aa22 <k_thread_name_get>:
}
   1aa22:	2000      	movs	r0, #0
   1aa24:	4770      	bx	lr

0001aa26 <z_pm_save_idle_exit>:
{
   1aa26:	b508      	push	{r3, lr}
	pm_system_resume();
   1aa28:	f7f8 f976 	bl	12d18 <pm_system_resume>
}
   1aa2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1aa30:	f7ff bfba 	b.w	1a9a8 <sys_clock_idle_exit>

0001aa34 <z_impl_k_mutex_init>:
{
   1aa34:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1aa36:	2000      	movs	r0, #0
   1aa38:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1aa3c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1aa40:	4770      	bx	lr

0001aa42 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1aa42:	4603      	mov	r3, r0
   1aa44:	b920      	cbnz	r0, 1aa50 <z_reschedule_irqlock+0xe>
   1aa46:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1aa4a:	b90a      	cbnz	r2, 1aa50 <z_reschedule_irqlock+0xe>
   1aa4c:	f7f8 bd52 	b.w	134f4 <arch_swap>
   1aa50:	f383 8811 	msr	BASEPRI, r3
   1aa54:	f3bf 8f6f 	isb	sy
}
   1aa58:	4770      	bx	lr

0001aa5a <z_reschedule_unlocked>:
	__asm__ volatile(
   1aa5a:	f04f 0320 	mov.w	r3, #32
   1aa5e:	f3ef 8011 	mrs	r0, BASEPRI
   1aa62:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa66:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1aa6a:	f7ff bfea 	b.w	1aa42 <z_reschedule_irqlock>

0001aa6e <z_priq_dumb_best>:
{
   1aa6e:	4603      	mov	r3, r0
	return list->head == list;
   1aa70:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aa72:	4283      	cmp	r3, r0
   1aa74:	d003      	beq.n	1aa7e <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1aa76:	2800      	cmp	r0, #0
   1aa78:	bf38      	it	cc
   1aa7a:	2000      	movcc	r0, #0
   1aa7c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1aa7e:	2000      	movs	r0, #0
}
   1aa80:	4770      	bx	lr

0001aa82 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1aa82:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1aa84:	f7fc fbac 	bl	171e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1aa88:	bd08      	pop	{r3, pc}

0001aa8a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1aa8a:	b108      	cbz	r0, 1aa90 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1aa8c:	f7f8 b8d6 	b.w	12c3c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1aa90:	4770      	bx	lr

0001aa92 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1aa92:	4770      	bx	lr

0001aa94 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1aa94:	f7fa ba26 	b.w	14ee4 <SystemInit>

Disassembly of section .gnu.sgstubs:

0001e660 <reset-0x1920>:
	...

0001ff80 <reset>:
   1ff80:	e97f e97f 	sg
   1ff84:	f7f1 beea 	b.w	11d5c <__acle_se_reset>

0001ff88 <ikm_sk>:
   1ff88:	e97f e97f 	sg
   1ff8c:	f7f1 be8c 	b.w	11ca8 <__acle_se_ikm_sk>

0001ff90 <hash>:
   1ff90:	e97f e97f 	sg
   1ff94:	f7fa b9ba 	b.w	1a30c <__acle_se_hash>

0001ff98 <get_keystore_size>:
   1ff98:	e97f e97f 	sg
   1ff9c:	f7f1 bdf0 	b.w	11b80 <__acle_se_get_keystore_size>

0001ffa0 <sign_pk>:
   1ffa0:	e97f e97f 	sg
   1ffa4:	f7f1 beca 	b.w	11d3c <__acle_se_sign_pk>

0001ffa8 <pk_in_keystore>:
   1ffa8:	e97f e97f 	sg
   1ffac:	f7f1 be36 	b.w	11c1c <__acle_se_pk_in_keystore>

0001ffb0 <getkeys>:
   1ffb0:	e97f e97f 	sg
   1ffb4:	f7f1 be0e 	b.w	11bd4 <__acle_se_getkeys>

0001ffb8 <aes128ctr>:
   1ffb8:	e97f e97f 	sg
   1ffbc:	f7fa b9b3 	b.w	1a326 <__acle_se_aes128ctr>

0001ffc0 <import_sk>:
   1ffc0:	e97f e97f 	sg
   1ffc4:	f7f1 beea 	b.w	11d9c <__acle_se_import_sk>

0001ffc8 <spm_request_random_number_nse>:
   1ffc8:	e97f e97f 	sg
   1ffcc:	f7f3 b8e2 	b.w	13194 <__acle_se_spm_request_random_number_nse>

0001ffd0 <sk_to_pk>:
   1ffd0:	e97f e97f 	sg
   1ffd4:	f7f1 bea2 	b.w	11d1c <__acle_se_sk_to_pk>

0001ffd8 <store_pk>:
   1ffd8:	e97f e97f 	sg
   1ffdc:	f7f1 bddc 	b.w	11b98 <__acle_se_store_pk>
